
\echo
\echo *****  Creating view:  "DATE_TYPE_WK_VIEW"

CREATE or replace VIEW  "DATE_TYPE_WK_VIEW"
(
     WEEK_DT,
     DATE_TYPE_ID
) AS
(((((((((((SELECT "TIMESTAMP"(ALIAS12.WEEK_DT) AS WEEK_DT, ALIAS12.DATE_TYPE_ID FROM (SELECT DISTINCT CASE WHEN (DAYS.DAY_OF_WK_NBR = 7) THEN (SELECT ((DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1))) - 7)) WHEN (DAYS.DAY_OF_WK_NBR <> 7) THEN (SELECT (DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1)))) ELSE NULL::DATE END AS WEEK_DT, 3 AS DATE_TYPE_ID FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR")))) ALIAS12) UNION (SELECT WK.WEEK_DT, 4 AS DATE_TYPE_ID FROM ADMIN.WEEKS WK, (SELECT ALIAS123.DAY_DT, ALIAS123.FISCAL_WK, ALIAS123.FISCAL_MO, CASE WHEN (LENGTH(ALIAS123.LAST_PERIOD) = 6) THEN ALIAS123.LAST_PERIOD ELSE ((SUBSTR(ALIAS123.LAST_PERIOD, 1, 4) || '0'::"VARCHAR") || SUBSTR(ALIAS123.LAST_PERIOD, 5, 1)) END AS LAST_PERIOD, ALIAS123.FISCAL_QTR, CASE WHEN (LENGTH(ALIAS123.LAST_FISCAL_QTR) = 6) THEN ALIAS123.LAST_FISCAL_QTR ELSE ((SUBSTR(ALIAS123.LAST_FISCAL_QTR, 1, 4) || '0'::"VARCHAR") || SUBSTR(ALIAS123.LAST_FISCAL_QTR, 5, 1)) END AS LAST_FISCAL_QTR, ALIAS123.FISCAL_YR FROM (SELECT "NUMERIC"(("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(DAYS.FISCAL_DAY_OF_YR_NBR)), 2490386) AS FISCAL_DAY, DAYS.DAY_DT, DAYS.FISCAL_MO, DAYS.FISCAL_QTR, DAYS.FISCAL_YR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '4'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_FISCAL_QTR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '12'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_PERIOD, DAYS.FISCAL_WK FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((SELECT CASE WHEN (DAYS.DAY_OF_WK_NBR = 7) THEN (SELECT ((DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1))) - 7)) ELSE (SELECT (DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1)))) END AS DAY_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR"))))))) ALIAS123) DATES WHERE ((WK.FISCAL_MO = DATES.FISCAL_MO) AND (WK.WEEK_DT <= DATES.DAY_DT)))) UNION (SELECT WK.WEEK_DT, 5 AS DATE_TYPE_ID FROM ADMIN.WEEKS WK, (SELECT ADVENTNET_ALIAS1.DAY_DT, ADVENTNET_ALIAS1.FISCAL_WK, ADVENTNET_ALIAS1.FISCAL_MO, CASE WHEN (LENGTH(ADVENTNET_ALIAS1.LAST_PERIOD) = 6) THEN ADVENTNET_ALIAS1.LAST_PERIOD ELSE ((SUBSTR(ADVENTNET_ALIAS1.LAST_PERIOD, 1, 4) || '0'::"VARCHAR") || SUBSTR(ADVENTNET_ALIAS1.LAST_PERIOD, 5, 1)) END AS LAST_PERIOD, ADVENTNET_ALIAS1.FISCAL_QTR, CASE WHEN (LENGTH(ADVENTNET_ALIAS1.LAST_FISCAL_QTR) = 6) THEN ADVENTNET_ALIAS1.LAST_FISCAL_QTR ELSE ((SUBSTR(ADVENTNET_ALIAS1.LAST_FISCAL_QTR, 1, 4) || '0'::"VARCHAR") || SUBSTR(ADVENTNET_ALIAS1.LAST_FISCAL_QTR, 5, 1)) END AS LAST_FISCAL_QTR, ADVENTNET_ALIAS1.FISCAL_YR FROM (SELECT "NUMERIC"(("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(DAYS.FISCAL_DAY_OF_YR_NBR)), 2490386) AS FISCAL_DAY, DAYS.DAY_DT, DAYS.FISCAL_MO, DAYS.FISCAL_QTR, DAYS.FISCAL_YR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '4'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_FISCAL_QTR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '12'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_PERIOD, DAYS.FISCAL_WK FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((SELECT CASE WHEN (DAYS.DAY_OF_WK_NBR = 7) THEN (SELECT ((DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1))) - 7)) ELSE (SELECT (DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1)))) END AS DAY_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR"))))))) ADVENTNET_ALIAS1) DATES WHERE ((WK.FISCAL_MO = INT4(DATES.LAST_PERIOD)) AND (WK.WEEK_DT <= DATES.DAY_DT)))) UNION (SELECT WK.WEEK_DT, 6 AS DATE_TYPE_ID FROM ADMIN.WEEKS WK, (SELECT ADVENTNET_ALIAS12.DAY_DT, ADVENTNET_ALIAS12.FISCAL_WK, ADVENTNET_ALIAS12.FISCAL_MO, CASE WHEN (LENGTH(ADVENTNET_ALIAS12.LAST_PERIOD) = 6) THEN ADVENTNET_ALIAS12.LAST_PERIOD ELSE ((SUBSTR(ADVENTNET_ALIAS12.LAST_PERIOD, 1, 4) || '0'::"VARCHAR") || SUBSTR(ADVENTNET_ALIAS12.LAST_PERIOD, 5, 1)) END AS LAST_PERIOD, ADVENTNET_ALIAS12.FISCAL_QTR, CASE WHEN (LENGTH(ADVENTNET_ALIAS12.LAST_FISCAL_QTR) = 6) THEN ADVENTNET_ALIAS12.LAST_FISCAL_QTR ELSE ((SUBSTR(ADVENTNET_ALIAS12.LAST_FISCAL_QTR, 1, 4) || '0'::"VARCHAR") || SUBSTR(ADVENTNET_ALIAS12.LAST_FISCAL_QTR, 5, 1)) END AS LAST_FISCAL_QTR, ADVENTNET_ALIAS12.FISCAL_YR FROM (SELECT "NUMERIC"(("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(DAYS.FISCAL_DAY_OF_YR_NBR)), 2490386) AS FISCAL_DAY, DAYS.DAY_DT, DAYS.FISCAL_MO, DAYS.FISCAL_QTR, DAYS.FISCAL_YR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '4'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_FISCAL_QTR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '12'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_PERIOD, DAYS.FISCAL_WK FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((SELECT CASE WHEN (DAYS.DAY_OF_WK_NBR = 7) THEN (SELECT ((DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1))) - 7)) ELSE (SELECT (DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1)))) END AS DAY_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR"))))))) ADVENTNET_ALIAS12) DATES WHERE ((WK.FISCAL_QTR = DATES.FISCAL_QTR) AND (WK.WEEK_DT <= DATES.DAY_DT)))) UNION (SELECT WK.WEEK_DT, 7 AS DATE_TYPE_ID FROM ADMIN.WEEKS WK, (SELECT ALIAS1234.DAY_DT, ALIAS1234.FISCAL_WK, ALIAS1234.FISCAL_MO, CASE WHEN (LENGTH(ALIAS1234.LAST_PERIOD) = 6) THEN ALIAS1234.LAST_PERIOD ELSE ((SUBSTR(ALIAS1234.LAST_PERIOD, 1, 4) || '0'::"VARCHAR") || SUBSTR(ALIAS1234.LAST_PERIOD, 5, 1)) END AS LAST_PERIOD, ALIAS1234.FISCAL_QTR, CASE WHEN (LENGTH(ALIAS1234.LAST_FISCAL_QTR) = 6) THEN ALIAS1234.LAST_FISCAL_QTR ELSE ((SUBSTR(ALIAS1234.LAST_FISCAL_QTR, 1, 4) || '0'::"VARCHAR") || SUBSTR(ALIAS1234.LAST_FISCAL_QTR, 5, 1)) END AS LAST_FISCAL_QTR, ALIAS1234.FISCAL_YR FROM (SELECT "NUMERIC"(("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(DAYS.FISCAL_DAY_OF_YR_NBR)), 2490386) AS FISCAL_DAY, DAYS.DAY_DT, DAYS.FISCAL_MO, DAYS.FISCAL_QTR, DAYS.FISCAL_YR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '4'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_FISCAL_QTR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '12'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_PERIOD, DAYS.FISCAL_WK FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((SELECT CASE WHEN (DAYS.DAY_OF_WK_NBR = 7) THEN (SELECT ((DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1))) - 7)) ELSE (SELECT (DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1)))) END AS DAY_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR"))))))) ALIAS1234) DATES WHERE ((WK.FISCAL_QTR = INT4(DATES.LAST_FISCAL_QTR)) AND (WK.WEEK_DT <= DATES.DAY_DT)))) UNION (SELECT WK.WEEK_DT, 8 AS DATE_TYPE_ID FROM ADMIN.WEEKS WK, (SELECT ADVENTNET_ALIAS1234.DAY_DT, ADVENTNET_ALIAS1234.FISCAL_WK, ADVENTNET_ALIAS1234.FISCAL_MO, CASE WHEN (LENGTH(ADVENTNET_ALIAS1234.LAST_PERIOD) = 6) THEN ADVENTNET_ALIAS1234.LAST_PERIOD ELSE ((SUBSTR(ADVENTNET_ALIAS1234.LAST_PERIOD, 1, 4) || '0'::"VARCHAR") || SUBSTR(ADVENTNET_ALIAS1234.LAST_PERIOD, 5, 1)) END AS LAST_PERIOD, ADVENTNET_ALIAS1234.FISCAL_QTR, CASE WHEN (LENGTH(ADVENTNET_ALIAS1234.LAST_FISCAL_QTR) = 6) THEN ADVENTNET_ALIAS1234.LAST_FISCAL_QTR ELSE ((SUBSTR(ADVENTNET_ALIAS1234.LAST_FISCAL_QTR, 1, 4) || '0'::"VARCHAR") || SUBSTR(ADVENTNET_ALIAS1234.LAST_FISCAL_QTR, 5, 1)) END AS LAST_FISCAL_QTR, ADVENTNET_ALIAS1234.FISCAL_YR FROM (SELECT "NUMERIC"(("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(DAYS.FISCAL_DAY_OF_YR_NBR)), 2490386) AS FISCAL_DAY, DAYS.DAY_DT, DAYS.FISCAL_MO, DAYS.FISCAL_QTR, DAYS.FISCAL_YR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '4'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_QTR), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_FISCAL_QTR, CASE WHEN (SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2) = '01'::"VARCHAR") THEN ("VARCHAR"(("NUMERIC"(DAYS.FISCAL_YR) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) || '12'::"VARCHAR") ELSE ("VARCHAR"(DAYS.FISCAL_YR) || "VARCHAR"(("NUMERIC"(SUBSTR("VARCHAR"(DAYS.FISCAL_MO), 5, 2), 2490386) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)))) END AS LAST_PERIOD, DAYS.FISCAL_WK FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((SELECT CASE WHEN (DAYS.DAY_OF_WK_NBR = 7) THEN (SELECT ((DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1))) - 7)) ELSE (SELECT (DATE('now'::"VARCHAR") - INT4((DATE_PART('dow'::"VARCHAR", DATE('now'::"VARCHAR")) - 1)))) END AS DAY_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR"))))))) ADVENTNET_ALIAS1234) DATES WHERE ((WK.FISCAL_YR = DATES.FISCAL_YR) AND (WK.WEEK_DT <= DATES.DAY_DT)))) UNION (SELECT ALIAS12345.WEEK_DT, ALIAS12345.DATE_TYPE_ID FROM (SELECT DISTINCT WEEKS.WEEK_DT, 9 AS DATE_TYPE_ID FROM ADMIN.WEEKS WHERE ((WEEKS.WEEK_DT >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 28))) AND (WEEKS.WEEK_DT < "TIMESTAMP"(DATE('now'::"VARCHAR"))))) ALIAS12345)) UNION (SELECT ALIAS123456.WEEK_DT, ALIAS123456.DATE_TYPE_ID FROM (SELECT DISTINCT WEEKS.WEEK_DT, 10 AS DATE_TYPE_ID FROM ADMIN.WEEKS WHERE ((WEEKS.WEEK_DT >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 56))) AND (WEEKS.WEEK_DT < "TIMESTAMP"(DATE('now'::"VARCHAR"))))) ALIAS123456)) UNION (SELECT ALIAS1234567.WEEK_DT, ALIAS1234567.DATE_TYPE_ID FROM (SELECT DISTINCT WEEKS.WEEK_DT, 11 AS DATE_TYPE_ID FROM ADMIN.WEEKS WHERE ((WEEKS.WEEK_DT >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 91))) AND (WEEKS.WEEK_DT < "TIMESTAMP"(DATE('now'::"VARCHAR"))))) ALIAS1234567)) UNION (SELECT WEEKS.WEEK_DT, 12 AS DATE_TYPE_ID FROM ADMIN.WEEKS WHERE ((WEEKS.FISCAL_YR = (SELECT DISTINCT (DAYS.FISCAL_YR - 1) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(((DATE('now'::"VARCHAR") - 1) - INT4((DATE_PART('dow'::"VARCHAR", (DATE('now'::"VARCHAR") - 1)) - 1))))))) AND (WEEKS.FISCAL_WK_NBR <= (SELECT WEEKS.FISCAL_WK_NBR FROM ADMIN.WEEKS WHERE (WEEKS.WEEK_DT = "TIMESTAMP"(((DATE('now'::"VARCHAR") - 1) - INT4((DATE_PART('dow'::"VARCHAR", (DATE('now'::"VARCHAR") - 1)) - 1)))))))))) UNION (SELECT WEEKS.WEEK_DT, 13 AS DATE_TYPE_ID FROM ADMIN.WEEKS WHERE (WEEKS.FISCAL_YR = (SELECT DISTINCT (DAYS.FISCAL_YR - 1) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(((DATE('now'::"VARCHAR") - 1) - INT4((DATE_PART('dow'::"VARCHAR", (DATE('now'::"VARCHAR") - 1)) - 1))))))))) UNION (SELECT ALIASXX1.WEEK_DT, ALIASXX1.DATE_TYPE_ID FROM ((SELECT DISTINCT WEEKS.WEEK_DT, 14 AS DATE_TYPE_ID FROM ADMIN.WEEKS WHERE ((WEEKS.WEEK_DT >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 112))) AND (WEEKS.WEEK_DT < "TIMESTAMP"(DATE('now'::"VARCHAR"))))) UNION (SELECT WK.WEEK_DT, 15 AS DATE_TYPE_ID FROM ADMIN.WEEKS WK, (SELECT W.WEEK_DT, W.FISCAL_WK, W.FISCAL_QTR_NBR, W.FISCAL_WK_NBR, (W.FISCAL_YR - 1) AS LYR_FISCAL_YR FROM ADMIN.WEEKS W WHERE (W.WEEK_DT = "TIMESTAMP"(((DATE('now'::"VARCHAR") - 1) - INT4((DATE_PART('dow'::"VARCHAR", (DATE('now'::"VARCHAR") - 1)) - 1)))))) CW WHERE (((WK.FISCAL_YR = CW.LYR_FISCAL_YR) AND (WK.FISCAL_QTR_NBR = CW.FISCAL_QTR_NBR)) AND (WK.FISCAL_WK_NBR <= CW.FISCAL_WK_NBR)))) ALIASXX1);

\echo
\echo *****  Creating view:  "APPROVAL_SOURCE_VIEW"

CREATE or replace VIEW  "APPROVAL_SOURCE_VIEW"
(
     APPROVAL_SOURCE
) AS
SELECT SUBSTR(REF_LOOKUP.REF_TXT_ID, 1, 1) AS APPROVAL_SOURCE FROM ADMIN.REF_LOOKUP WHERE (REF_LOOKUP.REF_ID = 4);

\echo
\echo *****  Creating view:  "CANADIAN_EXCHANGE_VIEW"

CREATE or replace VIEW  "CANADIAN_EXCHANGE_VIEW"
(
     DAY_DT,
     EXCHANGE_RATE_PCNT
) AS
SELECT D.DAY_DT, C.EXCHANGE_RATE_PCNT FROM ADMIN.CURRENCY C, ADMIN.DAYS D WHERE (((((D.DAY_DT >= C.DATE_RATE_START) AND (D.DAY_DT <= C.DATE_RATE_ENDED)) AND (D.DAY_DT >= "TIMESTAMP"(TO_DATE('02-01-1999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (D.DAY_DT <= "TIMESTAMP"(DATE('now'::"VARCHAR")))) AND (C.CURRENCY_ID = 'CAD'::BPCHAR));

\echo
\echo *****  Creating view:  "CANADIAN_EXCHANGE_WKLY_VIEW"

CREATE or replace VIEW  "CANADIAN_EXCHANGE_WKLY_VIEW"
(
     WEEK_DT,
     EXCHANGE_RATE_PCNT
) AS
SELECT W.WEEK_DT, C.EXCHANGE_RATE_PCNT FROM ADMIN.CURRENCY C, ADMIN.WEEKS W WHERE (((((W.WEEK_DT >= C.DATE_RATE_START) AND (W.WEEK_DT <= C.DATE_RATE_ENDED)) AND (W.WEEK_DT >= "TIMESTAMP"(TO_DATE('02-01-1999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (W.WEEK_DT <= "TIMESTAMP"(DATE('now'::"VARCHAR")))) AND (C.CURRENCY_ID = 'CAD'::BPCHAR));

\echo
\echo *****  Creating view:  "COMP_LOCATION_VIEW"

CREATE or replace VIEW  "COMP_LOCATION_VIEW"
(
     COMP_LOCATION_ID,
     COMP_LOC_COMPANY_DESC,
     COMP_LOC_COMPANY_ID,
     COMP_LOC_DATE_CLOSED,
     COMP_LOC_DATE_OPEN,
     COMP_LOC_DATE_LOC_ADDED,
     COMP_LOC_DATE_LOC_DELETED,
     COMP_LOC_DATE_LOC_REFRESHED,
     COMP_LOC_DISTRICT_DESC,
     COMP_LOC_DISTRICT_ID,
     COMP_LOC_PRICE_AD_ZONE_DESC,
     COMP_LOC_PRICE_AD_ZONE_ID,
     COMP_LOC_PRICE_ZONE_DESC,
     COMP_LOC_PRICE_ZONE_ID,
     COMP_LOC_REGION_DESC,
     COMP_LOC_REGION_ID,
     COMP_LOC_REPL_DC_NBR,
     COMP_LOC_REPL_FISH_DC_NBR,
     COMP_LOC_REPL_FWD_DC_NBR,
     COMP_LOC_STORE_CTRY_ABBR,
     COMP_LOC_STORE_CTRY,
     COMP_LOC_STORE_NAME,
     COMP_LOC_STORE_NBR,
     COMP_LOC_STORE_OPEN_CLOSE_FLAG,
     COMP_LOC_STORE_STATE_ABBR,
     COMP_LOC_STORE_TYPE_DESC,
     COMP_LOC_STORE_TYPE_ID,
     COMP_LOC_EQUINE_MERCH,
     COMP_LOC_DATE_GR_OPEN,
     COMP_LOC_SQ_FEET_RETAIL,
     COMP_LOC_SQ_FEET_TOTAL
) AS
SELECT "LOCATION".LOCATION_ID AS COMP_LOCATION_ID, "LOCATION".COMPANY_DESC AS COMP_LOC_COMPANY_DESC, "LOCATION".COMPANY_ID AS COMP_LOC_COMPANY_ID, "LOCATION".DATE_CLOSED AS COMP_LOC_DATE_CLOSED, "LOCATION".DATE_OPEN AS COMP_LOC_DATE_OPEN, "LOCATION".DATE_LOC_ADDED AS COMP_LOC_DATE_LOC_ADDED, "LOCATION".DATE_LOC_DELETED AS COMP_LOC_DATE_LOC_DELETED, "LOCATION".DATE_LOC_REFRESHED AS COMP_LOC_DATE_LOC_REFRESHED, "LOCATION".DISTRICT_DESC AS COMP_LOC_DISTRICT_DESC, "LOCATION".DISTRICT_ID AS COMP_LOC_DISTRICT_ID, "LOCATION".PRICE_AD_ZONE_DESC AS COMP_LOC_PRICE_AD_ZONE_DESC, "LOCATION".PRICE_AD_ZONE_ID AS COMP_LOC_PRICE_AD_ZONE_ID, "LOCATION".PRICE_ZONE_DESC AS COMP_LOC_PRICE_ZONE_DESC, "LOCATION".PRICE_ZONE_ID AS COMP_LOC_PRICE_ZONE_ID, "LOCATION".REGION_DESC AS COMP_LOC_REGION_DESC, "LOCATION".REGION_ID AS COMP_LOC_REGION_ID, "LOCATION".REPL_DC_NBR AS COMP_LOC_REPL_DC_NBR, "LOCATION".REPL_FISH_DC_NBR AS COMP_LOC_REPL_FISH_DC_NBR, "LOCATION".REPL_FWD_DC_NBR AS COMP_LOC_REPL_FWD_DC_NBR, "LOCATION".STORE_CTRY_ABBR AS COMP_LOC_STORE_CTRY_ABBR, "LOCATION".STORE_CTRY AS COMP_LOC_STORE_CTRY, "LOCATION".STORE_NAME AS COMP_LOC_STORE_NAME, "LOCATION".STORE_NBR AS COMP_LOC_STORE_NBR, "LOCATION".STORE_OPEN_CLOSE_FLAG AS COMP_LOC_STORE_OPEN_CLOSE_FLAG, "LOCATION".STORE_STATE_ABBR AS COMP_LOC_STORE_STATE_ABBR, "LOCATION".STORE_TYPE_DESC AS COMP_LOC_STORE_TYPE_DESC, "LOCATION".STORE_TYPE_ID AS COMP_LOC_STORE_TYPE_ID, "LOCATION".EQUINE_MERCH AS COMP_LOC_EQUINE_MERCH, "LOCATION".DATE_GR_OPEN AS COMP_LOC_DATE_GR_OPEN, "LOCATION".SQ_FEET_RETAIL AS COMP_LOC_SQ_FEET_RETAIL, "LOCATION".SQ_FEET_TOTAL AS COMP_LOC_SQ_FEET_TOTAL FROM ADMIN."LOCATION";

\echo
\echo *****  Creating view:  "CURRENCY_DAY_VIEW"

CREATE or replace VIEW  "CURRENCY_DAY_VIEW"
(
     DAY_DT,
     CURRENCY_ID,
     DATE_RATE_START,
     CURRENCY_TYPE,
     DATE_RATE_ENDED,
     EXCHANGE_RATE_PCNT,
     RATIO_TO,
     RATIO_FROM,
     STORE_CTRY_ABBR,
     CURRENCY_NBR
) AS
SELECT DAYS.DAY_DT, C.CURRENCY_ID, C.DATE_RATE_START, C.CURRENCY_TYPE, C.DATE_RATE_ENDED, C.EXCHANGE_RATE_PCNT, C.RATIO_TO, C.RATIO_FROM, C.STORE_CTRY_ABBR, C.CURRENCY_NBR FROM ADMIN.CURRENCY C, ADMIN.DAYS WHERE ((((DAYS.DAY_DT >= C.DATE_RATE_START) AND (DAYS.DAY_DT <= C.DATE_RATE_ENDED)) AND (DAYS.DAY_DT < ("TIMESTAMP"('now'::"VARCHAR") + '14 days'::"INTERVAL"))) AND (C.CURRENCY_ID = 'CAD'::BPCHAR));

\echo
\echo *****  Creating view:  "CYR_LYR_WEEKS_VIEW"

CREATE or replace VIEW  "CYR_LYR_WEEKS_VIEW"
(
     LYR_WEEK_DT,
     WEEK_DT,
     CYR_CAL_HALF,
     CYR_CAL_MO,
     CYR_CAL_MO_NAME,
     CYR_CAL_MO_NAME_ABBR,
     CYR_CAL_MO_NBR,
     CYR_CAL_QTR,
     CYR_CAL_QTR_NBR,
     CYR_CAL_WK,
     CYR_CAL_YR,
     CYR_FISCAL_HALF,
     CYR_FISCAL_MO_NAME,
     CYR_FISCAL_MO_NAME_ABBR,
     CYR_FISCAL_MO_NBR,
     CYR_FISCAL_QTR,
     CYR_FISCAL_QTR_NBR,
     CYR_FISCAL_WK,
     CYR_FISCAL_WK_NBR,
     CYR_FISCAL_YR,
     CYR_LWK_WEEK_DT,
     CYR_FISCAL_MO
) AS
SELECT LYR.WEEK_DT AS LYR_WEEK_DT, CYR.WEEK_DT, CYR.CAL_HALF AS CYR_CAL_HALF, CYR.CAL_MO AS CYR_CAL_MO, CYR.CAL_MO_NAME AS CYR_CAL_MO_NAME, CYR.CAL_MO_NAME_ABBR AS CYR_CAL_MO_NAME_ABBR, CYR.CAL_MO_NBR AS CYR_CAL_MO_NBR, CYR.CAL_QTR AS CYR_CAL_QTR, CYR.CAL_QTR_NBR AS CYR_CAL_QTR_NBR, CYR.CAL_WK AS CYR_CAL_WK, CYR.CAL_YR AS CYR_CAL_YR, CYR.FISCAL_HALF AS CYR_FISCAL_HALF, CYR.FISCAL_MO_NAME AS CYR_FISCAL_MO_NAME, CYR.FISCAL_MO_NAME_ABBR AS CYR_FISCAL_MO_NAME_ABBR, CYR.FISCAL_MO_NBR AS CYR_FISCAL_MO_NBR, CYR.FISCAL_QTR AS CYR_FISCAL_QTR, CYR.FISCAL_QTR_NBR AS CYR_FISCAL_QTR_NBR, CYR.FISCAL_WK AS CYR_FISCAL_WK, SUBSTR("VARCHAR"(CYR.FISCAL_WK), 7) AS CYR_FISCAL_WK_NBR, CYR.FISCAL_YR AS CYR_FISCAL_YR, CYR.LWK_WEEK_DT AS CYR_LWK_WEEK_DT, CYR.FISCAL_MO AS CYR_FISCAL_MO FROM ADMIN.WEEKS LYR, ADMIN.WEEKS CYR WHERE (CYR.LYR_WEEK_DT = LYR.WEEK_DT);

\echo
\echo *****  Creating view:  "DATE_TYPE_MTH_VIEW"

CREATE or replace VIEW  "DATE_TYPE_MTH_VIEW"
(
     FISCAL_MO,
     DATE_TYPE_ID
) AS
SELECT DISTINCT W.FISCAL_MO, DT.DATE_TYPE_ID FROM ADMIN.DATE_TYPE_WEEK DT, ADMIN.WEEKS W WHERE (DT.WEEK_DT = W.WEEK_DT);

\echo
\echo *****  Creating view:  "EMPLOYEE_NAME_VIEW"

CREATE or replace VIEW  EMPLOYEE_NAME_VIEW
(
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_LAST_NAME
) AS
((SELECT INT8(EMPLOYEE_PROFILE.EMPLOYEE_ID) AS EMPLOYEE_ID, EMPLOYEE_PROFILE.EMPL_FIRST_NAME, EMPLOYEE_PROFILE.EMPL_LAST_NAME FROM ADMIN.EMPLOYEE_PROFILE WHERE (EMPLOYEE_PROFILE.EMPLOYEE_ID <> ALL (SELECT LP_EMPL_UNKNOWN.EMPLOYEE_ID FROM ADMIN.LP_EMPL_UNKNOWN))) UNION (SELECT INT8(LP_EMPL_UNKNOWN.EMPLOYEE_ID) AS EMPLOYEE_ID, LP_EMPL_UNKNOWN.EMPL_FIRST_NAME, LP_EMPL_UNKNOWN.EMPL_LAST_NAME FROM ADMIN.LP_EMPL_UNKNOWN WHERE (LP_EMPL_UNKNOWN.EMPLOYEE_ID <> ALL (SELECT EMPLOYEE_PROFILE.EMPLOYEE_ID FROM ADMIN.EMPLOYEE_PROFILE)))) UNION (SELECT INT8(EP.EMPLOYEE_ID) AS EMPLOYEE_ID, EP.EMPL_FIRST_NAME, EP.EMPL_LAST_NAME FROM ADMIN.EMPLOYEE_PROFILE EP, ADMIN.LP_EMPL_UNKNOWN LEU WHERE (EP.EMPLOYEE_ID = LEU.EMPLOYEE_ID));

\echo
\echo *****  Creating view:  "LOCATION_AREA_DENORM_VIEW"

CREATE or replace VIEW  "LOCATION_AREA_DENORM_VIEW"
(
     LOCATION_ID,
     AREA_1_SQ_FT_AMT,
     AREA_2_SQ_FT_AMT,
     AREA_3_SQ_FT_AMT,
     AREA_4_SQ_FT_AMT,
     AREA_5_SQ_FT_AMT,
     AREA_6_SQ_FT_AMT,
     AREA_7_SQ_FT_AMT,
     AREA_8_SQ_FT_AMT,
     AREA_9_SQ_FT_AMT,
     AREA_10_SQ_FT_AMT,
     AREA_11_SQ_FT_AMT,
     AREA_12_SQ_FT_AMT,
     AREA_13_SQ_FT_AMT,
     AREA_14_SQ_FT_AMT,
     AREA_15_SQ_FT_AMT,
     AREA_16_SQ_FT_AMT,
     AREA_17_SQ_FT_AMT,
     AREA_18_SQ_FT_AMT,
     AREA_19_SQ_FT_AMT,
     AREA_20_SQ_FT_AMT,
     AREA_21_SQ_FT_AMT,
     AREA_22_SQ_FT_AMT,
     AREA_23_SQ_FT_AMT,
     AREA_24_SQ_FT_AMT,
     AREA_25_SQ_FT_AMT,
     AREA_26_SQ_FT_AMT,
     AREA_27_SQ_FT_AMT,
     AREA_28_SQ_FT_AMT,
     AREA_29_SQ_FT_AMT,
     AREA_30_SQ_FT_AMT,
     AREA_31_SQ_FT_AMT,
     AREA_32_SQ_FT_AMT,
     AREA_33_SQ_FT_AMT,
     AREA_34_SQ_FT_AMT,
     AREA_35_SQ_FT_AMT
) AS
SELECT LA1.LOCATION_ID, LA1.SQ_FT_AMT AS AREA_1_SQ_FT_AMT, LA2.SQ_FT_AMT AS AREA_2_SQ_FT_AMT, LA3.SQ_FT_AMT AS AREA_3_SQ_FT_AMT, LA4.SQ_FT_AMT AS AREA_4_SQ_FT_AMT, LA5.SQ_FT_AMT AS AREA_5_SQ_FT_AMT, LA6.SQ_FT_AMT AS AREA_6_SQ_FT_AMT, LA7.SQ_FT_AMT AS AREA_7_SQ_FT_AMT, LA8.SQ_FT_AMT AS AREA_8_SQ_FT_AMT, LA9.SQ_FT_AMT AS AREA_9_SQ_FT_AMT, LA10.SQ_FT_AMT AS AREA_10_SQ_FT_AMT, LA11.SQ_FT_AMT AS AREA_11_SQ_FT_AMT, LA12.SQ_FT_AMT AS AREA_12_SQ_FT_AMT, LA13.SQ_FT_AMT AS AREA_13_SQ_FT_AMT, LA14.SQ_FT_AMT AS AREA_14_SQ_FT_AMT, LA15.SQ_FT_AMT AS AREA_15_SQ_FT_AMT, LA16.SQ_FT_AMT AS AREA_16_SQ_FT_AMT, LA17.SQ_FT_AMT AS AREA_17_SQ_FT_AMT, LA18.SQ_FT_AMT AS AREA_18_SQ_FT_AMT, LA19.SQ_FT_AMT AS AREA_19_SQ_FT_AMT, LA20.SQ_FT_AMT AS AREA_20_SQ_FT_AMT, LA21.SQ_FT_AMT AS AREA_21_SQ_FT_AMT, LA22.SQ_FT_AMT AS AREA_22_SQ_FT_AMT, LA23.SQ_FT_AMT AS AREA_23_SQ_FT_AMT, LA24.SQ_FT_AMT AS AREA_24_SQ_FT_AMT, LA25.SQ_FT_AMT AS AREA_25_SQ_FT_AMT, LA26.SQ_FT_AMT AS AREA_26_SQ_FT_AMT, LA27.SQ_FT_AMT AS AREA_27_SQ_FT_AMT, LA28.SQ_FT_AMT AS AREA_28_SQ_FT_AMT, LA29.SQ_FT_AMT AS AREA_29_SQ_FT_AMT, LA30.SQ_FT_AMT AS AREA_30_SQ_FT_AMT, LA31.SQ_FT_AMT AS AREA_31_SQ_FT_AMT, LA32.SQ_FT_AMT AS AREA_32_SQ_FT_AMT, LA33.SQ_FT_AMT AS AREA_33_SQ_FT_AMT, LA34.SQ_FT_AMT AS AREA_34_SQ_FT_AMT, LA35.SQ_FT_AMT AS AREA_35_SQ_FT_AMT FROM ADMIN.LOCATION_AREA LA1, ADMIN.LOCATION_AREA LA2, ADMIN.LOCATION_AREA LA3, ADMIN.LOCATION_AREA LA4, ADMIN.LOCATION_AREA LA5, ADMIN.LOCATION_AREA LA6, ADMIN.LOCATION_AREA LA7, ADMIN.LOCATION_AREA LA8, ADMIN.LOCATION_AREA LA9, ADMIN.LOCATION_AREA LA10, ADMIN.LOCATION_AREA LA11, ADMIN.LOCATION_AREA LA12, ADMIN.LOCATION_AREA LA13, ADMIN.LOCATION_AREA LA14, ADMIN.LOCATION_AREA LA15, ADMIN.LOCATION_AREA LA16, ADMIN.LOCATION_AREA LA17, ADMIN.LOCATION_AREA LA18, ADMIN.LOCATION_AREA LA19, ADMIN.LOCATION_AREA LA20, ADMIN.LOCATION_AREA LA21, ADMIN.LOCATION_AREA LA22, ADMIN.LOCATION_AREA LA23, ADMIN.LOCATION_AREA LA24, ADMIN.LOCATION_AREA LA25, ADMIN.LOCATION_AREA LA26, ADMIN.LOCATION_AREA LA27, ADMIN.LOCATION_AREA LA28, ADMIN.LOCATION_AREA LA29, ADMIN.LOCATION_AREA LA30, ADMIN.LOCATION_AREA LA31, ADMIN.LOCATION_AREA LA32, ADMIN.LOCATION_AREA LA33, ADMIN.LOCATION_AREA LA34, ADMIN.LOCATION_AREA LA35 WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((LA1.LOCATION_ID = LA2.LOCATION_ID) AND (LA1.LOCATION_ID = LA3.LOCATION_ID)) AND (LA1.LOCATION_ID = LA4.LOCATION_ID)) AND (LA1.LOCATION_ID = LA5.LOCATION_ID)) AND (LA1.LOCATION_ID = LA6.LOCATION_ID)) AND (LA1.LOCATION_ID = LA7.LOCATION_ID)) AND (LA1.LOCATION_ID = LA8.LOCATION_ID)) AND (LA1.LOCATION_ID = LA9.LOCATION_ID)) AND (LA1.LOCATION_ID = LA10.LOCATION_ID)) AND (LA1.LOCATION_ID = LA11.LOCATION_ID)) AND (LA1.LOCATION_ID = LA12.LOCATION_ID)) AND (LA1.LOCATION_ID = LA13.LOCATION_ID)) AND (LA1.LOCATION_ID = LA14.LOCATION_ID)) AND (LA1.LOCATION_ID = LA15.LOCATION_ID)) AND (LA1.LOCATION_ID = LA16.LOCATION_ID)) AND (LA1.LOCATION_ID = LA17.LOCATION_ID)) AND (LA1.LOCATION_ID = LA18.LOCATION_ID)) AND (LA1.LOCATION_ID = LA19.LOCATION_ID)) AND (LA1.LOCATION_ID = LA20.LOCATION_ID)) AND (LA1.LOCATION_ID = LA21.LOCATION_ID)) AND (LA1.LOCATION_ID = LA22.LOCATION_ID)) AND (LA1.LOCATION_ID = LA23.LOCATION_ID)) AND (LA1.LOCATION_ID = LA24.LOCATION_ID)) AND (LA1.LOCATION_ID = LA25.LOCATION_ID)) AND (LA1.LOCATION_ID = LA26.LOCATION_ID)) AND (LA1.LOCATION_ID = LA27.LOCATION_ID)) AND (LA1.LOCATION_ID = LA28.LOCATION_ID)) AND (LA1.LOCATION_ID = LA29.LOCATION_ID)) AND (LA1.LOCATION_ID = LA30.LOCATION_ID)) AND (LA1.LOCATION_ID = LA31.LOCATION_ID)) AND (LA1.LOCATION_ID = LA32.LOCATION_ID)) AND (LA1.LOCATION_ID = LA33.LOCATION_ID)) AND (LA1.LOCATION_ID = LA34.LOCATION_ID)) AND (LA1.LOCATION_ID = LA35.LOCATION_ID)) AND (LA1.AREA_ID = 1)) AND (LA2.AREA_ID = 2)) AND (LA3.AREA_ID = 3)) AND (LA4.AREA_ID = 4)) AND (LA5.AREA_ID = 5)) AND (LA6.AREA_ID = 6)) AND (LA7.AREA_ID = 7)) AND (LA8.AREA_ID = 8)) AND (LA9.AREA_ID = 9)) AND (LA10.AREA_ID = 10)) AND (LA11.AREA_ID = 11)) AND (LA12.AREA_ID = 12)) AND (LA13.AREA_ID = 13)) AND (LA14.AREA_ID = 14)) AND (LA15.AREA_ID = 15)) AND (LA16.AREA_ID = 16)) AND (LA17.AREA_ID = 17)) AND (LA18.AREA_ID = 18)) AND (LA19.AREA_ID = 19)) AND (LA20.AREA_ID = 20)) AND (LA21.AREA_ID = 21)) AND (LA22.AREA_ID = 22)) AND (LA23.AREA_ID = 23)) AND (LA24.AREA_ID = 24)) AND (LA25.AREA_ID = 25)) AND (LA26.AREA_ID = 26)) AND (LA27.AREA_ID = 27)) AND (LA28.AREA_ID = 28)) AND (LA29.AREA_ID = 29)) AND (LA30.AREA_ID = 30)) AND (LA31.AREA_ID = 31)) AND (LA32.AREA_ID = 32)) AND (LA33.AREA_ID = 33)) AND (LA34.AREA_ID = 34)) AND (LA35.AREA_ID = 35)) AND (LA1.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA2.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA3.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA4.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA5.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA6.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA7.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA8.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA9.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA10.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA11.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA12.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA13.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA14.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA15.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA16.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA17.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA18.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA19.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA20.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA21.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA22.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA23.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA24.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA25.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA26.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA27.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA28.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA29.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA30.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA31.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA32.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA33.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA34.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR")))) AND (LA35.LOC_AREA_END_DT = "TIMESTAMP"(TO_DATE('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR"))));

\echo
\echo *****  Creating view:  "LOCATION_AREA_VIEW"

CREATE or replace VIEW  "LOCATION_AREA_VIEW"
(
     WEEK_DT,
     LOCATION_ID,
     AREA_ID,
     SQ_FT_AMT
) AS
SELECT W.WEEK_DT, LA.LOCATION_ID, LA.AREA_ID, LA.SQ_FT_AMT FROM ADMIN.LOCATION_AREA LA, ADMIN.WEEKS W WHERE (((W.WEEK_DT >= LA.LOC_AREA_EFF_DT) AND (W.WEEK_DT <= LA.LOC_AREA_END_DT)) AND ((W.WEEK_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '371 days'::"INTERVAL")) AND (W.WEEK_DT <= ("TIMESTAMP"('now'::"VARCHAR") + '28 days'::"INTERVAL"))));

\echo
\echo *****  Creating view:  "MONTH_DATE_VIEW"

CREATE or replace VIEW  "MONTH_DATE_VIEW"
(
     FISCAL_MO,
     FISCAL_MO_DT,
     FISCAL_MO_NAME,
     FISCAL_MO_NAME_ABBR,
     FISCAL_MO_NBR,
     FISCAL_QTR,
     FISCAL_QTR_DT,
     FISCAL_QTR_NBR,
     FISCAL_HALF,
     FISCAL_HALF_DT,
     FISCAL_YR,
     FISCAL_YR_DT
) AS
SELECT MONTHS.FISCAL_MO, CASE WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '01'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-02-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '02'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-03-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '03'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-04-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '04'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-05-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '05'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-06-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '06'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-07-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '07'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-08-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '08'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-09-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '09'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-10-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '10'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-11-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '11'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-12-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_MO)), 5, 2) /=/ '12'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-01-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") ELSE '0001-01-01'::DATE END AS FISCAL_MO_DT, MONTHS.FISCAL_MO_NAME, MONTHS.FISCAL_MO_NAME_ABBR, MONTHS.FISCAL_MO_NBR, MONTHS.FISCAL_QTR, CASE WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_QTR)), 5, 2) /=/ '01'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-02-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_QTR)), 5, 2) /=/ '02'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-05-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_QTR)), 5, 2) /=/ '03'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-08-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_QTR)), 5, 2) /=/ '04'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-11-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") ELSE '0001-01-01'::DATE END AS FISCAL_QTR_DT, MONTHS.FISCAL_QTR_NBR, MONTHS.FISCAL_HALF, CASE WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_HALF)), 5, 2) /=/ '01'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-02-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") WHEN (SUBSTR(LTRIM("VARCHAR"(MONTHS.FISCAL_HALF)), 5, 2) /=/ '02'::"VARCHAR") THEN TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-08-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") ELSE '0001-01-01'::DATE END AS FISCAL_HALF_DT, MONTHS.FISCAL_YR, TO_DATE(("VARCHAR"(MONTHS.FISCAL_YR) || '-02-01'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") AS FISCAL_YR_DT FROM ADMIN.MONTHS;

\echo
\echo *****  Creating view:  "PAYMENT_TYPE_VIEW"

CREATE or replace VIEW  "PAYMENT_TYPE_VIEW"
(
     TENDOR_DESC,
     SUB_TENDOR_DESC,
     PAYMENT_TYPE_ID,
     PAYMENT_TYPE_DESC
) AS
SELECT CASE WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 1) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 2) THEN 'PLASTIC'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 3) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 4) THEN 'PLASTIC'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 5) THEN 'PLASTIC'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 6) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 7) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 8) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 9) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 10) THEN 'PLASTIC'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 11) THEN 'PLASTIC'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 12) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 13) THEN 'PAPER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 14) THEN 'PAPER'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TENDOR_DESC, CASE WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 1) THEN 'CHECK'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 2) THEN 'CREDIT'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 3) THEN 'CASH'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 4) THEN 'DEBIT'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 5) THEN 'CREDIT'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 6) THEN 'GIFT CERTIFICATE'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 7) THEN 'COUPON'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 8) THEN 'MERCHANDISE CREDIT'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 9) THEN 'CHECK'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 10) THEN 'GIFT CARD'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 11) THEN 'CREDIT'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 12) THEN 'COUPON'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 13) THEN 'CUSTOMER PURCH ORDER'::"VARCHAR" WHEN (PAYMENT_TYPE.PAYMENT_TYPE_ID /=/ 14) THEN 'COUPON'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SUB_TENDOR_DESC, PAYMENT_TYPE.PAYMENT_TYPE_ID, PAYMENT_TYPE.PAYMENT_TYPE_DESC FROM ADMIN.PAYMENT_TYPE;

\echo
\echo *****  Creating view:  "PHY_INV_USE_VIEW"

CREATE or replace VIEW  "PHY_INV_USE_VIEW"
(
     LOCATION_ID,
     PHYS_INV_TYPE_ID,
     CURR_PLANNED_CNT_DT,
     PREV_PLANNED_CNT_DT,
     CURR_ACTUAL_CNT_DT,
     PREV_ACTUAL_CNT_DT,
     PHYS_INV_USE_DT
) AS
SELECT A13.LOCATION_ID, A13.PHYS_INV_TYPE_ID, A13.CURR_PLANNED_CNT_DT, A13.PREV_PLANNED_CNT_DT, A13.CURR_ACTUAL_CNT_DT, A13.PREV_ACTUAL_CNT_DT, CASE WHEN (TO_CHAR(A13.CURR_ACTUAL_CNT_DT, 'mm'::"VARCHAR") = TO_CHAR("TIMESTAMP"(DATE('now'::"VARCHAR")), 'mm'::"VARCHAR")) THEN A13.PREV_ACTUAL_CNT_DT ELSE A13.CURR_ACTUAL_CNT_DT END AS PHYS_INV_USE_DT FROM (SELECT A12.LOCATION_ID, CASE WHEN (A11.PHYS_INV_TYPE_ID NOTNULL) THEN INT4(A11.PHYS_INV_TYPE_ID) WHEN (2 NOTNULL) THEN 2 ELSE NULL::INT4 END AS PHYS_INV_TYPE_ID, CASE WHEN (A11.CURR_PLANNED_CNT_DT NOTNULL) THEN A11.CURR_PLANNED_CNT_DT WHEN (A12.OPEN_DT NOTNULL) THEN A12.OPEN_DT ELSE NULL::"TIMESTAMP" END AS CURR_PLANNED_CNT_DT, CASE WHEN (A11.PREV_PLANNED_CNT_DT NOTNULL) THEN A11.PREV_PLANNED_CNT_DT WHEN (A12.OPEN_DT NOTNULL) THEN A12.OPEN_DT ELSE NULL::"TIMESTAMP" END AS PREV_PLANNED_CNT_DT, CASE WHEN (CASE WHEN ((A11.CURR_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) AND (A11.PREV_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR")))) THEN A12.OPEN_DT ELSE CASE WHEN (A11.CURR_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) THEN A11.PREV_ACTUAL_CNT_DT ELSE A11.CURR_ACTUAL_CNT_DT END END NOTNULL) THEN CASE WHEN ((A11.CURR_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) AND (A11.PREV_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR")))) THEN A12.OPEN_DT ELSE CASE WHEN (A11.CURR_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) THEN A11.PREV_ACTUAL_CNT_DT ELSE A11.CURR_ACTUAL_CNT_DT END END WHEN (A12.OPEN_DT NOTNULL) THEN A12.OPEN_DT ELSE NULL::"TIMESTAMP" END AS CURR_ACTUAL_CNT_DT, CASE WHEN (CASE WHEN ((A11.PREV_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) AND (A11.CURR_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR")))) THEN A12.OPEN_DT ELSE CASE WHEN (A11.PREV_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) THEN A11.CURR_ACTUAL_CNT_DT ELSE A11.PREV_ACTUAL_CNT_DT END END NOTNULL) THEN CASE WHEN ((A11.PREV_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) AND (A11.CURR_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR")))) THEN A12.OPEN_DT ELSE CASE WHEN (A11.PREV_ACTUAL_CNT_DT = "TIMESTAMP"(TO_DATE('01/01/0001'::"VARCHAR", 'mm/dd/yyyy'::"VARCHAR"))) THEN A11.CURR_ACTUAL_CNT_DT ELSE A11.PREV_ACTUAL_CNT_DT END END WHEN (A12.OPEN_DT NOTNULL) THEN A12.OPEN_DT ELSE NULL::"TIMESTAMP" END AS PREV_ACTUAL_CNT_DT FROM (ADMIN.PHYS_INV_CURRENT A11 RIGHT JOIN ADMIN.SITE_PROFILE A12 ON (((A11.LOCATION_ID = A12.LOCATION_ID) AND (A11.PHYS_INV_TYPE_ID = 2)))) WHERE (INT4((A12.SITE_SALES_FLAG)::"VARCHAR") = 1)) A13;

\echo
\echo *****  Creating view:  "PLAN_GROUP_STORE_VIEW"

CREATE or replace VIEW  "PLAN_GROUP_STORE_VIEW"
(
     WEEK_DT,
     LOCATION_ID,
     PLAN_VRSN_NM,
     PROFIT_CTR_NM,
     PROFIT_CTR_SUB_ID,
     SAP_CLASS_ID,
     PROFIT_CTR_SUB_NM,
     PLAN_STR_SALES_AMT,
     PLAN_STR_MARGIN_AMT,
     PLAN_STR_RETURN_AMT,
     PLAN_STR_COUPON_AMT,
     PLAN_STR_DISCOUNT_AMT,
     PLAN_STR_SHRINK_AMT,
     PLAN_STR_ITEM_RMVL_AMT,
     PLAN_STR_TRANS_CT,
     PLAN_STR_EXCH_RATE_PCT,
     ACTUAL_EXCH_RATE_PCT,
     COUNTRY_CD,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT PLAN_GROUP_STORE.WEEK_DT, PLAN_GROUP_STORE.LOCATION_ID, PLAN_GROUP_STORE.PLAN_VRSN_NM, PLAN_GROUP_STORE.PROFIT_CTR_NM, PLAN_GROUP_STORE.PROFIT_CTR_SUB_ID, PLAN_GROUP_STORE.PROFIT_CTR_SUB_ID AS SAP_CLASS_ID, PLAN_GROUP_STORE.PROFIT_CTR_SUB_NM, PLAN_GROUP_STORE.PLAN_SALES_AMT AS PLAN_STR_SALES_AMT, PLAN_GROUP_STORE.PLAN_MARGIN_AMT AS PLAN_STR_MARGIN_AMT, PLAN_GROUP_STORE.PLAN_RETURN_AMT AS PLAN_STR_RETURN_AMT, PLAN_GROUP_STORE.PLAN_COUPON_AMT AS PLAN_STR_COUPON_AMT, PLAN_GROUP_STORE.PLAN_DISCOUNT_AMT AS PLAN_STR_DISCOUNT_AMT, PLAN_GROUP_STORE.PLAN_SHRINK_AMT AS PLAN_STR_SHRINK_AMT, PLAN_GROUP_STORE.PLAN_ITEM_RMVL_AMT AS PLAN_STR_ITEM_RMVL_AMT, PLAN_GROUP_STORE.PLAN_TRANS_CT AS PLAN_STR_TRANS_CT, PLAN_GROUP_STORE.PLAN_EXCH_RATE_PCT AS PLAN_STR_EXCH_RATE_PCT, PLAN_GROUP_STORE.ACTUAL_EXCH_RATE_PCT, PLAN_GROUP_STORE.COUNTRY_CD, PLAN_GROUP_STORE.UPDATE_DT, PLAN_GROUP_STORE.LOAD_DT FROM ADMIN.PLAN_GROUP_STORE WHERE (PLAN_GROUP_STORE.PLAN_SALES_AMT <> '0'::NUMERIC);

\echo
\echo *****  Creating view:  "PLAN_VRSN_NM_VIEW"

CREATE or replace VIEW  "PLAN_VRSN_NM_VIEW"
(
     PLAN_VRSN_NM
) AS
SELECT SUBSTR(REF_LOOKUP.REF_NBR_TXT_ID, 1, 20) AS PLAN_VRSN_NM FROM ADMIN.REF_LOOKUP WHERE (REF_LOOKUP.REF_ID = 1);

\echo
\echo *****  Creating view:  "POG_SKU_STATUS_VIEW"

CREATE or replace VIEW  "POG_SKU_STATUS_VIEW"
(
     POG_SKU_STATUS,
     POG_SKU_STATUS_DESC
) AS
SELECT SUBSTR(REF_LOOKUP.REF_TXT_ID, 1, 1) AS POG_SKU_STATUS, SUBSTR(REF_LOOKUP.REF_NBR_TXT_ID, 1, 20) AS POG_SKU_STATUS_DESC FROM ADMIN.REF_LOOKUP WHERE (REF_LOOKUP.REF_ID = 3);

\echo
\echo *****  Creating view:  "POG_SKU_STORE_PRO_WEEK_VIEW"

CREATE or replace VIEW  "POG_SKU_STORE_PRO_WEEK_VIEW"
(
     WEEK_DT,
     PRODUCT_ID,
     LOCATION_ID,
     POG_ID,
     SKU_CAPACITY_QTY,
     SKU_FACINGS_QTY,
     SKU_HEIGHT_IN,
     SKU_DEPTH_IN,
     SKU_WIDTH_IN,
     UNIT_OF_MEASURE,
     TRAY_PACK_NBR,
     POG_SKU_STATUS,
     POG_STORE_STATUS
) AS
SELECT SK.WEEK_DT, SK.PRODUCT_ID, ST.LOCATION_ID, SK.POG_ID, SK.SKU_CAPACITY_QTY, SK.SKU_FACINGS_QTY, SK.SKU_HEIGHT_IN, SK.SKU_DEPTH_IN, SK.SKU_WIDTH_IN, SK.UNIT_OF_MEASURE, SK.TRAY_PACK_NBR, SK.POG_SKU_STATUS, ST.POG_STORE_STATUS FROM ADMIN.POG_SKU_PRO_WEEK SK, ADMIN.POG_STORE_PRO_WEEK ST WHERE ((ST.POG_ID = SK.POG_ID) AND (ST.WEEK_DT = SK.WEEK_DT));

\echo
\echo *****  Creating view:  "POG_STATUS_VIEW"

CREATE or replace VIEW  "POG_STATUS_VIEW"
(
     POG_STATUS,
     POG_STATUS_DESC
) AS
SELECT SUBSTR(REF_LOOKUP.REF_TXT_ID, 1, 1) AS POG_STATUS, SUBSTR(REF_LOOKUP.REF_NBR_TXT_ID, 1, 20) AS POG_STATUS_DESC FROM ADMIN.REF_LOOKUP WHERE (REF_LOOKUP.REF_ID = 3);

\echo
\echo *****  Creating view:  "POG_STORE_STATUS_VIEW"

CREATE or replace VIEW  "POG_STORE_STATUS_VIEW"
(
     POG_STORE_STATUS,
     POG_STORE_STATUS_DESC
) AS
SELECT SUBSTR(REF_LOOKUP.REF_TXT_ID, 1, 1) AS POG_STORE_STATUS, SUBSTR(REF_LOOKUP.REF_NBR_TXT_ID, 1, 20) AS POG_STORE_STATUS_DESC FROM ADMIN.REF_LOOKUP WHERE (REF_LOOKUP.REF_ID = 3);

\echo
\echo *****  Creating view:  "PROFIT_CTR_NM_VIEW"

CREATE or replace VIEW  "PROFIT_CTR_NM_VIEW"
(
     PROFIT_CTR_NM
) AS
SELECT SUBSTR(REF_LOOKUP.REF_NBR_TXT_ID, 1, 40) AS PROFIT_CTR_NM FROM ADMIN.REF_LOOKUP WHERE (REF_LOOKUP.REF_ID = 2);

\echo
\echo *****  Creating view:  "PROFIT_CTR_SUB_VIEW"

CREATE or replace VIEW  PROFIT_CTR_SUB_VIEW
(
     PROFIT_CTR_NM,
     SAP_CLASS_ID,
     PROFIT_CTR_SUB_ID,
     PROFIT_CTR_SUB_NM
) AS
SELECT DISTINCT PLAN_STORE_DAY.PROFIT_CTR_NM, PLAN_STORE_DAY.PROFIT_CTR_SUB_ID AS SAP_CLASS_ID, PLAN_STORE_DAY.PROFIT_CTR_SUB_ID, PLAN_STORE_DAY.PROFIT_CTR_SUB_NM FROM ADMIN.PLAN_STORE_DAY;

\echo
\echo *****  Creating view:  "QTD_WEEKS_VIEW"

CREATE or replace VIEW  "QTD_WEEKS_VIEW"
(
     WEEK_DT,
     QTD_WEEK_DT
) AS
SELECT CURR.WEEK_DT, QTD.WEEK_DT AS QTD_WEEK_DT FROM ADMIN.WEEKS CURR, ADMIN.WEEKS QTD WHERE ((CURR.FISCAL_QTR = QTD.FISCAL_QTR) AND (CURR.WEEK_DT >= QTD.WEEK_DT));

\echo
\echo *****  Creating view:  "RECHARGE_FLAG_VIEW"

CREATE or replace VIEW  "RECHARGE_FLAG_VIEW"
(
     RECHARGE_FLAG
) AS
SELECT SUBSTR(REF_LOOKUP.REF_TXT_ID, 1, 1) AS RECHARGE_FLAG FROM ADMIN.REF_LOOKUP WHERE (REF_LOOKUP.REF_ID = 5);

\echo
\echo *****  Creating view:  "SAP_HIERARCHY_VIEW"

CREATE or replace VIEW  "SAP_HIERARCHY_VIEW"
(
     PRODUCT_ID,
     HL5_CODE_ID,
     HL5_CODE_DESC,
     HL5_VALUE_ID,
     HL5_VALUE_DESC,
     HL6_CODE_ID,
     HL6_CODE_DESC,
     HL6_VALUE_ID,
     HL6_VALUE_DESC,
     HL7_CODE_ID,
     HL7_CODE_DESC,
     HL7_VALUE_ID,
     HL7_VALUE_DESC,
     HL8_CODE_ID,
     HL8_CODE_DESC,
     HL8_VALUE_ID,
     HL8_VALUE_DESC,
     PLG_CODE_ID,
     PLG_CODE_DESC,
     PLG_VALUE_ID,
     PLG_VALUE_DESC
) AS
SELECT SAP.PRODUCT_ID, CASE WHEN (HL5.SAP_ATT_CODE_ID NOTNULL) THEN HL5.SAP_ATT_CODE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL5_CODE_ID, CASE WHEN (HL5.SAP_ATT_CODE_DESC NOTNULL) THEN HL5.SAP_ATT_CODE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL5_CODE_DESC, CASE WHEN (HL5.SAP_ATT_VALUE_ID NOTNULL) THEN HL5.SAP_ATT_VALUE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL5_VALUE_ID, CASE WHEN (HL5.SAP_ATT_VALUE_DESC NOTNULL) THEN HL5.SAP_ATT_VALUE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL5_VALUE_DESC, CASE WHEN (HL6.SAP_ATT_CODE_ID NOTNULL) THEN HL6.SAP_ATT_CODE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL6_CODE_ID, CASE WHEN (HL6.SAP_ATT_CODE_DESC NOTNULL) THEN HL6.SAP_ATT_CODE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL6_CODE_DESC, CASE WHEN (HL6.SAP_ATT_VALUE_ID NOTNULL) THEN HL6.SAP_ATT_VALUE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL6_VALUE_ID, CASE WHEN (HL6.SAP_ATT_VALUE_DESC NOTNULL) THEN HL6.SAP_ATT_VALUE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL6_VALUE_DESC, CASE WHEN (HL7.SAP_ATT_CODE_ID NOTNULL) THEN HL7.SAP_ATT_CODE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL7_CODE_ID, CASE WHEN (HL7.SAP_ATT_CODE_DESC NOTNULL) THEN HL7.SAP_ATT_CODE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL7_CODE_DESC, CASE WHEN (HL7.SAP_ATT_VALUE_ID NOTNULL) THEN HL7.SAP_ATT_VALUE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL7_VALUE_ID, CASE WHEN (HL7.SAP_ATT_VALUE_DESC NOTNULL) THEN HL7.SAP_ATT_VALUE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL7_VALUE_DESC, CASE WHEN (HL8.SAP_ATT_CODE_ID NOTNULL) THEN HL8.SAP_ATT_CODE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL8_CODE_ID, CASE WHEN (HL8.SAP_ATT_CODE_DESC NOTNULL) THEN HL8.SAP_ATT_CODE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL8_CODE_DESC, CASE WHEN (HL8.SAP_ATT_VALUE_ID NOTNULL) THEN HL8.SAP_ATT_VALUE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS HL8_VALUE_ID, CASE WHEN (HL8.SAP_ATT_VALUE_DESC NOTNULL) THEN HL8.SAP_ATT_VALUE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS HL8_VALUE_DESC, CASE WHEN (PLG.SAP_ATT_CODE_ID NOTNULL) THEN PLG.SAP_ATT_CODE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS PLG_CODE_ID, CASE WHEN (PLG.SAP_ATT_CODE_DESC NOTNULL) THEN PLG.SAP_ATT_CODE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS PLG_CODE_DESC, CASE WHEN (PLG.SAP_ATT_VALUE_ID NOTNULL) THEN PLG.SAP_ATT_VALUE_ID WHEN (' ' NOTNULL) THEN ' '::BPCHAR ELSE NULL::BPCHAR END AS PLG_VALUE_ID, CASE WHEN (PLG.SAP_ATT_VALUE_DESC NOTNULL) THEN PLG.SAP_ATT_VALUE_DESC WHEN (' ' NOTNULL) THEN ' '::"VARCHAR" ELSE NULL::"VARCHAR" END AS PLG_VALUE_DESC FROM ((((((SELECT DISTINCT SAP_ATTRIBUTE.PRODUCT_ID FROM ADMIN.SAP_ATTRIBUTE WHERE (SAP_ATTRIBUTE.DELETE_FLAG <> 'X'::BPCHAR)) SAP LEFT JOIN (SELECT ATT.PRODUCT_ID, ATT.SAP_ATT_CODE_ID, COD.SAP_ATT_CODE_DESC, ATT.SAP_ATT_VALUE_ID, VAL.SAP_ATT_VALUE_DESC FROM ADMIN.SAP_ATTRIBUTE ATT, ADMIN.SAP_ATT_CODE COD, ADMIN.SAP_ATT_VALUE VAL WHERE (((((ATT.SAP_ATT_TYPE_ID = 'HL5'::BPCHAR) AND (ATT.DELETE_FLAG <> 'X'::BPCHAR)) AND (ATT.SAP_ATT_CODE_ID = COD.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_CODE_ID = VAL.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_VALUE_ID = VAL.SAP_ATT_VALUE_ID))) HL5 ON ((SAP.PRODUCT_ID = HL5.PRODUCT_ID))) LEFT JOIN (SELECT ATT.PRODUCT_ID, ATT.SAP_ATT_CODE_ID, COD.SAP_ATT_CODE_DESC, ATT.SAP_ATT_VALUE_ID, VAL.SAP_ATT_VALUE_DESC FROM ADMIN.SAP_ATTRIBUTE ATT, ADMIN.SAP_ATT_CODE COD, ADMIN.SAP_ATT_VALUE VAL WHERE (((((ATT.SAP_ATT_TYPE_ID = 'HL6'::BPCHAR) AND (ATT.DELETE_FLAG <> 'X'::BPCHAR)) AND (ATT.SAP_ATT_CODE_ID = COD.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_CODE_ID = VAL.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_VALUE_ID = VAL.SAP_ATT_VALUE_ID))) HL6 ON ((SAP.PRODUCT_ID = HL6.PRODUCT_ID))) LEFT JOIN (SELECT ATT.PRODUCT_ID, ATT.SAP_ATT_CODE_ID, COD.SAP_ATT_CODE_DESC, ATT.SAP_ATT_VALUE_ID, VAL.SAP_ATT_VALUE_DESC FROM ADMIN.SAP_ATTRIBUTE ATT, ADMIN.SAP_ATT_CODE COD, ADMIN.SAP_ATT_VALUE VAL WHERE (((((ATT.SAP_ATT_TYPE_ID = 'HL7'::BPCHAR) AND (ATT.DELETE_FLAG <> 'X'::BPCHAR)) AND (ATT.SAP_ATT_CODE_ID = COD.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_CODE_ID = VAL.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_VALUE_ID = VAL.SAP_ATT_VALUE_ID))) HL7 ON ((SAP.PRODUCT_ID = HL7.PRODUCT_ID))) LEFT JOIN (SELECT ATT.PRODUCT_ID, ATT.SAP_ATT_CODE_ID, COD.SAP_ATT_CODE_DESC, ATT.SAP_ATT_VALUE_ID, VAL.SAP_ATT_VALUE_DESC FROM ADMIN.SAP_ATTRIBUTE ATT, ADMIN.SAP_ATT_CODE COD, ADMIN.SAP_ATT_VALUE VAL WHERE (((((ATT.SAP_ATT_TYPE_ID = 'HL8'::BPCHAR) AND (ATT.DELETE_FLAG <> 'X'::BPCHAR)) AND (ATT.SAP_ATT_CODE_ID = COD.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_CODE_ID = VAL.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_VALUE_ID = VAL.SAP_ATT_VALUE_ID))) HL8 ON ((SAP.PRODUCT_ID = HL8.PRODUCT_ID))) LEFT JOIN (SELECT ATT.PRODUCT_ID, ATT.SAP_ATT_CODE_ID, COD.SAP_ATT_CODE_DESC, ATT.SAP_ATT_VALUE_ID, VAL.SAP_ATT_VALUE_DESC FROM ADMIN.SAP_ATTRIBUTE ATT, ADMIN.SAP_ATT_CODE COD, ADMIN.SAP_ATT_VALUE VAL WHERE (((((ATT.SAP_ATT_TYPE_ID = 'PLG'::BPCHAR) AND (ATT.DELETE_FLAG <> 'X'::BPCHAR)) AND (ATT.SAP_ATT_CODE_ID = COD.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_CODE_ID = VAL.SAP_ATT_CODE_ID)) AND (ATT.SAP_ATT_VALUE_ID = VAL.SAP_ATT_VALUE_ID))) PLG ON ((SAP.PRODUCT_ID = PLG.PRODUCT_ID)));

\echo
\echo *****  Creating view:  "SKU_STORE_VIEW"

CREATE or replace VIEW  "SKU_STORE_VIEW"
(
     PRODUCT_ID,
     LOCATION_ID,
     SKU_STORE_FLAG
) AS
SELECT PRODUCT.PRODUCT_ID, "LOCATION".LOCATION_ID, 1 AS SKU_STORE_FLAG FROM ADMIN.PRODUCT, ADMIN."LOCATION" WHERE ("LOCATION".STORE_TYPE_ID IN ('120 '::BPCHAR, '100 '::BPCHAR));

\echo
\echo *****  Creating view:  "SKU_SUBS_VIEW"

CREATE or replace VIEW  "SKU_SUBS_VIEW"
(
     PRODUCT_ID,
     SKU_NBR,
     SUBS_PRODUCT_ID,
     SUBS_SKU_NBR,
     SOURCE_CD,
     SUBS_IND
) AS
SELECT SSL.PRODUCT_ID, SP1.SKU_NBR, SSL.SUBS_PRODUCT_ID, SP2.SKU_NBR AS SUBS_SKU_NBR, CASE WHEN ((MAX(SSL.SS_CD) = 'S'::"VARCHAR") AND (MAX(SSL.SL_CD) = 'D'::"VARCHAR")) THEN 'B'::"VARCHAR" WHEN ((MAX(SSL.SS_CD) = 'S'::"VARCHAR") AND (MAX(SSL.SL_CD) = ' '::"VARCHAR")) THEN 'S'::"VARCHAR" WHEN ((MAX(SSL.SS_CD) = ' '::"VARCHAR") AND (MAX(SSL.SL_CD) = 'D'::"VARCHAR")) THEN 'D'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SOURCE_CD, CASE WHEN (("TIMESTAMP"('now'::"VARCHAR") >= MAX(SSL.SUBS_EFF_DT)) AND ("TIMESTAMP"('now'::"VARCHAR") <= MAX(SSL.SUBS_END_DT))) THEN 1 ELSE 0 END AS SUBS_IND FROM ((((SELECT SS.PRODUCT_ID, SS.SUBS_PRODUCT_ID, ('S'::"VARCHAR")::VARCHAR(1) AS SS_CD, (' '::"VARCHAR")::VARCHAR(1) AS SL_CD, SS.SUBS_EFF_DT, SS.SUBS_END_DT FROM ADMIN.SKU_SUBSTITUTION SS) UNION ALL (SELECT SL.PRODUCT_ID, SL.LINK_PRODUCT_ID, (' '::"VARCHAR")::VARCHAR(1) AS SS_CD, ('D'::"VARCHAR")::VARCHAR(1) AS SL_CD, SL.SKU_LINK_EFF_DT, SL.SKU_LINK_END_DT FROM ADMIN.DP_SKU_LINK SL GROUP BY SL.PRODUCT_ID, SL.LINK_PRODUCT_ID, SL.SKU_LINK_EFF_DT, SL.SKU_LINK_END_DT)) UNION ALL (SELECT SS.SUBS_PRODUCT_ID, SS.PRODUCT_ID, ('S'::"VARCHAR")::VARCHAR(1) AS SS_CD, (' '::"VARCHAR")::VARCHAR(1) AS SL_CD, SS.SUBS_EFF_DT, SS.SUBS_END_DT FROM ADMIN.SKU_SUBSTITUTION SS)) UNION ALL (SELECT SL.LINK_PRODUCT_ID, SL.PRODUCT_ID, (' '::"VARCHAR")::VARCHAR(1) AS SS_CD, ('D'::"VARCHAR")::VARCHAR(1) AS SL_CD, SL.SKU_LINK_EFF_DT, SL.SKU_LINK_END_DT FROM ADMIN.DP_SKU_LINK SL GROUP BY SL.LINK_PRODUCT_ID, SL.PRODUCT_ID, SL.SKU_LINK_EFF_DT, SL.SKU_LINK_END_DT)) SSL, ADMIN.SKU_PROFILE SP1, ADMIN.SKU_PROFILE SP2 WHERE ((SSL.PRODUCT_ID = SP1.PRODUCT_ID) AND (SSL.SUBS_PRODUCT_ID = SP2.PRODUCT_ID)) GROUP BY SSL.PRODUCT_ID, SP1.SKU_NBR, SSL.SUBS_PRODUCT_ID, SP2.SKU_NBR;

\echo
\echo *****  Creating view:  "VENDOR_PO_COND_VIEW"

CREATE or replace VIEW  VENDOR_PO_COND_VIEW
(
     VENDOR_ID,
     PO_COND_CD,
     VENDOR_SUBRANGE_CD,
     PO_COND_RATE_AMT,
     PO_COND_RATE_AMT_HIST
) AS
SELECT COND.VENDOR_ID, COND.PO_COND_CD, COND.VENDOR_SUBRANGE_CD, COND.PO_COND_RATE_AMT, COND.PO_COND_RATE_AMT_HIST FROM ADMIN.VENDOR_PO_COND COND WHERE ((("TIMESTAMP"('now'::"VARCHAR") >= COND.PO_COND_EFF_DT) AND ("TIMESTAMP"('now'::"VARCHAR") <= COND.PO_COND_END_DT)) AND (COND.DELETE_IND = ' '::BPCHAR));

\echo
\echo *****  Creating view:  "VENDOR_PURCH_COND_VIEW"

CREATE or replace VIEW  "VENDOR_PURCH_COND_VIEW"
(
     VENDOR_ID,
     VENDOR_NAME,
     INCOTERM_CD,
     PAYMENT_TERMS_CD,
     CASH_TERMS_CD,
     ZAD1_ADVERT_ALLOW_MINUS_MAC,
     ZBRO_CUST_BROK_FEE_SUR_PCT,
     ZCFA_CARRIER_FRT_PCT,
     ZCFZ_UNBILLED_FRT_SUR_PCT,
     ZCON_FOREIGN_CONSLD_FEE_PCT,
     ZDEC_MISC_SURCHARGE,
     ZDF1_DEFECT_ALLOW_MINUS_MAC,
     ZDTY_DUTY_FEE_IMPORT_PCT,
     ZFRD_VENDOR_FRT_DISC_PCT,
     ZPOR_OCEAN_PORT_CHRG_PCT,
     ZRB1_REBATE_ALLOW_MINUS_MAC,
     ZTSI_TSI_FEES_IMPORT_PCT,
     ZVFA_VENDOR_FRT_PCT,
     ZWHS_DISC_ON_GROSS_PCT,
     ZPA1_DSD_PET_ALLOW_MINUS_MAC,
     ZDCS_FDC_DISCOUNT_PCT,
     ZDCW_FDC_DISCOUNT_WEIGHT,
     LOAD_DT
) AS
SELECT DISTINCT VP.VENDOR_ID, VP.VENDOR_NAME, CASE WHEN (VPC.INCOTERM_CD NOTNULL) THEN VPC.INCOTERM_CD ELSE 'N/A'::"VARCHAR" END AS INCOTERM_CD, CASE WHEN (VPC.PAYMENT_TERMS_CD NOTNULL) THEN VPC.PAYMENT_TERMS_CD ELSE 'N/A'::"VARCHAR" END AS PAYMENT_TERMS_CD, CASE WHEN (VPC.CASH_TERMS_CD NOTNULL) THEN VPC.CASH_TERMS_CD ELSE 'N/A'::"VARCHAR" END AS CASH_TERMS_CD, VPC.ZAD1_ADVERT_ALLOW_MINUS_MAC, VPC.ZBRO_CUST_BROK_FEE_SUR_PCT, VPC.ZCFA_CARRIER_FRT_PCT, VPC.ZCFZ_UNBILLED_FRT_SUR_PCT, VPC.ZCON_FOREIGN_CONSLD_FEE_PCT, VPC.ZDEC_MISC_SURCHARGE, VPC.ZDF1_DEFECT_ALLOW_MINUS_MAC, VPC.ZDTY_DUTY_FEE_IMPORT_PCT, VPC.ZFRD_VENDOR_FRT_DISC_PCT, VPC.ZPOR_OCEAN_PORT_CHRG_PCT, VPC.ZRB1_REBATE_ALLOW_MINUS_MAC, VPC.ZTSI_TSI_FEES_IMPORT_PCT, VPC.ZVFA_VENDOR_FRT_PCT, VPC.ZWHS_DISC_ON_GROSS_PCT, VPC.ZPA1_DSD_PET_ALLOW_MINUS_MAC, VPC.ZDCS_FDC_DISCOUNT_PCT, VPC.ZDCW_FDC_DISCOUNT_WEIGHT, DATE('now'::"VARCHAR") AS LOAD_DT FROM (ADMIN.VENDOR_PROFILE VP LEFT JOIN ADMIN.VENDOR_PURCH_COND VPC ON ((VP.VENDOR_ID = VPC.VENDOR_ID))) WHERE (VPC.LOCATION_ID = 0);

\echo
\echo *****  Creating view:  "VENDOR_SITE_PO_COND_VIEW"

CREATE or replace VIEW  VENDOR_SITE_PO_COND_VIEW
(
     VENDOR_ID,
     VENDOR_SUBRANGE_CD,
     LOCATION_ID,
     PO_COND_CD,
     PO_COND_RATE_AMT
) AS
SELECT COND.VENDOR_ID, COND.VENDOR_SUBRANGE_CD, COND.LOCATION_ID, COND.PO_COND_CD, COND.PO_COND_RATE_AMT FROM ADMIN.VENDOR_SITE_PO_COND COND WHERE ((("TIMESTAMP"('now'::"VARCHAR") >= COND.PO_COND_EFF_DT) AND ("TIMESTAMP"('now'::"VARCHAR") <= COND.PO_COND_END_DT)) AND (COND.DELETE_IND = ' '::BPCHAR));

\echo
\echo *****  Creating view:  "WTD_DAYS_VIEW"

CREATE or replace VIEW  "WTD_DAYS_VIEW"
(
     DAY_DT,
     WTD_DAY_DT
) AS
SELECT CURR.DAY_DT, WTD.DAY_DT AS WTD_DAY_DT FROM ADMIN.DAYS CURR, ADMIN.DAYS WTD WHERE ((CURR.FISCAL_WK = WTD.FISCAL_WK) AND (CURR.DAY_DT >= WTD.DAY_DT));

\echo
\echo *****  Creating view:  "YTD_FISCAL_MONTH_VIEW"

CREATE or replace VIEW  "YTD_FISCAL_MONTH_VIEW"
(
     FISCAL_MO,
     YTD_FISCAL_MO
) AS
SELECT CURR.FISCAL_MO, YTD.FISCAL_MO AS YTD_FISCAL_MO FROM ADMIN.MONTHS CURR, ADMIN.MONTHS YTD WHERE ((CURR.FISCAL_YR = YTD.FISCAL_YR) AND (CURR.FISCAL_MO >= YTD.FISCAL_MO));

\echo
\echo *****  Creating view:  "STORE_AREA_PRE_NORMAL_VIEW_BIWPADM_UAT"

CREATE or replace VIEW  "STORE_AREA_PRE_NORMAL_VIEW_BIWPADM_UAT"
(
     STORE_NBR,
     AREA_ID,
     LOC_AREA_EFF_DT,
     SQ_FT_AMT
) AS
((((((((SELECT STORE_AREA_PRE.STORE_NBR, 1 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_1_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 2 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_2_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 3 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_3_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 4 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_4_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 5 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_5_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 6 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_6_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 7 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_7_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 8 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_8_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 9 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_9_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE);

\echo
\echo *****  Creating view:  "DATE_DUE_VIEW"

CREATE or replace VIEW  "DATE_DUE_VIEW"
(
     DATE_DUE,
     DUE_DAY_DT,
     DUE_BUSINESS_DAY_FLAG,
     DUE_CAL_DAY_OF_MO_NBR,
     DUE_CAL_DAY_OF_YR_NBR,
     DUE_CAL_HALF,
     DUE_CAL_MO,
     DUE_CAL_MO_NAME,
     DUE_CAL_MO_NAME_ABBR,
     DUE_CAL_MO_NBR,
     DUE_CAL_QTR,
     DUE_CAL_QTR_NBR,
     DUE_CAL_WK,
     DUE_CAL_YR,
     DUE_DAY_OF_WK_NAME,
     DUE_DAY_OF_WK_NAME_ABBR,
     DUE_DAY_OF_WK_NBR,
     DUE_FISCAL_DAY_OF_MO_NBR,
     DUE_FISCAL_DAY_OF_YR_NBR,
     DUE_FISCAL_HALF,
     DUE_FISCAL_MO_NAME,
     DUE_FISCAL_MO_NAME_ABBR,
     DUE_FISCAL_MO_NBR,
     DUE_FISCAL_QTR,
     DUE_FISCAL_QTR_NBR,
     DUE_FISCAL_WK,
     DUE_HOLIDAY_FLAG,
     DUE_LWK_WEEK_DT,
     DUE_WEEK_DT,
     DUE_FISCAL_MO_DT,
     DUE_FISCAL_QTR_DT,
     DUE_FISCAL_YR_DT,
     DUE_FISCAL_MO
) AS
SELECT D0.DAY_DT AS DATE_DUE, D0.DAY_DT AS DUE_DAY_DT, D0.BUSINESS_DAY_FLAG AS DUE_BUSINESS_DAY_FLAG, D0.CAL_DAY_OF_MO_NBR AS DUE_CAL_DAY_OF_MO_NBR, D0.CAL_DAY_OF_YR_NBR AS DUE_CAL_DAY_OF_YR_NBR, D0.CAL_HALF AS DUE_CAL_HALF, D0.CAL_MO AS DUE_CAL_MO, D0.CAL_MO_NAME AS DUE_CAL_MO_NAME, D0.CAL_MO_NAME_ABBR AS DUE_CAL_MO_NAME_ABBR, D0.CAL_MO_NBR AS DUE_CAL_MO_NBR, D0.CAL_QTR AS DUE_CAL_QTR, D0.CAL_QTR_NBR AS DUE_CAL_QTR_NBR, D0.CAL_WK AS DUE_CAL_WK, D0.CAL_YR AS DUE_CAL_YR, D0.DAY_OF_WK_NAME AS DUE_DAY_OF_WK_NAME, D0.DAY_OF_WK_NAME_ABBR AS DUE_DAY_OF_WK_NAME_ABBR, D0.DAY_OF_WK_NBR AS DUE_DAY_OF_WK_NBR, D0.FISCAL_DAY_OF_MO_NBR AS DUE_FISCAL_DAY_OF_MO_NBR, D0.FISCAL_DAY_OF_YR_NBR AS DUE_FISCAL_DAY_OF_YR_NBR, D0.FISCAL_HALF AS DUE_FISCAL_HALF, D0.FISCAL_MO_NAME AS DUE_FISCAL_MO_NAME, D0.FISCAL_MO_NAME_ABBR AS DUE_FISCAL_MO_NAME_ABBR, D0.FISCAL_MO_NBR AS DUE_FISCAL_MO_NBR, D0.FISCAL_QTR AS DUE_FISCAL_QTR, D0.FISCAL_QTR_NBR AS DUE_FISCAL_QTR_NBR, D0.FISCAL_WK AS DUE_FISCAL_WK, D0.HOLIDAY_FLAG AS DUE_HOLIDAY_FLAG, D0.LWK_WEEK_DT AS DUE_LWK_WEEK_DT, D0.WEEK_DT AS DUE_WEEK_DT, M0.FISCAL_MO_DT AS DUE_FISCAL_MO_DT, M0.FISCAL_QTR_DT AS DUE_FISCAL_QTR_DT, M0.FISCAL_YR_DT AS DUE_FISCAL_YR_DT, M0.FISCAL_MO AS DUE_FISCAL_MO FROM ADMIN.DAYS D0, ADMIN.MONTH_DATE_VIEW M0 WHERE (M0.FISCAL_MO = D0.FISCAL_MO);

\echo
\echo *****  Creating view:  "DAYS_ALIAS_VIEW"

CREATE or replace VIEW  "DAYS_ALIAS_VIEW"
(
     DATE_DUE,
     DATE_RECIEVED,
     LAST_FC_DT,
     DATE_LAST_INV,
     DATE_LAST_SALE,
     DATE_PROD_ADDED,
     ALIAS_DAY_DT,
     ALIAS_BUSINESS_DAY_FLAG,
     ALIAS_CAL_DAY_OF_MO_NBR,
     ALIAS_CAL_DAY_OF_YR_NBR,
     ALIAS_CAL_HALF,
     ALIAS_CAL_MO,
     ALIAS_CAL_MO_NAME,
     ALIAS_CAL_MO_NAME_ABBR,
     ALIAS_CAL_MO_NBR,
     ALIAS_CAL_QTR,
     ALIAS_CAL_QTR_NBR,
     ALIAS_CAL_WK,
     ALIAS_CAL_YR,
     ALIAS_DAY_OF_WK_NAME,
     ALIAS_DAY_OF_WK_NAME_ABBR,
     ALIAS_DAY_OF_WK_NBR,
     ALIAS_FISCAL_DAY_OF_MO_NBR,
     ALIAS_FISCAL_DAY_OF_YR_NBR,
     ALIAS_FISCAL_HALF,
     ALIAS_FISCAL_MO_NAME,
     ALIAS_FISCAL_MO_NAME_ABBR,
     ALIAS_FISCAL_MO_NBR,
     ALIAS_FISCAL_QTR,
     ALIAS_FISCAL_QTR_NBR,
     ALIAS_FISCAL_WK,
     ALIAS_HOLIDAY_FLAG,
     ALIAS_LWK_WEEK_DT,
     ALIAS_WEEK_DT,
     ALIAS_FISCAL_MO_DT,
     ALIAS_FISCAL_QTR_DT,
     ALIAS_FISCAL_YR_DT
) AS
SELECT D0.DAY_DT AS DATE_DUE, D0.DAY_DT AS DATE_RECIEVED, D0.DAY_DT AS LAST_FC_DT, D0.DAY_DT AS DATE_LAST_INV, D0.DAY_DT AS DATE_LAST_SALE, D0.DAY_DT AS DATE_PROD_ADDED, D0.DAY_DT AS ALIAS_DAY_DT, D0.BUSINESS_DAY_FLAG AS ALIAS_BUSINESS_DAY_FLAG, D0.CAL_DAY_OF_MO_NBR AS ALIAS_CAL_DAY_OF_MO_NBR, D0.CAL_DAY_OF_YR_NBR AS ALIAS_CAL_DAY_OF_YR_NBR, D0.CAL_HALF AS ALIAS_CAL_HALF, D0.CAL_MO AS ALIAS_CAL_MO, D0.CAL_MO_NAME AS ALIAS_CAL_MO_NAME, D0.CAL_MO_NAME_ABBR AS ALIAS_CAL_MO_NAME_ABBR, D0.CAL_MO_NBR AS ALIAS_CAL_MO_NBR, D0.CAL_QTR AS ALIAS_CAL_QTR, D0.CAL_QTR_NBR AS ALIAS_CAL_QTR_NBR, D0.CAL_WK AS ALIAS_CAL_WK, D0.CAL_YR AS ALIAS_CAL_YR, D0.DAY_OF_WK_NAME AS ALIAS_DAY_OF_WK_NAME, D0.DAY_OF_WK_NAME_ABBR AS ALIAS_DAY_OF_WK_NAME_ABBR, D0.DAY_OF_WK_NBR AS ALIAS_DAY_OF_WK_NBR, D0.FISCAL_DAY_OF_MO_NBR AS ALIAS_FISCAL_DAY_OF_MO_NBR, D0.FISCAL_DAY_OF_YR_NBR AS ALIAS_FISCAL_DAY_OF_YR_NBR, D0.FISCAL_HALF AS ALIAS_FISCAL_HALF, D0.FISCAL_MO_NAME AS ALIAS_FISCAL_MO_NAME, D0.FISCAL_MO_NAME_ABBR AS ALIAS_FISCAL_MO_NAME_ABBR, D0.FISCAL_MO_NBR AS ALIAS_FISCAL_MO_NBR, D0.FISCAL_QTR AS ALIAS_FISCAL_QTR, D0.FISCAL_QTR_NBR AS ALIAS_FISCAL_QTR_NBR, D0.FISCAL_WK AS ALIAS_FISCAL_WK, D0.HOLIDAY_FLAG AS ALIAS_HOLIDAY_FLAG, D0.LWK_WEEK_DT AS ALIAS_LWK_WEEK_DT, D0.WEEK_DT AS ALIAS_WEEK_DT, M0.FISCAL_MO_DT AS ALIAS_FISCAL_MO_DT, M0.FISCAL_QTR_DT AS ALIAS_FISCAL_QTR_DT, M0.FISCAL_YR_DT AS ALIAS_FISCAL_YR_DT FROM ADMIN.DAYS D0, ADMIN.MONTH_DATE_VIEW M0 WHERE (M0.FISCAL_MO = D0.FISCAL_MO);

\echo
\echo *****  Creating view:  "EXPIRATION_DATE_VIEW"

CREATE or replace VIEW  "EXPIRATION_DATE_VIEW"
(
     EXPIRATION_DATE,
     EXP_DAY_DT,
     EXP_BUSINESS_DAY_FLAG,
     EXP_CAL_DAY_OF_MO_NBR,
     EXP_CAL_DAY_OF_YR_NBR,
     EXP_CAL_HALF,
     EXP_CAL_MO,
     EXP_CAL_MO_NAME,
     EXP_CAL_MO_NAME_ABBR,
     EXP_CAL_MO_NBR,
     EXP_CAL_QTR,
     EXP_CAL_QTR_NBR,
     EXP_CAL_WK,
     EXP_CAL_YR,
     EXP_DAY_OF_WK_NAME,
     EXP_DAY_OF_WK_NAME_ABBR,
     EXP_DAY_OF_WK_NBR,
     EXP_FISCAL_DAY_OF_MO_NBR,
     EXP_FISCAL_DAY_OF_YR_NBR,
     EXP_FISCAL_HALF,
     EXP_FISCAL_MO_NAME,
     EXP_FISCAL_MO_NAME_ABBR,
     EXP_FISCAL_MO_NBR,
     EXP_FISCAL_QTR,
     EXP_FISCAL_QTR_NBR,
     EXP_FISCAL_WK,
     EXP_HOLIDAY_FLAG,
     EXP_LWK_WEEK_DT,
     EXP_WEEK_DT,
     EXP_FISCAL_MO_DT,
     EXP_FISCAL_QTR_DT,
     EXP_FISCAL_YR_DT
) AS
SELECT D0.DAY_DT AS EXPIRATION_DATE, D0.DAY_DT AS EXP_DAY_DT, D0.BUSINESS_DAY_FLAG AS EXP_BUSINESS_DAY_FLAG, D0.CAL_DAY_OF_MO_NBR AS EXP_CAL_DAY_OF_MO_NBR, D0.CAL_DAY_OF_YR_NBR AS EXP_CAL_DAY_OF_YR_NBR, D0.CAL_HALF AS EXP_CAL_HALF, D0.CAL_MO AS EXP_CAL_MO, D0.CAL_MO_NAME AS EXP_CAL_MO_NAME, D0.CAL_MO_NAME_ABBR AS EXP_CAL_MO_NAME_ABBR, D0.CAL_MO_NBR AS EXP_CAL_MO_NBR, D0.CAL_QTR AS EXP_CAL_QTR, D0.CAL_QTR_NBR AS EXP_CAL_QTR_NBR, D0.CAL_WK AS EXP_CAL_WK, D0.CAL_YR AS EXP_CAL_YR, D0.DAY_OF_WK_NAME AS EXP_DAY_OF_WK_NAME, D0.DAY_OF_WK_NAME_ABBR AS EXP_DAY_OF_WK_NAME_ABBR, D0.DAY_OF_WK_NBR AS EXP_DAY_OF_WK_NBR, D0.FISCAL_DAY_OF_MO_NBR AS EXP_FISCAL_DAY_OF_MO_NBR, D0.FISCAL_DAY_OF_YR_NBR AS EXP_FISCAL_DAY_OF_YR_NBR, D0.FISCAL_HALF AS EXP_FISCAL_HALF, D0.FISCAL_MO_NAME AS EXP_FISCAL_MO_NAME, D0.FISCAL_MO_NAME_ABBR AS EXP_FISCAL_MO_NAME_ABBR, D0.FISCAL_MO_NBR AS EXP_FISCAL_MO_NBR, D0.FISCAL_QTR AS EXP_FISCAL_QTR, D0.FISCAL_QTR_NBR AS EXP_FISCAL_QTR_NBR, D0.FISCAL_WK AS EXP_FISCAL_WK, D0.HOLIDAY_FLAG AS EXP_HOLIDAY_FLAG, D0.LWK_WEEK_DT AS EXP_LWK_WEEK_DT, D0.WEEK_DT AS EXP_WEEK_DT, M0.FISCAL_MO_DT AS EXP_FISCAL_MO_DT, M0.FISCAL_QTR_DT AS EXP_FISCAL_QTR_DT, M0.FISCAL_YR_DT AS EXP_FISCAL_YR_DT FROM ADMIN.DAYS D0, ADMIN.MONTH_DATE_VIEW M0 WHERE (M0.FISCAL_MO = D0.FISCAL_MO);

\echo
\echo *****  Creating view:  "LAST_CHNG_DT_VIEW"

CREATE or replace VIEW  "LAST_CHNG_DT_VIEW"
(
     LAST_CHNG_DT,
     LCHNG_DAY_DT,
     LCHNG_BUSINESS_DAY_FLAG,
     LCHNG_CAL_DAY_OF_MO_NBR,
     LCHNG_CAL_DAY_OF_YR_NBR,
     LCHNG_CAL_HALF,
     LCHNG_CAL_MO,
     LCHNG_CAL_MO_NAME,
     LCHNG_CAL_MO_NAME_ABBR,
     LCHNG_CAL_MO_NBR,
     LCHNG_CAL_QTR,
     LCHNG_CAL_QTR_NBR,
     LCHNG_CAL_WK,
     LCHNG_CAL_YR,
     LCHNG_DAY_OF_WK_NAME,
     LCHNG_DAY_OF_WK_NAME_ABBR,
     LCHNG_DAY_OF_WK_NBR,
     LCHNG_FISCAL_DAY_OF_MO_NBR,
     LCHNG_FISCAL_DAY_OF_YR_NBR,
     LCHNG_FISCAL_HALF,
     LCHNG_FISCAL_MO_NAME,
     LCHNG_FISCAL_MO_NAME_ABBR,
     LCHNG_FISCAL_MO_NBR,
     LCHNG_FISCAL_QTR,
     LCHNG_FISCAL_QTR_NBR,
     LCHNG_FISCAL_WK,
     LCHNG_HOLIDAY_FLAG,
     LCHNG_LWK_WEEK_DT,
     LCHNG_WEEK_DT,
     LCHNG_FISCAL_MO_DT,
     LCHNG_FISCAL_QTR_DT,
     LCHNG_FISCAL_YR_DT
) AS
SELECT D0.DAY_DT AS LAST_CHNG_DT, D0.DAY_DT AS LCHNG_DAY_DT, D0.BUSINESS_DAY_FLAG AS LCHNG_BUSINESS_DAY_FLAG, D0.CAL_DAY_OF_MO_NBR AS LCHNG_CAL_DAY_OF_MO_NBR, D0.CAL_DAY_OF_YR_NBR AS LCHNG_CAL_DAY_OF_YR_NBR, D0.CAL_HALF AS LCHNG_CAL_HALF, D0.CAL_MO AS LCHNG_CAL_MO, D0.CAL_MO_NAME AS LCHNG_CAL_MO_NAME, D0.CAL_MO_NAME_ABBR AS LCHNG_CAL_MO_NAME_ABBR, D0.CAL_MO_NBR AS LCHNG_CAL_MO_NBR, D0.CAL_QTR AS LCHNG_CAL_QTR, D0.CAL_QTR_NBR AS LCHNG_CAL_QTR_NBR, D0.CAL_WK AS LCHNG_CAL_WK, D0.CAL_YR AS LCHNG_CAL_YR, D0.DAY_OF_WK_NAME AS LCHNG_DAY_OF_WK_NAME, D0.DAY_OF_WK_NAME_ABBR AS LCHNG_DAY_OF_WK_NAME_ABBR, D0.DAY_OF_WK_NBR AS LCHNG_DAY_OF_WK_NBR, D0.FISCAL_DAY_OF_MO_NBR AS LCHNG_FISCAL_DAY_OF_MO_NBR, D0.FISCAL_DAY_OF_YR_NBR AS LCHNG_FISCAL_DAY_OF_YR_NBR, D0.FISCAL_HALF AS LCHNG_FISCAL_HALF, D0.FISCAL_MO_NAME AS LCHNG_FISCAL_MO_NAME, D0.FISCAL_MO_NAME_ABBR AS LCHNG_FISCAL_MO_NAME_ABBR, D0.FISCAL_MO_NBR AS LCHNG_FISCAL_MO_NBR, D0.FISCAL_QTR AS LCHNG_FISCAL_QTR, D0.FISCAL_QTR_NBR AS LCHNG_FISCAL_QTR_NBR, D0.FISCAL_WK AS LCHNG_FISCAL_WK, D0.HOLIDAY_FLAG AS LCHNG_HOLIDAY_FLAG, D0.LWK_WEEK_DT AS LCHNG_LWK_WEEK_DT, D0.WEEK_DT AS LCHNG_WEEK_DT, M0.FISCAL_MO_DT AS LCHNG_FISCAL_MO_DT, M0.FISCAL_QTR_DT AS LCHNG_FISCAL_QTR_DT, M0.FISCAL_YR_DT AS LCHNG_FISCAL_YR_DT FROM ADMIN.DAYS D0, ADMIN.MONTH_DATE_VIEW M0 WHERE (M0.FISCAL_MO = D0.FISCAL_MO);

\echo
\echo *****  Creating view:  "STORE_AREA_PRE_NORMAL_VIEW"

CREATE or replace VIEW  "STORE_AREA_PRE_NORMAL_VIEW"
(
     STORE_NBR,
     AREA_ID,
     LOC_AREA_EFF_DT,
     SQ_FT_AMT
) AS
((((((((SELECT STORE_AREA_PRE.STORE_NBR, 1 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_1_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 2 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_2_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 3 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_3_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 4 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_4_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 5 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_5_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 6 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_6_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 7 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_7_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 8 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_8_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE)) UNION (SELECT STORE_AREA_PRE.STORE_NBR, 9 AS AREA_ID, STORE_AREA_PRE.LOC_AREA_EFF_DT, STORE_AREA_PRE.AREA_9_SQ_FT_AMT AS SQ_FT_AMT FROM ADMIN.STORE_AREA_PRE);

\echo
\echo *****  Creating view:  "SITE_PROFILE_MV"

CREATE or replace VIEW  "SITE_PROFILE_MV"
(
     LOCATION_ID,
     DISTRICT_ID,
     SITE_LOGIN_ID
) AS
SELECT SITE_PROFILE.LOCATION_ID, SITE_PROFILE.DISTRICT_ID, SITE_PROFILE.SITE_LOGIN_ID FROM ADMIN.SITE_PROFILE;

\echo
\echo *****  Creating view:  "TEST_EM_INV_INSTOCK_PRICE_WK_VW"

CREATE or replace VIEW  "TEST_EM_INV_INSTOCK_PRICE_WK_VW"
(
     EM_EVENT_ID,
     WEEK_DT,
     PRODUCT_ID,
     LOCATION_ID,
     COUNTRY_CD,
     FROM_LOCATION_ID,
     SOURCE_VENDOR_ID,
     SKU_STATUS_ID,
     STORE_OPEN_IND,
     OUT_OF_STOCK_CNT,
     POG_LISTED_IND,
     SAP_LISTED_IND,
     INLINE_CNT,
     PLANNER_IND,
     SUBS_IND,
     OOS_7_DAY_IND_AVG,
     OOS_MON_IND,
     OOS_TUE_IND,
     OOS_WED_IND,
     OOS_THU_IND,
     OOS_FRI_IND,
     OOS_SAT_IND,
     OOS_SUN_IND,
     INLINE_7_DAY_IND_AVG,
     MAP_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY,
     COMMITTED_QTY,
     XFER_IN_TRANS_QTY,
     ON_ORDER_QTY,
     SUM_COST_AMT,
     BUM_COST_AMT,
     ON_ORDER_CD,
     RETAIL_PRICE_AMT,
     SKU_FACINGS_QTY,
     SKU_CAPACITY_QTY,
     PETPERKS_AMT,
     PETPERKS_IND,
     LOCAL_PRICE_AMT,
     LOC_PETPERKS_PRICE_AMT,
     LOAD_DT
) AS
SELECT E.EM_EVENT_ID, IIPW.WEEK_DT, IIPW.PRODUCT_ID, IIPW.LOCATION_ID, ES.COUNTRY_CD, IIPW.FROM_LOCATION_ID, IIPW.SOURCE_VENDOR_ID, IIPW.SKU_STATUS_ID, IIPW.STORE_OPEN_IND, IIPW.OUT_OF_STOCK_CNT, IIPW.POG_LISTED_IND, IIPW.SAP_LISTED_IND, IIPW.INLINE_CNT, IIPW.PLANNER_IND, IIPW.SUBS_IND, IIPW.OOS_7_DAY_IND_AVG, IIPW.OOS_MON_IND, IIPW.OOS_TUE_IND, IIPW.OOS_WED_IND, IIPW.OOS_THU_IND, IIPW.OOS_FRI_IND, IIPW.OOS_SAT_IND, IIPW.OOS_SUN_IND, IIPW.INLINE_7_DAY_IND_AVG, IIPW.MAP_AMT, IIPW.EXCH_RATE_PCT, IIPW.ON_HAND_QTY, IIPW.COMMITTED_QTY, IIPW.XFER_IN_TRANS_QTY, IIPW.ON_ORDER_QTY, IIPW.SUM_COST_AMT, IIPW.BUM_COST_AMT, IIPW.ON_ORDER_CD, IIPW.RETAIL_PRICE_AMT, IIPW.SKU_FACINGS_QTY, IIPW.SKU_CAPACITY_QTY, IIPW.PETPERKS_AMT, IIPW.PETPERKS_IND, IIPW.LOCAL_PRICE_AMT, IIPW.LOC_PETPERKS_PRICE_AMT, IIPW.LOAD_DT FROM ADMIN.INV_INSTOCK_PRICE_WK IIPW, ADMIN.EM_EVENT E, ADMIN.EM_EVENT_SKU ES, ADMIN.SITE_PROFILE SP WHERE (((((E.EM_EVENT_ID = ES.EM_EVENT_ID) AND (IIPW.PRODUCT_ID = ES.PRODUCT_ID)) AND ((IIPW.WEEK_DT >= E.EVENT_START_DT) AND (IIPW.WEEK_DT <= E.EVENT_END_DT))) AND (IIPW.LOCATION_ID = SP.LOCATION_ID)) AND (ES.COUNTRY_CD = SP.COUNTRY_CD));

\echo
\echo *****  Creating view:  "TEST_EM_INV_INSTOCK_PRICE_DAY_VW"

CREATE or replace VIEW  "TEST_EM_INV_INSTOCK_PRICE_DAY_VW"
(
     EM_EVENT_ID,
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     COUNTRY_CD,
     FROM_LOCATION_ID,
     SOURCE_VENDOR_ID,
     SKU_STATUS_ID,
     STORE_OPEN_IND,
     OUT_OF_STOCK_CNT,
     POG_LISTED_IND,
     SAP_LISTED_IND,
     INLINE_CNT,
     PLANNER_IND,
     SUBS_IND,
     MAP_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY,
     COMMITTED_QTY,
     XFER_IN_TRANS_QTY,
     ON_ORDER_QTY,
     SUM_COST_AMT,
     BUM_COST_AMT,
     ON_ORDER_CD,
     RETAIL_PRICE_AMT,
     SKU_FACINGS_QTY,
     SKU_CAPACITY_QTY,
     PETPERKS_AMT,
     PETPERKS_IND,
     LOCAL_PRICE_AMT,
     LOC_PETPERKS_PRICE_AMT,
     LOAD_DT
) AS
SELECT E.EM_EVENT_ID, IIPD.DAY_DT, IIPD.PRODUCT_ID, IIPD.LOCATION_ID, ES.COUNTRY_CD, IIPD.FROM_LOCATION_ID, IIPD.SOURCE_VENDOR_ID, IIPD.SKU_STATUS_ID, IIPD.STORE_OPEN_IND, IIPD.OUT_OF_STOCK_CNT, IIPD.POG_LISTED_IND, IIPD.SAP_LISTED_IND, IIPD.INLINE_CNT, IIPD.PLANNER_IND, IIPD.SUBS_IND, IIPD.MAP_AMT, IIPD.EXCH_RATE_PCT, IIPD.ON_HAND_QTY, IIPD.COMMITTED_QTY, IIPD.XFER_IN_TRANS_QTY, IIPD.ON_ORDER_QTY, IIPD.SUM_COST_AMT, IIPD.BUM_COST_AMT, IIPD.ON_ORDER_CD, IIPD.RETAIL_PRICE_AMT, IIPD.SKU_FACINGS_QTY, IIPD.SKU_CAPACITY_QTY, IIPD.PETPERKS_AMT, IIPD.PETPERKS_IND, IIPD.LOCAL_PRICE_AMT, IIPD.LOC_PETPERKS_PRICE_AMT, IIPD.LOAD_DT FROM ADMIN.INV_INSTOCK_PRICE_DAY IIPD, ADMIN.EM_EVENT E, ADMIN.EM_EVENT_SKU ES, ADMIN.SITE_PROFILE SP WHERE (((((E.EM_EVENT_ID = ES.EM_EVENT_ID) AND (IIPD.PRODUCT_ID = ES.PRODUCT_ID)) AND ((IIPD.DAY_DT >= E.EVENT_START_DT) AND (IIPD.DAY_DT <= E.EVENT_END_DT))) AND (IIPD.LOCATION_ID = SP.LOCATION_ID)) AND (ES.COUNTRY_CD = SP.COUNTRY_CD));

\echo
\echo *****  Creating view:  "EM_INV_INSTOCK_PRICE_DAY_VW"

CREATE or replace VIEW  EM_INV_INSTOCK_PRICE_DAY_VW
(
     EM_EVENT_ID,
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     COUNTRY_CD,
     FROM_LOCATION_ID,
     SOURCE_VENDOR_ID,
     SKU_STATUS_ID,
     STORE_OPEN_IND,
     OUT_OF_STOCK_CNT,
     POG_LISTED_IND,
     SAP_LISTED_IND,
     INLINE_CNT,
     PLANNER_IND,
     SUBS_IND,
     MAP_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY,
     COMMITTED_QTY,
     XFER_IN_TRANS_QTY,
     ON_ORDER_QTY,
     SUM_COST_AMT,
     BUM_COST_AMT,
     ON_ORDER_CD,
     RETAIL_PRICE_AMT,
     SKU_FACINGS_QTY,
     SKU_CAPACITY_QTY,
     PETPERKS_AMT,
     PETPERKS_IND,
     LOCAL_PRICE_AMT,
     LOC_PETPERKS_PRICE_AMT,
     LOAD_DT
) AS
SELECT E.EM_EVENT_ID, IIPD.DAY_DT, IIPD.PRODUCT_ID, IIPD.LOCATION_ID, ES.COUNTRY_CD, IIPD.FROM_LOCATION_ID, IIPD.SOURCE_VENDOR_ID, IIPD.SKU_STATUS_ID, IIPD.STORE_OPEN_IND, IIPD.OUT_OF_STOCK_CNT, IIPD.POG_LISTED_IND, IIPD.SAP_LISTED_IND, IIPD.INLINE_CNT, IIPD.PLANNER_IND, IIPD.SUBS_IND, IIPD.MAP_AMT, IIPD.EXCH_RATE_PCT, IIPD.ON_HAND_QTY, IIPD.COMMITTED_QTY, IIPD.XFER_IN_TRANS_QTY, IIPD.ON_ORDER_QTY, IIPD.SUM_COST_AMT, IIPD.BUM_COST_AMT, IIPD.ON_ORDER_CD, IIPD.RETAIL_PRICE_AMT, IIPD.SKU_FACINGS_QTY, IIPD.SKU_CAPACITY_QTY, IIPD.PETPERKS_AMT, IIPD.PETPERKS_IND, IIPD.LOCAL_PRICE_AMT, IIPD.LOC_PETPERKS_PRICE_AMT, IIPD.LOAD_DT FROM ADMIN.INV_INSTOCK_PRICE_DAY IIPD, ADMIN.EM_EVENT E, ADMIN.EM_EVENT_SKU ES, ADMIN.SITE_PROFILE SP WHERE (((((E.EM_EVENT_ID = ES.EM_EVENT_ID) AND (IIPD.PRODUCT_ID = ES.PRODUCT_ID)) AND ((IIPD.DAY_DT >= E.EVENT_START_DT) AND (IIPD.DAY_DT <= E.EVENT_END_DT))) AND (IIPD.LOCATION_ID = SP.LOCATION_ID)) AND (ES.COUNTRY_CD = SP.COUNTRY_CD));

\echo
\echo *****  Creating view:  "EM_MA_SALES_TRANS_UPC_VW"

CREATE or replace VIEW  EM_MA_SALES_TRANS_UPC_VW
(
     EM_EVENT_ID,
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     MA_EVENT_ID,
     PRODUCT_ID,
     MA_SALES_AMT,
     MA_SALES_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT,
     COUNTRY_CD
) AS
SELECT E.EM_EVENT_ID, MSTU.DAY_DT, MSTU.LOCATION_ID, MSTU.SALES_INSTANCE_ID, MSTU.UPC_ID, MSTU.TP_INVOICE_NBR, MSTU.PARENT_UPC_ID, MSTU.COMBO_TYPE_CD, MSTU.POS_TXN_SEQ_NBR, MSTU.MA_EVENT_ID, MSTU.PRODUCT_ID, MSTU.MA_SALES_AMT, MSTU.MA_SALES_QTY, MSTU.EXCH_RATE_PCT, MSTU.UPDATE_DT, MSTU.LOAD_DT, ES.COUNTRY_CD FROM ADMIN.MA_SALES_TRANS_UPC MSTU, ADMIN.EM_EVENT E, ADMIN.EM_EVENT_SKU ES, ADMIN.SITE_PROFILE SP WHERE (((((E.EM_EVENT_ID = ES.EM_EVENT_ID) AND (MSTU.PRODUCT_ID = ES.PRODUCT_ID)) AND ((MSTU.DAY_DT >= E.EVENT_START_DT) AND (MSTU.DAY_DT <= E.EVENT_END_DT))) AND (MSTU.LOCATION_ID = SP.LOCATION_ID)) AND (ES.COUNTRY_CD = SP.COUNTRY_CD));

\echo
\echo *****  Creating view:  "EM_SALES_TRANS_UPC_VW"

CREATE or replace VIEW  EM_SALES_TRANS_UPC_VW
(
     EM_EVENT_ID,
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     VOID_TYPE_CD,
     TRANS_TSTMP,
     SALES_TYPE_ID,
     PRODUCT_ID,
     CUST_TRANS_ID,
     KEYED_FLAG,
     UPC_ADD_FLAG,
     NON_TAX_FLAG,
     SPECIAL_SALES_FLAG,
     DROP_SHIP_FLAG,
     REASON_ID,
     CASHIER_NBR,
     UNIT_PRICE_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     EXCH_RATE_PCT,
     DATE_LOADED,
     COUNTRY_CD
) AS
SELECT E.EM_EVENT_ID, STU.DAY_DT, STU.LOCATION_ID, STU.SALES_INSTANCE_ID, STU.UPC_ID, STU.TP_INVOICE_NBR, STU.PARENT_UPC_ID, STU.COMBO_TYPE_CD, STU.POS_TXN_SEQ_NBR, STU.VOID_TYPE_CD, STU.TRANS_TSTMP, STU.SALES_TYPE_ID, STU.PRODUCT_ID, STU.CUST_TRANS_ID, STU.KEYED_FLAG, STU.UPC_ADD_FLAG, STU.NON_TAX_FLAG, STU.SPECIAL_SALES_FLAG, STU.DROP_SHIP_FLAG, STU.REASON_ID, STU.CASHIER_NBR, STU.UNIT_PRICE_AMT, STU.SALES_AMT, STU.SALES_COST, STU.SALES_QTY, STU.RETURN_AMT, STU.RETURN_COST, STU.RETURN_QTY, STU.CLEARANCE_AMT, STU.CLEARANCE_QTY, STU.CLEARANCE_RETURN_AMT, STU.CLEARANCE_RETURN_QTY, STU.SPECIAL_SRVC_AMT, STU.EXCH_RATE_PCT, STU.DATE_LOADED, ES.COUNTRY_CD FROM (((ADMIN.SALES_TRANS_UPC STU JOIN ADMIN.EM_EVENT E ON (((STU.DAY_DT >= E.EVENT_START_DT) AND (STU.DAY_DT <= E.EVENT_END_DT)))) JOIN ADMIN.EM_EVENT_SKU ES ON (((E.EM_EVENT_ID = ES.EM_EVENT_ID) AND (STU.PRODUCT_ID = ES.PRODUCT_ID)))) JOIN ADMIN.SITE_PROFILE SP ON (((STU.LOCATION_ID = SP.LOCATION_ID) AND (ES.COUNTRY_CD = SP.COUNTRY_CD))));

\echo
\echo *****  Creating view:  "EM_EVENT_DISP_LOC_NO_SKU_VW"

CREATE or replace VIEW  EM_EVENT_DISP_LOC_NO_SKU_VW
(
     EM_EVENT_ID,
     POG_ID,
     EVENT_NAME,
     COUNTRY_CD,
     EM_DISP_LOC_NAME,
     VERSION,
     POG_NBR,
     FIXTURE_TYPE,
     FIXTURE_DESC,
     STORE_CNT
) AS
SELECT E.EM_EVENT_ID, PP.POG_ID, E.EVENT_NAME, S.COUNTRY_CD, DL.EM_DISP_LOC_NAME, DL."VERSION", PP.POG_NBR, PP.FIXTURE_TYPE, PF.FIXTURE_DESC, COUNT(DISTINCT SDL.EM_STORE_ID) AS STORE_CNT FROM (((((ADMIN.EM_STORE_DISP_LOC SDL JOIN ADMIN.EM_STORE S ON (((SDL.EM_STORE_ID = S.EM_STORE_ID) AND (SDL.LOCATION_ID = S.LOCATION_ID)))) JOIN ADMIN.EM_EVENT E ON (((((SDL.START_DT <= E.EVENT_START_DT) AND (SDL.END_DT >= E.EVENT_START_DT)) AND (S.EFFECTIVE_START_DT <= E.EVENT_START_DT)) AND (S.EFFECTIVE_END_DT > E.EVENT_START_DT)))) JOIN ADMIN.EM_DISP_LOC DL ON ((SDL.EM_DISP_LOC_ID = DL.EM_DISP_LOC_ID))) LEFT JOIN ADMIN.PLANOGRAM_PRO PP ON (((((DL.EM_DISP_LOC_NAME || DL."VERSION") || SUBSTR(S.COUNTRY_CD, 1, 1)) || E.POG_ID_SUFFIX) = (PP.POG_NBR)::"VARCHAR"))) LEFT JOIN ADMIN.POG_FIXTURE PF ON ((PP.FIXTURE_TYPE = PF.FIXTURE_TYPE))) WHERE ((E.EM_EVENT_ID, SDL.EM_DISP_LOC_ID) <> ALL (SELECT DISTINCT EM_SKU_DISP_LOC.EM_EVENT_ID, EM_SKU_DISP_LOC.EM_DISP_LOC_ID FROM ADMIN.EM_SKU_DISP_LOC)) GROUP BY E.EM_EVENT_ID, E.EVENT_NAME, S.COUNTRY_CD, PP.POG_ID, DL.EM_DISP_LOC_NAME, DL."VERSION", PP.POG_NBR, PP.FIXTURE_TYPE, PF.FIXTURE_DESC;

\echo
\echo *****  Creating view:  "SKU_PROFILE_DAY_VW"

CREATE or replace VIEW  SKU_PROFILE_DAY_VW
(
     DAY_DT,
     PRODUCT_ID,
     STATUS_ID,
     STATUS_ID_IND,
     BRAND_CD,
     BRAND_CD_IND,
     OWNBRAND_FLAG,
     OWNBRAND_FLAG_IND,
     BRAND_CLASSIFICATION_ID,
     BRAND_CLASSIFICATION_ID_IND
) AS
SELECT D.DAY_DT, SPH.PRODUCT_ID, SPH.STATUS_ID, CASE WHEN (D.DAY_DT = SPH.REC_START_DT) THEN INT4(SPH.STATUS_ID_IND) ELSE 0 END AS STATUS_ID_IND, SPH.BRAND_CD, CASE WHEN (D.DAY_DT = SPH.REC_START_DT) THEN INT4(SPH.BRAND_CD_IND) ELSE 0 END AS BRAND_CD_IND, SPH.OWNBRAND_FLAG, CASE WHEN (D.DAY_DT = SPH.REC_START_DT) THEN INT4(SPH.OWNBRAND_FLAG_IND) ELSE 0 END AS OWNBRAND_FLAG_IND, SPH.BRAND_CLASSIFICATION_ID, CASE WHEN (D.DAY_DT = SPH.REC_START_DT) THEN INT4(SPH.BRAND_CLASSIFICATION_ID_IND) ELSE 0 END AS BRAND_CLASSIFICATION_ID_IND FROM ADMIN.DAYS D, ADMIN.SKU_PROFILE_HIST SPH WHERE ((D.DAY_DT >= SPH.REC_START_DT) AND (D.DAY_DT < SPH.REC_END_DT));

\echo
\echo *****  Creating view:  "SALES_DAY_STORE_RPT_VW"

CREATE or replace VIEW  SALES_DAY_STORE_RPT_VW
(
     DAY_DT,
     LOCATION_ID,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     STORE_NBR,
     COMP_FLAG,
     TXN_CNT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, SDSR.LOCATION_ID, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, SDSR.STORE_NBR, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SPR.COMP_EFF_DT)) AND (DTL.DAY_DT <= SPR.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, SDSR.TXN_CNT, SDSR.NET_SALES_AMT, SDSR.NET_SALES_QTY, SDSR.NET_MARGIN_AMT, SDSR.SALES_AMT, SDSR.SALES_COST, SDSR.SALES_QTY, SDSR.RETURN_AMT, SDSR.RETURN_COST, SDSR.RETURN_QTY, SDSR.CLEARANCE_AMT, SDSR.CLEARANCE_QTY, SDSR.CLEARANCE_RETURN_AMT, SDSR.CLEARANCE_RETURN_QTY, SDSR.DISCOUNT_AMT, SDSR.DISCOUNT_QTY, SDSR.DISCOUNT_RETURN_AMT, SDSR.DISCOUNT_RETURN_QTY, SDSR.POS_COUPON_AMT, SDSR.POS_COUPON_QTY, SDSR.POS_COUPON_ALLOC_AMT, SDSR.POS_COUPON_ALLOC_QTY, SDSR.SPECIAL_SALES_AMT, SDSR.SPECIAL_SALES_QTY, SDSR.SPECIAL_RETURN_AMT, SDSR.SPECIAL_RETURN_QTY, SDSR.SPECIAL_SRVC_AMT, SDSR.SPECIAL_SRVC_QTY, SDSR.MA_SALES_AMT, SDSR.MA_SALES_QTY, SDSR.MA_TRANS_AMT, SDSR.MA_TRANS_COST, SDSR.MA_TRANS_QTY, SDSR.EXCH_RATE_PCT, SDSR.UPDATE_DT, SDSR.LOAD_DT FROM ((ADMIN.SALES_DAY_STORE_RPT SDSR JOIN ADMIN.DAYS_TY_LY DTL ON ((SDSR.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SDSR.LOCATION_ID = SPR.LOCATION_ID)));

\echo
\echo *****  Creating view:  "SALES_DAY_SKU_STORE_RPT_VW"

CREATE or replace VIEW  SALES_DAY_SKU_STORE_RPT_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     SALES_CUST_CAPTURE_CD,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     SKU_NBR,
     STORE_NBR,
     VENDOR_ID,
     PROMO_FLAG,
     STATUS_ID,
     BRAND_NAME,
     OWNBRAND_FLAG,
     COMP_FLAG,
     SKU_VEND_TXN_CNT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, SDSSR.PRODUCT_ID, SDSSR.LOCATION_ID, SDSSR.SALES_CUST_CAPTURE_CD, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, SDSSR.SKU_NBR, SDSSR.STORE_NBR, SDSSR.VENDOR_ID, SDSSR.PROMO_FLAG, SDSSR.STATUS_ID, SDSSR.BRAND_NAME, SDSSR.OWNBRAND_FLAG, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SPR.COMP_EFF_DT)) AND (DTL.DAY_DT <= SPR.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, SDSSR.SKU_VEND_TXN_CNT, SDSSR.NET_SALES_AMT, SDSSR.NET_SALES_QTY, SDSSR.NET_MARGIN_AMT, SDSSR.SALES_AMT, SDSSR.SALES_COST, SDSSR.SALES_QTY, SDSSR.RETURN_AMT, SDSSR.RETURN_COST, SDSSR.RETURN_QTY, SDSSR.CLEARANCE_AMT, SDSSR.CLEARANCE_QTY, SDSSR.CLEARANCE_RETURN_AMT, SDSSR.CLEARANCE_RETURN_QTY, SDSSR.DISCOUNT_AMT, SDSSR.DISCOUNT_QTY, SDSSR.DISCOUNT_RETURN_AMT, SDSSR.DISCOUNT_RETURN_QTY, SDSSR.POS_COUPON_AMT, SDSSR.POS_COUPON_QTY, SDSSR.POS_COUPON_ALLOC_AMT, SDSSR.POS_COUPON_ALLOC_QTY, SDSSR.SPECIAL_SALES_AMT, SDSSR.SPECIAL_SALES_QTY, SDSSR.SPECIAL_RETURN_AMT, SDSSR.SPECIAL_RETURN_QTY, SDSSR.SPECIAL_SRVC_AMT, SDSSR.SPECIAL_SRVC_QTY, SDSSR.MA_SALES_AMT, SDSSR.MA_SALES_QTY, SDSSR.MA_TRANS_AMT, SDSSR.MA_TRANS_COST, SDSSR.MA_TRANS_QTY, SDSSR.EXCH_RATE_PCT, SDSSR.UPDATE_DT, SDSSR.LOAD_DT FROM ((ADMIN.SALES_DAY_SKU_STORE_RPT SDSSR JOIN ADMIN.DAYS_TY_LY DTL ON ((SDSSR.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SDSSR.LOCATION_ID = SPR.LOCATION_ID)));

\echo
\echo *****  Creating view:  "SALES_DAY_STORE_RPT_CRCY_VW"

CREATE or replace VIEW  SALES_DAY_STORE_RPT_CRCY_VW
(
     DAY_DT,
     LOCATION_ID,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     WEEK_DT,
     FISCAL_YR,
     STORE_NBR,
     COMP_FLAG,
     TXN_CNT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, SDSR.LOCATION_ID, DTL.TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, DTL.WEEK_DT, DTL.FISCAL_YR, SDSR.STORE_NBR, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SPR.COMP_EFF_DT)) AND (DTL.DAY_DT <= SPR.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, SDSR.TXN_CNT, SDSR.NET_SALES_AMT, SDSR.NET_SALES_QTY, SDSR.NET_MARGIN_AMT, SDSR.SALES_AMT, SDSR.SALES_COST, SDSR.SALES_QTY, SDSR.RETURN_AMT, SDSR.RETURN_COST, SDSR.RETURN_QTY, SDSR.CLEARANCE_AMT, SDSR.CLEARANCE_QTY, SDSR.CLEARANCE_RETURN_AMT, SDSR.CLEARANCE_RETURN_QTY, SDSR.DISCOUNT_AMT, SDSR.DISCOUNT_QTY, SDSR.DISCOUNT_RETURN_AMT, SDSR.DISCOUNT_RETURN_QTY, SDSR.POS_COUPON_AMT, SDSR.POS_COUPON_QTY, SDSR.POS_COUPON_ALLOC_AMT, SDSR.POS_COUPON_ALLOC_QTY, SDSR.SPECIAL_SALES_AMT, SDSR.SPECIAL_SALES_QTY, SDSR.SPECIAL_RETURN_AMT, SDSR.SPECIAL_RETURN_QTY, SDSR.SPECIAL_SRVC_AMT, SDSR.SPECIAL_SRVC_QTY, SDSR.MA_SALES_AMT, SDSR.MA_SALES_QTY, SDSR.MA_TRANS_AMT, SDSR.MA_TRANS_COST, SDSR.MA_TRANS_QTY, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SDSR.EXCH_RATE_PCT END AS EXCH_RATE_PCT, SDSR.UPDATE_DT, SDSR.LOAD_DT FROM (((ADMIN.SALES_DAY_STORE_RPT SDSR JOIN ADMIN.DAYS_TY_LY DTL ON ((SDSR.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SDSR.LOCATION_ID = SPR.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "INV_INSTOCK_PRICE_WK_CRCY_VW"

CREATE or replace VIEW  INV_INSTOCK_PRICE_WK_CRCY_VW
(
     WEEK_DT,
     PRODUCT_ID,
     LOCATION_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     FROM_LOCATION_ID,
     SOURCE_VENDOR_ID,
     SKU_STATUS_ID,
     STORE_OPEN_IND,
     OUT_OF_STOCK_CNT,
     POG_LISTED_IND,
     POG_CALENDAR_ID,
     POG_ITEM_CHANGE_TYPE_CD,
     POG_IMPLEMENT_DT,
     OFF_POG_WEEK_DT,
     INV_STATE_ID,
     MO_TO_PID_ID,
     SAP_LISTED_IND,
     INLINE_CNT,
     PLANNER_IND,
     SUBS_IND,
     OOS_7_DAY_IND_AVG,
     OOS_MON_IND,
     OOS_TUE_IND,
     OOS_WED_IND,
     OOS_THU_IND,
     OOS_FRI_IND,
     OOS_SAT_IND,
     OOS_SUN_IND,
     INLINE_7_DAY_IND_AVG,
     MAP_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY,
     COMMITTED_QTY,
     XFER_IN_TRANS_QTY,
     ON_ORDER_QTY,
     SUM_COST_AMT,
     BUM_COST_AMT,
     ON_ORDER_CD,
     RETAIL_PRICE_AMT,
     SKU_FACINGS_QTY,
     SKU_CAPACITY_QTY,
     PETPERKS_AMT,
     PETPERKS_IND,
     LOCAL_PRICE_AMT,
     LOC_PETPERKS_PRICE_AMT,
     LOAD_DT,
     OOS_7_DAY_AVG,
     POG_7_DAY_AVG
) AS
SELECT IIPW.WEEK_DT, IIPW.PRODUCT_ID, IIPW.LOCATION_ID, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, IIPW.FROM_LOCATION_ID, IIPW.SOURCE_VENDOR_ID, IIPW.SKU_STATUS_ID, IIPW.STORE_OPEN_IND, IIPW.OUT_OF_STOCK_CNT, IIPW.POG_LISTED_IND, IIPW.POG_CALENDAR_ID, IIPW.POG_ITEM_CHANGE_TYPE_CD, IIPW.POG_IMPLEMENT_DT, IIPW.OFF_POG_WEEK_DT, IIPW.INV_STATE_ID, IIPW.MO_TO_PID_ID, IIPW.SAP_LISTED_IND, IIPW.INLINE_CNT, IIPW.PLANNER_IND, IIPW.SUBS_IND, IIPW.OOS_7_DAY_IND_AVG, IIPW.OOS_MON_IND, IIPW.OOS_TUE_IND, IIPW.OOS_WED_IND, IIPW.OOS_THU_IND, IIPW.OOS_FRI_IND, IIPW.OOS_SAT_IND, IIPW.OOS_SUN_IND, IIPW.INLINE_7_DAY_IND_AVG, IIPW.MAP_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE IIPW.EXCH_RATE_PCT END AS EXCH_RATE_PCT, IIPW.ON_HAND_QTY, IIPW.COMMITTED_QTY, IIPW.XFER_IN_TRANS_QTY, IIPW.ON_ORDER_QTY, IIPW.SUM_COST_AMT, IIPW.BUM_COST_AMT, IIPW.ON_ORDER_CD, IIPW.RETAIL_PRICE_AMT, IIPW.SKU_FACINGS_QTY, IIPW.SKU_CAPACITY_QTY, IIPW.PETPERKS_AMT, IIPW.PETPERKS_IND, IIPW.LOCAL_PRICE_AMT, IIPW.LOC_PETPERKS_PRICE_AMT, IIPW.LOAD_DT, IIPW.OOS_7_DAY_AVG, IIPW.POG_7_DAY_AVG FROM (ADMIN.INV_INSTOCK_PRICE_WK IIPW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SALES_DAY_SKU_STORE_RPT_CRCY_VW"

CREATE or replace VIEW  SALES_DAY_SKU_STORE_RPT_CRCY_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     SALES_CUST_CAPTURE_CD,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     WEEK_DT,
     FISCAL_YR,
     SKU_NBR,
     STORE_NBR,
     VENDOR_ID,
     PROMO_FLAG,
     STATUS_ID,
     BRAND_NAME,
     OWNBRAND_FLAG,
     COMP_FLAG,
     SKU_VEND_TXN_CNT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, SDSSR.PRODUCT_ID, SDSSR.LOCATION_ID, SDSSR.SALES_CUST_CAPTURE_CD, DTL.TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, DTL.WEEK_DT, DTL.FISCAL_YR, SDSSR.SKU_NBR, SDSSR.STORE_NBR, SDSSR.VENDOR_ID, SDSSR.PROMO_FLAG, SDSSR.STATUS_ID, SDSSR.BRAND_NAME, SDSSR.OWNBRAND_FLAG, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SPR.COMP_EFF_DT)) AND (DTL.DAY_DT <= SPR.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, SDSSR.SKU_VEND_TXN_CNT, SDSSR.NET_SALES_AMT, SDSSR.NET_SALES_QTY, SDSSR.NET_MARGIN_AMT, SDSSR.SALES_AMT, SDSSR.SALES_COST, SDSSR.SALES_QTY, SDSSR.RETURN_AMT, SDSSR.RETURN_COST, SDSSR.RETURN_QTY, SDSSR.CLEARANCE_AMT, SDSSR.CLEARANCE_QTY, SDSSR.CLEARANCE_RETURN_AMT, SDSSR.CLEARANCE_RETURN_QTY, SDSSR.DISCOUNT_AMT, SDSSR.DISCOUNT_QTY, SDSSR.DISCOUNT_RETURN_AMT, SDSSR.DISCOUNT_RETURN_QTY, SDSSR.POS_COUPON_AMT, SDSSR.POS_COUPON_QTY, SDSSR.POS_COUPON_ALLOC_AMT, SDSSR.POS_COUPON_ALLOC_QTY, SDSSR.SPECIAL_SALES_AMT, SDSSR.SPECIAL_SALES_QTY, SDSSR.SPECIAL_RETURN_AMT, SDSSR.SPECIAL_RETURN_QTY, SDSSR.SPECIAL_SRVC_AMT, SDSSR.SPECIAL_SRVC_QTY, SDSSR.MA_SALES_AMT, SDSSR.MA_SALES_QTY, SDSSR.MA_TRANS_AMT, SDSSR.MA_TRANS_COST, SDSSR.MA_TRANS_QTY, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SDSSR.EXCH_RATE_PCT END AS EXCH_RATE_PCT, SDSSR.UPDATE_DT, SDSSR.LOAD_DT FROM (((ADMIN.SALES_DAY_SKU_STORE_RPT SDSSR JOIN ADMIN.DAYS_TY_LY DTL ON ((SDSSR.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SDSSR.LOCATION_ID = SPR.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "NATIONAL_PRICE_DAY_VW"

CREATE or replace VIEW  NATIONAL_PRICE_DAY_VW
(
     PRODUCT_ID,
     SALES_ORG_CD,
     COND_TYPE_CD,
     DAY_DT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     SKU_NBR,
     COND_EFF_DT,
     COND_END_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_YR,
     COND_RECORD_NBR,
     PROMOTION_CD,
     PRICING_REASON_CD,
     PRICING_REASON_DESC,
     COND_AMT,
     COND_RT_UNIT,
     COND_PRICE_UNIT,
     COND_UNIT,
     UNIT_NUMERATOR,
     UNIT_DENOMINATOR,
     EXCH_RATE_PCT
) AS
SELECT SKU.PRODUCT_ID, NPD.SALES_ORG_CD, NPD.COND_TYPE_CD, D.DAY_DT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, NPD.SKU_NBR, NPD.COND_EFF_DT, NPD.COND_END_DT, D.WEEK_DT, D.FISCAL_WK, D.FISCAL_YR, NPD.COND_RECORD_NBR, NPD.PROMOTION_CD, NPD.PRICING_REASON_CD, PR.PRICING_REASON_DESC, NPD.COND_AMT, NPD.COND_RT_UNIT, NPD.COND_PRICE_UNIT, NPD.COND_UNIT, NPD.UNIT_NUMERATOR, NPD.UNIT_DENOMINATOR, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE CASE WHEN (NPD.COND_RT_UNIT = 'CAD'::"VARCHAR") THEN CASE WHEN (CD.EXCHANGE_RATE_PCNT NOTNULL) THEN CD.EXCHANGE_RATE_PCNT WHEN (EXR.EXCHANGE_RATE_PCNT NOTNULL) THEN EXR.EXCHANGE_RATE_PCNT ELSE NULL::"NUMERIC" END ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END END AS EXCH_RATE_PCT FROM ((((((ADMIN.NATIONAL_PRICE_DAY NPD JOIN ADMIN.SKU_PROFILE SKU ON ((NPD.SKU_NBR = SKU.SKU_NBR))) JOIN ADMIN.DAYS D ON (((D.DAY_DT >= NPD.COND_EFF_DT) AND (D.DAY_DT <= NPD.COND_END_DT)))) LEFT JOIN ADMIN.CURRENCY_DAY CD ON ((D.DAY_DT = CD.DAY_DT))) LEFT JOIN ADMIN.PRICING_REASON PR ON ((NPD.PRICING_REASON_CD = PR.PRICING_REASON_CD))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) CROSS JOIN (SELECT CURRENCY_DAY.EXCHANGE_RATE_PCNT FROM ADMIN.CURRENCY_DAY WHERE (CURRENCY_DAY.DAY_DT = (SELECT MAX(CURRENCY_DAY.DAY_DT) AS MAX FROM ADMIN.CURRENCY_DAY))) EXR) WHERE (NPD.DELETE_IND <> 'X'::"VARCHAR");

\echo
\echo *****  Creating view:  "SKU_STORE_PRICE_DAY_VW"

CREATE or replace VIEW  SKU_STORE_PRICE_DAY_VW
(
     PRODUCT_ID,
     LOCATION_ID,
     SALES_ORG_CD,
     COND_TYPE_CD,
     DAY_DT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     SKU_NBR,
     STORE_NBR,
     COND_EFF_DT,
     COND_END_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_YR,
     COND_RECORD_NBR,
     PROMOTION_CD,
     PRICING_REASON_CD,
     PRICING_REASON_DESC,
     COND_AMT,
     COND_RT_UNIT,
     COND_PRICE_UNIT,
     COND_UNIT,
     UNIT_NUMERATOR,
     UNIT_DENOMINATOR,
     EXCH_RATE_PCT
) AS
SELECT SKU.PRODUCT_ID, SITE.LOCATION_ID, SSPD.SALES_ORG_CD, SSPD.COND_TYPE_CD, D.DAY_DT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, SSPD.SKU_NBR, SSPD.STORE_NBR, SSPD.COND_EFF_DT, SSPD.COND_END_DT, D.WEEK_DT, D.FISCAL_WK, D.FISCAL_YR, SSPD.COND_RECORD_NBR, SSPD.PROMOTION_CD, SSPD.PRICING_REASON_CD, PR.PRICING_REASON_DESC, SSPD.COND_AMT, SSPD.COND_RT_UNIT, SSPD.COND_PRICE_UNIT, SSPD.COND_UNIT, SSPD.UNIT_NUMERATOR, SSPD.UNIT_DENOMINATOR, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE CASE WHEN (SSPD.COND_RT_UNIT = 'CAD'::"VARCHAR") THEN CASE WHEN (CD.EXCHANGE_RATE_PCNT NOTNULL) THEN CD.EXCHANGE_RATE_PCNT WHEN (EXR.EXCHANGE_RATE_PCNT NOTNULL) THEN EXR.EXCHANGE_RATE_PCNT ELSE NULL::"NUMERIC" END ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END END AS EXCH_RATE_PCT FROM (((((((ADMIN.SKU_STORE_PRICE_DAY SSPD JOIN ADMIN.SKU_PROFILE SKU ON ((SSPD.SKU_NBR = SKU.SKU_NBR))) JOIN ADMIN.SITE_PROFILE SITE ON ((SSPD.STORE_NBR = SITE.STORE_NBR))) JOIN ADMIN.DAYS D ON (((D.DAY_DT >= SSPD.COND_EFF_DT) AND (D.DAY_DT <= SSPD.COND_END_DT)))) LEFT JOIN ADMIN.CURRENCY_DAY CD ON ((D.DAY_DT = CD.DAY_DT))) LEFT JOIN ADMIN.PRICING_REASON PR ON ((SSPD.PRICING_REASON_CD = PR.PRICING_REASON_CD))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) CROSS JOIN (SELECT CURRENCY_DAY.EXCHANGE_RATE_PCNT FROM ADMIN.CURRENCY_DAY WHERE (CURRENCY_DAY.DAY_DT = (SELECT MAX(CURRENCY_DAY.DAY_DT) AS MAX FROM ADMIN.CURRENCY_DAY))) EXR) WHERE (SSPD.DELETE_IND <> 'X'::"VARCHAR");

\echo
\echo *****  Creating view:  "SKU_LIQUIDATE_VW"

CREATE or replace VIEW  SKU_LIQUIDATE_VW
(
     POG_CALENDAR_ID,
     PRODUCT_ID,
     LOCATION_ID,
     SKU_NBR,
     STORE_NBR,
     IMPORT_IND,
     OPTIMIZED_IND,
     GLOBAL_DISCO_IND,
     ICR_IND,
     MD_MODELING_FLAG
) AS
SELECT SLV.POG_CALENDAR_ID, SLV.PRODUCT_ID, SLV.LOCATION_ID, SLV.SKU_NBR, SLV.STORE_NBR, SLV.IMPORT_IND, SLV.OPTIMIZED_IND, SLV.GLOBAL_DISCO_IND, SLV.ICR_IND, CASE WHEN (UMM.MD_MODELING_FLAG NOTNULL) THEN (UMM.MD_MODELING_FLAG)::"VARCHAR" WHEN ('N' NOTNULL) THEN 'N'::"VARCHAR" ELSE NULL::"VARCHAR" END AS MD_MODELING_FLAG FROM ((SELECT CASE WHEN (PICD.POG_CALENDAR_ID NOTNULL) THEN PICD.POG_CALENDAR_ID WHEN (UGD.POG_CALENDAR_ID NOTNULL) THEN UGD.POG_CALENDAR_ID ELSE NULL::INT4 END AS POG_CALENDAR_ID, CASE WHEN (PICD.PRODUCT_ID NOTNULL) THEN PICD.PRODUCT_ID WHEN (UGD.PRODUCT_ID NOTNULL) THEN UGD.PRODUCT_ID ELSE NULL::INT4 END AS PRODUCT_ID, CASE WHEN (PICD.LOCATION_ID NOTNULL) THEN PICD.LOCATION_ID WHEN (UGD.LOCATION_ID NOTNULL) THEN UGD.LOCATION_ID ELSE NULL::INT4 END AS LOCATION_ID, CASE WHEN (PICD.SKU_NBR NOTNULL) THEN PICD.SKU_NBR WHEN (UGD.SKU_NBR NOTNULL) THEN UGD.SKU_NBR ELSE NULL::INT4 END AS SKU_NBR, CASE WHEN (PICD.STORE_NBR NOTNULL) THEN PICD.STORE_NBR WHEN (UGD.STORE_NBR NOTNULL) THEN UGD.STORE_NBR ELSE NULL::INT4 END AS STORE_NBR, CASE WHEN (UGD.IMPORT_IND NOTNULL) THEN INT4(UGD.IMPORT_IND) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS IMPORT_IND, CASE WHEN (UGD.OPTIMIZED_IND NOTNULL) THEN INT4(UGD.OPTIMIZED_IND) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS OPTIMIZED_IND, CASE WHEN (UGD.GLOBAL_DISCO_IND NOTNULL) THEN UGD.GLOBAL_DISCO_IND WHEN (PICD.GLOBAL_DISCO_IND NOTNULL) THEN PICD.GLOBAL_DISCO_IND ELSE NULL::INT4 END AS GLOBAL_DISCO_IND, CASE WHEN (PICD.ICR_IND NOTNULL) THEN PICD.ICR_IND WHEN (UGD.ICR_IND NOTNULL) THEN UGD.ICR_IND ELSE NULL::INT4 END AS ICR_IND FROM ((SELECT PICD.POG_CALENDAR_ID, PICD.PRODUCT_ID, PICD.LOCATION_ID, PICD.SKU_NBR, PICD.STORE_NBR, 1 AS ICR_IND, CASE WHEN (UGD.PRODUCT_ID NOTNULL) THEN 1 ELSE 0 END AS GLOBAL_DISCO_IND FROM (ADMIN.POG_ITEM_CHANGE_DETAIL PICD LEFT JOIN ADMIN.USR_GLOBAL_DISCO UGD ON (((PICD.POG_CALENDAR_ID = UGD.POG_CALENDAR_ID) AND (PICD.PRODUCT_ID = UGD.PRODUCT_ID)))) WHERE (PICD.POG_ITEM_CHANGE_TYPE_CD = 'R'::"VARCHAR")) PICD FULL JOIN (SELECT PC.POG_CALENDAR_ID, UGD.PRODUCT_ID, SPR.LOCATION_ID, UGD.SKU_NBR, SPR.STORE_NBR, UGD.IMPORT_IND, UGD.OPTIMIZED_IND, PC.IS_ICR_PUBLISHED AS ICR_IND, 1 AS GLOBAL_DISCO_IND FROM ((ADMIN.USR_GLOBAL_DISCO UGD JOIN ADMIN.POG_CALENDAR PC ON ((UGD.POG_CALENDAR_ID = PC.POG_CALENDAR_ID))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON (((PC.POG_IMPLEMENT_DT >= SPR.OPEN_DT) AND (PC.POG_IMPLEMENT_DT <= SPR.CLOSE_DT)))) WHERE ((((SPR.FIRST_SALE_DT NOTNULL) AND (SPR.LOCATION_TYPE_ID = 8)) AND (PC.IS_ICR_PUBLISHED = 0)) OR (SPR.LOCATION_TYPE_ID IN (1, 3)))) UGD ON ((((PICD.POG_CALENDAR_ID = UGD.POG_CALENDAR_ID) AND (PICD.PRODUCT_ID = UGD.PRODUCT_ID)) AND (PICD.LOCATION_ID = UGD.LOCATION_ID))))) SLV LEFT JOIN (SELECT DISTINCT USR_MD_MODELING.POG_CALENDAR_ID, USR_MD_MODELING.PRODUCT_ID, 'Y' AS MD_MODELING_FLAG FROM ADMIN.USR_MD_MODELING) UMM ON (((SLV.POG_CALENDAR_ID = UMM.POG_CALENDAR_ID) AND (SLV.PRODUCT_ID = UMM.PRODUCT_ID))));

\echo
\echo *****  Creating view:  "EMPL_36HR_FLAG_VW"

CREATE or replace VIEW  EMPL_36HR_FLAG_VW
(
     WEEK_DT,
     EMPLOYEE_ID,
     LOCATION_ID,
     EMPL_13WK_AVG_HRS_WORKED,
     FLAG,
     LOAD_TSTMP
) AS
(SELECT EMPL_36HR_FLAG_PSOFT.WEEK_DT, EMPL_36HR_FLAG_PSOFT.EMPLOYEE_ID, EMPL_36HR_FLAG_PSOFT.LOCATION_ID, EMPL_36HR_FLAG_PSOFT.EMPL_13WK_AVG_HRS_WORKED, EMPL_36HR_FLAG_PSOFT.FLAG, EMPL_36HR_FLAG_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_36HR_FLAG_PSOFT) UNION (SELECT EMPL_36HR_FLAG.WEEK_DT, EMPL_36HR_FLAG.EMPLOYEE_ID, EMPL_36HR_FLAG.LOCATION_ID, EMPL_36HR_FLAG.EMPL_13WK_AVG_HRS_WORKED, EMPL_36HR_FLAG.FLAG, EMPL_36HR_FLAG.LOAD_TSTMP FROM ADMIN.EMPL_36HR_FLAG);

\echo
\echo *****  Creating view:  "EMPL_ACTION_HIST_VW"

CREATE or replace VIEW  EMPL_ACTION_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_ACTION_EFF_DT,
     EMPL_ACTION_SEQNO,
     FROM_PS_ACTION_CD,
     FROM_PS_ACTION_REASON_CD,
     FROM_PS_ACTION_REASON_DESC,
     TO_PS_ACTION_CD,
     TO_PS_ACTION_REASON_CD,
     TO_PS_ACTION_REASON_DESC,
     ACTION_DT,
     LOAD_TSTMP
) AS
(SELECT A.EMPLOYEE_ID, A.EMPL_ACTION_EFF_DT, A.EMPL_ACTION_SEQNO, A.FROM_PS_ACTION_CD, A.FROM_PS_ACTION_REASON_CD, R1.PS_ACTION_REASON_DESC AS FROM_PS_ACTION_REASON_DESC, A.TO_PS_ACTION_CD, A.TO_PS_ACTION_REASON_CD, R2.PS_ACTION_REASON_DESC AS TO_PS_ACTION_REASON_DESC, A.ACTION_DT, A.LOAD_TSTMP FROM ((ADMIN.EMPL_ACTION_HIST_PSOFT A LEFT JOIN ADMIN.PS_ACTION_REASON R1 ON (((A.FROM_PS_ACTION_CD = R1.PS_ACTION_CD) AND (A.FROM_PS_ACTION_REASON_CD = R1.PS_ACTION_REASON_CD)))) LEFT JOIN ADMIN.PS_ACTION_REASON R2 ON (((A.TO_PS_ACTION_CD = R2.PS_ACTION_CD) AND (A.TO_PS_ACTION_REASON_CD = R2.PS_ACTION_REASON_CD))))) UNION (SELECT A.EMPLOYEE_ID, A.EMPL_ACTION_EFF_DT, A.EMPL_ACTION_SEQNO, A.FROM_PS_ACTION_CD, A.FROM_PS_ACTION_REASON_CD, R1.PS_ACTION_REASON_DESC AS FROM_PS_ACTION_REASON_DESC, A.TO_PS_ACTION_CD, A.TO_PS_ACTION_REASON_CD, R2.PS_ACTION_REASON_DESC AS TO_PS_ACTION_REASON_DESC, A.ACTION_DT, A.LOAD_TSTMP FROM ((ADMIN.EMPL_ACTION_HIST A LEFT JOIN ADMIN.PS_ACTION_REASON R1 ON (((A.FROM_PS_ACTION_CD = R1.PS_ACTION_CD) AND (A.FROM_PS_ACTION_REASON_CD = R1.PS_ACTION_REASON_CD)))) LEFT JOIN ADMIN.PS_ACTION_REASON R2 ON (((A.TO_PS_ACTION_CD = R2.PS_ACTION_CD) AND (A.TO_PS_ACTION_REASON_CD = R2.PS_ACTION_REASON_CD)))));

\echo
\echo *****  Creating view:  "EMPL_DEPT_HIST_VW"

CREATE or replace VIEW  EMPL_DEPT_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_DEPT_EFF_DT,
     FROM_PS_DEPT_CD,
     FROM_PS_DEPT_DESC,
     FROM_COMPANY_ID,
     FROM_PS_PERSONNEL_AREA_ID,
     FROM_PS_PERSONNEL_SUBAREA_ID,
     FROM_LOCATION_ID,
     FROM_STORE_NBR,
     FROM_STORE_DEPT_NBR,
     FROM_STORE_NAME,
     TO_PS_DEPT_CD,
     TO_PS_DEPT_DESC,
     TO_COMPANY_ID,
     TO_PS_PERSONNEL_AREA_ID,
     TO_PS_PERSONNEL_SUBAREA_ID,
     TO_LOCATION_ID,
     TO_STORE_NBR,
     TO_STORE_DEPT_NBR,
     TO_STORE_NAME,
     LOCATION_CHG_FLAG,
     LOAD_TSTMP
) AS
(SELECT EMPL_DEPT_HIST_PSOFT.EMPLOYEE_ID, EMPL_DEPT_HIST_PSOFT.EMPL_DEPT_EFF_DT, EMPL_DEPT_HIST_PSOFT.FROM_PS_DEPT_CD, EMPL_DEPT_HIST_PSOFT.FROM_PS_DEPT_DESC, EMPL_DEPT_HIST_PSOFT.FROM_COMPANY_ID, EMPL_DEPT_HIST_PSOFT.FROM_PS_PERSONNEL_AREA_ID, EMPL_DEPT_HIST_PSOFT.FROM_PS_PERSONNEL_SUBAREA_ID, EMPL_DEPT_HIST_PSOFT.FROM_LOCATION_ID, EMPL_DEPT_HIST_PSOFT.FROM_STORE_NBR, EMPL_DEPT_HIST_PSOFT.FROM_STORE_DEPT_NBR, EMPL_DEPT_HIST_PSOFT.FROM_STORE_NAME, EMPL_DEPT_HIST_PSOFT.TO_PS_DEPT_CD, EMPL_DEPT_HIST_PSOFT.TO_PS_DEPT_DESC, EMPL_DEPT_HIST_PSOFT.TO_COMPANY_ID, EMPL_DEPT_HIST_PSOFT.TO_PS_PERSONNEL_AREA_ID, EMPL_DEPT_HIST_PSOFT.TO_PS_PERSONNEL_SUBAREA_ID, EMPL_DEPT_HIST_PSOFT.TO_LOCATION_ID, EMPL_DEPT_HIST_PSOFT.TO_STORE_NBR, EMPL_DEPT_HIST_PSOFT.TO_STORE_DEPT_NBR, EMPL_DEPT_HIST_PSOFT.TO_STORE_NAME, EMPL_DEPT_HIST_PSOFT.LOCATION_CHG_FLAG, EMPL_DEPT_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_DEPT_HIST_PSOFT) UNION (SELECT EMPL_DEPT_HIST.EMPLOYEE_ID, EMPL_DEPT_HIST.EMPL_DEPT_EFF_DT, EMPL_DEPT_HIST.FROM_PS_DEPT_CD, EMPL_DEPT_HIST.FROM_PS_DEPT_DESC, EMPL_DEPT_HIST.FROM_COMPANY_ID, EMPL_DEPT_HIST.FROM_PS_PERSONNEL_AREA_ID, EMPL_DEPT_HIST.FROM_PS_PERSONNEL_SUBAREA_ID, EMPL_DEPT_HIST.FROM_LOCATION_ID, EMPL_DEPT_HIST.FROM_STORE_NBR, EMPL_DEPT_HIST.FROM_STORE_DEPT_NBR, EMPL_DEPT_HIST.FROM_STORE_NAME, EMPL_DEPT_HIST.TO_PS_DEPT_CD, EMPL_DEPT_HIST.TO_PS_DEPT_DESC, EMPL_DEPT_HIST.TO_COMPANY_ID, EMPL_DEPT_HIST.TO_PS_PERSONNEL_AREA_ID, EMPL_DEPT_HIST.TO_PS_PERSONNEL_SUBAREA_ID, EMPL_DEPT_HIST.TO_LOCATION_ID, EMPL_DEPT_HIST.TO_STORE_NBR, EMPL_DEPT_HIST.TO_STORE_DEPT_NBR, EMPL_DEPT_HIST.TO_STORE_NAME, EMPL_DEPT_HIST.LOCATION_CHG_FLAG, EMPL_DEPT_HIST.LOAD_TSTMP FROM ADMIN.EMPL_DEPT_HIST);

\echo
\echo *****  Creating view:  "EMPL_EMPL_LOC_WK_VW"

CREATE or replace VIEW  EMPL_EMPL_LOC_WK_VW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     PAY_FREQ_CD,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
(SELECT EMPL_EMPL_LOC_WK_PSOFT.WEEK_DT, EMPL_EMPL_LOC_WK_PSOFT.LOCATION_ID, EMPL_EMPL_LOC_WK_PSOFT.EMPLOYEE_ID, EMPL_EMPL_LOC_WK_PSOFT.EARN_ID, EMPL_EMPL_LOC_WK_PSOFT.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK_PSOFT.JOB_CODE, EMPL_EMPL_LOC_WK_PSOFT.FULLPT_FLAG, EMPL_EMPL_LOC_WK_PSOFT.HOURS_WORKED, EMPL_EMPL_LOC_WK_PSOFT.EARNINGS_AMT, EMPL_EMPL_LOC_WK_PSOFT.EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK_PSOFT.PAY_FREQ_CD, EMPL_EMPL_LOC_WK_PSOFT.CURRENCY_NBR, EMPL_EMPL_LOC_WK_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_EMPL_LOC_WK_PSOFT) UNION (SELECT EMPL_EMPL_LOC_WK.WEEK_DT, EMPL_EMPL_LOC_WK.LOCATION_ID, EMPL_EMPL_LOC_WK.EMPLOYEE_ID, EMPL_EMPL_LOC_WK.EARN_ID, EMPL_EMPL_LOC_WK.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK.JOB_CODE, EMPL_EMPL_LOC_WK.FULLPT_FLAG, EMPL_EMPL_LOC_WK.HOURS_WORKED, EMPL_EMPL_LOC_WK.EARNINGS_AMT, EMPL_EMPL_LOC_WK.EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK.PAY_FREQ_CD, EMPL_EMPL_LOC_WK.CURRENCY_NBR, EMPL_EMPL_LOC_WK.LOAD_TSTMP FROM ADMIN.EMPL_EMPL_LOC_WK);

\echo
\echo *****  Creating view:  "EMPL_FULLPT_HIST_VW"

CREATE or replace VIEW  EMPL_FULLPT_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_FULLPT_EFF_DT,
     FROM_FULLPT_FLAG,
     TO_FULLPT_FLAG,
     LOAD_TSTMP
) AS
(SELECT EMPL_FULLPT_HIST_PSOFT.EMPLOYEE_ID, EMPL_FULLPT_HIST_PSOFT.EMPL_FULLPT_EFF_DT, EMPL_FULLPT_HIST_PSOFT.FROM_FULLPT_FLAG, EMPL_FULLPT_HIST_PSOFT.TO_FULLPT_FLAG, EMPL_FULLPT_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_FULLPT_HIST_PSOFT) UNION (SELECT EMPL_FULLPT_HIST.EMPLOYEE_ID, EMPL_FULLPT_HIST.EMPL_FULLPT_EFF_DT, EMPL_FULLPT_HIST.FROM_FULLPT_FLAG, EMPL_FULLPT_HIST.TO_FULLPT_FLAG, EMPL_FULLPT_HIST.LOAD_TSTMP FROM ADMIN.EMPL_FULLPT_HIST);

\echo
\echo *****  Creating view:  "EMPL_JOB_HIST_VW"

CREATE or replace VIEW  EMPL_JOB_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_JOB_EFF_DT,
     FROM_JOB_CODE,
     FROM_PS_GRADE_ID,
     TO_JOB_CODE,
     TO_PS_GRADE_ID,
     LOAD_TSTMP
) AS
(SELECT EMPL_JOB_HIST_PSOFT.EMPLOYEE_ID, EMPL_JOB_HIST_PSOFT.EMPL_JOB_EFF_DT, EMPL_JOB_HIST_PSOFT.FROM_JOB_CODE, EMPL_JOB_HIST_PSOFT.FROM_PS_GRADE_ID, EMPL_JOB_HIST_PSOFT.TO_JOB_CODE, EMPL_JOB_HIST_PSOFT.TO_PS_GRADE_ID, EMPL_JOB_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_JOB_HIST_PSOFT) UNION (SELECT EMPL_JOB_HIST.EMPLOYEE_ID, EMPL_JOB_HIST.EMPL_JOB_EFF_DT, EMPL_JOB_HIST.FROM_JOB_CODE, EMPL_JOB_HIST.FROM_PS_GRADE_ID, EMPL_JOB_HIST.TO_JOB_CODE, EMPL_JOB_HIST.TO_PS_GRADE_ID, EMPL_JOB_HIST.LOAD_TSTMP FROM ADMIN.EMPL_JOB_HIST);

\echo
\echo *****  Creating view:  "EMPL_LABOR_WK_VW"

CREATE or replace VIEW  EMPL_LABOR_WK_VW
(
     WEEK_DT,
     LOCATION_ID,
     STORE_DEPT_NBR,
     EARN_ID,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
(SELECT EMPL_LABOR_WK_PSOFT.WEEK_DT, EMPL_LABOR_WK_PSOFT.LOCATION_ID, EMPL_LABOR_WK_PSOFT.STORE_DEPT_NBR, EMPL_LABOR_WK_PSOFT.EARN_ID, EMPL_LABOR_WK_PSOFT.JOB_CODE, EMPL_LABOR_WK_PSOFT.FULLPT_FLAG, EMPL_LABOR_WK_PSOFT.HOURS_WORKED, EMPL_LABOR_WK_PSOFT.EARNINGS_AMT, EMPL_LABOR_WK_PSOFT.EARNINGS_LOC_AMT, EMPL_LABOR_WK_PSOFT.CURRENCY_NBR, EMPL_LABOR_WK_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_LABOR_WK_PSOFT) UNION (SELECT EMPL_LABOR_WK.WEEK_DT, EMPL_LABOR_WK.LOCATION_ID, EMPL_LABOR_WK.STORE_DEPT_NBR, EMPL_LABOR_WK.EARN_ID, EMPL_LABOR_WK.JOB_CODE, EMPL_LABOR_WK.FULLPT_FLAG, EMPL_LABOR_WK.HOURS_WORKED, EMPL_LABOR_WK.EARNINGS_AMT, EMPL_LABOR_WK.EARNINGS_LOC_AMT, EMPL_LABOR_WK.CURRENCY_NBR, EMPL_LABOR_WK.LOAD_TSTMP FROM ADMIN.EMPL_LABOR_WK);

\echo
\echo *****  Creating view:  "EMPL_LOC_CNT_WK_VW"

CREATE or replace VIEW  EMPL_LOC_CNT_WK_VW
(
     WEEK_DT,
     EMPLOYEE_ID,
     LOCATION_ID,
     JOB_CODE,
     FULLPT_FLAG,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     STORE_DEPT_NBR,
     EMPL_STATUS_CD,
     TERM_REASON_CD,
     TERM_REASON_DESC,
     EMPL_CNT_FLAG,
     TERM_CNT_FLAG,
     HIRE_CNT_FLAG,
     TERM_INVOL_CNT,
     TERM_VOL_CNT,
     TERM_UKN_CNT,
     REHIRE_CNT_FLAG,
     LOAD_TSTMP
) AS
SELECT EMPL.WEEK_DT, EMPL.EMPLOYEE_ID, EMPL.LOCATION_ID, EMPL.JOB_CODE, EMPL.FULLPT_FLAG, EMPL.PS_PERSONNEL_AREA_ID, EMPL.PS_PERSONNEL_SUBAREA_ID, EMPL.PS_DEPT_CD, EMPL.STORE_DEPT_NBR, EMPL.EMPL_STATUS_CD, SDVW.TERM_REASON_CD, TR.TERM_REASON_DESC, EMPL.EMPL_CNT_FLAG, EMPL.TERM_CNT_FLAG, EMPL.HIRE_CNT_FLAG, EMPL.TERM_INVOL_CNT, EMPL.TERM_VOL_CNT, EMPL.TERM_UKN_CNT, EMPL.REHIRE_CNT_FLAG, EMPL.LOAD_TSTMP FROM ((((SELECT EMPL_LOC_CNT_WK_PSOFT.WEEK_DT, EMPL_LOC_CNT_WK_PSOFT.EMPLOYEE_ID, EMPL_LOC_CNT_WK_PSOFT.LOCATION_ID, EMPL_LOC_CNT_WK_PSOFT.JOB_CODE, EMPL_LOC_CNT_WK_PSOFT.FULLPT_FLAG, EMPL_LOC_CNT_WK_PSOFT.PS_PERSONNEL_AREA_ID, EMPL_LOC_CNT_WK_PSOFT.PS_PERSONNEL_SUBAREA_ID, EMPL_LOC_CNT_WK_PSOFT.PS_DEPT_CD, EMPL_LOC_CNT_WK_PSOFT.STORE_DEPT_NBR, EMPL_LOC_CNT_WK_PSOFT.EMPL_STATUS_CD, EMPL_LOC_CNT_WK_PSOFT.EMPL_CNT_FLAG, EMPL_LOC_CNT_WK_PSOFT.TERM_CNT_FLAG, EMPL_LOC_CNT_WK_PSOFT.HIRE_CNT_FLAG, EMPL_LOC_CNT_WK_PSOFT.TERM_INVOL_CNT, EMPL_LOC_CNT_WK_PSOFT.TERM_VOL_CNT, EMPL_LOC_CNT_WK_PSOFT.TERM_UKN_CNT, EMPL_LOC_CNT_WK_PSOFT.REHIRE_CNT_FLAG, EMPL_LOC_CNT_WK_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_LOC_CNT_WK_PSOFT) UNION (SELECT EMPL_LOC_CNT_WK.WEEK_DT, EMPL_LOC_CNT_WK.EMPLOYEE_ID, EMPL_LOC_CNT_WK.LOCATION_ID, EMPL_LOC_CNT_WK.JOB_CODE, EMPL_LOC_CNT_WK.FULLPT_FLAG, EMPL_LOC_CNT_WK.PS_PERSONNEL_AREA_ID, EMPL_LOC_CNT_WK.PS_PERSONNEL_SUBAREA_ID, EMPL_LOC_CNT_WK.PS_DEPT_CD, EMPL_LOC_CNT_WK.STORE_DEPT_NBR, EMPL_LOC_CNT_WK.EMPL_STATUS_CD, EMPL_LOC_CNT_WK.EMPL_CNT_FLAG, EMPL_LOC_CNT_WK.TERM_CNT_FLAG, EMPL_LOC_CNT_WK.HIRE_CNT_FLAG, EMPL_LOC_CNT_WK.TERM_INVOL_CNT, EMPL_LOC_CNT_WK.TERM_VOL_CNT, EMPL_LOC_CNT_WK.TERM_UKN_CNT, EMPL_LOC_CNT_WK.REHIRE_CNT_FLAG, EMPL_LOC_CNT_WK.LOAD_TSTMP FROM ADMIN.EMPL_LOC_CNT_WK)) EMPL LEFT JOIN ADMIN.EMPLOYEE_PROFILE_WK SDVW ON (((EMPL.EMPLOYEE_ID = SDVW.EMPLOYEE_ID) AND (EMPL.WEEK_DT = SDVW.WEEK_DT)))) LEFT JOIN ADMIN.TERMINATION_REASON TR ON ((SDVW.TERM_REASON_CD = TR.TERM_REASON_CD)));

\echo
\echo *****  Creating view:  "EMPL_PAY_RATE_HIST_VW"

CREATE or replace VIEW  EMPL_PAY_RATE_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_PAY_RATE_EFF_DT,
     FROM_ANNUAL_RATE_LOC_AMT,
     FROM_HOURLY_RATE_LOC_AMT,
     FROM_CURRENCY_ID,
     TO_ANNUAL_RATE_LOC_AMT,
     TO_HOURLY_RATE_LOC_AMT,
     TO_CURRENCY_ID,
     PS_COMP_FREQ_CD,
     LOAD_TSTMP
) AS
(SELECT EMPL_PAY_RATE_HIST_PSOFT.EMPLOYEE_ID, EMPL_PAY_RATE_HIST_PSOFT.EMPL_PAY_RATE_EFF_DT, EMPL_PAY_RATE_HIST_PSOFT.FROM_ANNUAL_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_PSOFT.FROM_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_PSOFT.FROM_CURRENCY_ID, EMPL_PAY_RATE_HIST_PSOFT.TO_ANNUAL_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_PSOFT.TO_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_PSOFT.TO_CURRENCY_ID, EMPL_PAY_RATE_HIST_PSOFT.PS_COMP_FREQ_CD, EMPL_PAY_RATE_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_PAY_RATE_HIST_PSOFT) UNION (SELECT EMPL_PAY_RATE_HIST.EMPLOYEE_ID, EMPL_PAY_RATE_HIST.EMPL_PAY_RATE_EFF_DT, EMPL_PAY_RATE_HIST.FROM_ANNUAL_RATE_LOC_AMT, EMPL_PAY_RATE_HIST.FROM_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST.FROM_CURRENCY_ID, EMPL_PAY_RATE_HIST.TO_ANNUAL_RATE_LOC_AMT, EMPL_PAY_RATE_HIST.TO_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST.TO_CURRENCY_ID, EMPL_PAY_RATE_HIST.PS_COMP_FREQ_CD, EMPL_PAY_RATE_HIST.LOAD_TSTMP FROM ADMIN.EMPL_PAY_RATE_HIST);

\echo
\echo *****  Creating view:  "EMPL_POSITION_HIST_VW"

CREATE or replace VIEW  EMPL_POSITION_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_POSITION_EFF_DT,
     FROM_POSITION_ID,
     TO_POSITION_ID,
     LOAD_TSTMP
) AS
(SELECT EMPL_POSITION_HIST_PSOFT.EMPLOYEE_ID, EMPL_POSITION_HIST_PSOFT.EMPL_POSITION_EFF_DT, EMPL_POSITION_HIST_PSOFT.FROM_POSITION_ID, EMPL_POSITION_HIST_PSOFT.TO_POSITION_ID, EMPL_POSITION_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_POSITION_HIST_PSOFT) UNION (SELECT EMPL_POSITION_HIST.EMPLOYEE_ID, EMPL_POSITION_HIST.EMPL_POSITION_EFF_DT, EMPL_POSITION_HIST.FROM_POSITION_ID, EMPL_POSITION_HIST.TO_POSITION_ID, EMPL_POSITION_HIST.LOAD_TSTMP FROM ADMIN.EMPL_POSITION_HIST);

\echo
\echo *****  Creating view:  "EMPL_STATUS_HIST_VW"

CREATE or replace VIEW  EMPL_STATUS_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_STATUS_EFF_DT,
     FROM_EMPL_STATUS_CD,
     TO_EMPL_STATUS_CD,
     LOAD_TSTMP
) AS
(SELECT EMPL_STATUS_HIST_PSOFT.EMPLOYEE_ID, EMPL_STATUS_HIST_PSOFT.EMPL_STATUS_EFF_DT, EMPL_STATUS_HIST_PSOFT.FROM_EMPL_STATUS_CD, EMPL_STATUS_HIST_PSOFT.TO_EMPL_STATUS_CD, EMPL_STATUS_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_STATUS_HIST_PSOFT) UNION (SELECT EMPL_STATUS_HIST.EMPLOYEE_ID, EMPL_STATUS_HIST.EMPL_STATUS_EFF_DT, EMPL_STATUS_HIST.FROM_EMPL_STATUS_CD, EMPL_STATUS_HIST.TO_EMPL_STATUS_CD, EMPL_STATUS_HIST.LOAD_TSTMP FROM ADMIN.EMPL_STATUS_HIST);

\echo
\echo *****  Creating view:  "EMPL_SUPERVISOR_HIST_VW"

CREATE or replace VIEW  EMPL_SUPERVISOR_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_SPVSR_EFF_DT,
     FROM_SUPERVISOR_ID,
     TO_SUPERVISOR_ID,
     LOAD_TSTMP
) AS
(SELECT EMPL_SUPERVISOR_HIST_PSOFT.EMPLOYEE_ID, EMPL_SUPERVISOR_HIST_PSOFT.EMPL_SPVSR_EFF_DT, EMPL_SUPERVISOR_HIST_PSOFT.FROM_SUPERVISOR_ID, EMPL_SUPERVISOR_HIST_PSOFT.TO_SUPERVISOR_ID, EMPL_SUPERVISOR_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_SUPERVISOR_HIST_PSOFT) UNION (SELECT EMPL_SUPERVISOR_HIST.EMPLOYEE_ID, EMPL_SUPERVISOR_HIST.EMPL_SPVSR_EFF_DT, EMPL_SUPERVISOR_HIST.FROM_SUPERVISOR_ID, EMPL_SUPERVISOR_HIST.TO_SUPERVISOR_ID, EMPL_SUPERVISOR_HIST.LOAD_TSTMP FROM ADMIN.EMPL_SUPERVISOR_HIST);

\echo
\echo *****  Creating view:  "EMPL_TERM_DAYS_WORKED_VW"

CREATE or replace VIEW  EMPL_TERM_DAYS_WORKED_VW
(
     EMPL_TERM_WEEK_DT,
     EMPLOYEE_ID,
     LOCATION_ID,
     EMPL_HIRE_DT,
     EMPL_BIRTH_DT,
     EMPL_TERM_DT,
     NBR_DAYS_WORKED,
     EMPL_AGE_AT_TERM_DT,
     COUNT_FLAG,
     LOAD_TSTMP
) AS
(SELECT EMPL_TERM_DAYS_WORKED_PSOFT.EMPL_TERM_WEEK_DT, EMPL_TERM_DAYS_WORKED_PSOFT.EMPLOYEE_ID, EMPL_TERM_DAYS_WORKED_PSOFT.LOCATION_ID, EMPL_TERM_DAYS_WORKED_PSOFT.EMPL_HIRE_DT, EMPL_TERM_DAYS_WORKED_PSOFT.EMPL_BIRTH_DT, EMPL_TERM_DAYS_WORKED_PSOFT.EMPL_TERM_DT, EMPL_TERM_DAYS_WORKED_PSOFT.NBR_DAYS_WORKED, EMPL_TERM_DAYS_WORKED_PSOFT.EMPL_AGE_AT_TERM_DT, EMPL_TERM_DAYS_WORKED_PSOFT.COUNT_FLAG, EMPL_TERM_DAYS_WORKED_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_TERM_DAYS_WORKED_PSOFT) UNION (SELECT EMPL_TERM_DAYS_WORKED.EMPL_TERM_WEEK_DT, EMPL_TERM_DAYS_WORKED.EMPLOYEE_ID, EMPL_TERM_DAYS_WORKED.LOCATION_ID, EMPL_TERM_DAYS_WORKED.EMPL_HIRE_DT, EMPL_TERM_DAYS_WORKED.EMPL_BIRTH_DT, EMPL_TERM_DAYS_WORKED.EMPL_TERM_DT, EMPL_TERM_DAYS_WORKED.NBR_DAYS_WORKED, EMPL_TERM_DAYS_WORKED.EMPL_AGE_AT_TERM_DT, EMPL_TERM_DAYS_WORKED.COUNT_FLAG, EMPL_TERM_DAYS_WORKED.LOAD_TSTMP FROM ADMIN.EMPL_TERM_DAYS_WORKED);

\echo
\echo *****  Creating view:  "EMPL_TYPE_HIST_VW"

CREATE or replace VIEW  EMPL_TYPE_HIST_VW
(
     EMPLOYEE_ID,
     EMPL_TYPE_EFF_DT,
     FROM_EMPL_TYPE_CD,
     TO_EMPL_TYPE_CD,
     LOAD_TSTMP
) AS
(SELECT EMPL_TYPE_HIST_PSOFT.EMPLOYEE_ID, EMPL_TYPE_HIST_PSOFT.EMPL_TYPE_EFF_DT, EMPL_TYPE_HIST_PSOFT.FROM_EMPL_TYPE_CD, EMPL_TYPE_HIST_PSOFT.TO_EMPL_TYPE_CD, EMPL_TYPE_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_TYPE_HIST_PSOFT) UNION (SELECT EMPL_TYPE_HIST.EMPLOYEE_ID, EMPL_TYPE_HIST.EMPL_TYPE_EFF_DT, EMPL_TYPE_HIST.FROM_EMPL_TYPE_CD, EMPL_TYPE_HIST.TO_EMPL_TYPE_CD, EMPL_TYPE_HIST.LOAD_TSTMP FROM ADMIN.EMPL_TYPE_HIST);

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_DAY_VW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_DAY_VW
(
     DAY_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
(SELECT EMPLOYEE_PROFILE_DAY_PSOFT.DAY_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPLOYEE_ID, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_LAST_NAME, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_BIRTH_DT, EMPLOYEE_PROFILE_DAY_PSOFT.GENDER_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_DAY_PSOFT.ETHNIC_GROUP_ID, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_ADDR_1, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_ADDR_2, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_CITY, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_STATE, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_PROVINCE, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_ZIPCODE, EMPLOYEE_PROFILE_DAY_PSOFT.COUNTRY_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_HOME_PHONE, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_DAY_PSOFT.BADGE_NBR, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_STATUS_CD, EMPLOYEE_PROFILE_DAY_PSOFT.STATUS_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.FULLPT_FLAG, EMPLOYEE_PROFILE_DAY_PSOFT.FULLPT_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_TYPE_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_GROUP_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_HIRE_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_TERM_DT, EMPLOYEE_PROFILE_DAY_PSOFT.TERM_REASON_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_ACTION_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_ACTION_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_DAY_PSOFT.LOCATION_ID, EMPLOYEE_PROFILE_DAY_PSOFT.LOCATION_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.STORE_NBR, EMPLOYEE_PROFILE_DAY_PSOFT.STORE_DEPT_NBR, EMPLOYEE_PROFILE_DAY_PSOFT.COMPANY_ID, EMPLOYEE_PROFILE_DAY_PSOFT.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_DAY_PSOFT.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_DAY_PSOFT.PS_DEPT_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_POSITION_ID, EMPLOYEE_PROFILE_DAY_PSOFT.POSITION_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_DAY_PSOFT.JOB_CODE, EMPLOYEE_PROFILE_DAY_PSOFT.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_GRADE_ID, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_STD_BONUS_PCT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_RATING, EMPLOYEE_PROFILE_DAY_PSOFT.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_DAY_PSOFT.COMP_RATE_AMT, EMPLOYEE_PROFILE_DAY_PSOFT.ANNUAL_RATE_LOC_AMT, EMPLOYEE_PROFILE_DAY_PSOFT.HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_DAY_PSOFT.CURRENCY_ID, EMPLOYEE_PROFILE_DAY_PSOFT.EXCH_RATE_PCT, EMPLOYEE_PROFILE_DAY_PSOFT.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_DAY_PSOFT) UNION (SELECT EMPLOYEE_PROFILE_DAY.DAY_DT, EMPLOYEE_PROFILE_DAY.EMPLOYEE_ID, EMPLOYEE_PROFILE_DAY.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_DAY.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_DAY.EMPL_LAST_NAME, EMPLOYEE_PROFILE_DAY.EMPL_BIRTH_DT, EMPLOYEE_PROFILE_DAY.GENDER_CD, EMPLOYEE_PROFILE_DAY.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_DAY.ETHNIC_GROUP_ID, EMPLOYEE_PROFILE_DAY.EMPL_ADDR_1, EMPLOYEE_PROFILE_DAY.EMPL_ADDR_2, EMPLOYEE_PROFILE_DAY.EMPL_CITY, EMPLOYEE_PROFILE_DAY.EMPL_STATE, EMPLOYEE_PROFILE_DAY.EMPL_PROVINCE, EMPLOYEE_PROFILE_DAY.EMPL_ZIPCODE, EMPLOYEE_PROFILE_DAY.COUNTRY_CD, EMPLOYEE_PROFILE_DAY.EMPL_HOME_PHONE, EMPLOYEE_PROFILE_DAY.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_DAY.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_DAY.BADGE_NBR, EMPLOYEE_PROFILE_DAY.EMPL_STATUS_CD, EMPLOYEE_PROFILE_DAY.STATUS_CHG_DT, EMPLOYEE_PROFILE_DAY.FULLPT_FLAG, EMPLOYEE_PROFILE_DAY.FULLPT_CHG_DT, EMPLOYEE_PROFILE_DAY.EMPL_TYPE_CD, EMPLOYEE_PROFILE_DAY.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_DAY.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_DAY.EMPL_GROUP_CD, EMPLOYEE_PROFILE_DAY.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_DAY.EMPL_HIRE_DT, EMPLOYEE_PROFILE_DAY.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_DAY.EMPL_TERM_DT, EMPLOYEE_PROFILE_DAY.TERM_REASON_CD, EMPLOYEE_PROFILE_DAY.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_DAY.PS_ACTION_DT, EMPLOYEE_PROFILE_DAY.PS_ACTION_CD, EMPLOYEE_PROFILE_DAY.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_DAY.LOCATION_ID, EMPLOYEE_PROFILE_DAY.LOCATION_CHG_DT, EMPLOYEE_PROFILE_DAY.STORE_NBR, EMPLOYEE_PROFILE_DAY.STORE_DEPT_NBR, EMPLOYEE_PROFILE_DAY.COMPANY_ID, EMPLOYEE_PROFILE_DAY.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_DAY.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_DAY.PS_DEPT_CD, EMPLOYEE_PROFILE_DAY.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_DAY.PS_POSITION_ID, EMPLOYEE_PROFILE_DAY.POSITION_CHG_DT, EMPLOYEE_PROFILE_DAY.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_DAY.JOB_CODE, EMPLOYEE_PROFILE_DAY.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_DAY.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_DAY.PS_GRADE_ID, EMPLOYEE_PROFILE_DAY.EMPL_STD_BONUS_PCT, EMPLOYEE_PROFILE_DAY.EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_DAY.EMPL_RATING, EMPLOYEE_PROFILE_DAY.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_DAY.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_DAY.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_DAY.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_DAY.COMP_RATE_AMT, EMPLOYEE_PROFILE_DAY.ANNUAL_RATE_LOC_AMT, EMPLOYEE_PROFILE_DAY.HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_DAY.CURRENCY_ID, EMPLOYEE_PROFILE_DAY.EXCH_RATE_PCT, EMPLOYEE_PROFILE_DAY.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_DAY);

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_WK_VW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_WK_VW
(
     WEEK_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
((SELECT EMPLOYEE_PROFILE_WK_PSOFT.WEEK_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_LAST_NAME, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_BIRTH_DT, EMPLOYEE_PROFILE_WK_PSOFT.GENDER_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_WK_PSOFT.ETHNIC_GROUP_ID, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_ADDR_1, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_ADDR_2, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_CITY, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_STATE, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_PROVINCE, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK_PSOFT.COUNTRY_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_WK_PSOFT.BADGE_NBR, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_STATUS_CD, EMPLOYEE_PROFILE_WK_PSOFT.STATUS_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.FULLPT_FLAG, EMPLOYEE_PROFILE_WK_PSOFT.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK_PSOFT.TERM_REASON_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_ACTION_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_ACTION_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK_PSOFT.LOCATION_ID, EMPLOYEE_PROFILE_WK_PSOFT.LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.STORE_NBR, EMPLOYEE_PROFILE_WK_PSOFT.STORE_DEPT_NBR, EMPLOYEE_PROFILE_WK_PSOFT.COMPANY_ID, EMPLOYEE_PROFILE_WK_PSOFT.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_WK_PSOFT.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK_PSOFT.PS_DEPT_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_POSITION_ID, EMPLOYEE_PROFILE_WK_PSOFT.POSITION_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK_PSOFT.JOB_CODE, EMPLOYEE_PROFILE_WK_PSOFT.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_GRADE_ID, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_STD_BONUS_PCT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_RATING, EMPLOYEE_PROFILE_WK_PSOFT.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_WK_PSOFT.COMP_RATE_AMT, EMPLOYEE_PROFILE_WK_PSOFT.ANNUAL_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK_PSOFT.HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK_PSOFT.CURRENCY_ID, EMPLOYEE_PROFILE_WK_PSOFT.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK_PSOFT.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK_PSOFT) UNION (SELECT EMPLOYEE_PROFILE_WK_GAP.WEEK_DT, EMPLOYEE_PROFILE_WK_GAP.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK_GAP.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_WK_GAP.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK_GAP.EMPL_LAST_NAME, EMPLOYEE_PROFILE_WK_GAP.EMPL_BIRTH_DT, EMPLOYEE_PROFILE_WK_GAP.GENDER_CD, EMPLOYEE_PROFILE_WK_GAP.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_WK_GAP.ETHNIC_GROUP_ID, EMPLOYEE_PROFILE_WK_GAP.EMPL_ADDR_1, EMPLOYEE_PROFILE_WK_GAP.EMPL_ADDR_2, EMPLOYEE_PROFILE_WK_GAP.EMPL_CITY, EMPLOYEE_PROFILE_WK_GAP.EMPL_STATE, EMPLOYEE_PROFILE_WK_GAP.EMPL_PROVINCE, EMPLOYEE_PROFILE_WK_GAP.EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK_GAP.COUNTRY_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK_GAP.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_WK_GAP.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_WK_GAP.BADGE_NBR, EMPLOYEE_PROFILE_WK_GAP.EMPL_STATUS_CD, EMPLOYEE_PROFILE_WK_GAP.STATUS_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.FULLPT_FLAG, EMPLOYEE_PROFILE_WK_GAP.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK_GAP.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK_GAP.TERM_REASON_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_WK_GAP.PS_ACTION_DT, EMPLOYEE_PROFILE_WK_GAP.PS_ACTION_CD, EMPLOYEE_PROFILE_WK_GAP.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK_GAP.LOCATION_ID, EMPLOYEE_PROFILE_WK_GAP.LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.STORE_NBR, EMPLOYEE_PROFILE_WK_GAP.STORE_DEPT_NBR, EMPLOYEE_PROFILE_WK_GAP.COMPANY_ID, EMPLOYEE_PROFILE_WK_GAP.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_WK_GAP.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK_GAP.PS_DEPT_CD, EMPLOYEE_PROFILE_WK_GAP.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.PS_POSITION_ID, EMPLOYEE_PROFILE_WK_GAP.POSITION_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK_GAP.JOB_CODE, EMPLOYEE_PROFILE_WK_GAP.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK_GAP.PS_GRADE_ID, EMPLOYEE_PROFILE_WK_GAP.EMPL_STD_BONUS_PCT, EMPLOYEE_PROFILE_WK_GAP.EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_WK_GAP.EMPL_RATING, EMPLOYEE_PROFILE_WK_GAP.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_WK_GAP.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_WK_GAP.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_WK_GAP.COMP_RATE_AMT, EMPLOYEE_PROFILE_WK_GAP.ANNUAL_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK_GAP.HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK_GAP.CURRENCY_ID, EMPLOYEE_PROFILE_WK_GAP.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK_GAP.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK_GAP)) UNION (SELECT EMPLOYEE_PROFILE_WK.WEEK_DT, EMPLOYEE_PROFILE_WK.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_WK.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK.EMPL_LAST_NAME, EMPLOYEE_PROFILE_WK.EMPL_BIRTH_DT, EMPLOYEE_PROFILE_WK.GENDER_CD, EMPLOYEE_PROFILE_WK.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_WK.ETHNIC_GROUP_ID, EMPLOYEE_PROFILE_WK.EMPL_ADDR_1, EMPLOYEE_PROFILE_WK.EMPL_ADDR_2, EMPLOYEE_PROFILE_WK.EMPL_CITY, EMPLOYEE_PROFILE_WK.EMPL_STATE, EMPLOYEE_PROFILE_WK.EMPL_PROVINCE, EMPLOYEE_PROFILE_WK.EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK.COUNTRY_CD, EMPLOYEE_PROFILE_WK.EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_WK.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_WK.BADGE_NBR, EMPLOYEE_PROFILE_WK.EMPL_STATUS_CD, EMPLOYEE_PROFILE_WK.STATUS_CHG_DT, EMPLOYEE_PROFILE_WK.FULLPT_FLAG, EMPLOYEE_PROFILE_WK.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_WK.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_WK.EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK.TERM_REASON_CD, EMPLOYEE_PROFILE_WK.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_WK.PS_ACTION_DT, EMPLOYEE_PROFILE_WK.PS_ACTION_CD, EMPLOYEE_PROFILE_WK.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK.LOCATION_ID, EMPLOYEE_PROFILE_WK.LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK.STORE_NBR, EMPLOYEE_PROFILE_WK.STORE_DEPT_NBR, EMPLOYEE_PROFILE_WK.COMPANY_ID, EMPLOYEE_PROFILE_WK.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_WK.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK.PS_DEPT_CD, EMPLOYEE_PROFILE_WK.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_WK.PS_POSITION_ID, EMPLOYEE_PROFILE_WK.POSITION_CHG_DT, EMPLOYEE_PROFILE_WK.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK.JOB_CODE, EMPLOYEE_PROFILE_WK.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK.PS_GRADE_ID, EMPLOYEE_PROFILE_WK.EMPL_STD_BONUS_PCT, EMPLOYEE_PROFILE_WK.EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_WK.EMPL_RATING, EMPLOYEE_PROFILE_WK.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_WK.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_WK.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_WK.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_WK.COMP_RATE_AMT, EMPLOYEE_PROFILE_WK.ANNUAL_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK.HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK.CURRENCY_ID, EMPLOYEE_PROFILE_WK.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK);

\echo
\echo *****  Creating view:  "PS2_ACCRUED_LABOR_WK_VW"

CREATE or replace VIEW  PS2_ACCRUED_LABOR_WK_VW
(
     WEEK_DT,
     LOCATION_ID,
     STORE_DEPT_NBR,
     EARN_ID,
     JOB_CODE,
     FULLPT_FLAG,
     PAY_FREQ_CD,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     CURRENCY_NBR
) AS
(SELECT PS2_ACCRUED_LABOR_WK_PSOFT.WEEK_DT, PS2_ACCRUED_LABOR_WK_PSOFT.LOCATION_ID, PS2_ACCRUED_LABOR_WK_PSOFT.STORE_DEPT_NBR, PS2_ACCRUED_LABOR_WK_PSOFT.EARN_ID, PS2_ACCRUED_LABOR_WK_PSOFT.JOB_CODE, PS2_ACCRUED_LABOR_WK_PSOFT.FULLPT_FLAG, PS2_ACCRUED_LABOR_WK_PSOFT.PAY_FREQ_CD, PS2_ACCRUED_LABOR_WK_PSOFT.HOURS_WORKED, PS2_ACCRUED_LABOR_WK_PSOFT.EARNINGS_AMT, PS2_ACCRUED_LABOR_WK_PSOFT.EARNINGS_LOC_AMT, PS2_ACCRUED_LABOR_WK_PSOFT.CURRENCY_NBR FROM ADMIN.PS2_ACCRUED_LABOR_WK_PSOFT) UNION (SELECT PS2_ACCRUED_LABOR_WK.WEEK_DT, PS2_ACCRUED_LABOR_WK.LOCATION_ID, PS2_ACCRUED_LABOR_WK.STORE_DEPT_NBR, PS2_ACCRUED_LABOR_WK.EARN_ID, PS2_ACCRUED_LABOR_WK.JOB_CODE, PS2_ACCRUED_LABOR_WK.FULLPT_FLAG, PS2_ACCRUED_LABOR_WK.PAY_FREQ_CD, PS2_ACCRUED_LABOR_WK.HOURS_WORKED, PS2_ACCRUED_LABOR_WK.EARNINGS_AMT, PS2_ACCRUED_LABOR_WK.EARNINGS_LOC_AMT, PS2_ACCRUED_LABOR_WK.CURRENCY_NBR FROM ADMIN.PS2_ACCRUED_LABOR_WK);

\echo
\echo *****  Creating view:  "EMPL_RATING_HIST_VW"

CREATE or replace VIEW  EMPL_RATING_HIST_VW
(
     CAL_YR,
     EMPLOYEE_ID,
     EMPL_RATING_EFF_DT,
     EMPL_RATING,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
(SELECT EMPL_RATING_HIST_PSOFT.CAL_YR, EMPL_RATING_HIST_PSOFT.EMPLOYEE_ID, EMPL_RATING_HIST_PSOFT.EMPL_RATING_EFF_DT, EMPL_RATING_HIST_PSOFT.EMPL_RATING, EMPL_RATING_HIST_PSOFT.UPDATE_TSTMP, EMPL_RATING_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_RATING_HIST_PSOFT) UNION (SELECT EMPL_RATING_HIST.CAL_YR, EMPL_RATING_HIST.EMPLOYEE_ID, EMPL_RATING_HIST.EMPL_RATING_EFF_DT, EMPL_RATING_HIST.EMPL_RATING, EMPL_RATING_HIST.UPDATE_TSTMP, EMPL_RATING_HIST.LOAD_TSTMP FROM ADMIN.EMPL_RATING_HIST);

\echo
\echo *****  Creating view:  "LYR_DAYS_MV"

CREATE or replace VIEW  LYR_DAYS_MV
(
     DAY_DT,
     BUSINESS_DAY_FLAG,
     CAL_DAY_OF_MO_NBR,
     CAL_DAY_OF_YR_NBR,
     CAL_HALF,
     CAL_MO,
     CAL_MO_NAME,
     CAL_MO_NAME_ABBR,
     CAL_MO_NBR,
     CAL_QTR,
     CAL_QTR_NBR,
     CAL_WK,
     CAL_YR,
     DAY_OF_WK_NAME,
     DAY_OF_WK_NAME_ABBR,
     DAY_OF_WK_NBR,
     FISCAL_DAY_OF_MO_NBR,
     FISCAL_DAY_OF_YR_NBR,
     FISCAL_HALF,
     FISCAL_MO_NAME,
     FISCAL_MO_NAME_ABBR,
     FISCAL_MO_NBR,
     FISCAL_QTR,
     FISCAL_QTR_NBR,
     FISCAL_WK,
     HOLIDAY_FLAG,
     LWK_WEEK_DT,
     WEEK_DT,
     FISCAL_MO_DT,
     FISCAL_QTR_DT,
     FISCAL_YR_DT,
     LYR_DAY_DT,
     LYR_WEEK_DT,
     LYR_FISCAL_WK,
     LYR_FISCAL_MO_DT,
     LYR_FISCAL_QTR_DT,
     LYR_FISCAL_YR_DT,
     PYR_DAY_DT,
     PYR_WEEK_DT,
     PYR_FISCAL_WK,
     PYR_FISCAL_MO_DT,
     PYR_FISCAL_QTR_DT,
     PYR_FISCAL_YR_DT
) AS
SELECT LYR_DAYS.DAY_DT, LYR_DAYS.BUSINESS_DAY_FLAG, LYR_DAYS.CAL_DAY_OF_MO_NBR, LYR_DAYS.CAL_DAY_OF_YR_NBR, LYR_DAYS.CAL_HALF, LYR_DAYS.CAL_MO, LYR_DAYS.CAL_MO_NAME, LYR_DAYS.CAL_MO_NAME_ABBR, LYR_DAYS.CAL_MO_NBR, LYR_DAYS.CAL_QTR, LYR_DAYS.CAL_QTR_NBR, LYR_DAYS.CAL_WK, LYR_DAYS.CAL_YR, LYR_DAYS.DAY_OF_WK_NAME, LYR_DAYS.DAY_OF_WK_NAME_ABBR, LYR_DAYS.DAY_OF_WK_NBR, LYR_DAYS.FISCAL_DAY_OF_MO_NBR, LYR_DAYS.FISCAL_DAY_OF_YR_NBR, LYR_DAYS.FISCAL_HALF, LYR_DAYS.FISCAL_MO_NAME, LYR_DAYS.FISCAL_MO_NAME_ABBR, LYR_DAYS.FISCAL_MO_NBR, LYR_DAYS.FISCAL_QTR, LYR_DAYS.FISCAL_QTR_NBR, LYR_DAYS.FISCAL_WK, LYR_DAYS.HOLIDAY_FLAG, LYR_DAYS.LWK_WEEK_DT, LYR_DAYS.WEEK_DT, LYR_DAYS.FISCAL_MO_DT, LYR_DAYS.FISCAL_QTR_DT, LYR_DAYS.FISCAL_YR_DT, LYR_DAYS.LYR_DAY_DT, LYR_DAYS.LYR_WEEK_DT, LYR_DAYS.LYR_FISCAL_WK, LYR_DAYS.LYR_FISCAL_MO_DT, LYR_DAYS.LYR_FISCAL_QTR_DT, LYR_DAYS.LYR_FISCAL_YR_DT, LYR_DAYS.PYR_DAY_DT, LYR_DAYS.PYR_WEEK_DT, LYR_DAYS.PYR_FISCAL_WK, LYR_DAYS.PYR_FISCAL_MO_DT, LYR_DAYS.PYR_FISCAL_QTR_DT, LYR_DAYS.PYR_FISCAL_YR_DT FROM ADMIN.LYR_DAYS;

\echo
\echo *****  Creating view:  "PCH_PAUSE_DONATION_VW"

CREATE or replace VIEW  PCH_PAUSE_DONATION_VW
(
     WEEK_DT,
     EMPLOYEE_ID,
     DONATION_AMT,
     CAL_WK,
     CAL_MO,
     CAL_QTR,
     CAL_YR,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_QTR,
     FISCAL_YR
) AS
(SELECT "TIMESTAMP"(PCH_PAUSE_PSOFT.PAY_END_DT) AS WEEK_DT, PCH_PAUSE_PSOFT.EMPLOYEE_ID, (PCH_PAUSE_PSOFT.DED_AMT)::NUMERIC(38,2) AS DONATION_AMT, D.CAL_WK, D.CAL_MO, D.CAL_QTR, D.CAL_YR, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_QTR, D.FISCAL_YR FROM ADMIN.PCH_PAUSE_PSOFT, ADMIN.DAYS D WHERE ("TIMESTAMP"(PCH_PAUSE_PSOFT.PAY_END_DT) = D.DAY_DT)) UNION (SELECT D.WEEK_DT, E.EMPLOYEE_ID, (SUM((E.WAGE_LOC_AMT * ('-1'::NUMERIC(1,0))::NUMERIC(1,0))))::NUMERIC(38,2) AS DONATION_AMT, D.CAL_WK, D.CAL_MO, D.CAL_QTR, D.CAL_YR, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_QTR, D.FISCAL_YR FROM ADMIN.EMPL_PAYCHECK_RPT E, ADMIN.DAYS D WHERE ((E.PAY_END_DT = D.DAY_DT) AND (E.PS_WAGE_TYPE_GID IN (387, 388))) GROUP BY D.WEEK_DT, E.EMPLOYEE_ID, D.CAL_WK, D.CAL_MO, D.CAL_QTR, D.CAL_YR, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_QTR, D.FISCAL_YR);

\echo
\echo *****  Creating view:  "EM_EVENT_SKU_STORE_VW"

CREATE or replace VIEW  EM_EVENT_SKU_STORE_VW
(
     EM_EVENT_ID,
     PRODUCT_ID,
     COUNTRY_CD,
     LOCATION_ID,
     EM_EVENT_SKU_ADV_ID,
     EM_ALLOCATION_ID,
     EM_STORE_TO_EM_DISP_LOC_ID,
     EVENT_NAME,
     EVENT_DESC,
     EVENT_START_DT,
     EVENT_END_DT,
     EVENT_LOCK_DT,
     EVENT_US_LOCK_DT,
     EVENT_TURN_IN_DT,
     EVENT_DEFAULT_START_DT,
     EVENT_DEFAULT_END_DT,
     POG_ID_SUFFIX,
     E_EM_MODIFIED_BY,
     E_EM_MODIFIED_DT,
     STANDARD_FLAG,
     EM_PURGED_FLAG,
     E_UPDATE_DT,
     E_LOAD_DT,
     EM_ARTICLE_ID,
     SKU_NBR,
     BUYER_NAME,
     NATL_PRICE,
     NATL_PRICE_TXT,
     MAP_AMT,
     MAP_AMT_TXT,
     DISP_RANK_A_QTY,
     DISP_RANK_B_QTY,
     DISP_RANK_C_QTY,
     DISP_RANK_D_QTY,
     DISP_RANK_E_QTY,
     DISP_RANK_F_QTY,
     NON_DISP_RANK_A_QTY,
     NON_DISP_RANK_B_QTY,
     NON_DISP_RANK_C_QTY,
     NON_DISP_RANK_D_QTY,
     NON_DISP_RANK_E_QTY,
     NON_DISP_RANK_F_QTY,
     DISCOUNT_TYPE,
     ACTUAL_AMT,
     ACTUAL_AMT_TXT,
     DISCOUNT_AMT,
     DISCOUNT_AMT_TXT,
     STARTING_PRICE,
     STARTING_PRICE_TXT,
     DISCOUNT_PRICE,
     DISCOUNT_PRICE_TXT,
     PERCENT_OFF,
     PERCENT_OFF_TXT,
     OFFER_AMT,
     OFFER_AMT_TXT,
     OFFER_LABEL_1,
     OFFER_LABEL_2,
     OFFER_LABEL_3,
     VENDOR_NAME,
     CREATED_DT,
     ALLOCATION_TYPE,
     SAP_DIVISION_DESC,
     SAP_DEPARTMENT_DESC,
     SAP_CATEGORY_DESC,
     SAP_CLASS_DESC,
     SKU_DESC,
     CONTENTS,
     UOM_DESC,
     STATUS_ID,
     VENDOR_ID,
     BRAND_NAME,
     CREATED_BY,
     PROMO_FLAG,
     PROMO_START_DT,
     PROMO_END_DT,
     DISP_UPLIFT_PCT,
     NONDISP_UPLIFT_PCT,
     MIN_PRES_QTY,
     POS_START_DT,
     POS_END_DT,
     VENDOR_PURCHGRP_NAME,
     MODE_PRICE,
     MODE_PRICE_TXT,
     MODE_COST,
     MODE_COST_TXT,
     LIKE_ARTICLE_SKU,
     PAST_PROMO_NAME,
     DISPLAY_INITIAL_PLANNER,
     DISPLAY_FINAL_PLANNER,
     DISPLAY_PLANNER_QTY,
     EXIT_STRGY_FROM_STATUS_CD,
     EXIT_STRGY_TO_STATUS_CD,
     EXIT_STRGY_MSG,
     MKTG_VARIETY_STYLE_TYPE,
     MKTG_PRIMARY_STORY_TYPE,
     MKTG_SECONDARY_STORY_TYPE,
     MKTG_EXCLUSIVE_TO_PETM_FLAG,
     MKTG_NEW_PHOTO_REQUIRED_FLAG,
     MKTG_PRIMARY_SIGN_TYPE,
     MKTG_SECONDARY_SIGN_TYPE,
     MKTG_DISPLAY_LOCATION_MSG,
     MKTG_HAS_COUPON_FLAG,
     MKTG_COUPON_LOCATION,
     MKTG_COUPON_DETAILS,
     MKTG_HAS_BONUS_FLAG,
     MKTG_BONUS_LOCATION,
     MKTG_BONUS_DETAILS,
     MKTG_ON_RADIO_FLAG,
     MKTG_ON_TV_FLAG,
     ALLOC_EXP_ALLOC_REQUIRED_FLAG,
     ALLOC_EXP_MIN_QTY,
     ALLOC_EXP_MAX_QTY,
     ALLOC_EXP_ANTCPTD_LIFT_PCT,
     ALLOC_EXP_VENDOR_CMTD_QTY,
     ALLOC_EXP_LIKE_ARTICLE_SKU,
     ALLOC_EXP_PAST_PROMO_NAME,
     STORE_LISTING_COUNT,
     ES_EM_MODIFIED_BY,
     ES_EM_MODIFIED_DT,
     ES_UPDATE_DT,
     ES_LOAD_DT,
     EM_VENDOR_FUNDING_ID,
     VF_VENDOR_NAME,
     VF_TYPE,
     VF_AMT,
     MAX_AMT,
     BILL_ALTERNATE_VENDOR_FLAG,
     ALTERNATE_VENDOR_ID,
     VF_START_DT,
     VF_END_DT,
     VF_EM_COMMENT,
     VF_EM_MODIFIED_BY,
     VF_EM_MODIFIED_DT,
     VF_UPDATE_DT,
     VF_LOAD_DT,
     EM_EVENT_ADV_ID,
     EVENT_ADV_NAME,
     AD_PAGES,
     LOCATION_QTY,
     ADV_PRINT_DT,
     ADV_START_DT,
     ADV_END_DT,
     PICTURE_FLAG,
     PAGE_NBR,
     LOCATION,
     CIRCULAR_FLAG,
     CIRCULAR_PICTURE_TYPE,
     ADV_EM_MODIFIED_BY,
     ADV_EM_MODIFIED_DT,
     ADV_UPDATE_DT,
     ADV_LOAD_DT,
     ALLOC_EXPECTATIONS_COMMENT_TXT,
     ALLOCATION_COMMENT_TXT,
     DISPLAY_COMMENT_TXT,
     EXIT_STRATEGY_COMMENT_TXT,
     GENERAL_COMMENT_TXT,
     MARKETING_COMMENT_TXT,
     PROMO_PRICING_COMMENT_TXT,
     VENDOR_FUNDING_COMMENT_TXT,
     EM_DISP_LOC_ID,
     EM_DISP_LOC_NAME,
     EM_DISP_LOC_STR_CNT,
     VERSION,
     DL_EM_MODIFIED_BY,
     DL_EM_MODIFIED_DT,
     DL_UPDATE_DT,
     DL_LOAD_DT,
     POG_ID,
     STORE_CNT,
     SKU_DL_EM_MODIFIED_BY,
     SKU_DL_EM_MODIFIED_DT,
     SKU_DL_UPDATE_DT,
     SKU_DL_LOAD_DT,
     STR_DL_START_DT,
     STR_DL_END_DT,
     STR_DL_EM_MODIFIED_BY,
     STR_DL_EM_MODIFIED_DT,
     STR_DL_UPDATE_DT,
     STR_DL_LOAD_DT,
     EM_STORE_ID,
     STORE_NBR,
     DESCRIPTION,
     ACTIVE_FLAG,
     REGION,
     DISTRICT,
     EFFECTIVE_START_DT,
     EFFECTIVE_END_DT,
     STR_EM_MODIFIED_BY,
     STR_EM_MODIFIED_DT,
     STR_UPDATE_DT,
     STR_LOAD_DT,
     SAP_POG_PREFIX_NAME,
     ALLOCATION_QTY,
     ESTIMATED_TOTAL_MAX_EVENT_QTY,
     ALLOCATION_METHOD,
     EXPORTED_FLAG,
     EA_EM_MODIFIED_BY,
     EA_EM_MODIFIED_DT,
     EA_UPDATE_DT,
     EA_LOAD_DT,
     COPYEVENTID,
     COPYHISTORYWITHCOPYEVENT,
     COPYHISTORYEVENTWEIGHTING,
     COPYHISTORYSALESWEIGHTING,
     COPYHISTORYPERCENTLIFT,
     COPYHISTORYBEGINDATE,
     COPYHISTORYENDDATE,
     COPYHISTORYWEEKS,
     EM_ALLOC_MODIFIED_BY,
     EM_ALLOC_MODIFIED_DT,
     EM_ALLOC_EXP_MODIFIED_BY,
     EM_ALLOC_EXP_MODIFIED_DT,
     EM_DISP_MODIFIED_BY,
     EM_DISP_MODIFIED_DT,
     EM_EXIT_STRGY_MODIFIED_BY,
     EM_EXIT_STRGY_MODIFIED_DT,
     EM_GENERAL_MODIFIED_BY,
     EM_GENERAL_MODIFIED_DT,
     EM_MKTG_MODIFIED_BY,
     EM_MKTG_MODIFIED_DT,
     EM_PRICING_MODIFIED_BY,
     EM_PRICING_MODIFIED_DT,
     EM_VF_MODIFIED_BY,
     EM_VF_MODIFIED_DT
) AS
SELECT ESR.EM_EVENT_ID, ESR.PRODUCT_ID, ESR.COUNTRY_CD, CASE WHEN (NOT (LOC.LOCATION_ID ISNULL)) THEN LOC.LOCATION_ID ELSE NULL::INT4 END AS LOCATION_ID, CASE WHEN (NOT (ADV.EM_EVENT_SKU_ADV_ID ISNULL)) THEN ADV.EM_EVENT_SKU_ADV_ID ELSE NULL::INT4 END AS EM_EVENT_SKU_ADV_ID, CASE WHEN (NOT (LOC.EM_ALLOCATION_ID ISNULL)) THEN LOC.EM_ALLOCATION_ID ELSE NULL::INT8 END AS EM_ALLOCATION_ID, CASE WHEN (NOT (LOC.EM_STORE_TO_EM_DISP_LOC_ID ISNULL)) THEN LOC.EM_STORE_TO_EM_DISP_LOC_ID ELSE NULL::INT4 END AS EM_STORE_TO_EM_DISP_LOC_ID, ESR.EVENT_NAME, ESR.EVENT_DESC, ESR.EVENT_START_DT, ESR.EVENT_END_DT, ESR.EVENT_LOCK_DT, ESR.EVENT_US_LOCK_DT, ESR.EVENT_TURN_IN_DT, ESR.EVENT_DEFAULT_START_DT, ESR.EVENT_DEFAULT_END_DT, ESR.POG_ID_SUFFIX, ESR.E_EM_MODIFIED_BY, ESR.E_EM_MODIFIED_DT, ESR.STANDARD_FLAG, ESR.EM_PURGED_FLAG, ESR.E_UPDATE_DT, ESR.E_LOAD_DT, ESR.EM_ARTICLE_ID, ESR.SKU_NBR, ESR.BUYER_NAME, ESR.NATL_PRICE, ESR.NATL_PRICE_TXT, ESR.MAP_AMT, ESR.MAP_AMT_TXT, ESR.DISP_RANK_A_QTY, ESR.DISP_RANK_B_QTY, ESR.DISP_RANK_C_QTY, ESR.DISP_RANK_D_QTY, ESR.DISP_RANK_E_QTY, ESR.DISP_RANK_F_QTY, ESR.NON_DISP_RANK_A_QTY, ESR.NON_DISP_RANK_B_QTY, ESR.NON_DISP_RANK_C_QTY, ESR.NON_DISP_RANK_D_QTY, ESR.NON_DISP_RANK_E_QTY, ESR.NON_DISP_RANK_F_QTY, ESR.DISCOUNT_TYPE, ESR.ACTUAL_AMT, ESR.ACTUAL_AMT_TXT, ESR.DISCOUNT_AMT, ESR.DISCOUNT_AMT_TXT, ESR.STARTING_PRICE, ESR.STARTING_PRICE_TXT, ESR.DISCOUNT_PRICE, ESR.DISCOUNT_PRICE_TXT, ESR.PERCENT_OFF, ESR.PERCENT_OFF_TXT, ESR.OFFER_AMT, ESR.OFFER_AMT_TXT, ESR.OFFER_LABEL_1, ESR.OFFER_LABEL_2, ESR.OFFER_LABEL_3, ESR.VENDOR_NAME, ESR.CREATED_DT, ESR.ALLOCATION_TYPE, ESR.SAP_DIVISION_DESC, ESR.SAP_DEPARTMENT_DESC, ESR.SAP_CATEGORY_DESC, ESR.SAP_CLASS_DESC, ESR.SKU_DESC, ESR.CONTENTS, ESR.UOM_DESC, ESR.STATUS_ID, ESR.VENDOR_ID, ESR.BRAND_NAME, ESR.CREATED_BY, ESR.PROMO_FLAG, ESR.PROMO_START_DT, ESR.PROMO_END_DT, ESR.DISP_UPLIFT_PCT, ESR.NONDISP_UPLIFT_PCT, ESR.MIN_PRES_QTY, ESR.POS_START_DT, ESR.POS_END_DT, ESR.VENDOR_PURCHGRP_NAME, ESR.MODE_PRICE, ESR.MODE_PRICE_TXT, ESR.MODE_COST, ESR.MODE_COST_TXT, SKU.LIKESKU AS LIKE_ARTICLE_SKU, ESR.PAST_PROMO_NAME, ESR.DISPLAY_INITIAL_PLANNER, ESR.DISPLAY_FINAL_PLANNER, ESR.DISPLAY_PLANNER_QTY, ESR.EXIT_STRGY_FROM_STATUS_CD, ESR.EXIT_STRGY_TO_STATUS_CD, ESR.EXIT_STRGY_MSG, ESR.MKTG_VARIETY_STYLE_TYPE, ESR.MKTG_PRIMARY_STORY_TYPE, ESR.MKTG_SECONDARY_STORY_TYPE, ESR.MKTG_EXCLUSIVE_TO_PETM_FLAG, ESR.MKTG_NEW_PHOTO_REQUIRED_FLAG, ESR.MKTG_PRIMARY_SIGN_TYPE, ESR.MKTG_SECONDARY_SIGN_TYPE, ESR.MKTG_DISPLAY_LOCATION_MSG, ESR.MKTG_HAS_COUPON_FLAG, ESR.MKTG_COUPON_LOCATION, ESR.MKTG_COUPON_DETAILS, ESR.MKTG_HAS_BONUS_FLAG, ESR.MKTG_BONUS_LOCATION, ESR.MKTG_BONUS_DETAILS, ESR.MKTG_ON_RADIO_FLAG, ESR.MKTG_ON_TV_FLAG, ESR.ALLOC_EXP_ALLOC_REQUIRED_FLAG, ESR.ALLOC_EXP_MIN_QTY, ESR.ALLOC_EXP_MAX_QTY, ESR.ALLOC_EXP_ANTCPTD_LIFT_PCT, ESR.ALLOC_EXP_VENDOR_CMTD_QTY, ESR.ALLOC_EXP_LIKE_ARTICLE_SKU, ESR.ALLOC_EXP_PAST_PROMO_NAME, ESR.STORE_LISTING_COUNT, ESR.ES_EM_MODIFIED_BY, ESR.ES_EM_MODIFIED_DT, ESR.ES_UPDATE_DT, ESR.ES_LOAD_DT, ESR.EM_VENDOR_FUNDING_ID, ESR.VF_VENDOR_NAME, ESR.VF_TYPE, ESR.VF_AMT, ESR.MAX_AMT, ESR.BILL_ALTERNATE_VENDOR_FLAG, ESR.ALTERNATE_VENDOR_ID, ESR.VF_START_DT, ESR.VF_END_DT, ESR.VF_EM_COMMENT, ESR.VF_EM_MODIFIED_BY, ESR.VF_EM_MODIFIED_DT, ESR.VF_UPDATE_DT, ESR.VF_LOAD_DT, ADV.EM_EVENT_ADV_ID, ADV.EVENT_ADV_NAME, ADV.AD_PAGES, ADV.LOCATION_QTY, ADV.ADV_PRINT_DT, ADV.ADV_START_DT, ADV.ADV_END_DT, ADV.PICTURE_FLAG, ADV.PAGE_NBR, ADV."LOCATION", ADV.CIRCULAR_FLAG, ADV.CIRCULAR_PICTURE_TYPE, ADV.EM_MODIFIED_BY AS ADV_EM_MODIFIED_BY, ADV.EM_MODIFIED_DT AS ADV_EM_MODIFIED_DT, ADV.UPDATE_DT AS ADV_UPDATE_DT, ADV.LOAD_DT AS ADV_LOAD_DT, ESR.ALLOC_EXPECTATIONS_COMMENT_TXT, ESR.ALLOCATION_COMMENT_TXT, ESR.DISPLAY_COMMENT_TXT, ESR.EXIT_STRATEGY_COMMENT_TXT, ESR.GENERAL_COMMENT_TXT, ESR.MARKETING_COMMENT_TXT, ESR.PROMO_PRICING_COMMENT_TXT, ESR.VENDOR_FUNDING_COMMENT_TXT, LOC.EM_DISP_LOC_ID, LOC.EM_DISP_LOC_NAME, LOC.EM_DISP_LOC_STR_CNT, LOC."VERSION", LOC.DL_EM_MODIFIED_BY, LOC.DL_EM_MODIFIED_DT, LOC.DL_UPDATE_DT, LOC.DL_LOAD_DT, LOC.POG_ID, LOC.STORE_CNT, LOC.SKU_DL_EM_MODIFIED_BY, LOC.SKU_DL_EM_MODIFIED_DT, LOC.SKU_DL_UPDATE_DT, LOC.SKU_DL_LOAD_DT, LOC.STR_DL_START_DT, LOC.STR_DL_END_DT, LOC.STR_DL_EM_MODIFIED_BY, LOC.STR_DL_EM_MODIFIED_DT, LOC.STR_DL_UPDATE_DT, LOC.STR_DL_LOAD_DT, LOC.EM_STORE_ID, LOC.STORE_NBR, LOC."DESCRIPTION", LOC.ACTIVE_FLAG, LOC.REGION, LOC.DISTRICT, LOC.EFFECTIVE_START_DT, LOC.EFFECTIVE_END_DT, LOC.STR_EM_MODIFIED_BY, LOC.STR_EM_MODIFIED_DT, LOC.STR_UPDATE_DT, LOC.STR_LOAD_DT, LOC.SAP_POG_PREFIX_NAME, LOC.ALLOCATION_QTY, LOC.ESTIMATED_TOTAL_MAX_EVENT_QTY, LOC.ALLOCATION_METHOD, LOC.EXPORTED_FLAG, LOC.EA_EM_MODIFIED_BY, LOC.EA_EM_MODIFIED_DT, LOC.EA_UPDATE_DT, LOC.EA_LOAD_DT, SKU.COPYEVENTID, SKU.COPYHISTORYWITHCOPYEVENT, SKU.COPYHISTORYEVENTWEIGHTING, SKU.COPYHISTORYSALESWEIGHTING, SKU.COPYHISTORYPERCENTLIFT, SKU.COPYHISTORYBEGINDATE, SKU.COPYHISTORYENDDATE, SKU.COPYHISTORYWEEKS, CASE WHEN (CASE WHEN (NOT (ESR.EM_ALLOC_MODIFIED_DT ISNULL)) THEN ESR.EM_ALLOC_MODIFIED_DT WHEN (ESR.EM_ALLOC_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END > CASE WHEN (NOT (LOC.EM_ALLOC_MODIFIED_DT ISNULL)) THEN LOC.EM_ALLOC_MODIFIED_DT WHEN (LOC.EM_ALLOC_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END) THEN ESR.EM_ALLOC_MODIFIED_BY ELSE LOC.EM_ALLOC_MODIFIED_BY END AS EM_ALLOC_MODIFIED_BY, CASE WHEN (CASE WHEN (NOT (ESR.EM_ALLOC_MODIFIED_DT ISNULL)) THEN ESR.EM_ALLOC_MODIFIED_DT WHEN (ESR.EM_ALLOC_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END > CASE WHEN (NOT (LOC.EM_ALLOC_MODIFIED_DT ISNULL)) THEN LOC.EM_ALLOC_MODIFIED_DT WHEN (LOC.EM_ALLOC_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END) THEN ESR.EM_ALLOC_MODIFIED_DT ELSE LOC.EM_ALLOC_MODIFIED_DT END AS EM_ALLOC_MODIFIED_DT, ESR.EM_ALLOC_EXP_MODIFIED_BY, ESR.EM_ALLOC_EXP_MODIFIED_DT, CASE WHEN (CASE WHEN (NOT (ESR.EM_DISP_MODIFIED_DT ISNULL)) THEN ESR.EM_DISP_MODIFIED_DT WHEN (ESR.EM_DISP_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END > CASE WHEN (NOT (LOC.EM_DISP_MODIFIED_DT ISNULL)) THEN LOC.EM_DISP_MODIFIED_DT WHEN (LOC.EM_DISP_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END) THEN ESR.EM_DISP_MODIFIED_BY ELSE LOC.EM_DISP_MODIFIED_BY END AS EM_DISP_MODIFIED_BY, CASE WHEN (CASE WHEN (NOT (ESR.EM_DISP_MODIFIED_DT ISNULL)) THEN ESR.EM_DISP_MODIFIED_DT WHEN (ESR.EM_DISP_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END > CASE WHEN (NOT (LOC.EM_DISP_MODIFIED_DT ISNULL)) THEN LOC.EM_DISP_MODIFIED_DT WHEN (LOC.EM_DISP_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END) THEN ESR.EM_DISP_MODIFIED_DT ELSE LOC.EM_DISP_MODIFIED_DT END AS EM_DISP_MODIFIED_DT, ESR.EM_EXIT_STRGY_MODIFIED_BY, ESR.EM_EXIT_STRGY_MODIFIED_DT, ESR.EM_GENERAL_MODIFIED_BY, ESR.EM_GENERAL_MODIFIED_DT, CASE WHEN (CASE WHEN (NOT (ESR.EM_MKTG_MODIFIED_DT ISNULL)) THEN ESR.EM_MKTG_MODIFIED_DT WHEN (ESR.EM_MKTG_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END >= CASE WHEN (NOT (ADV.EM_MKTG_MODIFIED_DT ISNULL)) THEN ADV.EM_MKTG_MODIFIED_DT WHEN (ADV.EM_MKTG_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END) THEN ESR.EM_MKTG_MODIFIED_BY ELSE ADV.EM_MKTG_MODIFIED_BY END AS EM_MKTG_MODIFIED_BY, CASE WHEN (CASE WHEN (NOT (ESR.EM_MKTG_MODIFIED_DT ISNULL)) THEN ESR.EM_MKTG_MODIFIED_DT WHEN (ESR.EM_MKTG_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END >= CASE WHEN (NOT (ADV.EM_MKTG_MODIFIED_DT ISNULL)) THEN ADV.EM_MKTG_MODIFIED_DT WHEN (ADV.EM_MKTG_MODIFIED_DT = '1900-01-01 00:00:00'::"TIMESTAMP") THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END) THEN ESR.EM_MKTG_MODIFIED_DT ELSE ADV.EM_MKTG_MODIFIED_DT END AS EM_MKTG_MODIFIED_DT, ESR.EM_PRICING_MODIFIED_BY, ESR.EM_PRICING_MODIFIED_DT, ESR.EM_VF_MODIFIED_BY, ESR.EM_VF_MODIFIED_DT FROM (((ADMIN.EM_EVENT_SKU_RPT ESR LEFT JOIN ADMIN.EM_EVENT_SKU_ADV ADV ON ((((ESR.EM_EVENT_ID = ADV.EM_EVENT_ID) AND (ESR.PRODUCT_ID = ADV.PRODUCT_ID)) AND (ESR.COUNTRY_CD = ADV.COUNTRY_CD)))) LEFT JOIN ADMIN.EM_EVENT_SKU_STORE LOC ON ((((ESR.EM_EVENT_ID = LOC.EM_EVENT_ID) AND (ESR.PRODUCT_ID = LOC.PRODUCT_ID)) AND (ESR.COUNTRY_CD = LOC.COUNTRY_CD)))) LEFT JOIN ADMIN.EM_EVENT_SKU SKU ON ((((ESR.EM_EVENT_ID = SKU.EM_EVENT_ID) AND (ESR.PRODUCT_ID = SKU.PRODUCT_ID)) AND (ESR.COUNTRY_CD = SKU.COUNTRY_CD))));

\echo
\echo *****  Creating view:  "EMPL_PTO_VW"

CREATE or replace VIEW  EMPL_PTO_VW
(
     CAL_YR,
     EMPLOYEE_ID,
     PS_ABSENCE_QUOTA_CD,
     EMPL_PTO_END_DT,
     PTO_HRS_ALLOWED,
     PTO_HRS_TAKEN,
     PTO_HRS_BALANCE,
     PTO_HRS_POTENTIAL,
     LOAD_TSTMP
) AS
(SELECT EMPL_PTO_PSOFT.CAL_YR, EMPL_PTO_PSOFT.EMPLOYEE_ID, EMPL_PTO_PSOFT.PS_ABSENCE_QUOTA_CD, '1901-01-01 00:00:00'::"TIMESTAMP" AS EMPL_PTO_END_DT, EMPL_PTO_PSOFT.PTO_HRS_ALLOWED, EMPL_PTO_PSOFT.PTO_HRS_TAKEN, EMPL_PTO_PSOFT.PTO_HRS_BALANCE, EMPL_PTO_PSOFT.PTO_HRS_POTENTIAL, EMPL_PTO_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_PTO_PSOFT) UNION ALL (SELECT EMPL_PTO.CAL_YR, EMPL_PTO.EMPLOYEE_ID, EMPL_PTO.PS_ABSENCE_QUOTA_CD, EMPL_PTO.EMPL_PTO_END_DT, EMPL_PTO.PTO_HRS_ALLOWED, EMPL_PTO.PTO_HRS_TAKEN, EMPL_PTO.PTO_HRS_BALANCE, EMPL_PTO.PTO_HRS_POTENTIAL, EMPL_PTO.LOAD_TSTMP FROM ADMIN.EMPL_PTO);

\echo
\echo *****  Creating view:  "EM_SKU_HOLDOUT_AUDIT_VW"

CREATE or replace VIEW  EM_SKU_HOLDOUT_AUDIT_VW
(
     EM_EVENT_ID,
     PRODUCT_ID,
     LOCATION_ID,
     USER_KEY,
     SKU_NBR,
     STORE_NBR,
     EM_DISP_LOC_ID,
     EM_DISP_LOC_NAME,
     VERSION,
     STORE_RANK,
     BEGIN_DT,
     END_DT,
     EMS_HOLDOUT_QTY,
     EM_DPRQTY_HIGH,
     EM_DPRQTY_MED,
     EM_DPRQTY_LOW,
     DPR_HOLDOUT_QTY,
     DPR_ERROR_IND,
     DPR_ERROR_DESC,
     IS_EXPORTED_IND,
     DIRECT_VENDOR_ID,
     VENDOR_NBR
) AS
SELECT ESH.EM_EVENT_ID, ESH.PRODUCT_ID, ESH.LOCATION_ID, ESH.USER_KEY, ESH.SKU_NBR, ESH.STORE_NBR, ESH.EM_DISP_LOC_ID, EDL.EM_DISP_LOC_NAME, EDL."VERSION", ESH.STORE_RANK, ESH.BEGIN_DT, ESH.END_DT, ESH.HOLDOUT_QTY AS EMS_HOLDOUT_QTY, ESDL.EM_DPRQTY_HIGH, ESDL.EM_DPRQTY_MED, ESDL.EM_DPRQTY_LOW, DDSH.HOLD_QUANTITY AS DPR_HOLDOUT_QTY, ESH.DPR_ERROR_IND, ESH.DPR_ERROR_DESC, ESH.IS_EXPORTED_IND, SC.DIRECT_VENDOR_ID, VP.VENDOR_NBR FROM ((((((ADMIN.EM_SKU_HOLDOUT ESH LEFT JOIN ADMIN.DP_DEMAND_SKU_HOLD DDSH ON ((((ESH.PRODUCT_ID = DDSH.PRODUCT_ID) AND (ESH.LOCATION_ID = DDSH.LOCATION_ID)) AND ((ESH.USER_KEY)::"VARCHAR" = DDSH.USER_KEY)))) JOIN ADMIN.EM_DISP_LOC EDL ON ((ESH.EM_DISP_LOC_ID = EDL.EM_DISP_LOC_ID))) LEFT JOIN ADMIN.SUPPLY_CHAIN SC ON (((ESH.PRODUCT_ID = SC.PRODUCT_ID) AND (ESH.LOCATION_ID = SC.LOCATION_ID)))) LEFT JOIN ADMIN.VENDOR_PROFILE VP ON ((SC.DIRECT_VENDOR_ID = VP.VENDOR_ID))) JOIN ADMIN.SITE_PROFILE SP ON ((ESH.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN ADMIN.EM_SKU_DISP_LOC ESDL ON (((((ESH.EM_EVENT_ID = ESDL.EM_EVENT_ID) AND (ESH.PRODUCT_ID = ESDL.PRODUCT_ID)) AND (ESH.EM_DISP_LOC_ID = ESDL.EM_DISP_LOC_ID)) AND (SP.COUNTRY_CD = ESDL.COUNTRY_CD))));

\echo
\echo *****  Creating view:  "DT_IB_PO_SKU_FILL_RATE"

CREATE or replace VIEW  DT_IB_PO_SKU_FILL_RATE
(
     GLMS_GID,
     IB_DELV_ID,
     IB_PO_ID,
     SAP_PO_ID,
     PO_TYPE_ID,
     PRODUCT_ID,
     DT_PO_ORIG_ORD_QTY,
     DT_PO_ORD_QTY,
     DT_PO_RCPT_QTY,
     UPDATE_DT,
     LOAD_DT
) AS
(SELECT ('0'::NUMERIC)::NUMERIC(28,0) AS GLMS_GID, DT_IB_PO_SKU_FILL_RATE_ORIG.IB_DELV_ID, DT_IB_PO_SKU_FILL_RATE_ORIG.IB_PO_ID, DT_IB_PO_SKU_FILL_RATE_ORIG.SAP_PO_ID, DT_IB_PO_SKU_FILL_RATE_ORIG.PO_TYPE_ID, DT_IB_PO_SKU_FILL_RATE_ORIG.PRODUCT_ID, DT_IB_PO_SKU_FILL_RATE_ORIG.DT_PO_ORIG_ORD_QTY, DT_IB_PO_SKU_FILL_RATE_ORIG.DT_PO_ORD_QTY, DT_IB_PO_SKU_FILL_RATE_ORIG.DT_PO_RCPT_QTY, DT_IB_PO_SKU_FILL_RATE_ORIG.UPDATE_DT, DT_IB_PO_SKU_FILL_RATE_ORIG.LOAD_DT FROM ADMIN.DT_IB_PO_SKU_FILL_RATE_ORIG) UNION ALL (SELECT GLMS_IB_PO_SKU_FILL_RATE.GLMS_GID, GLMS_IB_PO_SKU_FILL_RATE.IB_DELV_ID, GLMS_IB_PO_SKU_FILL_RATE.IB_PO_ID, GLMS_IB_PO_SKU_FILL_RATE.SAP_PO_ID, GLMS_IB_PO_SKU_FILL_RATE.PO_TYPE_ID, GLMS_IB_PO_SKU_FILL_RATE.PRODUCT_ID, GLMS_IB_PO_SKU_FILL_RATE.DT_PO_ORIG_ORD_QTY, GLMS_IB_PO_SKU_FILL_RATE.DT_PO_ORD_QTY, GLMS_IB_PO_SKU_FILL_RATE.DT_PO_RCPT_QTY, GLMS_IB_PO_SKU_FILL_RATE.UPDATE_DT, GLMS_IB_PO_SKU_FILL_RATE.LOAD_DT FROM ADMIN.GLMS_IB_PO_SKU_FILL_RATE);

\echo
\echo *****  Creating view:  "DT_IB_DELV"

CREATE or replace VIEW  DT_IB_DELV
(
     GLMS_GID,
     IB_DELV_ID,
     IB_PO_ID,
     DT_CARRIER_ACCEPT_SLA_VIO_FLG,
     DT_ACTUAL_PKUP_SLA_VIO_FLG,
     DT_BOL_DISBAND_FLG,
     BOL_TRACK_STAT_CD,
     TMS_CARRIER_ID,
     CARRIER_TRACK_STAT_CD,
     TMS_CONTINUOUS_MOVE_ID,
     TMS_CONTINUOUS_MOVE_SEQ_NBR,
     TMS_COMMODITY_CD,
     TMS_CUBE_CNT,
     DT_DO_SLA_WARNING_FLG,
     DT_DC_SLA_VIO_FLG,
     DC_PO_TRACK_STAT_CD,
     DELAY_REASON_GID,
     DT_CATEGORY_ID,
     DELAY_REASON_CD,
     DELAY_REASON_EXPLANATION_TXT,
     DT_DELV_APPT_EDI_B4_DUE_DT_FLG,
     DT_DELV_APPT_LT_DUE_DATE_FLG,
     DT_DELV_EDI_DC_GATE_VARIANCE_FLG,
     DT_DELV_SLA_VIO_FLG,
     DT_DELV_SLA_WARNING_FLG,
     TMS_DELAYED_TIME_MINUTES,
     TMS_TRLR_TYPE_ID,
     DT_FIRST_CONTACT_METHOD,
     TMS_FREIGHT_TERMS_CD,
     DT_PO_FAILED_FLG,
     DT_PO_IS_WORKED_FLG,
     TMS_LOAD_ID,
     DT_LOAD_QUALITY_ISSUE_FLG,
     TMS_PALLET_CNT,
     SAP_REVISED_DUE_DATE_FLG,
     DT_PKUP_APPT_FLG,
     DT_RELEASE_DATE_SLA_VIO_FLG,
     DT_REPL_SLA_VIO_FLG,
     DT_RESEARCHING_FLG,
     PO_DEST_LOCATION_ID,
     PO_SOURCE_LOCATION_ID,
     CURRENT_STOP_LOCATION_ID,
     SPLIT_PO_SOURCE_CD,
     DT_SPLIT_PO_INFO_TXT,
     TMS_STOP_NBR,
     TMS_STOP_TYPE_CD,
     DT_TENDERED_SLA_VIO_FLG,
     TMS_BOL_ID,
     SAP_PO_ID,
     DT_PO_ID,
     TOTAL_PO_TRACK_STAT_CD,
     DT_DO_SLA_VIO_FLG,
     TMS_WEIGHT_AMT,
     TMS_BOL_STATUS_CD,
     DT_DECOMMISSIONED_FLG,
     DT_VENDOR_VIP_FLG,
     TMS_DRIVE_TIME_MINUTES,
     TMS_MILES_AMT,
     INCOTERM_CD,
     SAP_REFERENCE_PO,
     SAP_REFERENCE_PO_EXT,
     RA_STAT_CD,
     SOURCE_VENDOR_ID,
     TMS_CARRIER_ACCEPT_MAX_SSG_TSTMP,
     EDI_ACTUAL_DELV_TSTMP,
     EDI_ACTUAL_DELV_SSG_TSTMP,
     EDI_ACTUAL_PKUP_TSTMP,
     EDI_ACTUAL_PKUP_SSG_TSTMP,
     TMS_DO_EARLY_AVAIL_DT,
     TMS_DO_LATE_AVAIL_DT,
     EDI_PKUP_APPT_TSTMP,
     EDI_PKUP_APPT_SSG_TSTMP,
     TMS_PLANNED_PKUP_ETA_TSTMP,
     TMS_PLANNED_PKUP_ETA_SSG_TSTMP,
     TMS_PLANNED_DELV_ETA_TSTMP,
     TMS_PLANNED_DELV_ETA_SSG_TSTMP,
     DT_REVISED_DELV_APPT_TSTMP,
     DT_REVISED_DELV_APPT_SSG_TSTMP,
     EDI_REVISED_PKUP_TSTMP,
     EDI_REVISED_PKUP_SSG_TSTMP,
     EDI_REVISED_PKUP_APPT_TSTMP,
     EDI_REVISED_PKUP_APPT_SSG_TSTMP,
     TMS_TENDERED_MAX_SSG_TSTMP,
     TMS_DO_CREATE_GMT_TSTMP,
     TMS_DO_CREATE_SSG_TSTMP,
     DT_DELV_APPT_TSTMP,
     DT_DELV_APPT_SSG_TSTMP,
     WMS_GATE_ARRIVAL_TSTMP,
     WMS_GATE_ARRIVAL_SSG_TSTMP,
     WMS_LAST_RECEIPT_TSTMP,
     WMS_LAST_RECEIPT_SSG_TSTMP,
     WMS_FIRST_RECEIPT_TSTMP,
     WMS_FIRST_RECEIPT_SSG_TSTMP,
     SAP_PO_RELEASE_DT,
     WMS_DC_VERF_TSTMP,
     WMS_DC_VERF_SSG_TSTMP,
     SAP_ORIGINAL_PO_DUE_DT,
     SAP_REVISED_PO_DUE_DT,
     SAP_PO_CREATE_DT,
     EDI_CARRIER_ARRIVAL_TSTMP,
     EDI_CARRIER_DEPARTURE_TSTMP,
     DT_LAST_UPDATED_BY,
     DT_LAST_UPDATED_TSTMP,
     ODS_UPDATE_TSTMP,
     ODS_LOAD_TSTMP,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
(SELECT GLMS_IB_DELV.GLMS_GID, GLMS_IB_DELV.IB_DELV_ID, GLMS_IB_DELV.IB_PO_ID, GLMS_IB_DELV.DT_CARRIER_ACCEPT_SLA_VIO_FLG, GLMS_IB_DELV.DT_ACTUAL_PKUP_SLA_VIO_FLG, GLMS_IB_DELV.DT_BOL_DISBAND_FLG, GLMS_IB_DELV.BOL_TRACK_STAT_CD, GLMS_IB_DELV.TMS_CARRIER_ID, GLMS_IB_DELV.CARRIER_TRACK_STAT_CD, GLMS_IB_DELV.TMS_CONTINUOUS_MOVE_ID, GLMS_IB_DELV.TMS_CONTINUOUS_MOVE_SEQ_NBR, GLMS_IB_DELV.TMS_COMMODITY_CD, GLMS_IB_DELV.TMS_CUBE_CNT, GLMS_IB_DELV.DT_DO_SLA_WARNING_FLG, GLMS_IB_DELV.DT_DC_SLA_VIO_FLG, GLMS_IB_DELV.DC_PO_TRACK_STAT_CD, GLMS_IB_DELV.DELAY_REASON_GID, GLMS_IB_DELV.DT_CATEGORY_ID, GLMS_IB_DELV.DELAY_REASON_CD, GLMS_IB_DELV.DELAY_REASON_EXPLANATION_TXT, GLMS_IB_DELV.DT_DELV_APPT_EDI_B4_DUE_DT_FLG, GLMS_IB_DELV.DT_DELV_APPT_LT_DUE_DATE_FLG, GLMS_IB_DELV.DT_DELV_EDI_DC_GATE_VARIANCE_FLG, GLMS_IB_DELV.DT_DELV_SLA_VIO_FLG, GLMS_IB_DELV.DT_DELV_SLA_WARNING_FLG, GLMS_IB_DELV.TMS_DELAYED_TIME_MINUTES, GLMS_IB_DELV.TMS_TRLR_TYPE_ID, GLMS_IB_DELV.DT_FIRST_CONTACT_METHOD, GLMS_IB_DELV.TMS_FREIGHT_TERMS_CD, GLMS_IB_DELV.DT_PO_FAILED_FLG, GLMS_IB_DELV.DT_PO_IS_WORKED_FLG, GLMS_IB_DELV.TMS_LOAD_ID, GLMS_IB_DELV.DT_LOAD_QUALITY_ISSUE_FLG, GLMS_IB_DELV.TMS_PALLET_CNT, GLMS_IB_DELV.SAP_REVISED_DUE_DATE_FLG, GLMS_IB_DELV.DT_PKUP_APPT_FLG, GLMS_IB_DELV.DT_RELEASE_DATE_SLA_VIO_FLG, GLMS_IB_DELV.DT_REPL_SLA_VIO_FLG, GLMS_IB_DELV.DT_RESEARCHING_FLG, GLMS_IB_DELV.PO_DEST_LOCATION_ID, GLMS_IB_DELV.PO_SOURCE_LOCATION_ID, GLMS_IB_DELV.CURRENT_STOP_LOCATION_ID, GLMS_IB_DELV.SPLIT_PO_SOURCE_CD, GLMS_IB_DELV.DT_SPLIT_PO_INFO_TXT, GLMS_IB_DELV.TMS_STOP_NBR, GLMS_IB_DELV.TMS_STOP_TYPE_CD, GLMS_IB_DELV.DT_TENDERED_SLA_VIO_FLG, GLMS_IB_DELV.TMS_BOL_ID, GLMS_IB_DELV.SAP_PO_ID, GLMS_IB_DELV.DT_PO_ID, GLMS_IB_DELV.TOTAL_PO_TRACK_STAT_CD, GLMS_IB_DELV.DT_DO_SLA_VIO_FLG, GLMS_IB_DELV.TMS_WEIGHT_AMT, GLMS_IB_DELV.TMS_BOL_STATUS_CD, GLMS_IB_DELV.DT_DECOMMISSIONED_FLG, GLMS_IB_DELV.DT_VENDOR_VIP_FLG, GLMS_IB_DELV.TMS_DRIVE_TIME_MINUTES, GLMS_IB_DELV.TMS_MILES_AMT, GLMS_IB_DELV.INCOTERM_CD, GLMS_IB_DELV.SAP_REFERENCE_PO, GLMS_IB_DELV.SAP_REFERENCE_PO_EXT, GLMS_IB_DELV.RA_STAT_CD, GLMS_IB_DELV.SOURCE_VENDOR_ID, GLMS_IB_DELV.TMS_CARRIER_ACCEPT_MAX_SSG_TSTMP, GLMS_IB_DELV.EDI_ACTUAL_DELV_TSTMP, GLMS_IB_DELV.EDI_ACTUAL_DELV_SSG_TSTMP, GLMS_IB_DELV.EDI_ACTUAL_PKUP_TSTMP, GLMS_IB_DELV.EDI_ACTUAL_PKUP_SSG_TSTMP, GLMS_IB_DELV.TMS_DO_EARLY_AVAIL_DT, GLMS_IB_DELV.TMS_DO_LATE_AVAIL_DT, GLMS_IB_DELV.EDI_PKUP_APPT_TSTMP, GLMS_IB_DELV.EDI_PKUP_APPT_SSG_TSTMP, GLMS_IB_DELV.TMS_PLANNED_PKUP_ETA_TSTMP, GLMS_IB_DELV.TMS_PLANNED_PKUP_ETA_SSG_TSTMP, GLMS_IB_DELV.TMS_PLANNED_DELV_ETA_TSTMP, GLMS_IB_DELV.TMS_PLANNED_DELV_ETA_SSG_TSTMP, GLMS_IB_DELV.DT_REVISED_DELV_APPT_TSTMP, GLMS_IB_DELV.DT_REVISED_DELV_APPT_SSG_TSTMP, GLMS_IB_DELV.EDI_REVISED_PKUP_TSTMP, GLMS_IB_DELV.EDI_REVISED_PKUP_SSG_TSTMP, GLMS_IB_DELV.EDI_REVISED_PKUP_APPT_TSTMP, GLMS_IB_DELV.EDI_REVISED_PKUP_APPT_SSG_TSTMP, GLMS_IB_DELV.TMS_TENDERED_MAX_SSG_TSTMP, GLMS_IB_DELV.TMS_DO_CREATE_GMT_TSTMP, GLMS_IB_DELV.TMS_DO_CREATE_SSG_TSTMP, GLMS_IB_DELV.DT_DELV_APPT_TSTMP, GLMS_IB_DELV.DT_DELV_APPT_SSG_TSTMP, GLMS_IB_DELV.WMS_GATE_ARRIVAL_TSTMP, GLMS_IB_DELV.WMS_GATE_ARRIVAL_SSG_TSTMP, GLMS_IB_DELV.WMS_LAST_RECEIPT_TSTMP, GLMS_IB_DELV.WMS_LAST_RECEIPT_SSG_TSTMP, GLMS_IB_DELV.WMS_FIRST_RECEIPT_TSTMP, GLMS_IB_DELV.WMS_FIRST_RECEIPT_SSG_TSTMP, GLMS_IB_DELV.SAP_PO_RELEASE_DT, GLMS_IB_DELV.WMS_DC_VERF_TSTMP, GLMS_IB_DELV.WMS_DC_VERF_SSG_TSTMP, GLMS_IB_DELV.SAP_ORIGINAL_PO_DUE_DT, GLMS_IB_DELV.SAP_REVISED_PO_DUE_DT, GLMS_IB_DELV.SAP_PO_CREATE_DT, GLMS_IB_DELV.EDI_CARRIER_ARRIVAL_TSTMP, GLMS_IB_DELV.EDI_CARRIER_DEPARTURE_TSTMP, GLMS_IB_DELV.DT_LAST_UPDATED_BY, GLMS_IB_DELV.DT_LAST_UPDATED_TSTMP, GLMS_IB_DELV.ODS_UPDATE_TSTMP, GLMS_IB_DELV.ODS_LOAD_TSTMP, GLMS_IB_DELV.UPDATE_TSTMP, GLMS_IB_DELV.LOAD_TSTMP FROM ADMIN.GLMS_IB_DELV) UNION ALL (SELECT ('0'::NUMERIC)::NUMERIC(28,0) AS GLMS_GID, DT_IB_DELV_ORIG.IB_DELV_ID, DT_IB_DELV_ORIG.IB_PO_ID, INT2(DT_IB_DELV_ORIG.DT_CARRIER_ACCEPT_SLA_VIO_FLG) AS DT_CARRIER_ACCEPT_SLA_VIO_FLG, INT2(DT_IB_DELV_ORIG.DT_ACTUAL_PKUP_SLA_VIO_FLG) AS DT_ACTUAL_PKUP_SLA_VIO_FLG, INT2(DT_IB_DELV_ORIG.DT_BOL_DISBAND_FLG) AS DT_BOL_DISBAND_FLG, DT_IB_DELV_ORIG.BOL_TRACK_STAT_CD, DT_IB_DELV_ORIG.TMS_CARRIER_ID, DT_IB_DELV_ORIG.CARRIER_TRACK_STAT_CD, DT_IB_DELV_ORIG.TMS_CONTINUOUS_MOVE_ID, DT_IB_DELV_ORIG.TMS_CONTINUOUS_MOVE_SEQ_NBR, DT_IB_DELV_ORIG.TMS_COMMODITY_CD, DT_IB_DELV_ORIG.TMS_CUBE_CNT, INT2(DT_IB_DELV_ORIG.DT_DO_SLA_WARNING_FLG) AS DT_DO_SLA_WARNING_FLG, INT2(DT_IB_DELV_ORIG.DT_DC_SLA_VIO_FLG) AS DT_DC_SLA_VIO_FLG, DT_IB_DELV_ORIG.DC_PO_TRACK_STAT_CD, DT_IB_DELV_ORIG.DELAY_REASON_GID, DT_IB_DELV_ORIG.DT_CATEGORY_ID, DT_IB_DELV_ORIG.DELAY_REASON_CD, DT_IB_DELV_ORIG.DELAY_REASON_EXPLANATION_TXT, INT2(DT_IB_DELV_ORIG.DT_DELV_APPT_EDI_B4_DUE_DT_FLG) AS DT_DELV_APPT_EDI_B4_DUE_DT_FLG, INT2(DT_IB_DELV_ORIG.DT_DELV_APPT_LT_DUE_DATE_FLG) AS DT_DELV_APPT_LT_DUE_DATE_FLG, INT2(DT_IB_DELV_ORIG.DT_DELV_EDI_DC_GATE_VARIANCE_FLG) AS DT_DELV_EDI_DC_GATE_VARIANCE_FLG, INT2(DT_IB_DELV_ORIG.DT_DELV_SLA_VIO_FLG) AS DT_DELV_SLA_VIO_FLG, INT2(DT_IB_DELV_ORIG.DT_DELV_SLA_WARNING_FLG) AS DT_DELV_SLA_WARNING_FLG, DT_IB_DELV_ORIG.TMS_DELAYED_TIME_MINUTES, DT_IB_DELV_ORIG.TMS_TRLR_TYPE_ID, DT_IB_DELV_ORIG.DT_FIRST_CONTACT_METHOD, DT_IB_DELV_ORIG.TMS_FREIGHT_TERMS_CD, INT2(DT_IB_DELV_ORIG.DT_PO_FAILED_FLG) AS DT_PO_FAILED_FLG, INT2(DT_IB_DELV_ORIG.DT_PO_IS_WORKED_FLG) AS DT_PO_IS_WORKED_FLG, DT_IB_DELV_ORIG.TMS_LOAD_ID, INT2(DT_IB_DELV_ORIG.DT_LOAD_QUALITY_ISSUE_FLG) AS DT_LOAD_QUALITY_ISSUE_FLG, DT_IB_DELV_ORIG.TMS_PALLET_CNT, INT2(DT_IB_DELV_ORIG.SAP_REVISED_DUE_DATE_FLG) AS SAP_REVISED_DUE_DATE_FLG, INT2(DT_IB_DELV_ORIG.DT_PKUP_APPT_FLG) AS DT_PKUP_APPT_FLG, INT2(DT_IB_DELV_ORIG.DT_RELEASE_DATE_SLA_VIO_FLG) AS DT_RELEASE_DATE_SLA_VIO_FLG, INT2(DT_IB_DELV_ORIG.DT_REPL_SLA_VIO_FLG) AS DT_REPL_SLA_VIO_FLG, INT2(DT_IB_DELV_ORIG.DT_RESEARCHING_FLG) AS DT_RESEARCHING_FLG, DT_IB_DELV_ORIG.PO_DEST_LOCATION_ID, DT_IB_DELV_ORIG.PO_SOURCE_LOCATION_ID, DT_IB_DELV_ORIG.CURRENT_STOP_LOCATION_ID, DT_IB_DELV_ORIG.SPLIT_PO_SOURCE_CD, DT_IB_DELV_ORIG.DT_SPLIT_PO_INFO_TXT, DT_IB_DELV_ORIG.TMS_STOP_NBR, DT_IB_DELV_ORIG.TMS_STOP_TYPE_CD, INT2(DT_IB_DELV_ORIG.DT_TENDERED_SLA_VIO_FLG) AS DT_TENDERED_SLA_VIO_FLG, DT_IB_DELV_ORIG.TMS_BOL_ID, DT_IB_DELV_ORIG.SAP_PO_ID, DT_IB_DELV_ORIG.DT_PO_ID, DT_IB_DELV_ORIG.TOTAL_PO_TRACK_STAT_CD, INT2(DT_IB_DELV_ORIG.DT_DO_SLA_VIO_FLG) AS DT_DO_SLA_VIO_FLG, DT_IB_DELV_ORIG.TMS_WEIGHT_AMT, DT_IB_DELV_ORIG.TMS_BOL_STATUS_CD, INT2(DT_IB_DELV_ORIG.DT_DECOMMISSIONED_FLG) AS DT_DECOMMISSIONED_FLG, INT2(DT_IB_DELV_ORIG.DT_VENDOR_VIP_FLG) AS DT_VENDOR_VIP_FLG, DT_IB_DELV_ORIG.TMS_DRIVE_TIME_MINUTES, DT_IB_DELV_ORIG.TMS_MILES_AMT, DT_IB_DELV_ORIG.INCOTERM_CD, DT_IB_DELV_ORIG.SAP_REFERENCE_PO, DT_IB_DELV_ORIG.SAP_REFERENCE_PO_EXT, DT_IB_DELV_ORIG.RA_STAT_CD, DT_IB_DELV_ORIG.SOURCE_VENDOR_ID, DT_IB_DELV_ORIG.TMS_CARRIER_ACCEPT_MAX_SSG_TSTMP, DT_IB_DELV_ORIG.EDI_ACTUAL_DELV_TSTMP, DT_IB_DELV_ORIG.EDI_ACTUAL_DELV_SSG_TSTMP, DT_IB_DELV_ORIG.EDI_ACTUAL_PKUP_TSTMP, DT_IB_DELV_ORIG.EDI_ACTUAL_PKUP_SSG_TSTMP, DT_IB_DELV_ORIG.TMS_DO_EARLY_AVAIL_DT, DT_IB_DELV_ORIG.TMS_DO_LATE_AVAIL_DT, DT_IB_DELV_ORIG.EDI_PKUP_APPT_TSTMP, DT_IB_DELV_ORIG.EDI_PKUP_APPT_SSG_TSTMP, DT_IB_DELV_ORIG.TMS_PLANNED_PKUP_ETA_TSTMP, DT_IB_DELV_ORIG.TMS_PLANNED_PKUP_ETA_SSG_TSTMP, DT_IB_DELV_ORIG.TMS_PLANNED_DELV_ETA_TSTMP, DT_IB_DELV_ORIG.TMS_PLANNED_DELV_ETA_SSG_TSTMP, DT_IB_DELV_ORIG.DT_REVISED_DELV_APPT_TSTMP, DT_IB_DELV_ORIG.DT_REVISED_DELV_APPT_SSG_TSTMP, DT_IB_DELV_ORIG.EDI_REVISED_PKUP_TSTMP, DT_IB_DELV_ORIG.EDI_REVISED_PKUP_SSG_TSTMP, DT_IB_DELV_ORIG.EDI_REVISED_PKUP_APPT_TSTMP, DT_IB_DELV_ORIG.EDI_REVISED_PKUP_APPT_SSG_TSTMP, DT_IB_DELV_ORIG.TMS_TENDERED_MAX_SSG_TSTMP, DT_IB_DELV_ORIG.TMS_DO_CREATE_GMT_TSTMP, DT_IB_DELV_ORIG.TMS_DO_CREATE_SSG_TSTMP, DT_IB_DELV_ORIG.DT_DELV_APPT_TSTMP, DT_IB_DELV_ORIG.DT_DELV_APPT_SSG_TSTMP, DT_IB_DELV_ORIG.WMS_GATE_ARRIVAL_TSTMP, DT_IB_DELV_ORIG.WMS_GATE_ARRIVAL_SSG_TSTMP, DT_IB_DELV_ORIG.WMS_LAST_RECEIPT_TSTMP, DT_IB_DELV_ORIG.WMS_LAST_RECEIPT_SSG_TSTMP, DT_IB_DELV_ORIG.WMS_FIRST_RECEIPT_TSTMP, DT_IB_DELV_ORIG.WMS_FIRST_RECEIPT_SSG_TSTMP, DT_IB_DELV_ORIG.SAP_PO_RELEASE_DT, DT_IB_DELV_ORIG.WMS_DC_VERF_TSTMP, DT_IB_DELV_ORIG.WMS_DC_VERF_SSG_TSTMP, DT_IB_DELV_ORIG.SAP_ORIGINAL_PO_DUE_DT, DT_IB_DELV_ORIG.SAP_REVISED_PO_DUE_DT, DT_IB_DELV_ORIG.SAP_PO_CREATE_DT, DT_IB_DELV_ORIG.EDI_CARRIER_ARRIVAL_TSTMP, DT_IB_DELV_ORIG.EDI_CARRIER_DEPARTURE_TSTMP, DT_IB_DELV_ORIG.DT_LAST_UPDATED_BY, DT_IB_DELV_ORIG.DT_LAST_UPDATED_TSTMP, DT_IB_DELV_ORIG.ODS_UPDATE_TSTMP, DT_IB_DELV_ORIG.ODS_LOAD_TSTMP, DT_IB_DELV_ORIG.UPDATE_TSTMP, DT_IB_DELV_ORIG.LOAD_TSTMP FROM ADMIN.DT_IB_DELV_ORIG);

\echo
\echo *****  Creating view:  "INV_LISTING_PRICE_DAY_VW"

CREATE or replace VIEW  INV_LISTING_PRICE_DAY_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     WEEK_DT,
     FISCAL_WK,
     SKU_NBR,
     STORE_NBR,
     SALES_ORG_CD,
     SKU_STATUS_ID,
     NAT_PRICE_AMT,
     NAT_PRICING_REASON_CD,
     SKU_STORE_PRICE_AMT,
     SKU_STORE_PRICING_REASON_CD,
     PROMO_PRICE_AMT
) AS
(SELECT LD.DAY_DT, LD.PRODUCT_ID, LD.LOCATION_ID, LD.WEEK_DT, LD.FISCAL_WK, LD.SKU_NBR, LD.STORE_NBR, LD.SALES_ORG_CD, LD.STATUS_ID AS SKU_STATUS_ID, NPD.COND_AMT AS NAT_PRICE_AMT, NPD.PRICING_REASON_CD AS NAT_PRICING_REASON_CD, SS_REG.COND_AMT AS SKU_STORE_PRICE_AMT, SS_REG.PRICING_REASON_CD AS SKU_STORE_PRICING_REASON_CD, SS_PROMO.COND_AMT AS PROMO_PRICE_AMT FROM ((((SELECT D.DAY_DT, D.WEEK_DT, D.FISCAL_WK, LD.SKU_NBR, LD.STORE_NBR, LD.PRODUCT_ID, LD.LOCATION_ID, SKU.STATUS_ID, CASE WHEN (SITE.COUNTRY_CD = 'CA'::BPCHAR) THEN 'CA01'::"VARCHAR" WHEN ((SITE.COUNTRY_CD = 'US'::BPCHAR) AND (SITE.STATE_CD = 'PR'::BPCHAR)) THEN 'PR01'::"VARCHAR" WHEN (SITE.COUNTRY_CD = 'US'::BPCHAR) THEN 'US01'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SALES_ORG_CD FROM (((ADMIN.LISTING_DAY LD JOIN ADMIN.DAYS D ON (((D.DAY_DT >= LD.LISTING_EFF_DT) AND (D.DAY_DT <= LD.LISTING_END_DT)))) JOIN ADMIN.SITE_PROFILE SITE ON ((LD.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.SKU_PROFILE SKU ON ((LD.PRODUCT_ID = SKU.PRODUCT_ID))) WHERE (((LD.DELETE_IND <> 'X'::"VARCHAR") AND (LD.NEGATE_FLAG <> 'X'::"VARCHAR")) AND (D.WEEK_DT >= "TIMESTAMP"(DATE('now'::"VARCHAR"))))) LD LEFT JOIN (SELECT D.DAY_DT, NPD.SKU_NBR, NPD.SALES_ORG_CD, NPD.COND_AMT, NPD.PRICING_REASON_CD FROM (ADMIN.NATIONAL_PRICE_DAY NPD JOIN ADMIN.DAYS D ON (((D.DAY_DT >= NPD.COND_EFF_DT) AND (D.DAY_DT <= NPD.COND_END_DT)))) WHERE ((NPD.DELETE_IND <> 'X'::"VARCHAR") AND (NPD.COND_TYPE_CD = 'VKP0'::"VARCHAR"))) NPD ON ((((LD.DAY_DT = NPD.DAY_DT) AND (LD.SKU_NBR = NPD.SKU_NBR)) AND (LD.SALES_ORG_CD = NPD.SALES_ORG_CD)))) LEFT JOIN (SELECT D.DAY_DT, SSPD.SKU_NBR, SSPD.STORE_NBR, SSPD.COND_AMT, SSPD.PRICING_REASON_CD FROM (ADMIN.SKU_STORE_PRICE_DAY SSPD JOIN ADMIN.DAYS D ON (((D.DAY_DT >= SSPD.COND_EFF_DT) AND (D.DAY_DT <= SSPD.COND_END_DT)))) WHERE ((SSPD.DELETE_IND <> 'X'::"VARCHAR") AND (SSPD.COND_TYPE_CD = 'VKP0'::"VARCHAR"))) SS_REG ON ((((LD.DAY_DT = SS_REG.DAY_DT) AND (LD.SKU_NBR = SS_REG.SKU_NBR)) AND (LD.STORE_NBR = SS_REG.STORE_NBR)))) LEFT JOIN (SELECT D.DAY_DT, SSPD.SKU_NBR, SSPD.STORE_NBR, SSPD.COND_AMT FROM (ADMIN.SKU_STORE_PRICE_DAY SSPD JOIN ADMIN.DAYS D ON (((D.DAY_DT >= SSPD.COND_EFF_DT) AND (D.DAY_DT <= SSPD.COND_END_DT)))) WHERE ((SSPD.DELETE_IND <> 'X'::"VARCHAR") AND (SSPD.COND_TYPE_CD = 'VKA0'::"VARCHAR"))) SS_PROMO ON ((((LD.DAY_DT = SS_PROMO.DAY_DT) AND (LD.SKU_NBR = SS_PROMO.SKU_NBR)) AND (LD.STORE_NBR = SS_PROMO.STORE_NBR))))) UNION (SELECT IIPW.DAY_DT, IIPW.PRODUCT_ID, IIPW.LOCATION_ID, IIPW.WEEK_DT, IIPW.FISCAL_WK, IIPW.SKU_NBR, IIPW.STORE_NBR, IIPW.SALES_ORG_CD, IIPW.SKU_STATUS_ID, NPD.COND_AMT AS NAT_PRICE_AMT, NPD.PRICING_REASON_CD AS NAT_PRICING_REASON_CD, SS_REG.COND_AMT AS SKU_STORE_PRICE_AMT, SS_REG.PRICING_REASON_CD AS SKU_STORE_PRICING_REASON_CD, SS_PROMO.COND_AMT AS PROMO_PRICE_AMT FROM ((((SELECT D.DAY_DT, D.WEEK_DT, D.FISCAL_WK, IIPW.PRODUCT_ID, IIPW.LOCATION_ID, SKU.SKU_NBR, SITE.STORE_NBR, IIPW.POG_LISTED_IND, IIPW.ON_HAND_QTY, IIPW.SKU_STATUS_ID, CASE WHEN (SITE.COUNTRY_CD = 'CA'::BPCHAR) THEN 'CA01'::"VARCHAR" WHEN ((SITE.COUNTRY_CD = 'US'::BPCHAR) AND (SITE.STATE_CD = 'PR'::BPCHAR)) THEN 'PR01'::"VARCHAR" WHEN (SITE.COUNTRY_CD = 'US'::BPCHAR) THEN 'US01'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SALES_ORG_CD FROM (((ADMIN.INV_INSTOCK_PRICE_WK IIPW JOIN ADMIN.DAYS D ON ((D.WEEK_DT = IIPW.WEEK_DT))) JOIN ADMIN.SKU_PROFILE SKU ON ((IIPW.PRODUCT_ID = SKU.PRODUCT_ID))) JOIN ADMIN.SITE_PROFILE SITE ON ((IIPW.LOCATION_ID = SITE.LOCATION_ID))) WHERE ((SITE.LOCATION_TYPE_ID IN (6, 8)) AND ((IIPW.POG_LISTED_IND = 1) OR (IIPW.ON_HAND_QTY > '0'::NUMERIC)))) IIPW LEFT JOIN (SELECT D.DAY_DT, NPD.SKU_NBR, NPD.SALES_ORG_CD, NPD.COND_AMT, NPD.PRICING_REASON_CD FROM (ADMIN.NATIONAL_PRICE_DAY NPD JOIN ADMIN.DAYS D ON (((D.DAY_DT >= NPD.COND_EFF_DT) AND (D.DAY_DT <= NPD.COND_END_DT)))) WHERE ((NPD.DELETE_IND <> 'X'::"VARCHAR") AND (NPD.COND_TYPE_CD = 'VKP0'::"VARCHAR"))) NPD ON ((((IIPW.DAY_DT = NPD.DAY_DT) AND (IIPW.SKU_NBR = NPD.SKU_NBR)) AND (IIPW.SALES_ORG_CD = NPD.SALES_ORG_CD)))) LEFT JOIN (SELECT D.DAY_DT, SSPD.SKU_NBR, SSPD.STORE_NBR, SSPD.COND_AMT, SSPD.PRICING_REASON_CD FROM (ADMIN.SKU_STORE_PRICE_DAY SSPD JOIN ADMIN.DAYS D ON (((D.DAY_DT >= SSPD.COND_EFF_DT) AND (D.DAY_DT <= SSPD.COND_END_DT)))) WHERE ((SSPD.DELETE_IND <> 'X'::"VARCHAR") AND (SSPD.COND_TYPE_CD = 'VKP0'::"VARCHAR"))) SS_REG ON ((((IIPW.DAY_DT = SS_REG.DAY_DT) AND (IIPW.SKU_NBR = SS_REG.SKU_NBR)) AND (IIPW.STORE_NBR = SS_REG.STORE_NBR)))) LEFT JOIN (SELECT D.DAY_DT, SSPD.SKU_NBR, SSPD.STORE_NBR, SSPD.COND_AMT FROM (ADMIN.SKU_STORE_PRICE_DAY SSPD JOIN ADMIN.DAYS D ON (((D.DAY_DT >= SSPD.COND_EFF_DT) AND (D.DAY_DT <= SSPD.COND_END_DT)))) WHERE ((SSPD.DELETE_IND <> 'X'::"VARCHAR") AND (SSPD.COND_TYPE_CD = 'VKA0'::"VARCHAR"))) SS_PROMO ON ((((IIPW.DAY_DT = SS_PROMO.DAY_DT) AND (IIPW.SKU_NBR = SS_PROMO.SKU_NBR)) AND (IIPW.STORE_NBR = SS_PROMO.STORE_NBR)))));

\echo
\echo *****  Creating view:  "INV_LISTING_PRICE_LU_VW"

CREATE or replace VIEW  INV_LISTING_PRICE_LU_VW
(
     COND_AMT
) AS
(SELECT DISTINCT NATIONAL_PRICE_DAY.COND_AMT FROM ADMIN.NATIONAL_PRICE_DAY) UNION (SELECT DISTINCT SKU_STORE_PRICE_DAY.COND_AMT FROM ADMIN.SKU_STORE_PRICE_DAY);

\echo
\echo *****  Creating view:  "INV_INSTOCK_PRICE_DAY_CRCY_VW"

CREATE or replace VIEW  INV_INSTOCK_PRICE_DAY_CRCY_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     FROM_LOCATION_ID,
     SOURCE_VENDOR_ID,
     SKU_STATUS_ID,
     STORE_OPEN_IND,
     OUT_OF_STOCK_CNT,
     POG_LISTED_IND,
     SAP_LISTED_IND,
     INLINE_CNT,
     PLANNER_IND,
     SUBS_IND,
     MAP_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY,
     COMMITTED_QTY,
     XFER_IN_TRANS_QTY,
     ON_ORDER_QTY,
     SUM_COST_AMT,
     BUM_COST_AMT,
     ON_ORDER_CD,
     RETAIL_PRICE_AMT,
     SKU_FACINGS_QTY,
     SKU_CAPACITY_QTY,
     PETPERKS_AMT,
     PETPERKS_IND,
     LOCAL_PRICE_AMT,
     LOC_PETPERKS_PRICE_AMT,
     LOAD_DT
) AS
SELECT IIPD.DAY_DT, IIPD.PRODUCT_ID, IIPD.LOCATION_ID, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, IIPD.FROM_LOCATION_ID, IIPD.SOURCE_VENDOR_ID, IIPD.SKU_STATUS_ID, IIPD.STORE_OPEN_IND, IIPD.OUT_OF_STOCK_CNT, IIPD.POG_LISTED_IND, IIPD.SAP_LISTED_IND, IIPD.INLINE_CNT, IIPD.PLANNER_IND, IIPD.SUBS_IND, IIPD.MAP_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE IIPD.EXCH_RATE_PCT END AS EXCH_RATE_PCT, IIPD.ON_HAND_QTY, IIPD.COMMITTED_QTY, IIPD.XFER_IN_TRANS_QTY, IIPD.ON_ORDER_QTY, IIPD.SUM_COST_AMT, IIPD.BUM_COST_AMT, IIPD.ON_ORDER_CD, IIPD.RETAIL_PRICE_AMT, IIPD.SKU_FACINGS_QTY, IIPD.SKU_CAPACITY_QTY, IIPD.PETPERKS_AMT, IIPD.PETPERKS_IND, IIPD.LOCAL_PRICE_AMT, IIPD.LOC_PETPERKS_PRICE_AMT, IIPD.LOAD_DT FROM (ADMIN.INV_INSTOCK_PRICE_DAY IIPD CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "MOVEMENT_DAY_CRCY_VW"

CREATE or replace VIEW  MOVEMENT_DAY_CRCY_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     STO_TYPE_ID,
     SKU_STATUS_ID,
     MOVE_CLASS_ID,
     SOURCE_VENDOR_ID,
     FROM_LOCATION_ID,
     TRANS_AMT,
     TRANS_COST,
     TRANS_QTY,
     FREIGHT_COST,
     EXCH_RATE_PCT,
     PLAN_DELIV_DAYS,
     ROUND_VALUE_QTY,
     ROUND_PROFILE_CD,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT MD.DAY_DT, MD.PRODUCT_ID, MD.LOCATION_ID, MD.MOVEMENT_ID, MD.PO_NBR, MD.PO_LINE_NBR, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, MD.STO_TYPE_ID, MD.SKU_STATUS_ID, MD.MOVE_CLASS_ID, MD.SOURCE_VENDOR_ID, MD.FROM_LOCATION_ID, MD.TRANS_AMT, MD.TRANS_COST, MD.TRANS_QTY, MD.FREIGHT_COST, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE MD.EXCH_RATE_PCT END AS EXCH_RATE_PCT, MD.PLAN_DELIV_DAYS, MD.ROUND_VALUE_QTY, MD.ROUND_PROFILE_CD, MD.UPDATE_DT, MD.LOAD_DT FROM (ADMIN.MOVEMENT_DAY MD CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "CI_ROLE_MTH_VW"

CREATE or replace VIEW  CI_ROLE_MTH_VW
(
     "CAL_MO",
     COMP_COMPANY_ID,
     "PRICING_ROLE_ID",
     NET_52_WK_SALES_QTY,
     NET_52_WK_SALES_AMT,
     MARGIN_52_WK_AMT,
     AVG_WGHTD_BASE_PCNT_DIFF,
     AVG_WGHTD_OVRLL_PCNT_DIFF
) AS
SELECT "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".PRICING_ROLE_ID, MAX("TEMP".QTY) AS NET_52_WK_SALES_QTY, MAX("TEMP".AMT) AS NET_52_WK_SALES_AMT, MAX("TEMP".MARG) AS MARGIN_52_WK_AMT, (SUM("TEMP".BASE) / "NUMERIC"(COUNT("TEMP".BASE))) AS AVG_WGHTD_BASE_PCNT_DIFF, (SUM("TEMP".OVRLL) / "NUMERIC"(COUNT("TEMP".OVRLL))) AS AVG_WGHTD_OVRLL_PCNT_DIFF FROM (SELECT PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID, PRE.QTY, PRE.AMT, PRE.MARG, SUM(PRE.WEIGHTED_BASE) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS BASE, SUM(PRE.WEIGHTED_OVER) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS OVRLL FROM (SELECT SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID, SUM(SUB.BASE) AS WEIGHTED_BASE, SUM(SUB.OVERALL) AS WEIGHTED_OVER, MAX(SUB.SALES_QTY) AS QTY, MAX(SUB.SALES_AMT) AS AMT, MAX(SUB.MARGIN) AS MARG FROM (SELECT DRV.CAL_MO, DRV.PRODUCT_ID, DRV.SKU_NBR, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.BASE_PCNT_DIFF, DRV.OVER_PCNT_DIFF, SUM(DISTINCT PERF.NET_52_WK_SALES_QTY) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID ) AS SALES_QTY, SUM(DISTINCT PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID ) AS SALES_AMT, SUM(DISTINCT PERF.MARGIN_52_WK_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID ) AS MARGIN, ((DRV.BASE_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS BASE, ((DRV.OVER_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS OVERALL FROM ((SELECT CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, CI.PRICING_ROLE_ID, (SUM(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS BASE_PCNT_DIFF, (SUM(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS OVER_PCNT_DIFF FROM (((ADMIN.CI_COMP_SKU_DAY CI JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CI.PRODUCT_ID = SKU.PRODUCT_ID))) JOIN ADMIN.SITE_PROFILE_RPT SITE ON ((CI.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.CI_COMPETITOR COMP ON ((CI.COMP_ID = COMP.COMP_ID))) WHERE (CASE WHEN (CI.PETM_PRICE_AMT NOTNULL) THEN CI.PETM_PRICE_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC) GROUP BY CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR"), CI.PRICING_ROLE_ID) DRV JOIN (SELECT DISTINCT P.CAL_MO, P.COMP_COMPANY_ID, P.PRODUCT_ID, BTRIM((SPR.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, P.NET_52_WK_SALES_QTY, P.NET_52_WK_SALES_AMT, P.MARGIN_52_WK_AMT FROM (ADMIN.CI_52WK_SLS_PERF_MONTH P JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((P.LOCATION_ID = SPR.LOCATION_ID)))) PERF ON (((((DRV.CAL_MO = PERF.CAL_MO) AND (DRV.COMP_COMPANY_ID = PERF.COMP_COMPANY_ID)) AND (DRV.PRODUCT_ID = PERF.PRODUCT_ID)) AND (DRV.PRICE_ZONE_ID = PERF.PRICE_ZONE_ID))))) SUB GROUP BY SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID) PRE) "TEMP" GROUP BY "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".PRICING_ROLE_ID;

\echo
\echo *****  Creating view:  "CI_CLASS_ROLE_MTH_VW"

CREATE or replace VIEW  CI_CLASS_ROLE_MTH_VW
(
     "CAL_MO",
     COMP_COMPANY_ID,
     SAP_CLASS_ID,
     "PRICING_ROLE_ID",
     NET_52_WK_SALES_QTY,
     NET_52_WK_SALES_AMT,
     MARGIN_52_WK_AMT,
     AVG_WGHTD_BASE_PCNT_DIFF,
     AVG_WGHTD_OVRLL_PCNT_DIFF
) AS
SELECT "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".SAP_CLASS_ID, "TEMP".PRICING_ROLE_ID, MAX("TEMP".QTY) AS NET_52_WK_SALES_QTY, MAX("TEMP".AMT) AS NET_52_WK_SALES_AMT, MAX("TEMP".MARG) AS MARGIN_52_WK_AMT, (SUM("TEMP".BASE) / "NUMERIC"(COUNT("TEMP".BASE))) AS AVG_WGHTD_BASE_PCNT_DIFF, (SUM("TEMP".OVRLL) / "NUMERIC"(COUNT("TEMP".OVRLL))) AS AVG_WGHTD_OVRLL_PCNT_DIFF FROM (SELECT PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_CLASS_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID, PRE.QTY, PRE.AMT, PRE.MARG, SUM(PRE.WEIGHTED_BASE) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_CLASS_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS BASE, SUM(PRE.WEIGHTED_OVER) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_CLASS_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS OVRLL FROM (SELECT SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.SAP_CLASS_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID, SUM(SUB.BASE) AS WEIGHTED_BASE, SUM(SUB.OVERALL) AS WEIGHTED_OVER, MAX(SUB.SALES_QTY) AS QTY, MAX(SUB.SALES_AMT) AS AMT, MAX(SUB.MARGIN) AS MARG FROM (SELECT DRV.CAL_MO, DRV.PRODUCT_ID, DRV.SKU_NBR, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.BASE_PCNT_DIFF, DRV.OVER_PCNT_DIFF, SUM(DISTINCT PERF.NET_52_WK_SALES_QTY) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID ) AS SALES_QTY, SUM(DISTINCT PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID ) AS SALES_AMT, SUM(DISTINCT PERF.MARGIN_52_WK_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID ) AS MARGIN, ((DRV.BASE_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.SAP_CLASS_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS BASE, ((DRV.OVER_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.SAP_CLASS_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS OVERALL FROM ((SELECT CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.SAP_CLASS_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, CI.PRICING_ROLE_ID, (SUM(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS BASE_PCNT_DIFF, (SUM(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS OVER_PCNT_DIFF FROM (((ADMIN.CI_COMP_SKU_DAY CI JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CI.PRODUCT_ID = SKU.PRODUCT_ID))) JOIN ADMIN.SITE_PROFILE_RPT SITE ON ((CI.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.CI_COMPETITOR COMP ON ((CI.COMP_ID = COMP.COMP_ID))) WHERE (CASE WHEN (CI.PETM_PRICE_AMT NOTNULL) THEN CI.PETM_PRICE_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC) GROUP BY CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.SAP_CLASS_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR"), CI.PRICING_ROLE_ID) DRV JOIN (SELECT DISTINCT P.CAL_MO, P.COMP_COMPANY_ID, P.PRODUCT_ID, BTRIM((SPR.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, P.NET_52_WK_SALES_QTY, P.NET_52_WK_SALES_AMT, P.MARGIN_52_WK_AMT FROM (ADMIN.CI_52WK_SLS_PERF_MONTH P JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((P.LOCATION_ID = SPR.LOCATION_ID)))) PERF ON (((((DRV.CAL_MO = PERF.CAL_MO) AND (DRV.COMP_COMPANY_ID = PERF.COMP_COMPANY_ID)) AND (DRV.PRODUCT_ID = PERF.PRODUCT_ID)) AND (DRV.PRICE_ZONE_ID = PERF.PRICE_ZONE_ID))))) SUB GROUP BY SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.SAP_CLASS_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID) PRE) "TEMP" GROUP BY "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".SAP_CLASS_ID, "TEMP".PRICING_ROLE_ID;

\echo
\echo *****  Creating view:  "CI_CLASS_MTH_VW"

CREATE or replace VIEW  CI_CLASS_MTH_VW
(
     "CAL_MO",
     COMP_COMPANY_ID,
     SAP_CLASS_ID,
     NET_52_WK_SALES_QTY,
     NET_52_WK_SALES_AMT,
     MARGIN_52_WK_AMT,
     AVG_WGHTD_BASE_PCNT_DIFF,
     AVG_WGHTD_OVRLL_PCNT_DIFF
) AS
SELECT "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".SAP_CLASS_ID, MAX("TEMP".QTY) AS NET_52_WK_SALES_QTY, MAX("TEMP".AMT) AS NET_52_WK_SALES_AMT, MAX("TEMP".MARG) AS MARGIN_52_WK_AMT, (SUM("TEMP".BASE) / "NUMERIC"(COUNT("TEMP".BASE))) AS AVG_WGHTD_BASE_PCNT_DIFF, (SUM("TEMP".OVRLL) / "NUMERIC"(COUNT("TEMP".OVRLL))) AS AVG_WGHTD_OVRLL_PCNT_DIFF FROM (SELECT PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_CLASS_ID, PRE.PRICE_ZONE_ID, PRE.QTY, PRE.AMT, PRE.MARG, SUM(PRE.WEIGHTED_BASE) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_CLASS_ID, PRE.PRICE_ZONE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS BASE, SUM(PRE.WEIGHTED_OVER) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_CLASS_ID, PRE.PRICE_ZONE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS OVRLL FROM (SELECT SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.SAP_CLASS_ID, SUB.PRICE_ZONE_ID, SUM(SUB.BASE) AS WEIGHTED_BASE, SUM(SUB.OVERALL) AS WEIGHTED_OVER, MAX(SUB.SALES_QTY) AS QTY, MAX(SUB.SALES_AMT) AS AMT, MAX(SUB.MARGIN) AS MARG FROM (SELECT DRV.CAL_MO, DRV.PRODUCT_ID, DRV.SKU_NBR, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID, DRV.PRICE_ZONE_ID, DRV.BASE_PCNT_DIFF, DRV.OVER_PCNT_DIFF, SUM(DISTINCT PERF.NET_52_WK_SALES_QTY) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID ) AS SALES_QTY, SUM(DISTINCT PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID ) AS SALES_AMT, SUM(DISTINCT PERF.MARGIN_52_WK_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_CLASS_ID ) AS MARGIN, ((DRV.BASE_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.SAP_CLASS_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS BASE, ((DRV.OVER_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.SAP_CLASS_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS OVERALL FROM ((SELECT CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.SAP_CLASS_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, (SUM(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS BASE_PCNT_DIFF, (SUM(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS OVER_PCNT_DIFF FROM (((ADMIN.CI_COMP_SKU_DAY CI JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CI.PRODUCT_ID = SKU.PRODUCT_ID))) JOIN ADMIN.SITE_PROFILE_RPT SITE ON ((CI.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.CI_COMPETITOR COMP ON ((CI.COMP_ID = COMP.COMP_ID))) WHERE (CASE WHEN (CI.PETM_PRICE_AMT NOTNULL) THEN CI.PETM_PRICE_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC) GROUP BY CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.SAP_CLASS_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR")) DRV JOIN (SELECT DISTINCT P.CAL_MO, P.COMP_COMPANY_ID, P.PRODUCT_ID, BTRIM((SPR.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, P.NET_52_WK_SALES_QTY, P.NET_52_WK_SALES_AMT, P.MARGIN_52_WK_AMT FROM (ADMIN.CI_52WK_SLS_PERF_MONTH P JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((P.LOCATION_ID = SPR.LOCATION_ID)))) PERF ON (((((DRV.CAL_MO = PERF.CAL_MO) AND (DRV.COMP_COMPANY_ID = PERF.COMP_COMPANY_ID)) AND (DRV.PRODUCT_ID = PERF.PRODUCT_ID)) AND (DRV.PRICE_ZONE_ID = PERF.PRICE_ZONE_ID))))) SUB GROUP BY SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.SAP_CLASS_ID, SUB.PRICE_ZONE_ID) PRE) "TEMP" GROUP BY "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".SAP_CLASS_ID;

\echo
\echo *****  Creating view:  "CI_VP_ROLE_MTH_VW"

CREATE or replace VIEW  CI_VP_ROLE_MTH_VW
(
     "CAL_MO",
     COMP_COMPANY_ID,
     VP_ID,
     "PRICING_ROLE_ID",
     NET_52_WK_SALES_QTY,
     NET_52_WK_SALES_AMT,
     MARGIN_52_WK_AMT,
     AVG_WGHTD_BASE_PCNT_DIFF,
     AVG_WGHTD_OVRLL_PCNT_DIFF
) AS
SELECT "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".VP_ID, "TEMP".PRICING_ROLE_ID, MAX("TEMP".QTY) AS NET_52_WK_SALES_QTY, MAX("TEMP".AMT) AS NET_52_WK_SALES_AMT, MAX("TEMP".MARG) AS MARGIN_52_WK_AMT, (SUM("TEMP".BASE) / "NUMERIC"(COUNT("TEMP".BASE))) AS AVG_WGHTD_BASE_PCNT_DIFF, (SUM("TEMP".OVRLL) / "NUMERIC"(COUNT("TEMP".OVRLL))) AS AVG_WGHTD_OVRLL_PCNT_DIFF FROM (SELECT PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.VP_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID, PRE.QTY, PRE.AMT, PRE.MARG, SUM(PRE.WEIGHTED_BASE) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.VP_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS BASE, SUM(PRE.WEIGHTED_OVER) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.VP_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS OVRLL FROM (SELECT SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.VP_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID, SUM(SUB.BASE) AS WEIGHTED_BASE, SUM(SUB.OVERALL) AS WEIGHTED_OVER, MAX(SUB.SALES_QTY) AS QTY, MAX(SUB.SALES_AMT) AS AMT, MAX(SUB.MARGIN) AS MARG FROM (SELECT DRV.CAL_MO, DRV.PRODUCT_ID, DRV.SKU_NBR, DRV.COMP_COMPANY_ID, DRV.VP_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.BASE_PCNT_DIFF, DRV.OVER_PCNT_DIFF, SUM(DISTINCT PERF.NET_52_WK_SALES_QTY) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.VP_ID ) AS SALES_QTY, SUM(DISTINCT PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.VP_ID ) AS SALES_AMT, SUM(DISTINCT PERF.MARGIN_52_WK_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.VP_ID ) AS MARGIN, ((DRV.BASE_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.VP_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS BASE, ((DRV.OVER_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.VP_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS OVERALL FROM ((SELECT CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.VP_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, CI.PRICING_ROLE_ID, (SUM(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS BASE_PCNT_DIFF, (SUM(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS OVER_PCNT_DIFF FROM (((ADMIN.CI_COMP_SKU_DAY CI JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CI.PRODUCT_ID = SKU.PRODUCT_ID))) JOIN ADMIN.SITE_PROFILE_RPT SITE ON ((CI.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.CI_COMPETITOR COMP ON ((CI.COMP_ID = COMP.COMP_ID))) WHERE (CASE WHEN (CI.PETM_PRICE_AMT NOTNULL) THEN CI.PETM_PRICE_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC) GROUP BY CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.VP_ID, BTRIM((SITE.PRICE_ZONE_ID)::"VARCHAR"), CI.PRICING_ROLE_ID) DRV JOIN (SELECT DISTINCT P.CAL_MO, P.COMP_COMPANY_ID, P.PRODUCT_ID, BTRIM((SPR.PRICE_ZONE_ID)::"VARCHAR") AS PRICE_ZONE_ID, P.NET_52_WK_SALES_QTY, P.NET_52_WK_SALES_AMT, P.MARGIN_52_WK_AMT FROM (ADMIN.CI_52WK_SLS_PERF_MONTH P JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((P.LOCATION_ID = SPR.LOCATION_ID)))) PERF ON (((((DRV.CAL_MO = PERF.CAL_MO) AND (DRV.COMP_COMPANY_ID = PERF.COMP_COMPANY_ID)) AND (DRV.PRODUCT_ID = PERF.PRODUCT_ID)) AND (DRV.PRICE_ZONE_ID = PERF.PRICE_ZONE_ID))))) SUB GROUP BY SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.VP_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID) PRE) "TEMP" GROUP BY "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".VP_ID, "TEMP".PRICING_ROLE_ID;

\echo
\echo *****  Creating view:  "PLAN_ACT_TO_VW"

CREATE or replace VIEW  PLAN_ACT_TO_VW
(
     TO_WEEK_DT,
     TO_FISCAL_YR,
     TO_FISCAL_WK_NBR,
     LOCATION_ID,
     STORE_NBR,
     STORE_NAME,
     TO_NEW_STR_OPEN_WK_DT,
     TO_NEW_STR_OPEN_FY,
     TO_NEW_STR_OPEN_FWK_NBR,
     TO_PLAN_TERM_CNT,
     TO_AVG_EMPL_CNT,
     TO_DEANNL_PLAN,
     TO_EMPL_90DAY_CNT,
     TO_EMPL_365DAY_CNT,
     WC_PLAN_CLAIMS,
     WC_DEANNL_PLAN
) AS
SELECT T1.WEEK_DT AS TO_WEEK_DT, T1.FISCAL_YR AS TO_FISCAL_YR, T1.FISCAL_WK_NBR AS TO_FISCAL_WK_NBR, T1.LOCATION_ID, T1.STORE_NBR, T1.STORE_NAME, T3.OPEN_WEEK_DT AS TO_NEW_STR_OPEN_WK_DT, T3.OPEN_FISCAL_YR AS TO_NEW_STR_OPEN_FY, T3.OPEN_FISCAL_WK_NBR AS TO_NEW_STR_OPEN_FWK_NBR, CASE WHEN ((T3.OPEN_WEEK_DT NOTNULL) AND (T1.WEEK_DT < T3.OPEN_WEEK_DT)) THEN '0'::NUMERIC ELSE CASE WHEN (T4.PLAN_TERM_CNT NOTNULL) THEN T4.PLAN_TERM_CNT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END END AS TO_PLAN_TERM_CNT, CASE WHEN ((T3.OPEN_WEEK_DT NOTNULL) AND (T1.WEEK_DT < T3.OPEN_WEEK_DT)) THEN '0'::NUMERIC ELSE CASE WHEN (T4.AVG_EMPL_CNT NOTNULL) THEN T4.AVG_EMPL_CNT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END END AS TO_AVG_EMPL_CNT, CASE WHEN ((T3.OPEN_WEEK_DT NOTNULL) AND (T1.WEEK_DT < T3.OPEN_WEEK_DT)) THEN '0'::NUMERIC ELSE (CASE WHEN (T4.PLAN_TERM_CNT NOTNULL) THEN T4.PLAN_TERM_CNT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END / CASE WHEN ((T3.OPEN_FISCAL_WK_NBR ISNULL) OR (T3.OPEN_FISCAL_YR < T1.FISCAL_YR)) THEN ('52'::NUMERIC(2,0))::NUMERIC(2,0) ELSE (('52'::NUMERIC(2,0))::NUMERIC(2,0) - (T3.OPEN_FISCAL_WK_NBR - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) END) END AS TO_DEANNL_PLAN, CASE WHEN (T5.TERM_CNT NOTNULL) THEN T5.TERM_CNT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS TO_EMPL_90DAY_CNT, CASE WHEN (T6.TERM_CNT NOTNULL) THEN T6.TERM_CNT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS TO_EMPL_365DAY_CNT, CASE WHEN ((T3.OPEN_WEEK_DT NOTNULL) AND (T1.WEEK_DT < T3.OPEN_WEEK_DT)) THEN '0'::NUMERIC ELSE CASE WHEN (T7.WC_PLAN_CLAIMS NOTNULL) THEN T7.WC_PLAN_CLAIMS WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END END AS WC_PLAN_CLAIMS, CASE WHEN ((T3.OPEN_WEEK_DT NOTNULL) AND (T1.WEEK_DT < T3.OPEN_WEEK_DT)) THEN '0'::NUMERIC ELSE (CASE WHEN (T7.WC_PLAN_CLAIMS NOTNULL) THEN T7.WC_PLAN_CLAIMS WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END / CASE WHEN ((T3.OPEN_FISCAL_WK_NBR ISNULL) OR (T3.OPEN_FISCAL_YR < T1.FISCAL_YR)) THEN ('52'::NUMERIC(2,0))::NUMERIC(2,0) ELSE (('52'::NUMERIC(2,0))::NUMERIC(2,0) - (T3.OPEN_FISCAL_WK_NBR - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) END) END AS WC_DEANNL_PLAN FROM ((((((SELECT W.WEEK_DT, W.FISCAL_YR, "NUMERIC"(W.FISCAL_WK_NBR) AS FISCAL_WK_NBR, S.LOCATION_ID, S.STORE_NBR, S.STORE_NAME FROM ADMIN.WEEKS W, (SELECT DAYS.WEEK_DT, (DAYS.FISCAL_YR - 1) AS LYR_FISCAL_YR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(CASE WHEN ((DATE('now'::"VARCHAR") - 7) > '2012-01-29'::DATE) THEN '2012-01-29'::DATE ELSE (DATE('now'::"VARCHAR") - 7) END))) D, ADMIN.SITE_PROFILE S WHERE (((W.FISCAL_YR >= D.LYR_FISCAL_YR) AND (W.WEEK_DT <= D.WEEK_DT)) AND (INT4((S.SITE_SALES_FLAG)::"VARCHAR") = 1))) T1 LEFT JOIN (SELECT SP.LOCATION_ID, D1.WEEK_DT AS OPEN_WEEK_DT, D1.FISCAL_YR AS OPEN_FISCAL_YR, "NUMERIC"(D1.FISCAL_WK_NBR) AS OPEN_FISCAL_WK_NBR FROM ADMIN.SITE_PROFILE SP, ADMIN.DAYS D1, ADMIN.DAYS D2 WHERE (((D2.DAY_DT = "TIMESTAMP"(CASE WHEN ((DATE('now'::"VARCHAR") - 7) > '2012-01-29'::DATE) THEN '2012-01-29'::DATE ELSE (DATE('now'::"VARCHAR") - 7) END)) AND (D1.DAY_DT = SP.OPEN_DT)) AND (D1.FISCAL_YR >= (D2.FISCAL_YR - 1)))) T3 ON ((T1.LOCATION_ID = T3.LOCATION_ID))) LEFT JOIN (SELECT USR_90DAY_TO_PLAN.FISCAL_YR, USR_90DAY_TO_PLAN.LOCATION_ID, SUM(USR_90DAY_TO_PLAN.PLAN_TERM_CNT) AS PLAN_TERM_CNT, SUM(USR_90DAY_TO_PLAN.AVG_EMPL_CNT) AS AVG_EMPL_CNT FROM ADMIN.USR_90DAY_TO_PLAN GROUP BY USR_90DAY_TO_PLAN.FISCAL_YR, USR_90DAY_TO_PLAN.LOCATION_ID) T4 ON (((T1.FISCAL_YR = T4.FISCAL_YR) AND (T1.LOCATION_ID = T4.LOCATION_ID)))) LEFT JOIN (SELECT ET.EMPL_TERM_WEEK_DT, ET.LOCATION_ID, SUM(ET.COUNT_FLAG) AS TERM_CNT FROM ADMIN.EMPL_TERM_DAYS_WORKED_VW ET, ADMIN.EMPLOYEE_PROFILE EP, ADMIN.DAYS D1, ADMIN.DAYS D2 WHERE (((((((EP.EMPLOYEE_ID = ET.EMPLOYEE_ID) AND (D1.DAY_DT = ET.EMPL_TERM_DT)) AND (D1.FISCAL_YR >= (D2.FISCAL_YR - 1))) AND (D2.DAY_DT = "TIMESTAMP"(CASE WHEN ((DATE('now'::"VARCHAR") - 7) > '2012-01-29'::DATE) THEN '2012-01-29'::DATE ELSE (DATE('now'::"VARCHAR") - 7) END))) AND (ET.EMPL_TERM_WEEK_DT <= D2.WEEK_DT)) AND (ET.NBR_DAYS_WORKED <= 90)) AND (EP.JOB_CODE IN (1620, 1623, 1619, 1621, 1615, 1606, 1627, 1647, 1617, 1648, 2620, 2711, 2660, 2640, 2650, 2048, 2016, 2038, 2022, 1651, 1649, 1658, 1645, 1642, 2641, 1604, 1641, 2006, 2008, 2068, 2610, 2612, 2662, 2710, 3620, 3621, 7000, 7002, 7006, 7008, 7100))) GROUP BY ET.EMPL_TERM_WEEK_DT, ET.LOCATION_ID) T5 ON (((T1.WEEK_DT = T5.EMPL_TERM_WEEK_DT) AND (T1.LOCATION_ID = T5.LOCATION_ID)))) LEFT JOIN (SELECT ET.EMPL_TERM_WEEK_DT, ET.LOCATION_ID, SUM(ET.COUNT_FLAG) AS TERM_CNT FROM ADMIN.EMPL_TERM_DAYS_WORKED_VW ET, ADMIN.EMPLOYEE_PROFILE EP, ADMIN.DAYS D1, ADMIN.DAYS D2 WHERE (((((((EP.EMPLOYEE_ID = ET.EMPLOYEE_ID) AND (D1.DAY_DT = ET.EMPL_TERM_DT)) AND (D1.FISCAL_YR >= (D2.FISCAL_YR - 1))) AND (D2.DAY_DT = "TIMESTAMP"(CASE WHEN ((DATE('now'::"VARCHAR") - 7) > '2012-01-29'::DATE) THEN '2012-01-29'::DATE ELSE (DATE('now'::"VARCHAR") - 7) END))) AND (ET.EMPL_TERM_WEEK_DT <= D2.WEEK_DT)) AND (ET.NBR_DAYS_WORKED <= 365)) AND (EP.JOB_CODE IN (1620, 1623, 1619, 1621, 1615, 1606, 1627, 1647, 1617, 1648, 2620, 2711, 2660, 2640, 2650, 2048, 2016, 2038, 2022, 1651, 1649, 1658, 1645, 1642, 2641, 1604, 1641, 2006, 2008, 2068, 2610, 2612, 2662, 2710, 3620, 3621, 7000, 7002, 7006, 7008, 7100))) GROUP BY ET.EMPL_TERM_WEEK_DT, ET.LOCATION_ID) T6 ON (((T1.WEEK_DT = T6.EMPL_TERM_WEEK_DT) AND (T1.LOCATION_ID = T6.LOCATION_ID)))) LEFT JOIN (SELECT IC_WC_PLAN.FISCAL_YR, IC_WC_PLAN.LOCATION_ID, SUM(IC_WC_PLAN.PLAN_CLAIM_CNT) AS WC_PLAN_CLAIMS FROM ADMIN.IC_WC_PLAN WHERE (IC_WC_PLAN.FISCAL_YR >= "NUMERIC"((SELECT (DAYS.FISCAL_YR - 1) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(CASE WHEN ((DATE('now'::"VARCHAR") - 7) > '2012-01-29'::DATE) THEN '2012-01-29'::DATE ELSE (DATE('now'::"VARCHAR") - 7) END))))) GROUP BY IC_WC_PLAN.FISCAL_YR, IC_WC_PLAN.LOCATION_ID) T7 ON ((("NUMERIC"(T1.FISCAL_YR) = T7.FISCAL_YR) AND (T1.LOCATION_ID = T7.LOCATION_ID))));

\echo
\echo *****  Creating view:  "TXA_AF_SENTENCE_ALL_VW"

CREATE or replace VIEW  TXA_AF_SENTENCE_ALL_VW
(
     TXA_VERBATIM_ID,
     TXA_VERBATIM_TYPE_ID,
     TXA_SENTENCE_ID,
     TXA_DOCUMENT_ID,
     TXA_SESSION_ID,
     TXA_DOCUMENT_DATE,
     TXA_NATURAL_ID,
     TXA_SOURCE_ID,
     TXA_BI_SOURCE_NAME,
     TXA_DATE_LAST_UPDATED,
     LOCATION_ID,
     TXA_STORE_PHONE_NBR,
     TXA_STORE_ADDRESS,
     SMG_SURVEY_TYPE_ID,
     SMG_SURVEY_TYPE_DESC_ID,
     TXA_AUTHOR,
     TXA_AUTHORLOCATION_ID,
     TXA_STARSRATING,
     TXA_ROBOTNAME_ID,
     TXA_SM_SERVICE_ID,
     TXA_MEDIA_TYPE_ID,
     TXA_SOURCE_URL,
     TXA_USER_NAME,
     ISO_LANG_CODE_ID,
     TXA_COMMENT_CNT,
     TXA_SPAM_RATING,
     TXA_PERMALINK,
     TXA_INGEST_DATE,
     TXA_TOPIC_ID,
     TXA_LIKE_COUNT,
     TXA_SM_SOURCE_NAME_ID,
     TXA_CB_EXP_RESTRICT,
     OSAT_NBR,
     SMG_RT_KNOWLEDGE_NBR,
     SMG_RT_INSTOCK_NBR,
     SMG_RT_SERVICE_NBR,
     SMG_RT_CLSS_CONTENT_NBR,
     SMG_RT_GROOM_SERVICE_NBR,
     SMG_SCHED_NEXT_APPT,
     SMG_INFORM_GROOMPRC,
     SMG_AWARE_LOOKGREAT,
     SMG_INFORM_LOOKGREAT,
     SMG_RCV_PAWGRESS_SERVICE,
     SMG_RCV_PAWGRESS_HOTEL,
     UPDATE_TSTMP,
     LOAD_TSTMP,
     SENTIMENT_SCORE,
     SENTIMENT_BAND,
     D_SENTIMENT_SCORE,
     D_SENTIMENT_BAND
) AS
SELECT DISTINCT TXA_VERBATIM.TXA_VERBATIM_ID, TXA_VERBATIM.TXA_VERBATIM_TYPE_ID, TXA_SENTENCE.TXA_SENTENCE_ID, TXA_DOCUMENT.TXA_DOCUMENT_ID, TXA_DOCUMENT.TXA_SESSION_ID, TXA_DOCUMENT.TXA_DOCUMENT_DATE, TXA_DOCUMENT.TXA_NATURAL_ID, TXA_DOCUMENT.TXA_SOURCE_ID, CASE WHEN (TXA_DOCUMENT.TXA_SOURCE_ID = ('27'::NUMERIC(2,0))::NUMERIC(2,0)) THEN TXA_MEDIA_TYPE.TXA_MEDIA_TYPE_DESC ELSE TXA_SOURCE.TXA_SOURCE_DESC END AS TXA_BI_SOURCE_NAME, TXA_DOCUMENT.TXA_DATE_LAST_UPDATED, CASE WHEN (TXA_DOCUMENT.LOCATION_ID NOTNULL) THEN TXA_DOCUMENT.LOCATION_ID WHEN (99999 NOTNULL) THEN 99999 ELSE NULL::INT4 END AS LOCATION_ID, TXA_DOCUMENT.TXA_STORE_PHONE_NBR, TXA_DOCUMENT.TXA_STORE_ADDRESS, TXA_DOCUMENT.SMG_SURVEY_TYPE_ID, TXA_DOCUMENT.SMG_SURVEY_TYPE_DESC_ID, TXA_DOCUMENT.TXA_AUTHOR, TXA_DOCUMENT.TXA_AUTHORLOCATION_ID, TXA_DOCUMENT.TXA_STARSRATING, TXA_DOCUMENT.TXA_ROBOTNAME_ID, TXA_DOCUMENT.TXA_SM_SERVICE_ID, TXA_DOCUMENT.TXA_MEDIA_TYPE_ID, TXA_DOCUMENT.TXA_SOURCE_URL, TXA_DOCUMENT.TXA_USER_NAME, TXA_DOCUMENT.ISO_LANG_CODE_ID, TXA_DOCUMENT.TXA_COMMENT_CNT, TXA_DOCUMENT.TXA_SPAM_RATING, TXA_DOCUMENT.TXA_PERMALINK, TXA_DOCUMENT.TXA_INGEST_DATE, TXA_DOCUMENT.TXA_TOPIC_ID, TXA_DOCUMENT.TXA_LIKE_COUNT, TXA_DOCUMENT.TXA_SM_SOURCE_NAME_ID, TXA_DOCUMENT.TXA_CB_EXP_RESTRICT, TXA_DOCUMENT.OSAT_NBR, TXA_DOCUMENT.SMG_RT_KNOWLEDGE_NBR, TXA_DOCUMENT.SMG_RT_INSTOCK_NBR, TXA_DOCUMENT.SMG_RT_SERVICE_NBR, TXA_DOCUMENT.SMG_RT_CLSS_CONTENT_NBR, TXA_DOCUMENT.SMG_RT_GROOM_SERVICE_NBR, TXA_DOCUMENT.SMG_SCHED_NEXT_APPT, TXA_DOCUMENT.SMG_INFORM_GROOMPRC, TXA_DOCUMENT.SMG_AWARE_LOOKGREAT, TXA_DOCUMENT.SMG_INFORM_LOOKGREAT, TXA_DOCUMENT.SMG_RCV_PAWGRESS_SERVICE, TXA_DOCUMENT.SMG_RCV_PAWGRESS_HOTEL, TXA_DOCUMENT.UPDATE_TSTMP, TXA_DOCUMENT.LOAD_TSTMP, TXA_SENTENCE.SENTIMENT_SCORE, CASE WHEN (TXA_SENTENCE.SENTIMENT_SCORE < ('0.4'::NUMERIC(1,1))::NUMERIC(1,1)) THEN -1 WHEN ((TXA_SENTENCE.SENTIMENT_SCORE >= ('0.4'::NUMERIC(1,1))::NUMERIC(1,1)) AND (TXA_SENTENCE.SENTIMENT_SCORE <= ('0.6'::NUMERIC(1,1))::NUMERIC(1,1))) THEN 0 WHEN (TXA_SENTENCE.SENTIMENT_SCORE > ('0.6'::NUMERIC(1,1))::NUMERIC(1,1)) THEN 1 ELSE NULL::INT4 END AS SENTIMENT_BAND, TXA_SENTENCE.D_SENTIMENT_SCORE, CASE WHEN (TXA_SENTENCE.D_SENTIMENT_SCORE < ('-0.3'::NUMERIC(1,1))::NUMERIC(1,1)) THEN -1 WHEN ((TXA_SENTENCE.D_SENTIMENT_SCORE >= ('-0.3'::NUMERIC(1,1))::NUMERIC(1,1)) AND (TXA_SENTENCE.D_SENTIMENT_SCORE <= ('0.45'::NUMERIC(2,2))::NUMERIC(2,2))) THEN 0 WHEN (TXA_SENTENCE.D_SENTIMENT_SCORE > ('0.45'::NUMERIC(2,2))::NUMERIC(2,2)) THEN 1 ELSE NULL::INT4 END AS D_SENTIMENT_BAND FROM ((((ADMIN.TXA_DOCUMENT JOIN ADMIN.TXA_SOURCE ON ((TXA_DOCUMENT.TXA_SOURCE_ID = TXA_SOURCE.TXA_SOURCE_ID))) LEFT JOIN ADMIN.TXA_MEDIA_TYPE ON ((TXA_DOCUMENT.TXA_MEDIA_TYPE_ID = TXA_MEDIA_TYPE.TXA_MEDIA_TYPE_ID))) LEFT JOIN ADMIN.TXA_SENTENCE ON ((TXA_DOCUMENT.TXA_DOCUMENT_ID = TXA_SENTENCE.TXA_DOCUMENT_ID))) LEFT JOIN ADMIN.TXA_VERBATIM ON ((TXA_SENTENCE.TXA_VERBATIM_ID = TXA_VERBATIM.TXA_VERBATIM_ID)));

\echo
\echo *****  Creating view:  "TXA_AF_SENTENCE_AGG_VW"

CREATE or replace VIEW  TXA_AF_SENTENCE_AGG_VW
(
     TXA_VERBATIM_ID,
     TXA_VERBATIM_TYPE_ID,
     TXA_SENTENCE_ID,
     TXA_DOCUMENT_ID,
     TXA_SESSION_ID,
     TXA_DOCUMENT_DATE,
     TXA_NATURAL_ID,
     TXA_SOURCE_ID,
     TXA_BI_SOURCE_NAME,
     TXA_DATE_LAST_UPDATED,
     LOCATION_ID,
     TXA_STORE_PHONE_NBR,
     TXA_STORE_ADDRESS,
     SMG_SURVEY_TYPE_ID,
     SMG_SURVEY_TYPE_DESC_ID,
     TXA_AUTHOR,
     TXA_AUTHORLOCATION_ID,
     TXA_STARSRATING,
     TXA_ROBOTNAME_ID,
     TXA_SM_SERVICE_ID,
     TXA_MEDIA_TYPE_ID,
     TXA_SOURCE_URL,
     TXA_USER_NAME,
     ISO_LANG_CODE_ID,
     TXA_COMMENT_CNT,
     TXA_SPAM_RATING,
     TXA_PERMALINK,
     TXA_INGEST_DATE,
     TXA_TOPIC_ID,
     TXA_LIKE_COUNT,
     TXA_SM_SOURCE_NAME_ID,
     TXA_CB_EXP_RESTRICT,
     OSAT_NBR,
     SMG_RT_KNOWLEDGE_NBR,
     SMG_RT_INSTOCK_NBR,
     SMG_RT_SERVICE_NBR,
     SMG_RT_CLSS_CONTENT_NBR,
     SMG_RT_GROOM_SERVICE_NBR,
     SMG_SCHED_NEXT_APPT,
     SMG_INFORM_GROOMPRC,
     SMG_AWARE_LOOKGREAT,
     SMG_INFORM_LOOKGREAT,
     SMG_RCV_PAWGRESS_SERVICE,
     SMG_RCV_PAWGRESS_HOTEL,
     UPDATE_TSTMP,
     LOAD_TSTMP,
     TXA_NODE_ID,
     SENTIMENT_SCORE,
     SENTIMENT_BAND,
     D_SENTIMENT_SCORE,
     D_SENTIMENT_BAND
) AS
SELECT DISTINCT TXA_VERBATIM.TXA_VERBATIM_ID, TXA_VERBATIM.TXA_VERBATIM_TYPE_ID, TXA_SENTENCE.TXA_SENTENCE_ID, TXA_DOCUMENT.TXA_DOCUMENT_ID, TXA_DOCUMENT.TXA_SESSION_ID, TXA_DOCUMENT.TXA_DOCUMENT_DATE, TXA_DOCUMENT.TXA_NATURAL_ID, TXA_DOCUMENT.TXA_SOURCE_ID, CASE WHEN (TXA_DOCUMENT.TXA_SOURCE_ID = ('27'::NUMERIC(2,0))::NUMERIC(2,0)) THEN TXA_MEDIA_TYPE.TXA_MEDIA_TYPE_DESC ELSE TXA_SOURCE.TXA_SOURCE_DESC END AS TXA_BI_SOURCE_NAME, TXA_DOCUMENT.TXA_DATE_LAST_UPDATED, CASE WHEN (TXA_DOCUMENT.LOCATION_ID NOTNULL) THEN TXA_DOCUMENT.LOCATION_ID WHEN (99999 NOTNULL) THEN 99999 ELSE NULL::INT4 END AS LOCATION_ID, TXA_DOCUMENT.TXA_STORE_PHONE_NBR, TXA_DOCUMENT.TXA_STORE_ADDRESS, TXA_DOCUMENT.SMG_SURVEY_TYPE_ID, TXA_DOCUMENT.SMG_SURVEY_TYPE_DESC_ID, TXA_DOCUMENT.TXA_AUTHOR, TXA_DOCUMENT.TXA_AUTHORLOCATION_ID, TXA_DOCUMENT.TXA_STARSRATING, TXA_DOCUMENT.TXA_ROBOTNAME_ID, TXA_DOCUMENT.TXA_SM_SERVICE_ID, TXA_DOCUMENT.TXA_MEDIA_TYPE_ID, TXA_DOCUMENT.TXA_SOURCE_URL, TXA_DOCUMENT.TXA_USER_NAME, TXA_DOCUMENT.ISO_LANG_CODE_ID, TXA_DOCUMENT.TXA_COMMENT_CNT, TXA_DOCUMENT.TXA_SPAM_RATING, TXA_DOCUMENT.TXA_PERMALINK, TXA_DOCUMENT.TXA_INGEST_DATE, TXA_DOCUMENT.TXA_TOPIC_ID, TXA_DOCUMENT.TXA_LIKE_COUNT, TXA_DOCUMENT.TXA_SM_SOURCE_NAME_ID, TXA_DOCUMENT.TXA_CB_EXP_RESTRICT, TXA_DOCUMENT.OSAT_NBR, TXA_DOCUMENT.SMG_RT_KNOWLEDGE_NBR, TXA_DOCUMENT.SMG_RT_INSTOCK_NBR, TXA_DOCUMENT.SMG_RT_SERVICE_NBR, TXA_DOCUMENT.SMG_RT_CLSS_CONTENT_NBR, TXA_DOCUMENT.SMG_RT_GROOM_SERVICE_NBR, TXA_DOCUMENT.SMG_SCHED_NEXT_APPT, TXA_DOCUMENT.SMG_INFORM_GROOMPRC, TXA_DOCUMENT.SMG_AWARE_LOOKGREAT, TXA_DOCUMENT.SMG_INFORM_LOOKGREAT, TXA_DOCUMENT.SMG_RCV_PAWGRESS_SERVICE, TXA_DOCUMENT.SMG_RCV_PAWGRESS_HOTEL, TXA_DOCUMENT.UPDATE_TSTMP, TXA_DOCUMENT.LOAD_TSTMP, TXA_SENTENCE_CLASS_XREF.TXA_NODE_ID, TXA_SENTENCE.SENTIMENT_SCORE, CASE WHEN (TXA_SENTENCE.SENTIMENT_SCORE < ('0.4'::NUMERIC(1,1))::NUMERIC(1,1)) THEN -1 WHEN ((TXA_SENTENCE.SENTIMENT_SCORE >= ('0.4'::NUMERIC(1,1))::NUMERIC(1,1)) AND (TXA_SENTENCE.SENTIMENT_SCORE <= ('0.6'::NUMERIC(1,1))::NUMERIC(1,1))) THEN 0 WHEN (TXA_SENTENCE.SENTIMENT_SCORE > ('0.6'::NUMERIC(1,1))::NUMERIC(1,1)) THEN 1 ELSE NULL::INT4 END AS SENTIMENT_BAND, TXA_SENTENCE.D_SENTIMENT_SCORE, CASE WHEN (TXA_SENTENCE.D_SENTIMENT_SCORE < ('-0.4'::NUMERIC(1,1))::NUMERIC(1,1)) THEN -1 WHEN ((TXA_SENTENCE.D_SENTIMENT_SCORE >= ('-0.4'::NUMERIC(1,1))::NUMERIC(1,1)) AND (TXA_SENTENCE.D_SENTIMENT_SCORE <= ('0.4'::NUMERIC(1,1))::NUMERIC(1,1))) THEN 0 WHEN (TXA_SENTENCE.D_SENTIMENT_SCORE > ('0.4'::NUMERIC(1,1))::NUMERIC(1,1)) THEN 1 ELSE NULL::INT4 END AS D_SENTIMENT_BAND FROM ((((((ADMIN.TXA_DOCUMENT JOIN ADMIN.TXA_SENTENCE ON ((TXA_DOCUMENT.TXA_DOCUMENT_ID = TXA_SENTENCE.TXA_DOCUMENT_ID))) JOIN ADMIN.TXA_VERBATIM ON ((TXA_SENTENCE.TXA_VERBATIM_ID = TXA_VERBATIM.TXA_VERBATIM_ID))) JOIN ADMIN.TXA_SENTENCE_CLASS_XREF ON ((TXA_SENTENCE.TXA_SENTENCE_ID = TXA_SENTENCE_CLASS_XREF.TXA_SENTENCE_ID))) JOIN ADMIN.TXA_CATEGORY_TREE ON ((TXA_SENTENCE_CLASS_XREF.TXA_NODE_ID = TXA_CATEGORY_TREE.TXA_CAT_ID))) JOIN ADMIN.TXA_SOURCE ON ((TXA_DOCUMENT.TXA_SOURCE_ID = TXA_SOURCE.TXA_SOURCE_ID))) LEFT JOIN ADMIN.TXA_MEDIA_TYPE ON ((TXA_DOCUMENT.TXA_MEDIA_TYPE_ID = TXA_MEDIA_TYPE.TXA_MEDIA_TYPE_ID))) WHERE (TXA_SENTENCE_CLASS_XREF.TXA_NODE_ID > '0'::NUMERIC);

\echo
\echo *****  Creating view:  "SITE_LEASE_RPT_VW"

CREATE or replace VIEW  SITE_LEASE_RPT_VW
(
     LOCATION_ID,
     LOCATION_TYPE_ID,
     LOCATION_TYPE_DESC,
     STORE_NBR,
     "DIST_MGR_NAME",
     "SITE_DM_EFF_DT",
     "DISTRICT_ID",
     "DISTRICT_DESC",
     "REGION_ID",
     "REGION_DESC",
     "EAGLE_LEVEL",
     PRIMARY_LEASE_FLAG,
     SITE_LEASE_EFF_DT,
     SITE_LEASE_END_DT,
     FACILITY_LEASE_SQ_FT,
     "SITE_RENT_PAYMENT_FREQ",
     SITE_MONTHLY_RENT_AMT,
     SITE_MONTHLY_RENT_AMT_PER_SQ_FT,
     EXCH_RATE_PCT,
     SITE_LEASE_UPDATE_TSTMP,
     SITE_LEASE_PAY_UPDATE_TSTMP,
     SITE_HIERACHY_UPDATE_TSTMP
) AS
SELECT S.LOCATION_ID, S.LOCATION_TYPE_ID, S.LOCATION_TYPE_DESC, S.STORE_NBR, DM.DIST_MGR_NAME, DM.SITE_DM_EFF_DT, TH.DISTRICT_ID, TH.DISTRICT_DESC, TH.REGION_ID, TH.REGION_DESC, E.EAGLE_LEVEL, TL.PRIMARY_LEASE_FLAG, TL.SITE_LEASE_EFF_DT, TL.SITE_LEASE_END_DT, TL.FACILITY_LEASE_SQ_FT, TP.SITE_RENT_PAYMENT_FREQ, CASE WHEN (TL.PRIMARY_LEASE_FLAG = 1) THEN TP.SITE_MONTHLY_RENT_AMT ELSE '0'::NUMERIC END AS SITE_MONTHLY_RENT_AMT, CASE WHEN (TL.FACILITY_LEASE_SQ_FT <> '0'::NUMERIC) THEN (CASE WHEN (TP.SITE_MONTHLY_RENT_AMT NOTNULL) THEN TP.SITE_MONTHLY_RENT_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END / TL.FACILITY_LEASE_SQ_FT) ELSE '0'::NUMERIC END AS SITE_MONTHLY_RENT_AMT_PER_SQ_FT, CASE WHEN (S.COUNTRY_CD = 'CA'::BPCHAR) THEN TC.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END AS EXCH_RATE_PCT, TL.UPDATE_TSTMP AS SITE_LEASE_UPDATE_TSTMP, TP.UPDATE_TSTMP AS SITE_LEASE_PAY_UPDATE_TSTMP, TH.UPDATE_TSTMP AS SITE_HIERACHY_UPDATE_TSTMP FROM ((((((ADMIN.SITE_PROFILE_RPT S CROSS JOIN (SELECT C.CURRENCY_ID, C.EXCHANGE_RATE_PCNT FROM ADMIN.CURRENCY_DAY C, (SELECT MAX(DAYS.DAY_DT) AS LAST_DAY_PREV_FQTR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_QTR = (SELECT CASE WHEN (DAYS.FISCAL_QTR_NBR > 1) THEN (DAYS.FISCAL_QTR - 1) ELSE ((DAYS.FISCAL_QTR - 100) + 3) END AS FISCAL_QTR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now'::"VARCHAR") - 1)))))) D WHERE (C.DAY_DT = D.LAST_DAY_PREV_FQTR)) TC) JOIN (SELECT L.LOCATION_ID, MIN(L.SITE_LEASE_TYPE_ID) AS SITE_LEASE_TYPE_ID, MAX(L.PRIMARY_LEASE_FLAG) AS PRIMARY_LEASE_FLAG, MAX(L.SITE_LEASE_EFF_DT) AS SITE_LEASE_EFF_DT, MAX(L.SITE_LEASE_END_DT) AS SITE_LEASE_END_DT, SUM(L.FACILITY_LEASE_SQ_FT) AS FACILITY_LEASE_SQ_FT, MAX(L.UPDATE_TSTMP) AS UPDATE_TSTMP FROM ADMIN.SITE_LEASE L, (SELECT MAX(DAYS.DAY_DT) AS LAST_DAY_PREV_FQTR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_QTR = (SELECT CASE WHEN (DAYS.FISCAL_QTR_NBR > 1) THEN (DAYS.FISCAL_QTR - 1) ELSE ((DAYS.FISCAL_QTR - 100) + 3) END AS FISCAL_QTR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now'::"VARCHAR") - 1)))))) D WHERE (L.SITE_LEASE_STATUS_ID <> 7) GROUP BY L.LOCATION_ID) TL ON ((S.LOCATION_ID = TL.LOCATION_ID))) LEFT JOIN (SELECT P.LOCATION_ID, P.SITE_LEASE_TYPE_ID, P.SITE_LEASE_EFF_DT, P.SITE_LEASE_PAY_EFF_DT, P.SITE_LEASE_PAY_END_DT, P.SITE_RENT_PAYMENT_FREQ, P.SITE_MONTHLY_RENT_AMT, P.UPDATE_TSTMP, RANK() OVER (PARTITION BY P.LOCATION_ID  ORDER BY P.SITE_LEASE_PAY_EFF_DT DESC ) AS LEASE_PAY_RNK FROM ADMIN.SITE_LEASE_PAYMENT P, (SELECT MAX(DAYS.DAY_DT) AS LAST_DAY_PREV_FQTR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_QTR = (SELECT CASE WHEN (DAYS.FISCAL_QTR_NBR > 1) THEN (DAYS.FISCAL_QTR - 1) ELSE ((DAYS.FISCAL_QTR - 100) + 3) END AS FISCAL_QTR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now'::"VARCHAR") - 1)))))) D) TP ON ((TL.LOCATION_ID = TP.LOCATION_ID))) LEFT JOIN (SELECT H.LOCATION_ID, H.DISTRICT_ID, H.DISTRICT_DESC, H.REGION_ID, H.REGION_DESC, H.UPDATE_TSTMP FROM ADMIN.SITE_HIERARCHY_HIST H, (SELECT MAX(DAYS.DAY_DT) AS LAST_DAY_PREV_FQTR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_QTR = (SELECT CASE WHEN (DAYS.FISCAL_QTR_NBR > 1) THEN (DAYS.FISCAL_QTR - 1) ELSE ((DAYS.FISCAL_QTR - 100) + 3) END AS FISCAL_QTR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now'::"VARCHAR") - 1)))))) D, (SELECT MIN(DAYS.DAY_DT) AS FIRST_DAY_CURRENT_FQTR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_QTR = (SELECT DAYS.FISCAL_QTR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('NOW'::"VARCHAR")))))) C WHERE ((D.LAST_DAY_PREV_FQTR >= H.SITE_HIERARCHY_EFF_DT) AND ((H.SITE_HIERARCHY_END_DT >= C.FIRST_DAY_CURRENT_FQTR) OR ((H.SITE_HIERARCHY_END_DT >= D.LAST_DAY_PREV_FQTR) AND (H.SITE_HIERARCHY_END_DT <= C.FIRST_DAY_CURRENT_FQTR))))) TH ON ((S.LOCATION_ID = TH.LOCATION_ID))) LEFT JOIN (SELECT DM.LOCATION_ID, DM.SITE_DM_EFF_DT, DM.DIST_MGR_NAME FROM ADMIN.SITE_DM_HIST DM, (SELECT MAX(DAYS.DAY_DT) AS LAST_DAY_PREV_FQTR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_QTR = (SELECT CASE WHEN (DAYS.FISCAL_QTR_NBR > 1) THEN (DAYS.FISCAL_QTR - 1) ELSE ((DAYS.FISCAL_QTR - 100) + 3) END AS FISCAL_QTR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now'::"VARCHAR") - 1)))))) D, (SELECT MIN(DAYS.DAY_DT) AS FIRST_DAY_CURRENT_FQTR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_QTR = (SELECT DAYS.FISCAL_QTR FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('NOW'::"VARCHAR")))))) C WHERE ((D.LAST_DAY_PREV_FQTR >= DM.SITE_DM_EFF_DT) AND ((DM.SITE_DM_END_DT >= C.FIRST_DAY_CURRENT_FQTR) OR ((DM.SITE_DM_END_DT >= D.LAST_DAY_PREV_FQTR) AND (DM.SITE_DM_END_DT <= C.FIRST_DAY_CURRENT_FQTR))))) DM ON ((S.LOCATION_ID = DM.LOCATION_ID))) LEFT JOIN ADMIN.SITE_EAGLE_STATUS E ON ((S.LOCATION_ID = E.LOCATION_ID))) WHERE (CASE WHEN (TP.LEASE_PAY_RNK NOTNULL) THEN TP.LEASE_PAY_RNK WHEN (1 NOTNULL) THEN '1'::INT8 ELSE NULL::INT8 END = 1);

\echo
\echo *****  Creating view:  "SITE_ASSET_RETIREMENT_VALUE_VW"

CREATE or replace VIEW  SITE_ASSET_RETIREMENT_VALUE_VW
(
     "ASSET_NBR",
     "ASSET_SUB_NBR",
     "LOCATION_ID",
     "FISCAL_YR",
     "FISCAL_MO",
     "ASSET_RET_AMT",
     COUNTRY_CD,
     EXCH_RATE_PCT,
     "LOAD_TSTMP"
) AS
SELECT A.ASSET_NBR, A.ASSET_SUB_NBR, A.LOCATION_ID, A.FISCAL_YR, A.FISCAL_MO, A.ASSET_RET_AMT, A.COUNTRY_CD, A.EXCH_RATE_PCT, A.LOAD_TSTMP FROM (SELECT A.ASSET_NBR, A.ASSET_SUB_NBR, A.LOCATION_ID, A.FISCAL_YR, A.FISCAL_MO, A.ASSET_RET_AMT, B.COUNTRY_CD, CASE WHEN (B.COUNTRY_CD = 'CA'::BPCHAR) THEN TC.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END AS EXCH_RATE_PCT, A.LOAD_TSTMP FROM ((ADMIN.SITE_ASSET_RETIREMENT_VALUE A JOIN (SELECT SITE_PROFILE_RPT.LOCATION_TYPE_ID, SITE_PROFILE_RPT.LOCATION_TYPE_DESC, SITE_PROFILE_RPT.LOCATION_ID, SITE_PROFILE_RPT.COUNTRY_CD FROM ADMIN.SITE_PROFILE_RPT) B ON ((A.LOCATION_ID = B.LOCATION_ID))) CROSS JOIN (SELECT C.CURRENCY_ID, C.EXCHANGE_RATE_PCNT FROM ADMIN.CURRENCY_DAY C, (SELECT MAX(DAYS.DAY_DT) AS LAST_DAY_PREV_FMO FROM ADMIN.DAYS WHERE (DAYS.FISCAL_MO = (SELECT CASE WHEN (DAYS.FISCAL_MO_NBR > 1) THEN (DAYS.FISCAL_MO - 1) ELSE ((DAYS.FISCAL_MO - 100) + 11) END AS PRIOR_FISCAL_MO FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now'::"VARCHAR") - 1)))))) D WHERE (C.DAY_DT = D.LAST_DAY_PREV_FMO)) TC)) A;

\echo
\echo *****  Creating view:  "GS_EMPL_MGMT_JOB_VW"

CREATE or replace VIEW  GS_EMPL_MGMT_JOB_VW
(
     EMPLOYEE_ID,
     EMPL_JOB_EFF_DT,
     CURRENT_LOCATION_ID,
     CURRENT_STORE_NBR,
     JOB_HIST_LOCATION_ID,
     JOB_HIST_STORE_NBR,
     ACTION_DT,
     ACTION_WEEK_DT,
     FROM_JOB_CODE,
     FROM_JOB_CODE_DESC,
     TO_JOB_CODE,
     TO_JOB_CODE_DESC,
     FROM_GS_MGMT_JOB_ID,
     FROM_GS_MGMT_JOB_DESC,
     FROM_BUSINESS_AREA_CD,
     TO_GS_MGMT_JOB_ID,
     TO_GS_MGMT_JOB_DESC,
     TO_BUSINESS_AREA_CD,
     TRAINING_REQUIRED_IND,
     GS_MGMT_JOB_ACTION_CD,
     GS_MGMT_JOB_ACTION_DESC,
     PS_ACTION_CD,
     PS_ACTION_DESC,
     PS_ACTION_REASON_CD,
     PS_ACTION_REASON_DESC
) AS
SELECT EJH.EMPLOYEE_ID, EJH.EMPL_JOB_EFF_DT, EP.LOCATION_ID AS CURRENT_LOCATION_ID, EP.STORE_NBR AS CURRENT_STORE_NBR, SAP_JH.LOCATION_ID AS JOB_HIST_LOCATION_ID, SAP_JH.STORE_NBR AS JOB_HIST_STORE_NBR, SAP_JH.ACTION_DT, SAP_JH.ACTION_WEEK_DT, EJH.FROM_JOB_CODE, FJC.JOB_CODE_DESC AS FROM_JOB_CODE_DESC, EJH.TO_JOB_CODE, TJC.JOB_CODE_DESC AS TO_JOB_CODE_DESC, CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END AS FROM_GS_MGMT_JOB_ID, CASE WHEN (FGMJ.GS_MGMT_JOB_DESC NOTNULL) THEN FGMJ.GS_MGMT_JOB_DESC WHEN ('Non Manager' NOTNULL) THEN 'Non Manager'::"VARCHAR" ELSE NULL::"VARCHAR" END AS FROM_GS_MGMT_JOB_DESC, CASE WHEN (FGMJ.BUSINESS_AREA_CD NOTNULL) THEN FGMJ.BUSINESS_AREA_CD WHEN ('Z' NOTNULL) THEN 'Z'::BPCHAR ELSE NULL::BPCHAR END AS FROM_BUSINESS_AREA_CD, CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END AS TO_GS_MGMT_JOB_ID, CASE WHEN (TGMJ.GS_MGMT_JOB_DESC NOTNULL) THEN TGMJ.GS_MGMT_JOB_DESC WHEN ('Non Manager' NOTNULL) THEN 'Non Manager'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TO_GS_MGMT_JOB_DESC, CASE WHEN (TGMJ.BUSINESS_AREA_CD NOTNULL) THEN TGMJ.BUSINESS_AREA_CD WHEN ('Z' NOTNULL) THEN 'Z'::BPCHAR ELSE NULL::BPCHAR END AS TO_BUSINESS_AREA_CD, CASE WHEN (SAP_ACT.PS_ACTION_CD = 'ZA'::"VARCHAR") THEN 1 WHEN (CASE WHEN (FGMJ.BUSINESS_AREA_CD NOTNULL) THEN FGMJ.BUSINESS_AREA_CD WHEN ('Z' NOTNULL) THEN 'Z'::BPCHAR ELSE NULL::BPCHAR END = CASE WHEN (TGMJ.BUSINESS_AREA_CD NOTNULL) THEN TGMJ.BUSINESS_AREA_CD WHEN ('Z' NOTNULL) THEN 'Z'::BPCHAR ELSE NULL::BPCHAR END) THEN CASE WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END > CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 1 ELSE 0 END WHEN ((CASE WHEN (FGMJ.BUSINESS_AREA_CD NOTNULL) THEN FGMJ.BUSINESS_AREA_CD WHEN ('Z' NOTNULL) THEN 'Z'::BPCHAR ELSE NULL::BPCHAR END <> CASE WHEN (TGMJ.BUSINESS_AREA_CD NOTNULL) THEN TGMJ.BUSINESS_AREA_CD WHEN ('Z' NOTNULL) THEN 'Z'::BPCHAR ELSE NULL::BPCHAR END) AND (CASE WHEN (TGMJ.BUSINESS_AREA_CD NOTNULL) THEN TGMJ.BUSINESS_AREA_CD WHEN ('Z' NOTNULL) THEN 'Z'::BPCHAR ELSE NULL::BPCHAR END <> 'Z'::BPCHAR)) THEN 1 ELSE 0 END AS TRAINING_REQUIRED_IND, CASE WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END = CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'L'::"VARCHAR" WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END > CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'P'::"VARCHAR" ELSE 'S'::"VARCHAR" END AS GS_MGMT_JOB_ACTION_CD, CASE WHEN (CASE WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END = CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'L'::"VARCHAR" WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END > CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'P'::"VARCHAR" ELSE 'S'::"VARCHAR" END = 'L'::"VARCHAR") THEN 'Lateral Move'::"VARCHAR" WHEN (CASE WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END = CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'L'::"VARCHAR" WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END > CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'P'::"VARCHAR" ELSE 'S'::"VARCHAR" END = 'P'::"VARCHAR") THEN 'Promotion'::"VARCHAR" WHEN (CASE WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END = CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'L'::"VARCHAR" WHEN (CASE WHEN (FGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(FGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END > CASE WHEN (TGMJ.GS_MGMT_JOB_ID NOTNULL) THEN INT4(TGMJ.GS_MGMT_JOB_ID) WHEN (9999 NOTNULL) THEN 9999 ELSE NULL::INT4 END) THEN 'P'::"VARCHAR" ELSE 'S'::"VARCHAR" END = 'S'::"VARCHAR") THEN 'Step Down'::"VARCHAR" ELSE NULL::"VARCHAR" END AS GS_MGMT_JOB_ACTION_DESC, SAP_ACT.PS_ACTION_CD, SAP_ACT.PS_ACTION_DESC, SAP_ACT.PS_ACTION_REASON_CD, SAP_ACT.PS_ACTION_REASON_DESC FROM (((((((ADMIN.EMPL_JOB_HIST EJH JOIN ADMIN.EMPLOYEE_PROFILE EP ON ((EJH.EMPLOYEE_ID = EP.EMPLOYEE_ID))) JOIN ADMIN.JOB_CODE FJC ON ((EJH.FROM_JOB_CODE = FJC.JOB_CODE))) JOIN ADMIN.JOB_CODE TJC ON ((EJH.TO_JOB_CODE = TJC.JOB_CODE))) LEFT JOIN ADMIN.GS_MGMT_JOB FGMJ ON ((EJH.FROM_JOB_CODE = FGMJ.JOB_CODE))) LEFT JOIN ADMIN.GS_MGMT_JOB TGMJ ON ((EJH.TO_JOB_CODE = TGMJ.JOB_CODE))) JOIN (SELECT SPH1.PERNR AS EMPLOYEE_ID, SPH1.BEGDA AS EMPL_JOB_EFF_DT, SPR.LOCATION_ID, SPR.STORE_NBR, SPR.STORE_NAME, SPR.DISTRICT_ID, SPR.DISTRICT_DESC, SPR.REGION_ID, SPR.REGION_DESC, MIN(SPH0.AEDTM) AS ACTION_DT, MIN(D.WEEK_DT) AS ACTION_WEEK_DT FROM (((ADMIN.SAP_PA0001_HIST SPH1 JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SPH1.BTRTL = LPAD("VARCHAR"(SPR.STORE_NBR), 4, '0'::"VARCHAR")))) JOIN ADMIN.SAP_PA0000_HIST SPH0 ON (((SPH1.PERNR = SPH0.PERNR) AND ((SPH1.BEGDA >= SPH0.BEGDA) AND (SPH1.BEGDA <= SPH0.ENDDA))))) JOIN ADMIN.DAYS D ON ((SPH0.AEDTM = D.DAY_DT))) WHERE (SPR.LOCATION_TYPE_ID = 8) GROUP BY SPH1.PERNR, SPH1.BEGDA, SPR.LOCATION_ID, SPR.STORE_NBR, SPR.STORE_NAME, SPR.DISTRICT_ID, SPR.DISTRICT_DESC, SPR.REGION_ID, SPR.REGION_DESC) SAP_JH ON (((EJH.EMPLOYEE_ID = SAP_JH.EMPLOYEE_ID) AND (EJH.EMPL_JOB_EFF_DT = SAP_JH.EMPL_JOB_EFF_DT)))) JOIN (SELECT ACT.EMPLOYEE_ID, ACT.EMPL_JOB_EFF_DT, ACT.PS_ACTION_CD, ACT.PS_ACTION_DESC, ACT.PS_ACTION_REASON_CD, ACT.PS_ACTION_REASON_DESC FROM (SELECT EJH.EMPLOYEE_ID, EJH.EMPL_JOB_EFF_DT, PA.PS_ACTION_CD, PA.PS_ACTION_DESC, PAR.PS_ACTION_REASON_CD, PAR.PS_ACTION_REASON_DESC, ROW_NUMBER() OVER (PARTITION BY EJH.EMPLOYEE_ID, EJH.EMPL_JOB_EFF_DT  ORDER BY SPH.UPDATE_TSTMP DESC ) AS RN FROM (((ADMIN.EMPL_JOB_HIST EJH LEFT JOIN ADMIN.SAP_PA0000_HIST SPH ON (((EJH.EMPLOYEE_ID = SPH.PERNR) AND ((EJH.EMPL_JOB_EFF_DT >= SPH.BEGDA) AND (EJH.EMPL_JOB_EFF_DT <= SPH.ENDDA))))) LEFT JOIN ADMIN.PS_ACTION PA ON ((SPH.MASSN = PA.PS_ACTION_CD))) LEFT JOIN ADMIN.PS_ACTION_REASON PAR ON (((SPH.MASSN = PAR.PS_ACTION_CD) AND (SPH.MASSG = PAR.PS_ACTION_REASON_CD))))) ACT WHERE (ACT.RN = 1)) SAP_ACT ON (((EJH.EMPLOYEE_ID = SAP_ACT.EMPLOYEE_ID) AND (EJH.EMPL_JOB_EFF_DT = SAP_ACT.EMPL_JOB_EFF_DT)))) WHERE ((FGMJ.JOB_CODE NOTNULL) OR (TGMJ.JOB_CODE NOTNULL));

\echo
\echo *****  Creating view:  "OLD_P4P_EMPL_LM_DAY_RPT_VW"

CREATE or replace VIEW  OLD_P4P_EMPL_LM_DAY_RPT_VW
(
     DAY_DT,
     CLOCK_IN_DATE,
     P4P_PERIOD_ID,
     PARENT_DC_NBR,
     DC_NBR,
     DC_NAME,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_LAST_NAME,
     LOGIN_USER_ID,
     SPVSR_LOGIN_USER_ID,
     SHIFT_CODE,
     DEPT_ID,
     DEPT_CODE,
     DEPT_DESC,
     P4P_LEARNING_GROUP_DESC,
     P4P_JOB_FUNCTION_ID,
     JOB_FUNCTION_NAME,
     P4P_LOOK_BACK_TIMEFRAME,
     P4P_JOB_TRAINED_MINS,
     P4P_DIRECT_FL,
     WMS_TOTAL_EARNED_MINS,
     WMS_STD_DIRECT_MINS,
     WMS_NON_STD_DIRECT_MINS,
     WMS_INDIRECT_MINS,
     WMS_USER_DEF_INDIRECT_MINS,
     WMS_PAID_BREAK_MINS,
     WMS_UNPAID_BREAK_MINS,
     WMS_TOTAL_MINS,
     WMS_TOTAL_DIRECT_MINS,
     WMS_TOTAL_INDIRECT_MINS,
     WMS_TOTAL_BREAK_MINS,
     WMS_CALC_STD_DIRECT_MINS,
     WMS_LOOK_BACK_CALC_OSDL,
     WMS_TRAINED_MINS,
     WMS_UNTRAINED_MINS,
     WMS_TRAINED_EARNED_MINS,
     WMS_UNTRAINED_EARNED_MINS,
     DATE_EXCLUDED_FLAG,
     LAST_UPDATED_TSTMP
) AS
SELECT TT.DAY_DT, TT.CLOCK_IN_DATE, TT.P4P_PERIOD_ID, TT.PARENT_DC_NBR, TT.DC_NBR, TT.DC_NAME, TT.EMPLOYEE_ID, TT.EMPL_FIRST_NAME, TT.EMPL_LAST_NAME, TT.LOGIN_USER_ID, TT.SPVSR_LOGIN_USER_ID, TT.SHIFT_CODE, TT.DEPT_ID, TT.DEPT_CODE, TT.DEPT_DESC, TT.P4P_LEARNING_GROUP_DESC, TT.P4P_JOB_FUNCTION_ID, TT.JOB_FUNCTION_NAME, TT.P4P_LOOK_BACK_TIMEFRAME, TT.P4P_JOB_TRAINED_MINS, TT.P4P_DIRECT_FL, TT.WMS_TOTAL_EARNED_MINS, TT.WMS_STD_DIRECT_MINS, TT.WMS_NON_STD_DIRECT_MINS, TT.WMS_INDIRECT_MINS, TT.WMS_USER_DEF_INDIRECT_MINS, TT.WMS_PAID_BREAK_MINS, TT.WMS_UNPAID_BREAK_MINS, TT.WMS_TOTAL_MINS, TT.WMS_TOTAL_DIRECT_MINS, TT.WMS_TOTAL_INDIRECT_MINS, TT.WMS_TOTAL_BREAK_MINS, CASE WHEN ((TT.P4P_DIRECT_FL <> 'D'::"VARCHAR") OR (TT.DATE_EXCLUDED_FLAG = 1)) THEN '0'::NUMERIC ELSE TT.WMS_CALC_STD_DIRECT_MINS END AS WMS_CALC_STD_DIRECT_MINS, TT.LOOK_BACK_TOT_CALC_OSDL AS WMS_LOOK_BACK_CALC_OSDL, CASE WHEN (((TT.P4P_DIRECT_FL <> 'D'::"VARCHAR") OR (TT.LOOK_BACK_TOT_CALC_OSDL < "NUMERIC"(TT.P4P_JOB_TRAINED_MINS))) OR (TT.DATE_EXCLUDED_FLAG = 1)) THEN '0'::NUMERIC ELSE TT.WMS_CALC_STD_DIRECT_MINS END AS WMS_TRAINED_MINS, CASE WHEN (((TT.P4P_DIRECT_FL = 'D'::"VARCHAR") AND (TT.LOOK_BACK_TOT_CALC_OSDL < "NUMERIC"(TT.P4P_JOB_TRAINED_MINS))) AND (TT.DATE_EXCLUDED_FLAG = 0)) THEN TT.WMS_CALC_STD_DIRECT_MINS ELSE '0'::NUMERIC END AS WMS_UNTRAINED_MINS, CASE WHEN (((TT.P4P_DIRECT_FL <> 'D'::"VARCHAR") OR (TT.LOOK_BACK_TOT_CALC_OSDL < "NUMERIC"(TT.P4P_JOB_TRAINED_MINS))) OR (TT.DATE_EXCLUDED_FLAG = 1)) THEN '0'::NUMERIC ELSE TT.WMS_TOTAL_EARNED_MINS END AS WMS_TRAINED_EARNED_MINS, CASE WHEN (((TT.P4P_DIRECT_FL = 'D'::"VARCHAR") AND (TT.LOOK_BACK_TOT_CALC_OSDL < "NUMERIC"(TT.P4P_JOB_TRAINED_MINS))) AND (TT.DATE_EXCLUDED_FLAG = 0)) THEN TT.WMS_TOTAL_EARNED_MINS ELSE '0'::NUMERIC END AS WMS_UNTRAINED_EARNED_MINS, TT.DATE_EXCLUDED_FLAG, TT.LAST_UPDATED_TSTMP FROM (SELECT DISTINCT EC.CLOCK_IN_DATE, DATE(EC.CLOCK_IN_DATE) AS DAY_DT, PP.P4P_PERIOD_ID, INT2(EC.WHSE) AS DC_NBR, PD.STORE_NAME AS DC_NAME, PD.DC_GROUP AS PARENT_DC_NBR, INT4(EE.NICK_NAME) AS EMPLOYEE_ID, EE.FIRST_NAME AS EMPL_FIRST_NAME, EE.LAST_NAME AS EMPL_LAST_NAME, EC.LOGIN_USER_ID, EC.SPVSR_LOGIN_USER_ID, EC.SHIFT_CODE, ED.DEPT_ID, EC.DEPT_CODE, ED.DEPT_DESC, PL.P4P_LEARNING_GROUP_DESC, PJ.P4P_JOB_FUNCTION_ID, EC.JOB_FUNCTION_NAME, PJ.P4P_DIRECT_FL, EC.TOTAL_SAM AS WMS_TOTAL_EARNED_MINS, EC.OSDL AS WMS_STD_DIRECT_MINS, EC.NSDL AS WMS_NON_STD_DIRECT_MINS, EC.SIL AS WMS_INDIRECT_MINS, EC.UDIL AS WMS_USER_DEF_INDIRECT_MINS, EC.PAID_BRK AS WMS_PAID_BREAK_MINS, EC.UNPAID_BRK AS WMS_UNPAID_BREAK_MINS, EC.TOTAL_TIME AS WMS_TOTAL_MINS, (EC.OSDL + EC.NSDL) AS WMS_TOTAL_DIRECT_MINS, (EC.SIL + EC.UDIL) AS WMS_TOTAL_INDIRECT_MINS, (EC.PAID_BRK + EC.UNPAID_BRK) AS WMS_TOTAL_BREAK_MINS, (((((EC.TOTAL_TIME - EC.NSDL) - EC.UDIL) - EC.SIL) - EC.PAID_BRK) - EC.UNPAID_BRK) AS WMS_CALC_STD_DIRECT_MINS, PL.P4P_LOOK_BACK_TIMEFRAME, PL.P4P_JOB_TRAINED_MINS, CASE WHEN (PJ.P4P_DIRECT_FL = 'D'::"VARCHAR") THEN SUM(LB.SUM_CALC_OSDL) OVER (PARTITION BY EC.WHSE, EC.PERF_SMRY_TRAN_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) ELSE '0'::NUMERIC END AS LOOK_BACK_TOT_CALC_OSDL, EC.ODS_UPDATE_TSTMP AS LAST_UPDATED_TSTMP, CASE WHEN (PE.DAY_DT NOTNULL) THEN 1 ELSE 0 END AS DATE_EXCLUDED_FLAG FROM ADMIN.E_EMP EE, (((((((ADMIN.P4P_DC_GROUP PD JOIN ADMIN.E_CONSOL_PERF_SMRY EC ON ((INT2(EC.WHSE) = PD.STORE_NBR))) LEFT JOIN ADMIN.E_DEPT ED ON (((EC.WHSE = ED.WHSE) AND (UPPER(EC.DEPT_CODE) = UPPER(ED.DEPT_CD))))) LEFT JOIN ADMIN.P4P_DC_EXCLUDE_DAY PE ON (((DATE(EC.CLOCK_IN_DATE) = PE.DAY_DT) AND (INT4(EC.WHSE) = PE.STORE_NBR)))) LEFT JOIN ADMIN.P4P_PERIOD PP ON (((PD.DC_GROUP = PP.STORE_NBR) AND ((DATE(EC.CLOCK_IN_DATE) >= PP.P4P_PERIOD_START_DT) AND (DATE(EC.CLOCK_IN_DATE) <= PP.P4P_PERIOD_END_DT))))) JOIN ADMIN.P4P_JOB_FUNCTION PJ ON (((UPPER(EC.JOB_FUNCTION_NAME) = UPPER(PJ.P4P_JOB_FUNCTION_DESC)) AND ((DATE('now'::"VARCHAR") >= PJ.P4P_JOB_LEARN_GRP_EFF_DT) AND (DATE('now'::"VARCHAR") <= PJ.P4P_JOB_LEARN_GRP_END_DT))))) JOIN ADMIN.P4P_LEARNING_GROUP PL ON (((PJ.P4P_LEARNING_GROUP_ID = PL.P4P_LEARNING_GROUP_ID) AND ((DATE('now'::"VARCHAR") >= PL.P4P_LEARN_GRP_EFF_DT) AND (DATE('now'::"VARCHAR") <= PL.P4P_LEARN_GRP_END_DT))))) LEFT JOIN (SELECT C.WHSE, DATE(C.CLOCK_IN_DATE) AS CLOCK_IN_DT, C.LOGIN_USER_ID, L.P4P_LEARNING_GROUP_ID, SUM((((((C.TOTAL_TIME - C.NSDL) - C.UDIL) - C.SIL) - C.PAID_BRK) - C.UNPAID_BRK)) AS SUM_CALC_OSDL FROM (ADMIN.E_CONSOL_PERF_SMRY C LEFT JOIN ADMIN.P4P_DC_EXCLUDE_DAY E ON (((DATE(C.CLOCK_IN_DATE) = E.DAY_DT) AND (INT4(C.WHSE) = E.STORE_NBR)))), ADMIN.P4P_JOB_FUNCTION J, ADMIN.P4P_LEARNING_GROUP L WHERE ((((((((C.DEL_FLG = '0'::NUMERIC) AND (C.CLOCK_IN_STATUS <> ('99'::NUMERIC(2,0))::NUMERIC(2,0))) AND (J.P4P_DIRECT_FL = 'D'::"VARCHAR")) AND (E.DAY_DT ISNULL)) AND (UPPER(C.JOB_FUNCTION_NAME) = UPPER(J.P4P_JOB_FUNCTION_DESC))) AND ((DATE('now'::"VARCHAR") >= J.P4P_JOB_LEARN_GRP_EFF_DT) AND (DATE('now'::"VARCHAR") <= J.P4P_JOB_LEARN_GRP_END_DT))) AND (J.P4P_LEARNING_GROUP_ID = L.P4P_LEARNING_GROUP_ID)) AND ((DATE('now'::"VARCHAR") >= L.P4P_LEARN_GRP_EFF_DT) AND (DATE('now'::"VARCHAR") <= L.P4P_LEARN_GRP_END_DT))) GROUP BY C.WHSE, DATE(C.CLOCK_IN_DATE), C.LOGIN_USER_ID, L.P4P_LEARNING_GROUP_ID) LB ON (((((EC.WHSE = LB.WHSE) AND (EC.LOGIN_USER_ID = LB.LOGIN_USER_ID)) AND (PL.P4P_LEARNING_GROUP_ID = LB.P4P_LEARNING_GROUP_ID)) AND ((LB.CLOCK_IN_DT >= (DATE(EC.CLOCK_IN_DATE) - PL.P4P_LOOK_BACK_TIMEFRAME)) AND (LB.CLOCK_IN_DT <= DATE(EC.CLOCK_IN_DATE)))))) WHERE (((((EE.WHSE = EC.WHSE) AND (EE.LOGIN_USER_ID = EC.LOGIN_USER_ID)) AND (EE.DEL_FLG = '0'::NUMERIC)) AND (EC.DEL_FLG = '0'::NUMERIC)) AND (EC.CLOCK_IN_STATUS <> ('99'::NUMERIC(2,0))::NUMERIC(2,0)))) TT;

\echo
\echo *****  Creating view:  "LOCATION_CLOSURE_LOAD_VIEW"

CREATE or replace VIEW  LOCATION_CLOSURE_LOAD_VIEW
(
     BUSINESS_AREA_ID,
     DAY_DT,
     LOCATION_ID,
     DW_STATUS_ID,
     ROW_CT,
     PROCESS_DESC
) AS
((((((((((SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR NEW YEARS DAY         '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE ((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND (("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR) OR ("LOCATION".STORE_NBR IN (1062, 797, 791, 789, 787, 781, 737, 776, 773, 771, 768, 774, 733, 739, 785, 788, 790, 792, 844)))) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 1)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) = 1))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR EASTER                 '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND (("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR) OR ("LOCATION".STORE_NBR IN (1050, 845, 723, 717, 694, 690, 688, 686, 638, 628, 604, 593, 590, 586, 584, 582, 575, 573, 570, 568, 566, 562, 558, 534, 531, 526, 523, 519, 479, 468, 466, 463, 461, 459, 271, 269, 267, 259, 257, 255, 253, 248, 246, 244, 241, 239, 237, 212, 197, 196, 186, 208, 213, 238, 240, 242, 245, 247, 250, 254, 256, 258, 260, 268, 270, 458, 460, 462, 465, 467, 471, 507, 521, 525, 529, 532, 557, 560, 564, 567, 569, 572, 574, 576, 583, 585, 589, 591, 601, 605, 634, 685, 687, 689, 691, 715, 718, 727, 1028)))) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DAYS.DAY_DT IN ('2001-04-15 00:00:00'::"TIMESTAMP", '2002-03-31 00:00:00'::"TIMESTAMP", '2003-04-20 00:00:00'::"TIMESTAMP", '2004-04-11 00:00:00'::"TIMESTAMP", '2005-03-27 00:00:00'::"TIMESTAMP", '2006-04-16 00:00:00'::"TIMESTAMP", '2007-04-08 00:00:00'::"TIMESTAMP", '2008-03-23 00:00:00'::"TIMESTAMP", '2009-04-12 00:00:00'::"TIMESTAMP", '2010-04-04 00:00:00'::"TIMESTAMP"))))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR THANKSGIVING DAY       '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".STORE_CTRY_ABBR = 'US'::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 11)) AND ((DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) >= 22) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) <= 28))) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 5)))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR CHRISTMAS DAY          '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 12)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) = 25)))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR FAMILY DAY             '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR)) AND ("LOCATION".STORE_STATE_ABBR IN ('AB '::BPCHAR, 'BC '::BPCHAR))) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 2)) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 2)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) >= 15)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) <= 21)))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR GOOD FRIDAY            '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE ((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR)) AND ("LOCATION".STORE_STATE_ABBR = 'ON'::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND ((DATE(DAYS.DAY_DT) + 2) IN ('2001-04-15'::DATE, '2002-03-31'::DATE, '2003-04-20'::DATE, '2004-04-11'::DATE, '2005-03-27'::DATE, '2006-04-16'::DATE, '2007-04-08'::DATE, '2008-03-23'::DATE, '2009-04-12'::DATE, '2010-04-04'::DATE))))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR VICTORIA DAY           '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR)) AND ("LOCATION".STORE_STATE_ABBR = 'ON'::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 5)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) > 17)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) < 25)) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 2)))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR CANADA DAY             '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE ((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR)) AND ("LOCATION".STORE_STATE_ABBR = 'ON'::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND ((((DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 7) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) = 3)) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 2)) OR ((DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 7) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) = 1) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) <> 1) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) <> 7)) OR ((DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 7) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) = 2) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 2)))))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR LABOR DAY              '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR)) AND ("LOCATION".STORE_STATE_ABBR = 'ON'::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 9)) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 2)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) >= 1)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) <= 7)))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED FOR CANADA THANKSGIVING DAY'::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".STORE_CTRY_ABBR = 'CA'::BPCHAR)) AND ("LOCATION".STORE_STATE_ABBR = 'ON'::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND (DATE_PART('MONTH'::"VARCHAR", DAYS.DAY_DT) = 10)) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 2)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) > 7)) AND (DATE_PART('DAY'::"VARCHAR", DAYS.DAY_DT) < 15)))) UNION (SELECT 2 AS BUSINESS_AREA_ID, DAYS.DAY_DT, "LOCATION".LOCATION_ID, 9 AS DW_STATUS_ID, 0 AS ROW_CT, ('STORE CLOSED ON SUNDAY                  '::"VARCHAR")::VARCHAR(40) AS PROCESS_DESC FROM ADMIN."LOCATION", ADMIN.DAYS WHERE (((((((("LOCATION".STORE_TYPE_ID = '120'::BPCHAR) AND ("LOCATION".DISTRICT_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_AD_ZONE_ID > ' '::BPCHAR)) AND ("LOCATION".PRICE_ZONE_ID > ' '::BPCHAR)) AND ((DAYS.DAY_DT >= "LOCATION".DATE_OPEN) AND (DAYS.DAY_DT <= "LOCATION".DATE_CLOSED))) AND ((DAYS.DAY_DT >= ("TIMESTAMP"('now'::"VARCHAR") - '7 days'::"INTERVAL")) AND (DAYS.DAY_DT <= ("TIMESTAMP"('now'::"VARCHAR") - '1 day'::"INTERVAL")))) AND ("LOCATION".STORE_NBR IN (765, 1538))) AND (INT4(TO_CHAR(DAYS.DAY_DT, 'D'::"VARCHAR")) = 1)));

\echo
\echo *****  Creating view:  "INV_INSTOCK_PRICE_DAY_SUBS_VW"

CREATE or replace VIEW  INV_INSTOCK_PRICE_DAY_SUBS_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     FROM_LOCATION_ID,
     SOURCE_VENDOR_ID,
     SKU_STATUS_ID,
     STORE_OPEN_IND,
     OUT_OF_STOCK_CNT,
     POG_LISTED_IND,
     SAP_LISTED_IND,
     INLINE_CNT,
     PLANNER_IND,
     SUBS_IND,
     MAP_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY,
     TTL_SUBS_ON_HAND_QTY,
     COMMITTED_QTY,
     XFER_IN_TRANS_QTY,
     ON_ORDER_QTY,
     SUM_COST_AMT,
     BUM_COST_AMT,
     ON_ORDER_CD,
     RETAIL_PRICE_AMT,
     SKU_FACINGS_QTY,
     SKU_CAPACITY_QTY,
     PETPERKS_AMT,
     PETPERKS_IND,
     LOCAL_PRICE_AMT,
     LOC_PETPERKS_PRICE_AMT
) AS
SELECT IIPD_ORIG.DAY_DT, IIPD_ORIG.PRODUCT_ID, IIPD_ORIG.LOCATION_ID, MAX(IIPD_ORIG.FROM_LOCATION_ID) AS FROM_LOCATION_ID, MAX(IIPD_ORIG.SOURCE_VENDOR_ID) AS SOURCE_VENDOR_ID, MAX(IIPD_ORIG.SKU_STATUS_ID) AS SKU_STATUS_ID, MAX(IIPD_ORIG.STORE_OPEN_IND) AS STORE_OPEN_IND, MAX(IIPD_ORIG.OUT_OF_STOCK_CNT) AS OUT_OF_STOCK_CNT, MAX(IIPD_ORIG.POG_LISTED_IND) AS POG_LISTED_IND, MAX(IIPD_ORIG.SAP_LISTED_IND) AS SAP_LISTED_IND, MAX(IIPD_ORIG.INLINE_CNT) AS INLINE_CNT, MAX(IIPD_ORIG.PLANNER_IND) AS PLANNER_IND, MAX(IIPD_ORIG.SUBS_IND) AS SUBS_IND, MAX(IIPD_ORIG.MAP_AMT) AS MAP_AMT, MAX(IIPD_ORIG.EXCH_RATE_PCT) AS EXCH_RATE_PCT, MAX(IIPD_ORIG.ON_HAND_QTY) AS ON_HAND_QTY, SUM(CASE WHEN (IIPD_SUB.ON_HAND_QTY NOTNULL) THEN IIPD_SUB.ON_HAND_QTY WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) AS TTL_SUBS_ON_HAND_QTY, MAX(IIPD_ORIG.COMMITTED_QTY) AS COMMITTED_QTY, MAX(IIPD_ORIG.XFER_IN_TRANS_QTY) AS XFER_IN_TRANS_QTY, MAX(IIPD_ORIG.ON_ORDER_QTY) AS ON_ORDER_QTY, MAX(IIPD_ORIG.SUM_COST_AMT) AS SUM_COST_AMT, MAX(IIPD_ORIG.BUM_COST_AMT) AS BUM_COST_AMT, MAX(IIPD_ORIG.ON_ORDER_CD) AS ON_ORDER_CD, MAX(IIPD_ORIG.RETAIL_PRICE_AMT) AS RETAIL_PRICE_AMT, MAX(IIPD_ORIG.SKU_FACINGS_QTY) AS SKU_FACINGS_QTY, MAX(IIPD_ORIG.SKU_CAPACITY_QTY) AS SKU_CAPACITY_QTY, MAX(IIPD_ORIG.PETPERKS_AMT) AS PETPERKS_AMT, MAX(IIPD_ORIG.PETPERKS_IND) AS PETPERKS_IND, MAX(IIPD_ORIG.LOCAL_PRICE_AMT) AS LOCAL_PRICE_AMT, MAX(IIPD_ORIG.LOC_PETPERKS_PRICE_AMT) AS LOC_PETPERKS_PRICE_AMT FROM ((ADMIN.INV_INSTOCK_PRICE_DAY IIPD_ORIG LEFT JOIN ADMIN.SKU_SUBS_VIEW SSV ON ((IIPD_ORIG.PRODUCT_ID = SSV.PRODUCT_ID))) LEFT JOIN ADMIN.INV_INSTOCK_PRICE_DAY IIPD_SUB ON ((((SSV.SUBS_PRODUCT_ID = IIPD_SUB.PRODUCT_ID) AND (IIPD_ORIG.DAY_DT = IIPD_SUB.DAY_DT)) AND (IIPD_ORIG.LOCATION_ID = IIPD_SUB.LOCATION_ID)))) GROUP BY IIPD_ORIG.DAY_DT, IIPD_ORIG.PRODUCT_ID, IIPD_ORIG.LOCATION_ID;

\echo
\echo *****  Creating view:  "EM_EVENT_SKU_OVERLAP_AUDIT_VW"

CREATE or replace VIEW  EM_EVENT_SKU_OVERLAP_AUDIT_VW
(
     EM_EVENT_ID_1,
     EVENT_NAME_1,
     EVENT_START_DT_1,
     EVENT_END_DT_1,
     EM_EVENT_ID_2,
     EVENT_NAME_2,
     EVENT_START_DT_2,
     EVENT_END_DT_2,
     COUNTRY_CD,
     PRODUCT_ID,
     SKU_NBR,
     DAYS_OF_OVERLAP
) AS
SELECT PRE1.EM_EVENT_ID AS EM_EVENT_ID_1, PRE1.EVENT_NAME AS EVENT_NAME_1, PRE1.EVENT_START_DT AS EVENT_START_DT_1, PRE1.EVENT_END_DT AS EVENT_END_DT_1, PRE2.EM_EVENT_ID AS EM_EVENT_ID_2, PRE2.EVENT_NAME AS EVENT_NAME_2, PRE2.EVENT_START_DT AS EVENT_START_DT_2, PRE2.EVENT_END_DT AS EVENT_END_DT_2, PRE1.COUNTRY_CD, PRE1.PRODUCT_ID, PRE1.SKU_NBR, SUM(1) AS DAYS_OF_OVERLAP FROM ((SELECT EE.EM_EVENT_ID, EES.PRODUCT_ID, EES.COUNTRY_CD, D.DAY_DT, EES.SKU_NBR, EE.EVENT_NAME, EE.EVENT_START_DT, EE.EVENT_END_DT FROM ((ADMIN.EM_EVENT_SKU EES JOIN ADMIN.EM_EVENT EE ON ((EES.EM_EVENT_ID = EE.EM_EVENT_ID))) JOIN ADMIN.DAYS D ON (((D.DAY_DT >= EE.EVENT_START_DT) AND (D.DAY_DT <= EE.EVENT_END_DT)))) WHERE (((INT4((EES.PROMO_FLAG)::"VARCHAR") = 1) AND (EE.EVENT_START_DT > "TIMESTAMP"(DATE('now'::"VARCHAR")))) AND (EE.EM_EVENT_ID = ANY ((SELECT DISTINCT PE_PROMO_EVENT.EM_EVENT_ID FROM ADMIN.PE_PROMO_EVENT) UNION (SELECT 189))))) PRE1 JOIN (SELECT EE.EM_EVENT_ID, EES.PRODUCT_ID, EES.COUNTRY_CD, D.DAY_DT, EE.EVENT_NAME, EE.EVENT_START_DT, EE.EVENT_END_DT FROM ((ADMIN.EM_EVENT_SKU EES JOIN ADMIN.EM_EVENT EE ON ((EES.EM_EVENT_ID = EE.EM_EVENT_ID))) JOIN ADMIN.DAYS D ON (((D.DAY_DT >= EE.EVENT_START_DT) AND (D.DAY_DT <= EE.EVENT_END_DT)))) WHERE (((INT4((EES.PROMO_FLAG)::"VARCHAR") = 1) AND (EE.EVENT_START_DT > "TIMESTAMP"(DATE('now'::"VARCHAR")))) AND (EE.EM_EVENT_ID = ANY ((SELECT DISTINCT PE_PROMO_EVENT.EM_EVENT_ID FROM ADMIN.PE_PROMO_EVENT) UNION (SELECT 189))))) PRE2 ON (((((PRE1.PRODUCT_ID = PRE2.PRODUCT_ID) AND (PRE1.COUNTRY_CD = PRE2.COUNTRY_CD)) AND (PRE1.DAY_DT = PRE2.DAY_DT)) AND (PRE1.EM_EVENT_ID < PRE2.EM_EVENT_ID)))) GROUP BY PRE1.EM_EVENT_ID, PRE1.EVENT_NAME, PRE1.EVENT_START_DT, PRE1.EVENT_END_DT, PRE2.EM_EVENT_ID, PRE2.EVENT_NAME, PRE2.EVENT_START_DT, PRE2.EVENT_END_DT, PRE1.COUNTRY_CD, PRE1.PRODUCT_ID, PRE1.SKU_NBR;

\echo
\echo *****  Creating view:  "PE_EVENT_INV_INSTOCK_PRICE_WK_VW"

CREATE or replace VIEW  PE_EVENT_INV_INSTOCK_PRICE_WK_VW
(
     PE_PROMO_ID,
     EM_EVENT_ID,
     WEEK_DT,
     PRODUCT_ID,
     CURRENCY_TYPE_ID,
     LOCATION_ID,
     PE_PROMO_NAME,
     CURR_PROMO_IND,
     EM_DISP_LOC_ID,
     EM_DISP_LOC_NAME,
     EM_DISP_LOC_STR_CNT,
     EM_DISP_LOC_RANK_OTB,
     VERSION,
     RANK_NBR,
     RANK_PRIORITY,
     DISP_LOC_CNT,
     EM_DISCOUNT_TYPE_ID,
     EM_DISCOUNT_TYPE_DESC,
     POG_LISTED_IND,
     ON_HAND_QTY,
     ON_ORDER_QTY,
     XFER_IN_TRANS_QTY,
     MAP_AMT,
     EXCH_RATE_PCT
) AS
SELECT PP.PE_PROMO_ID, PSSR.EM_EVENT_ID, IIPW.WEEK_DT, IIPW.PRODUCT_ID, CTL.CURRENCY_TYPE_ID, IIPW.LOCATION_ID, PP.PE_PROMO_NAME, PP.CURR_PROMO_IND, PSSR.EM_DISP_LOC_ID, EDL.EM_DISP_LOC_NAME, EESR.EM_DISP_LOC_STR_CNT, EESR.EM_DISP_LOC_RANK_OTB, EDL."VERSION", PDLR.RANK_NBR, PSSR.RANK_PRIORITY, PSSR.DISP_LOC_CNT, EDT.EM_DISCOUNT_TYPE_ID, EDT.EM_DISCOUNT_TYPE_DESC, IIPW.POG_LISTED_IND, IIPW.ON_HAND_QTY, IIPW.ON_ORDER_QTY, IIPW.XFER_IN_TRANS_QTY, IIPW.MAP_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE IIPW.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM ADMIN.PE_SKU_STORE_RANK PSSR, ADMIN.PE_PROMO_EVENT PPE, ADMIN.EM_DISP_LOC EDL, ADMIN.EM_DISCOUNT_TYPE EDT, ADMIN.EM_EVENT_SKU_RPT EESR, ADMIN.EM_EVENT EE, ADMIN.PE_PROMO PP, ADMIN.PE_DISP_LOC_RANK PDLR, ADMIN.SITE_PROFILE_RPT SPR, (ADMIN.INV_INSTOCK_PRICE_WK IIPW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) WHERE (((((((((((((((PSSR.RANK_PRIORITY = 1) AND (PSSR.EM_EVENT_ID = PPE.EM_EVENT_ID)) AND (PSSR.EM_DISP_LOC_ID = EDL.EM_DISP_LOC_ID)) AND (PSSR.EM_DISCOUNT_TYPE_ID = EDT.EM_DISCOUNT_TYPE_ID)) AND (PSSR.EM_EVENT_ID = EESR.EM_EVENT_ID)) AND (PSSR.PRODUCT_ID = EESR.PRODUCT_ID)) AND (PPE.PE_EM_EVENT_ID = EE.EM_EVENT_ID)) AND (PPE.PE_PROMO_ID = PP.PE_PROMO_ID)) AND (EDL.EM_DISP_LOC_NAME = PDLR.EM_DISP_LOC_NAME)) AND (PSSR.LOCATION_ID = SPR.LOCATION_ID)) AND (SPR.COUNTRY_CD = EESR.COUNTRY_CD)) AND (IIPW.PRODUCT_ID = PSSR.PRODUCT_ID)) AND (IIPW.LOCATION_ID = PSSR.LOCATION_ID)) AND (IIPW.WEEK_DT >= EE.EVENT_START_DT)) AND (IIPW.WEEK_DT <= EE.EVENT_END_DT));

\echo
\echo *****  Creating view:  "PE_EVENT_WK_PLAN_OTB_VW"

CREATE or replace VIEW  PE_EVENT_WK_PLAN_OTB_VW
(
     PE_PROMO_ID,
     EM_EVENT_ID,
     WEEK_DT,
     PRODUCT_ID,
     LOCATION_TYPE_ID,
     COUNTRY_CD,
     EPLAN_SALES_QTY,
     EPLAN_SELL_THRU_PCT,
     EPLAN_TOTAL_BUY_QTY,
     EM_DISP_LOC_STR_CNT,
     EM_DISP_LOC_RANK_OTB,
     OTB_FINAL_CURR_PROMO_IND,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT EPO.PE_PROMO_ID, EPO.EM_EVENT_ID, EPO.WEEK_DT, EPO.PRODUCT_ID, EPO.LOCATION_TYPE_ID, EPO.COUNTRY_CD, EPO.EPLAN_SALES_QTY, EPO.EPLAN_SELL_THRU_PCT, EPO.EPLAN_TOTAL_BUY_QTY, EPO.EM_DISP_LOC_STR_CNT, EPO.EM_DISP_LOC_RANK_OTB, CASE WHEN (PPF.CURR_PROMO_IND NOTNULL) THEN INT4(PPF.CURR_PROMO_IND) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS OTB_FINAL_CURR_PROMO_IND, EPO.UPDATE_DT, EPO.LOAD_DT FROM ((ADMIN.PE_EVENT_WK_PLAN_OTB EPO LEFT JOIN ADMIN.PE_PROMO_SKU_OTB PPSO ON ((((EPO.PE_PROMO_ID = PPSO.PE_PROMO_ID) AND (EPO.PRODUCT_ID = PPSO.PRODUCT_ID)) AND (EPO.COUNTRY_CD = PPSO.COUNTRY_CD)))) LEFT JOIN ADMIN.PE_PROMO PPF ON ((PPSO.FINAL_PE_PROMO_ID = PPF.PE_PROMO_ID)));

\echo
\echo *****  Creating view:  "CASE_PROJECT_VW"

CREATE or replace VIEW  CASE_PROJECT_VW
(
     CASE_INITIATIVE_CD,
     LOCATION_ID,
     STORE_NBR,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     ORIG_WEEK_DT,
     ORIG_FISCAL_WK,
     ORIG_FISCAL_MO,
     ORIG_FISCAL_YR,
     CASE_PROJECT_TYPE_CD,
     CASE_PROJECT_TYPE_DESC,
     CASE_PROJECT_TITLE,
     CASE_PRIORITY_ID,
     CASE_PRIORITY_DESC,
     CASE_CREATOR_NAME,
     CASE_APPROVER1_NAME,
     CASE_APPROVER2_NAME,
     CASE_DEPT_CD,
     CASE_DEPT_DESC,
     CASE_ROLE_CD,
     CASE_ROLE_DESC,
     CASE_ASSIGN_USER_ID,
     CASE_ASSIGN_USER_NAME,
     CASE_PROJ_EST_START_TSTMP,
     ORIG_CASE_PROJ_EST_FINISH_TSTMP,
     CASE_PROJ_EST_FINISH_TSTMP,
     CASE_PROJECT_EXP_HOURS,
     CASE_WORK_STATUS_CD,
     CASE_WORK_STATUS_DESC,
     CASE_PROJECT_ACT_HOURS,
     CASE_TASK_TOTAL,
     CASE_TASK_CTOTAL,
     CASE_TASK_FTOTAL,
     CASE_PROJ_COMPLETE_TSTMP,
     UPDATED_BY_ID,
     UPDATED_BY_NAME,
     REQUESTOR_ORG_LVL,
     REQUESTOR_UNIT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT CP.CASE_INITIATIVE_CD, CP.LOCATION_ID, CP.STORE_NBR, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, CP.WEEK_DT AS ORIG_WEEK_DT, CP.FISCAL_WK AS ORIG_FISCAL_WK, CP.FISCAL_MO AS ORIG_FISCAL_MO, CP.FISCAL_YR AS ORIG_FISCAL_YR, CP.CASE_PROJECT_TYPE_CD, CP.CASE_PROJECT_TYPE_DESC, CP.CASE_PROJECT_TITLE, CP.CASE_PRIORITY_ID, CP.CASE_PRIORITY_DESC, CP.CASE_CREATOR_NAME, CP.CASE_APPROVER1_NAME, CP.CASE_APPROVER2_NAME, CP.CASE_DEPT_CD, CP.CASE_DEPT_DESC, CP.CASE_ROLE_CD, CP.CASE_ROLE_DESC, CP.CASE_ASSIGN_USER_ID, CP.CASE_ASSIGN_USER_NAME, CP.CASE_PROJ_EST_START_TSTMP, CP.CASE_PROJ_EST_FINISH_TSTMP AS ORIG_CASE_PROJ_EST_FINISH_TSTMP, ACT_FNSH_TIME.FNL_CASE_PROJ_EST_FINISH_TSTMP AS CASE_PROJ_EST_FINISH_TSTMP, CP.CASE_PROJECT_EXP_HOURS, CP.CASE_WORK_STATUS_CD, CP.CASE_WORK_STATUS_DESC, CP.CASE_PROJECT_ACT_HOURS, CP.CASE_TASK_TOTAL, CP.CASE_TASK_CTOTAL, CP.CASE_TASK_FTOTAL, CP.CASE_PROJ_COMPLETE_TSTMP, CP.UPDATED_BY_ID, CP.UPDATED_BY_NAME, CP.REQUESTOR_ORG_LVL, CP.REQUESTOR_UNIT, CP.UPDATE_TSTMP, CP.LOAD_TSTMP FROM ((ADMIN.CASE_PROJECT CP JOIN (SELECT PRJ.CASE_INITIATIVE_CD, CASE WHEN (MAX(PRJ.CASE_PROJ_EST_FINISH_TSTMP) NOTNULL) THEN MAX(PRJ.CASE_PROJ_EST_FINISH_TSTMP) WHEN (DATE('now'::"VARCHAR") NOTNULL) THEN "TIMESTAMP"(DATE('now'::"VARCHAR")) ELSE NULL::"TIMESTAMP" END AS FNL_CASE_PROJ_EST_FINISH_TSTMP FROM ADMIN.CASE_PROJECT PRJ GROUP BY PRJ.CASE_INITIATIVE_CD) ACT_FNSH_TIME ON ((CP.CASE_INITIATIVE_CD = ACT_FNSH_TIME.CASE_INITIATIVE_CD))) JOIN ADMIN.DAYS D ON (("TIMESTAMP"(DATE(ACT_FNSH_TIME.FNL_CASE_PROJ_EST_FINISH_TSTMP)) = D.DAY_DT)));

\echo
\echo *****  Creating view:  "DC_DIRECTORY_VW"

CREATE or replace VIEW  DC_DIRECTORY_VW
(
     DIST_MGR_NAME,
     DC_GENERAL_MANAGER_NAME,
     DC_GM_EMAIL,
     STORE_NBR,
     STORE_NAME,
     OPEN_DT,
     SITE_ADDRESS,
     SITE_CITY,
     STATE_CD,
     POSTAL_CD,
     GEO_LATITUDE_NBR,
     GEO_LONGITUDE_NBR,
     DISTRICT_ID,
     DISTRICT_DESC,
     STORE_PHONE,
     POSITION_SORT,
     PS_POSITION_DESC,
     EMPLOYEE_ID,
     EMPLOYEE,
     SUPERVISOR_ID,
     SUPERVISOR_NAME,
     SUPERVISOR_PHONE,
     SUPERVISOR_EMAIL,
     DEPT_SECTION_ID,
     DEPT_SECTION,
     DEPT_SORT,
     DEPT_DESC,
     FULLPT_FLAG,
     EMPL_SENORITY_DT,
     EMPL_BIRTH_DT,
     YOS,
     NEW_HIRE_FLAG,
     BIRTH_MONTH,
     HIRE_MONTH,
     SCHEDULED,
     START_TIME,
     END_TIME,
     SHIFT,
     DEPT_SECTION_ABBR,
     PS_POSITION_ABBR
) AS
SELECT DCD.DIST_MGR_NAME, DCD.DC_GENERAL_MANAGER_NAME, DCD.DC_GM_EMAIL, DCD.STORE_NBR, DCD.STORE_NAME, DCD.OPEN_DT, DCD.SITE_ADDRESS, DCD.SITE_CITY, DCD.STATE_CD, DCD.POSTAL_CD, DCD.GEO_LATITUDE_NBR, DCD.GEO_LONGITUDE_NBR, DCD.DISTRICT_ID, DCD.DISTRICT_DESC, DCD.STORE_PHONE, DCD.POSITION_SORT, DCD.PS_POSITION_DESC, DCD.EMPLOYEE_ID, DCD.EMPLOYEE, DCD.SUPERVISOR_ID, DCD.SUPERVISOR_NAME, DCD.SUPERVISOR_PHONE, DCD.SUPERVISOR_EMAIL, DCD.DEPT_SECTION_ID, DCD.DEPT_SECTION, DCD.DEPT_SORT, DCD.DEPT_DESC, DCD.FULLPT_FLAG, DCD.EMPL_SENORITY_DT, DCD.EMPL_BIRTH_DT, DCD.YOS, DCD.NEW_HIRE_FLAG, DCD.BIRTH_MONTH, DCD.HIRE_MONTH, DCD.SCHEDULED, DCD.START_TIME, DCD.END_TIME, CASE WHEN (DCD.DEPT_DESC /=/ 'Administrative Assist DC Services st Sh'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Administrative Assist HR Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Administrative Assist Services-PA'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Assist General Mgr  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Fish Associate'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Fish Health Mgr'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Management'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Rack Associate'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Receiving Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Replen Mgr'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Replenishment Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'DC Shipping Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Fish Health'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Fish Mgr'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Fish st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Lab Technician  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Lab Technician DC Fish Lab Tech'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Lab Technician Fish Health Mgr'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Supv  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fish Supv Days  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Fork/Reach Replen st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'General Mgr  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Coord DC HR Coord'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Coord DC HR st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Coord HR Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Coord Human Resources'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Mgr  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Supv  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Supv Days  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Supv HR Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Supv Human Resources'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'HR Supv st Shft Wday  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'LM Clerk Service Supv st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Loader Shpng st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Maint Facilities Mgr'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Maint Maintenance'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Maint Maintenance Mgr'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Maintenance Supervisor-st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Mnt Supv  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Module Fish Health'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Module Fish st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Module Fish Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Orderfil Supv-st Shift - TM'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Orderfill Supervisor - st Shift - Team'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Orderfill Supv st Shift'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Clerk Fish st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Mgr st Shft Wday  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv Ordfi st Shft Rack'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv Ordfi Supv  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv st Shft Wday  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Ordfill st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Perf Analyst Days  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Perf Analyst Services PA'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Putaway Recev st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Putaway/Recev/Unldg IDC'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Rack Ordfi st Shft Mods'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Rack Ordfi Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Rack Recev Supv st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Rack/Module st Shft TM'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Recev Clerk Recev Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Recev Spcl Supv IDC'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Recev Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Recev Supv st Shft  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Recev Supv st Shft Wday  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Replen st Shift'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Replen Supv'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Replen Supv st Shft Wday  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Services DC Services st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Services Mgr  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Services Shpng/DCS Supv n'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Services Spcl DC Services st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Services Supv rd Shift'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Services Supv st Shft  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Services Supv st Shft Wday  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Shipping rd Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Shpng Supv st Shft  x'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Recev st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Recev Supv st'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Recev-st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Shpng Supv st Shft'::"VARCHAR") THEN 1 WHEN (DCD.DEPT_DESC /=/ 'Carousel DC Services nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Fork/Reach Replen Supv nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Loader Ordfi nd Shft Shpng'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Loader Replen-nd'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Orderfill nd Shift'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Mgr nd Shft  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv nd Shft TM'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv nd Shft Wday'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv nd Shft Wday  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv Ordfi nd Shft Rack'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv Ordfi Supv nd'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Putaway Recev nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Rack Ordfi nd Shft Mods'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Rack Replen Supv nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Receiving nd Shft Wday  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Recev Clerk Recev-nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Recev Inbound nd Shift'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Recev Mgr nd Shft  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Recev Supv nd Shft Wday  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Replen Spcl Supv nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Replen Supv nd Shft  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Replen Supv nd Shft Wday  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Service Supv-nd Shift'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Services DC Services nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Services DCS/Replen Supv nd Shft'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Services Spcl Shpng/DCS Supv nd'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Services Supv nd Shft Wday  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Shpng Supv nd Shft  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Shpng Supv nd Shft Wday  x'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Ordfi nd Shft Shipp'::"VARCHAR") THEN 2 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Recev Supv nd'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Cherry Pick Replen WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Cherry Pick/Stocking/Fork WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'DC Receiving WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Fork/Reach Ordfi WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Fork/Reach Replen WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Loader WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Maint Spcl WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Mnt Supv WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Mnt Supv WE Shft  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Orderfill Supv Weekend  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Orderfill WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Orderfill WE Shft Rack'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv Ordfi Supv WE-TM'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv Ordfi WE Rack'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Ordfi Supv WE Shft  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Putaway Recev WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Rack Ordfi Supv WE-TM'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Rack/Module WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Recev Clerk Recev WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Recev Supv WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Recev Supv Weekend  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Replen Clerk Replen WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Replen Supv WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Replen Supv WE Shft  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Services DC Services WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Services Ordfi WE Shpng'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Services Supv WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Services Supv Weekend  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Services WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Shipping Supv Weekend'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Shipping Supv Weekend  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Shpng Clerk Shpng Supv WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Shpng Clerk Shpng WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Shpng Supv WE  x'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Stkng Replen WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Unldng Recev Supv WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Unldng Recev WE'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Unldng WE Shft'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Ordfi WE Shpng'::"VARCHAR") THEN 3 WHEN (DCD.DEPT_DESC /=/ 'Yard Driver Recev Supv WE'::"VARCHAR") THEN 3 ELSE 4 END AS SHIFT, CASE WHEN (DCD.DEPT_SECTION /=/ 'DC Management'::"VARCHAR") THEN 'MGMT'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Fish'::"VARCHAR") THEN 'FISH'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'HR'::"VARCHAR") THEN 'HR'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Maintenance'::"VARCHAR") THEN 'MAIN'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Order Fill'::"VARCHAR") THEN 'ORD'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Other'::"VARCHAR") THEN 'OTH'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Rack & Mod'::"VARCHAR") THEN 'RACK'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Receiving'::"VARCHAR") THEN 'REC'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Replenishment'::"VARCHAR") THEN 'REPL'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Services'::"VARCHAR") THEN 'DCS'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Shipping'::"VARCHAR") THEN 'SHIP'::"VARCHAR" WHEN (DCD.DEPT_SECTION /=/ 'Yard Management'::"VARCHAR") THEN 'YARD'::"VARCHAR" ELSE 'NA'::"VARCHAR" END AS DEPT_SECTION_ABBR, CASE WHEN (DCD.PS_POSITION_DESC /=/ 'DC Area Dir/General Mgr'::"VARCHAR") THEN 'MGMT_AD'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Assistant General Manager'::"VARCHAR") THEN 'MGMT_AGM'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Carousel Associate'::"VARCHAR") THEN 'ORD_CARO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Cherry Pick Associate'::"VARCHAR") THEN 'REPL_CPA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Fish Associate'::"VARCHAR") THEN 'FISH_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Fish Health Manager'::"VARCHAR") THEN 'FISH_HMR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Fish Lab Technician'::"VARCHAR") THEN 'FISH_LAB'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Fish Manager'::"VARCHAR") THEN 'FISH_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Fish Supervisor'::"VARCHAR") THEN 'FISH_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Fork/Reach Associate'::"VARCHAR") THEN 'REPL_FRA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC General Manager'::"VARCHAR") THEN 'MGMT_GM'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC HR Coordinator'::"VARCHAR") THEN 'MGMT_HRC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC HR Mgr'::"VARCHAR") THEN 'MGMT_HRM'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC HR Supervisor'::"VARCHAR") THEN 'MGMT_HRS'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Leader in Training (MGR)'::"VARCHAR") THEN 'MGMT_LIT'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC LM Clerk'::"VARCHAR") THEN 'LM_CLRK'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Loader Associate'::"VARCHAR") THEN 'SHP_LOAD'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Maintenance Associate'::"VARCHAR") THEN 'MAIN_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Maintenance Manager'::"VARCHAR") THEN 'MAIN_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Mnt Supervisor'::"VARCHAR") THEN 'MAIN_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Module Associate'::"VARCHAR") THEN 'ORD_MOD'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Orderfill Manager'::"VARCHAR") THEN 'ORD_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Orderfill Supervisor'::"VARCHAR") THEN 'ORD_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Performance Analyst'::"VARCHAR") THEN 'MGMT_PA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Putaway Associate'::"VARCHAR") THEN 'REC_PASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Rack  Associate'::"VARCHAR") THEN 'ORD_RASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Rack Associate'::"VARCHAR") THEN 'ORD_RASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Receiving Clerk'::"VARCHAR") THEN 'REC_CLK'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Receiving Manager'::"VARCHAR") THEN 'REC_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Receiving Supervisor'::"VARCHAR") THEN 'REC_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Services Associate'::"VARCHAR") THEN 'DCS_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Services Manager'::"VARCHAR") THEN 'DCS_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Services Supervisor'::"VARCHAR") THEN 'DCS_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Consolidator Associate'::"VARCHAR") THEN 'REC_CONA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Shipping Specialist'::"VARCHAR") THEN 'SHP_SPEC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Consolidator Associate'::"VARCHAR") THEN 'REC_CONA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Unloading Assoc'::"VARCHAR") THEN 'REC_UASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Replenishment Supervisor'::"VARCHAR") THEN 'REPL_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Seasonal Replenishment Assoc'::"VARCHAR") THEN 'REPL_SEA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Service Specialist'::"VARCHAR") THEN 'DCS_SPC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Service Associate'::"VARCHAR") THEN 'DCS_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Replenishment Seasonal Assoc'::"VARCHAR") THEN 'REPL_SEA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Replenishment Specialist'::"VARCHAR") THEN 'REPL_SPC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Loader'::"VARCHAR") THEN 'SHP_LOAD'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Receiving Specialist'::"VARCHAR") THEN 'REC_SPC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Replenishment Associate'::"VARCHAR") THEN 'REPL_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Fork/ Reach Associate'::"VARCHAR") THEN 'REPL_FRA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Unloading Associate'::"VARCHAR") THEN 'REC_UASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Hourly Trainer'::"VARCHAR") THEN 'TRAN_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Receiving Seasonal Assoc'::"VARCHAR") THEN 'REC_SEA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Seasonal Orderfill Associate'::"VARCHAR") THEN 'ORD_SEA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Seasonal Shipping Associate'::"VARCHAR") THEN 'SHP_SEA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Orderfill Clerk'::"VARCHAR") THEN 'ORD_CLK'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC General Mgr'::"VARCHAR") THEN 'MGMT_GM'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Replenishment Manager'::"VARCHAR") THEN 'REPL_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Maintenance Specialist'::"VARCHAR") THEN 'MAIN_SPC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Administrative Assistant'::"VARCHAR") THEN 'MGMT_AST'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Seasonal Orderfill Associate'::"VARCHAR") THEN 'ORD_SEA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'FDC Orderfill Supervisor'::"VARCHAR") THEN 'ORD_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Orderfill Specialist'::"VARCHAR") THEN 'ORD_SPC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Seasonal Orderfill Associate'::"VARCHAR") THEN 'ORD_SEA'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Assistant General Manager - Inbound'::"VARCHAR") THEN 'MGMT_AGM'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Services Specialist'::"VARCHAR") THEN 'DCS_SPC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'FDC Inbound Manager'::"VARCHAR") THEN 'REC_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Outbound Manager'::"VARCHAR") THEN 'SHIP_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Shipping Manager'::"VARCHAR") THEN 'SHP_MGR'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Receiving Associate'::"VARCHAR") THEN 'REC_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Shipping Clerk'::"VARCHAR") THEN 'SHIP_CLK'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Shipping Supervisor'::"VARCHAR") THEN 'SHIP_SUP'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Stocking Associate'::"VARCHAR") THEN 'REPL_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Unloading Associate'::"VARCHAR") THEN 'REC_UASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Wave Specialist'::"VARCHAR") THEN 'WAVE_SPC'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'DC Yard Driver Associate'::"VARCHAR") THEN 'YARD_ASO'::"VARCHAR" WHEN (DCD.PS_POSITION_DESC /=/ 'Order Fill Seasonal Assoc'::"VARCHAR") THEN 'ORD_SEAS'::"VARCHAR" ELSE 'NA'::"VARCHAR" END AS PS_POSITION_ABBR FROM (SELECT S.DIST_MGR_NAME, S.DC_GENERAL_MANAGER_NAME, S.DC_GENERAL_MANAGER_EMAIL AS DC_GM_EMAIL, S.STORE_NBR, S.STORE_NAME, S.OPEN_DT, INITCAP(S.SITE_ADDRESS) AS SITE_ADDRESS, INITCAP(S.SITE_CITY) AS SITE_CITY, S.STATE_CD, S.POSTAL_CD, S.GEO_LATITUDE_NBR, S.GEO_LONGITUDE_NBR, S.DISTRICT_ID, S.DISTRICT_DESC, ((((('('::"VARCHAR" || SUBSTR(S.SITE_MAIN_TELE_NO, 1, 3)) || ') '::"VARCHAR") || "SUBSTRING"(S.SITE_MAIN_TELE_NO, 4, 3)) || '-'::"VARCHAR") || SUBSTR(S.SITE_MAIN_TELE_NO, ((LENGTH(S.SITE_MAIN_TELE_NO) - 4) + 1))) AS STORE_PHONE, CASE WHEN (E.PS_POSITION_DESC /=/ 'Store Manager'::"VARCHAR") THEN 1 WHEN (E.PS_POSITION_DESC /=/ 'Co Store Manager'::"VARCHAR") THEN 2 WHEN (E.PS_POSITION_DESC /=/ 'Operations Manager'::"VARCHAR") THEN 3 WHEN (E.PS_POSITION_DESC /=/ 'PetsHotel Manager'::"VARCHAR") THEN 4 WHEN (E.PS_POSITION_DESC /=/ 'PetsHotel Assistant Manager'::"VARCHAR") THEN 5 WHEN (E.PS_POSITION_DESC /=/ 'Pet Care Manager'::"VARCHAR") THEN 6 WHEN (E.PS_POSITION_DESC /=/ 'Presentation Manager'::"VARCHAR") THEN 7 WHEN (E.PS_POSITION_DESC /=/ 'Pet Products Manager'::"VARCHAR") THEN 8 WHEN (E.PS_POSITION_DESC /=/ 'Pet Salon Manager'::"VARCHAR") THEN 9 WHEN (E.PS_POSITION_DESC /=/ 'Salon Manager'::"VARCHAR") THEN 9 ELSE 10 END AS POSITION_SORT, E.PS_POSITION_DESC, E.EMPLOYEE_ID, BTRIM(((BTRIM(CASE WHEN (E.EMPL_FIRST_NAME NOTNULL) THEN E.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (E.EMPL_LAST_NAME NOTNULL) THEN E.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END))) AS EMPLOYEE, SV.SUPERVISOR_ID, SV.SUPERVISOR_NAME, SV.SUPERVISOR_PHONE, SV.SUPERVISOR_EMAIL, CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN '1'::"VARCHAR" WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Mgr%'::"VARCHAR", '\'::"VARCHAR")) THEN '1'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Yard%'::"VARCHAR", '\'::"VARCHAR")) THEN '10'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Ordfi%'::"VARCHAR", '\'::"VARCHAR")) THEN '5'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Orderfi%'::"VARCHAR", '\'::"VARCHAR")) THEN '5'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Fish%'::"VARCHAR", '\'::"VARCHAR")) THEN '11'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Repl%'::"VARCHAR", '\'::"VARCHAR")) THEN '2'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Rec%'::"VARCHAR", '\'::"VARCHAR")) THEN '3'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Shpng%'::"VARCHAR", '\'::"VARCHAR")) THEN '4'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Ship%'::"VARCHAR", '\'::"VARCHAR")) THEN '4'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%HR%'::"VARCHAR", '\'::"VARCHAR")) THEN '6'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Mnt%'::"VARCHAR", '\'::"VARCHAR")) THEN '8'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Maint%'::"VARCHAR", '\'::"VARCHAR")) THEN '8'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Serv%'::"VARCHAR", '\'::"VARCHAR")) THEN '7'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Rack%'::"VARCHAR", '\'::"VARCHAR")) THEN '9'::"VARCHAR" ELSE '12'::"VARCHAR" END AS DEPT_SECTION_ID, CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'DC Management'::"VARCHAR" WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Mgr%'::"VARCHAR", '\'::"VARCHAR")) THEN 'DC Management'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Yard%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Yard Management'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Ordfi%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Order Fill'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Orderfi%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Order Fill'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Fish%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Fish'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Repl%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Replenishment'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Rec%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Receiving'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Shpng%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Shipping'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Ship%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Shipping'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%HR%'::"VARCHAR", '\'::"VARCHAR")) THEN 'HR'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Mnt%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Maintenance'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Maint%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Maintenance'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Serv%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Services'::"VARCHAR" WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) ~~ LIKE_ESCAPE('%Rack%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Rack & Mod'::"VARCHAR" ELSE 'Other'::"VARCHAR" END AS DEPT_SECTION, CASE WHEN ((E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) OR (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Mgr%'::"VARCHAR", '\'::"VARCHAR"))) THEN 1 ELSE CASE WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Management'::"VARCHAR") THEN 1 ELSE 2 END END AS DEPT_SORT, CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'DC Management'::"VARCHAR" WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Mgr%'::"VARCHAR", '\'::"VARCHAR")) THEN 'DC Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END AS DEPT_DESC, E.FULLPT_FLAG, E.EMPL_SENORITY_DT, E.EMPL_BIRTH_DT, CASE WHEN (AGE(DATE_TRUNC('MONTH'::"VARCHAR", "TIMESTAMP"(DATE('now'::"VARCHAR"))), DATE_TRUNC('MONTH'::"VARCHAR", E.EMPL_SENORITY_DT)) = '00:00:00'::"INTERVAL") THEN 'New'::"VARCHAR" ELSE TRANSLATE("VARCHAR"(AGE(DATE_TRUNC('MONTH'::"VARCHAR", "TIMESTAMP"(DATE('now'::"VARCHAR"))), DATE_TRUNC('MONTH'::"VARCHAR", E.EMPL_SENORITY_DT))), 'rsoean'::"VARCHAR", ''::"VARCHAR") END AS YOS, CASE WHEN (("TIMESTAMP"(DATE('now'::"VARCHAR")) - E.EMPL_SENORITY_DT) < '90 days'::"INTERVAL") THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS NEW_HIRE_FLAG, CASE WHEN ((DATE_PART('MONTH'::"VARCHAR", DATE('now'::"VARCHAR")) = DATE_PART('MONTH'::"VARCHAR", E.EMPL_BIRTH_DT)) = 't'::BOOL) THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS BIRTH_MONTH, CASE WHEN ((DATE_PART('MONTH'::"VARCHAR", DATE('now'::"VARCHAR")) = DATE_PART('MONTH'::"VARCHAR", E.EMPL_SENORITY_DT)) = 't'::BOOL) THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS HIRE_MONTH, CASE WHEN (ES.START_TIME ISNULL) THEN 'N'::"VARCHAR" ELSE 'Y'::"VARCHAR" END AS SCHEDULED, ES.START_TIME, ES.END_TIME FROM (((ADMIN.EMPLOYEE_PROFILE_RPT E JOIN ADMIN.SITE_PROFILE_RPT S ON ((((E.LOCATION_ID = S.LOCATION_ID) AND (S.LOCATION_TYPE_ID IN (1, 3))) AND (S.DISTRICT_ID <> 0)))) LEFT JOIN (SELECT EMPLOYEE_PROFILE_RPT.EMPLOYEE_ID AS SUPERVISOR_ID, BTRIM(((BTRIM(CASE WHEN (EMPLOYEE_PROFILE_RPT.EMPL_FIRST_NAME NOTNULL) THEN EMPLOYEE_PROFILE_RPT.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (EMPLOYEE_PROFILE_RPT.EMPL_LAST_NAME NOTNULL) THEN EMPLOYEE_PROFILE_RPT.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END))) AS SUPERVISOR_NAME, ((((('('::"VARCHAR" || SUBSTR(EMPLOYEE_PROFILE_RPT.EMPL_HOME_PHONE, 1, 3)) || ') '::"VARCHAR") || "SUBSTRING"(EMPLOYEE_PROFILE_RPT.EMPL_HOME_PHONE, 4, 3)) || '-'::"VARCHAR") || SUBSTR(EMPLOYEE_PROFILE_RPT.EMPL_HOME_PHONE, ((LENGTH(EMPLOYEE_PROFILE_RPT.EMPL_HOME_PHONE) - 4) + 1))) AS SUPERVISOR_PHONE, (((('<a href=mailto:'::"VARCHAR" || EMPLOYEE_PROFILE_RPT.EMPL_EMAIL_ADDR) || '>'::"VARCHAR") || EMPLOYEE_PROFILE_RPT.EMPL_EMAIL_ADDR) || '</a>'::"VARCHAR") AS SUPERVISOR_EMAIL FROM ADMIN.EMPLOYEE_PROFILE_RPT WHERE (EMPLOYEE_PROFILE_RPT.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1)))) SV ON ((E.PS_SUPERVISOR_ID = SV.SUPERVISOR_ID))) LEFT JOIN (SELECT W.EMPLOYEE_ID, W.LOCATION_ID, MIN(W.STRT_DTM) AS START_TIME, MAX(W.END_DTM) AS END_TIME FROM ADMIN.WFA_TSCHD W WHERE (W.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR"))) GROUP BY W.EMPLOYEE_ID, W.LOCATION_ID) ES ON ((("NUMERIC"(E.EMPLOYEE_ID) = ES.EMPLOYEE_ID) AND (S.LOCATION_ID = ES.LOCATION_ID)))) WHERE ((E.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1))) AND (E.FULLPT_FLAG <> 'U'::"VARCHAR"))) DCD;

\echo
\echo *****  Creating view:  "TS_RFC_TIME_VW"

CREATE or replace VIEW  TS_RFC_TIME_VW
(
     DAY_DT,
     EMPLOYEE_ID,
     FIRST_NAME,
     LAST_NAME,
     COMPANY,
     SKILL,
     RFC_NBR,
     PROJECT_DESC,
     NOTES,
     WORK_HOURS
) AS
(SELECT TS_INTRA_TIME.TS_DAY_DT AS DAY_DT, (('5000'::"VARCHAR" || LPAD("VARCHAR"(TS_INTRA_TIME.INTRA_EMPLOYEE_ID), 8, '0'::"VARCHAR")))::VARCHAR(12) AS EMPLOYEE_ID, (TS_INTRA_TIME.INTRA_FIRST_NAME)::VARCHAR(50) AS FIRST_NAME, (TS_INTRA_TIME.INTRA_LAST_NAME)::VARCHAR(50) AS LAST_NAME, ('INTRAMART'::"VARCHAR")::VARCHAR(9) AS COMPANY, TS_INTRA_TIME.INTRA_SKILL AS SKILL, TS_INTRA_TIME.TS_WORK_ASSIGN_CD AS RFC_NBR, TS_INTRA_TIME.INTRA_PROJECT_DESC AS PROJECT_DESC, (TS_INTRA_TIME.INTRA_NOTES)::VARCHAR(50) AS NOTES, (TS_INTRA_TIME.TS_WORK_HOURS)::NUMERIC(4,2) AS WORK_HOURS FROM ADMIN.TS_INTRA_TIME WHERE ((TS_INTRA_TIME.TS_WORK_ASSIGN_CD <> 'N/A'::"VARCHAR") AND (UPPER(TS_INTRA_TIME.BILLABLE_IND) = 'TRUE'::"VARCHAR"))) UNION (SELECT TET.TS_DAY_DT AS DAY_DT, (('1000'::"VARCHAR" || LPAD("VARCHAR"(TET.EMPLOYEE_ID), 8, '0'::"VARCHAR")))::VARCHAR(12) AS EMPLOYEE_ID, EP.EMPL_FIRST_NAME AS FIRST_NAME, EP.EMPL_LAST_NAME AS LAST_NAME, ('PETSMART'::"VARCHAR")::VARCHAR(9) AS COMPANY, ('N/A'::"VARCHAR")::VARCHAR(50) AS SKILL, (TET.TS_WORK_ASSIGN_CD)::VARCHAR(18) AS RFC_NBR, (TET.TS_RFC_DESC)::VARCHAR(255) AS PROJECT_DESC, TET.TS_ACTIVITY_CAT_DESC AS NOTES, TET.TS_WORK_HOURS AS WORK_HOURS FROM (ADMIN.TS_EMPLOYEE_TIME TET JOIN ADMIN.EMPLOYEE_PROFILE EP ON ((TET.EMPLOYEE_ID = EP.EMPLOYEE_ID))) WHERE (((EP.PS_DEPT_CD = '884820'::"VARCHAR") AND (TET.TS_WORK_ASSIGN_CD <> 'NA'::"VARCHAR")) AND (TET.TS_ACTIVITY_ID = 4)));

\echo
\echo *****  Creating view:  "BI_PROJECT_TIME_VW"

CREATE or replace VIEW  BI_PROJECT_TIME_VW
(
     TS_DAY_DT,
     BI_EMPL_ID,
     EMPL_FIRST_NAME,
     EMPL_LAST_NAME,
     COMPANY,
     SKILL,
     TS_WORK_ASSIGN_CD,
     TS_ACTIVITY_CAT_DESC,
     TS_WORK_HOURS
) AS
(SELECT TET.TS_DAY_DT, (('1000'::"VARCHAR" || LPAD("VARCHAR"(TET.EMPLOYEE_ID), 8, '0'::"VARCHAR")))::VARCHAR(12) AS BI_EMPL_ID, EP.EMPL_FIRST_NAME, EP.EMPL_LAST_NAME, ('petsmart'::"VARCHAR")::VARCHAR(9) AS COMPANY, ('n/a'::"VARCHAR")::VARCHAR(50) AS SKILL, (TET.TS_WORK_ASSIGN_CD)::VARCHAR(18) AS TS_WORK_ASSIGN_CD, (CASE WHEN (UPPER(TET.TS_WORK_ASSIGN_CD) <> 'NA'::"VARCHAR") THEN CASE WHEN (ASCII("SUBSTRING"(TET.TS_ACTIVITY_CAT_DESC, (LENGTH(TET.TS_WORK_ASSIGN_CD) + 1), 1)) = 150) THEN "SUBSTRING"(TET.TS_ACTIVITY_CAT_DESC, (LENGTH(TET.TS_WORK_ASSIGN_CD) + 3), LENGTH(TET.TS_ACTIVITY_CAT_DESC)) WHEN (ASCII("SUBSTRING"(TET.TS_ACTIVITY_CAT_DESC, (LENGTH(TET.TS_WORK_ASSIGN_CD) + 1), 1)) = 32) THEN "SUBSTRING"(TET.TS_ACTIVITY_CAT_DESC, (LENGTH(TET.TS_WORK_ASSIGN_CD) + 2), LENGTH(TET.TS_ACTIVITY_CAT_DESC)) ELSE "SUBSTRING"(TET.TS_ACTIVITY_CAT_DESC, (LENGTH(TET.TS_WORK_ASSIGN_CD) + 1), LENGTH(TET.TS_ACTIVITY_CAT_DESC)) END ELSE TET.TS_ACTIVITY_CAT_DESC END)::VARCHAR(255) AS TS_ACTIVITY_CAT_DESC, TET.TS_WORK_HOURS FROM (ADMIN.TS_EMPLOYEE_TIME TET JOIN ADMIN.EMPLOYEE_PROFILE EP ON ((TET.EMPLOYEE_ID = EP.EMPLOYEE_ID))) WHERE (((EP.PS_DEPT_CD = '884820'::"VARCHAR") AND (TET.TS_DAY_DT > '2012-01-31'::DATE)) AND (TET.TS_ACTIVITY_ID = 3))) UNION (SELECT TS_INTRA_TIME.TS_DAY_DT, (('5000'::"VARCHAR" || LPAD("VARCHAR"(TS_INTRA_TIME.INTRA_EMPLOYEE_ID), 8, '0'::"VARCHAR")))::VARCHAR(12) AS BI_EMPL_ID, (TS_INTRA_TIME.INTRA_FIRST_NAME)::VARCHAR(50) AS EMPL_FIRST_NAME, (TS_INTRA_TIME.INTRA_LAST_NAME)::VARCHAR(50) AS EMPL_LAST_NAME, ('intramart'::"VARCHAR")::VARCHAR(9) AS COMPANY, TS_INTRA_TIME.INTRA_SKILL AS SKILL, TS_INTRA_TIME.TS_WORK_ASSIGN_CD, TS_INTRA_TIME.INTRA_PROJECT_DESC AS TS_ACTIVITY_CAT_DESC, (TS_INTRA_TIME.TS_WORK_HOURS)::NUMERIC(4,2) AS TS_WORK_HOURS FROM ADMIN.TS_INTRA_TIME WHERE ((((TS_INTRA_TIME.TS_WORK_ASSIGN_CD = 'N/A'::"VARCHAR") AND (UPPER(TS_INTRA_TIME.BILLABLE_IND) = 'TRUE'::"VARCHAR")) AND (TS_INTRA_TIME.PETM_MGR = 'Sue McBean'::"VARCHAR")) AND (TS_INTRA_TIME.TS_DAY_DT > '2012-01-31'::DATE)));

\echo
\echo *****  Creating view:  "CI_COMP_SKU_PRICE_CNT_VW"

CREATE or replace VIEW  CI_COMP_SKU_PRICE_CNT_VW
(
     "CAL_MO",
     "PRODUCT_ID",
     "SKU_NBR",
     COMP_COMPANY_ID,
     COMP_COMPANY_NAME,
     VP_ID,
     MAX_COMP_PRICE,
     MIN_COMP_PRICE
) AS
SELECT PRE.CAL_MO, PRE.PRODUCT_ID, PRE.SKU_NBR, PRE.COMP_COMPANY_ID, PRE.COMP_COMPANY_NAME, PRE.VP_ID, MAX(PRE.COMP_PRICE_AMT) AS MAX_COMP_PRICE, MIN(PRE.COMP_PRICE_AMT) AS MIN_COMP_PRICE FROM (SELECT CCSD.CAL_MO, CCSD.PRODUCT_ID, CCSD.SKU_NBR, CC.COMP_COMPANY_ID, CC.COMP_COMPANY_NAME, SPR.VP_ID, CCSD.COMP_PRICE_AMT, COUNT(CCSD.COMP_PRICE_AMT) AS SKU_PRICE_CNT FROM ((ADMIN.CI_COMP_SKU_DAY CCSD JOIN ADMIN.CI_COMPETITOR CC ON ((CCSD.COMP_ID = CC.COMP_ID))) JOIN ADMIN.SKU_PROFILE_RPT SPR ON ((CCSD.PRODUCT_ID = SPR.PRODUCT_ID))) GROUP BY CCSD.CAL_MO, CCSD.PRODUCT_ID, CCSD.SKU_NBR, CC.COMP_COMPANY_NAME, SPR.VP_ID, CC.COMP_COMPANY_ID, CCSD.COMP_PRICE_AMT HAVING (COUNT(CCSD.COMP_PRICE_AMT) > 1)) PRE GROUP BY PRE.CAL_MO, PRE.PRODUCT_ID, PRE.SKU_NBR, PRE.COMP_COMPANY_ID, PRE.COMP_COMPANY_NAME, PRE.VP_ID;

\echo
\echo *****  Creating view:  "AMS_BOUNCEBACK_UPC_OFFER_VW"

CREATE or replace VIEW  AMS_BOUNCEBACK_UPC_OFFER_VW
(
     UPC_ID,
     OFFER_ID,
     AMS_BOUNCEBACK_TYPE_ID,
     AMS_BOUNCEBACK_TYPE_DESC
) AS
(SELECT DISTINCT AOPM.UPC_ID, AOPM.OFFER_ID, ABT.AMS_BOUNCEBACK_TYPE_ID, ABT.AMS_BOUNCEBACK_TYPE_DESC FROM (ADMIN.AMS_OFFER_PRINTED_MSG AOPM CROSS JOIN ADMIN.AMS_BOUNCEBACK_TYPE ABT) WHERE ((AOPM.UPC_ID NOTNULL) AND (ABT.AMS_BOUNCEBACK_TYPE_ID = 1))) UNION ALL (SELECT DISTINCT AOT.UPC_ID, AOT.OFFER_ID, ABT.AMS_BOUNCEBACK_TYPE_ID, ABT.AMS_BOUNCEBACK_TYPE_DESC FROM (ADMIN.AMS_OFFER_TRIGGER AOT CROSS JOIN ADMIN.AMS_BOUNCEBACK_TYPE ABT) WHERE (((AOT.DELETE_IND = 0) AND (ABT.AMS_BOUNCEBACK_TYPE_ID = 2)) AND (AOT.UPC_ID = ANY (SELECT DISTINCT AMS_OFFER_PRINTED_MSG.UPC_ID FROM ADMIN.AMS_OFFER_PRINTED_MSG WHERE (AMS_OFFER_PRINTED_MSG.UPC_ID NOTNULL)))));

\echo
\echo *****  Creating view:  "AMS_BOUNCEBACK_TXN_VW"

CREATE or replace VIEW  AMS_BOUNCEBACK_TXN_VW
(
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     OFFER_ID,
     AMS_BOUNCEBACK_TYPE_ID,
     VOID_TYPE_CD,
     ISSUANCE_QTY,
     REDEMPTION_QTY,
     REDEMPTION_AMT,
     EXCH_RATE_PCT
) AS
((SELECT AIT.DAY_DT, AIT.LOCATION_ID, AIT.SALES_INSTANCE_ID, ABUOV.UPC_ID, ABUOV.OFFER_ID, ABUOV.AMS_BOUNCEBACK_TYPE_ID, AIT.VOID_TYPE_CD, AIT.ISSUANCE_QTY, ('0'::NUMERIC)::NUMERIC(9,0) AS REDEMPTION_QTY, ('0'::NUMERIC)::NUMERIC(11,4) AS REDEMPTION_AMT, (('1'::NUMERIC(1,0))::NUMERIC(1,0))::NUMERIC(9,6) AS EXCH_RATE_PCT FROM (ADMIN.AMS_BOUNCEBACK_UPC_OFFER_VW ABUOV JOIN ADMIN.AMS_ISSUANCE_TXN AIT ON ((ABUOV.OFFER_ID = AIT.OFFER_ID))) WHERE (ABUOV.AMS_BOUNCEBACK_TYPE_ID = 1)) UNION ALL (SELECT STC.DAY_DT, STC.LOCATION_ID, STC.SALES_INSTANCE_ID, ABUOV.UPC_ID, ABUOV.OFFER_ID, ABUOV.AMS_BOUNCEBACK_TYPE_ID, STC.VOID_TYPE_CD, 0 AS ISSUANCE_QTY, ("NUMERIC"(STC.POS_COUPON_QTY))::NUMERIC(9,0) AS REDEMPTION_QTY, (STC.POS_COUPON_AMT)::NUMERIC(11,4) AS REDEMPTION_AMT, STC.EXCH_RATE_PCT FROM (ADMIN.AMS_BOUNCEBACK_UPC_OFFER_VW ABUOV JOIN ADMIN.SALES_TRANS_COUPON STC ON ((ABUOV.OFFER_ID = STC.OFFER_ID))) WHERE (ABUOV.AMS_BOUNCEBACK_TYPE_ID = 2))) UNION ALL (SELECT STD.DAY_DT, STD.LOCATION_ID, STD.SALES_INSTANCE_ID, ABUOV.UPC_ID, ABUOV.OFFER_ID, ABUOV.AMS_BOUNCEBACK_TYPE_ID, STD.VOID_TYPE_CD, 0 AS ISSUANCE_QTY, ((STD.DISCOUNT_QTY - STD.DISCOUNT_RETURN_QTY))::NUMERIC(9,0) AS REDEMPTION_QTY, ((STD.DISCOUNT_AMT - STD.DISCOUNT_RETURN_AMT))::NUMERIC(11,4) AS REDEMPTION_AMT, STD.EXCH_RATE_PCT FROM (ADMIN.AMS_BOUNCEBACK_UPC_OFFER_VW ABUOV JOIN ADMIN.SALES_TRANS_DISCOUNT STD ON ((ABUOV.OFFER_ID = STD.OFFER_ID))) WHERE (ABUOV.AMS_BOUNCEBACK_TYPE_ID = 2));

\echo
\echo *****  Creating view:  "AMS_BOUNCEBACK_UPC_VW"

CREATE or replace VIEW  AMS_BOUNCEBACK_UPC_VW
(
     UPC_ID,
     SKU_NBR,
     SKU_DESC,
     BOUNCEBACK_START_DT,
     BOUNCEBACK_END_DT
) AS
SELECT BUPC.UPC_ID, CASE WHEN (SKU.SKU_NBR NOTNULL) THEN SKU.SKU_NBR WHEN (5000002 NOTNULL) THEN 5000002 ELSE NULL::INT4 END AS SKU_NBR, CASE WHEN (SKU.SKU_DESC NOTNULL) THEN SKU.SKU_DESC WHEN ('EXCEPTION UPC FOR POS                   ' NOTNULL) THEN 'EXCEPTION UPC FOR POS                   '::"VARCHAR" ELSE NULL::"VARCHAR" END AS SKU_DESC, MIN(AO.OFFER_START_DT) AS BOUNCEBACK_START_DT, MAX(AO.OFFER_END_DT) AS BOUNCEBACK_END_DT FROM (((((SELECT AOPM.UPC_ID, AOPM.OFFER_ID FROM ADMIN.AMS_OFFER_PRINTED_MSG AOPM WHERE (AOPM.UPC_ID NOTNULL)) UNION ALL (SELECT AOT.UPC_ID, AOT.OFFER_ID FROM ADMIN.AMS_OFFER_TRIGGER AOT WHERE ((AOT.DELETE_IND = 0) AND (AOT.UPC_ID = ANY (SELECT DISTINCT AMS_OFFER_PRINTED_MSG.UPC_ID FROM ADMIN.AMS_OFFER_PRINTED_MSG WHERE (AMS_OFFER_PRINTED_MSG.UPC_ID NOTNULL)))))) BUPC JOIN ADMIN.AMS_OFFER AO ON ((BUPC.OFFER_ID = AO.OFFER_ID))) LEFT JOIN ADMIN.UPC ON ((BUPC.UPC_ID = UPC.UPC_ID))) LEFT JOIN ADMIN.SKU_PROFILE SKU ON ((UPC.PRODUCT_ID = SKU.PRODUCT_ID))) GROUP BY BUPC.UPC_ID, SKU.SKU_NBR, SKU.SKU_DESC;

\echo
\echo *****  Creating view:  "TXN_UPC_SCAN_PRICE_VW_OLD"

CREATE or replace VIEW  TXN_UPC_SCAN_PRICE_VW_OLD
(
     SALES_INSTANCE_ID,
     POS_TXN_SEQ_NBR,
     SALES_COMPONENT_ID,
     UPC_SCAN_PRICE_AMT
) AS
((SELECT STU.SALES_INSTANCE_ID, STU.POS_TXN_SEQ_NBR, 1 AS SALES_COMPONENT_ID, (CASE WHEN ((STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY)) = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ((STU.SALES_AMT - STU.RETURN_AMT) / (STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY))) END)::NUMERIC(19,10) AS UPC_SCAN_PRICE_AMT FROM ADMIN.SALES_TRANS_UPC STU WHERE (STU.DAY_DT >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 60)))) UNION ALL (SELECT STD.SALES_INSTANCE_ID, STD.POS_TXN_SEQ_NBR, 2 AS SALES_COMPONENT_ID, (CASE WHEN (CASE WHEN ((STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY)) NOTNULL) THEN (STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY)) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ((STU.SALES_AMT - STU.RETURN_AMT) / (STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY))) END)::NUMERIC(19,10) AS UPC_SCAN_PRICE_AMT FROM (ADMIN.SALES_TRANS_DISCOUNT STD LEFT JOIN ADMIN.SALES_TRANS_UPC STU ON (((STD.SALES_INSTANCE_ID = STU.SALES_INSTANCE_ID) AND (CASE WHEN (STD.POS_TXN_SEQ_NBR > 999) THEN INT4(SUBSTR("VARCHAR"(STD.POS_TXN_SEQ_NBR), 2, 3)) ELSE INT4(STD.POS_TXN_SEQ_NBR) END = STU.POS_TXN_SEQ_NBR)))) WHERE (STD.DAY_DT >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 60))))) UNION ALL (SELECT STC.SALES_INSTANCE_ID, STC.POS_TXN_SEQ_NBR, 3 AS SALES_COMPONENT_ID, ('0'::NUMERIC)::NUMERIC(19,10) AS UPC_SCAN_PRICE_AMT FROM ADMIN.SALES_TRANS_COUPON STC WHERE (STC.DAY_DT >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 60))));

\echo
\echo *****  Creating view:  "SKU_LIQUIDATE_WK_VW"

CREATE or replace VIEW  SKU_LIQUIDATE_WK_VW
(
     POG_CALENDAR_ID,
     PRODUCT_ID,
     LOCATION_ID,
     WEEK_DT,
     POG_IMPLEMENT_DT,
     SKU_NBR,
     STORE_NBR,
     IMPORT_IND,
     OPTIMIZED_IND,
     GLOBAL_DISCO_IND,
     ICR_IND,
     WK_TO_PID_ID
) AS
SELECT SLW.POG_CALENDAR_ID, SLW.PRODUCT_ID, SLW.LOCATION_ID, W.WEEK_DT, PC.POG_IMPLEMENT_DT, SLW.SKU_NBR, SLW.STORE_NBR, SLW.IMPORT_IND, SLW.OPTIMIZED_IND, SLW.GLOBAL_DISCO_IND, SLW.ICR_IND, (DATE_PART('DAY'::"VARCHAR", (W.WEEK_DT - D.WEEK_DT)) / 7) AS WK_TO_PID_ID FROM (((ADMIN.SKU_LIQUIDATE_VW SLW JOIN ADMIN.POG_CALENDAR PC ON ((SLW.POG_CALENDAR_ID = PC.POG_CALENDAR_ID))) JOIN ADMIN.DAYS D ON ((D.DAY_DT = PC.POG_IMPLEMENT_DT))) JOIN ADMIN.WEEKS W ON (((W.WEEK_DT >= "TIMESTAMP"((DATE(PC.POG_IMPLEMENT_DT) - 182))) AND (W.WEEK_DT <= "TIMESTAMP"((DATE(D.WEEK_DT) + CASE WHEN (DATE(D.WEEK_DT) = '9999-12-31'::DATE) THEN 0 ELSE 364 END))))));

\echo
\echo *****  Creating view:  "AMS_OFFER_PRODUCT_GROUP_VW"

CREATE or replace VIEW  AMS_OFFER_PRODUCT_GROUP_VW
(
     OFFER_ID,
     TIER_ID,
     PRODUCT_GROUP_ID,
     OFFER_PRODUCT_GROUP_TYPE_ID,
     IS_EXCLUDED_IND,
     QTY_FOR_INCENTIVE,
     QTY_UNIT_TYPE_ID,
     UNIQUE_PRODUCT_IND,
     MIN_PURCH_AMT,
     MIN_ITEM_PRICE_AMT,
     PRODUCT_COMBO_ID
) AS
((SELECT AMS_OFFER_DISCOUNT.OFFER_ID, AMS_OFFER_DISCOUNT.TIER_ID, AMS_OFFER_DISCOUNT.PRODUCT_GROUP_ID, 1 AS OFFER_PRODUCT_GROUP_TYPE_ID, 0 AS IS_EXCLUDED_IND, (NULL::"NUMERIC")::NUMERIC(8,2) AS QTY_FOR_INCENTIVE, 0 AS QTY_UNIT_TYPE_ID, NULL::INT1 AS UNIQUE_PRODUCT_IND, (NULL::"NUMERIC")::NUMERIC(8,2) AS MIN_PURCH_AMT, (NULL::"NUMERIC")::NUMERIC(8,2) AS MIN_ITEM_PRICE_AMT, 0 AS PRODUCT_COMBO_ID FROM ADMIN.AMS_OFFER_DISCOUNT WHERE (CASE WHEN (AMS_OFFER_DISCOUNT.PRODUCT_GROUP_ID NOTNULL) THEN AMS_OFFER_DISCOUNT.PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END <> 0)) UNION ALL (SELECT AMS_OFFER_DISCOUNT.OFFER_ID, AMS_OFFER_DISCOUNT.TIER_ID, AMS_OFFER_DISCOUNT.EXCLUDED_PRODUCT_GROUP_ID AS PRODUCT_GROUP_ID, 1 AS OFFER_PRODUCT_GROUP_TYPE_ID, 1 AS IS_EXCLUDED_IND, (NULL::"NUMERIC")::NUMERIC(8,2) AS QTY_FOR_INCENTIVE, 0 AS QTY_UNIT_TYPE_ID, NULL::INT1 AS UNIQUE_PRODUCT_IND, (NULL::"NUMERIC")::NUMERIC(8,2) AS MIN_PURCH_AMT, (NULL::"NUMERIC")::NUMERIC(8,2) AS MIN_ITEM_PRICE_AMT, 0 AS PRODUCT_COMBO_ID FROM ADMIN.AMS_OFFER_DISCOUNT WHERE (CASE WHEN (AMS_OFFER_DISCOUNT.EXCLUDED_PRODUCT_GROUP_ID NOTNULL) THEN AMS_OFFER_DISCOUNT.EXCLUDED_PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END <> 0))) UNION ALL (SELECT AMS_OFFER_PRODUCT_GROUP.OFFER_ID, AMS_OFFER_PRODUCT_GROUP.TIER_ID, AMS_OFFER_PRODUCT_GROUP.PRODUCT_GROUP_ID, 2 AS OFFER_PRODUCT_GROUP_TYPE_ID, INT4(AMS_OFFER_PRODUCT_GROUP.IS_EXCLUDED_IND) AS IS_EXCLUDED_IND, AMS_OFFER_PRODUCT_GROUP.QTY_FOR_INCENTIVE, AMS_OFFER_PRODUCT_GROUP.QTY_UNIT_TYPE_ID, AMS_OFFER_PRODUCT_GROUP.UNIQUE_PRODUCT_IND, AMS_OFFER_PRODUCT_GROUP.MIN_PURCH_AMT, AMS_OFFER_PRODUCT_GROUP.MIN_ITEM_PRICE_AMT, INT4(AMS_OFFER_PRODUCT_GROUP.PRODUCT_COMBO_ID) AS PRODUCT_COMBO_ID FROM ADMIN.AMS_OFFER_PRODUCT_GROUP WHERE (AMS_OFFER_PRODUCT_GROUP.DELETE_IND = 0));

\echo
\echo *****  Creating view:  "MOVEMENT_LIVE_PET_CRCY_VW"

CREATE or replace VIEW  MOVEMENT_LIVE_PET_CRCY_VW
(
     LOCATION_ID,
     PRODUCT_ID,
     CREATE_TSTMP,
     STORE_NBR,
     SKU_NBR,
     SKU_DESC,
     ADJUST_QTY,
     VENDOR_ID,
     VENDOR_NBR,
     MOVE_REASON_ID,
     MOVE_REASON_DESC,
     PET_MOVE_TYPE_CD,
     PET_MOVE_STATUS_CD,
     CURRENCY_TYPE_ID,
     CURRENCTY_TYPE_DESC,
     RETAIL_PRICE_AMT,
     UNIT_COST,
     EXCHANGE_RATE,
     USER_NAME,
     LOAD_TSTMP
) AS
(SELECT A.LOCATION_ID, A.PRODUCT_ID, A.CREATE_TSTMP, A.STORE_NBR, A.SKU_NBR, A.SKU_DESC, A.ADJUST_QTY, A.VENDOR_ID, A.VENDOR_NBR, A.MOVE_REASON_ID, A.MOVE_REASON_DESC, A.PET_MOVE_TYPE_CD, A.PET_MOVE_STATUS_CD, 1 AS CURRENCY_TYPE_ID, ('USD'::"VARCHAR")::VARCHAR(5) AS CURRENCTY_TYPE_DESC, (CASE WHEN (B.COUNTRY_CD = 'US'::BPCHAR) THEN A.RETAIL_PRICE_AMT ELSE (A.RETAIL_PRICE_AMT * C.EXCHANGE_RATE_PCNT) END)::NUMERIC(21,8) AS RETAIL_PRICE_AMT, (CASE WHEN (B.COUNTRY_CD = 'US'::BPCHAR) THEN A.UNIT_COST ELSE (A.UNIT_COST * C.EXCHANGE_RATE_PCNT) END)::NUMERIC(21,8) AS UNIT_COST, (CASE WHEN (B.COUNTRY_CD = 'US'::BPCHAR) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE C.EXCHANGE_RATE_PCNT END)::NUMERIC(9,6) AS EXCHANGE_RATE, A.USER_NAME, A.LOAD_TSTMP FROM ((ADMIN.MOVEMENT_LIVE_PET A JOIN ADMIN.SITE_PROFILE B ON ((A.LOCATION_ID = B.LOCATION_ID))) LEFT JOIN ADMIN.CURRENCY_DAY C ON (((B.COUNTRY_CD = C.STORE_CTRY_ABBR) AND (DATE_TRUNC('DAY'::"VARCHAR", A.CREATE_TSTMP) = C.DAY_DT))))) UNION (SELECT A.LOCATION_ID, A.PRODUCT_ID, A.CREATE_TSTMP, A.STORE_NBR, A.SKU_NBR, A.SKU_DESC, A.ADJUST_QTY, A.VENDOR_ID, A.VENDOR_NBR, A.MOVE_REASON_ID, A.MOVE_REASON_DESC, A.PET_MOVE_TYPE_CD, A.PET_MOVE_STATUS_CD, 2 AS CURRENCY_TYPE_ID, ('Local'::"VARCHAR")::VARCHAR(5) AS CURRENCTY_TYPE_DESC, (A.RETAIL_PRICE_AMT)::NUMERIC(21,8) AS RETAIL_PRICE_AMT, (A.UNIT_COST)::NUMERIC(21,8) AS UNIT_COST, (('1'::NUMERIC(1,0))::NUMERIC(1,0))::NUMERIC(9,6) AS EXCHANGE_RATE, A.USER_NAME, A.LOAD_TSTMP FROM ((ADMIN.MOVEMENT_LIVE_PET A JOIN ADMIN.SITE_PROFILE B ON ((A.LOCATION_ID = B.LOCATION_ID))) LEFT JOIN ADMIN.CURRENCY_DAY C ON (((B.COUNTRY_CD = C.STORE_CTRY_ABBR) AND (DATE_TRUNC('DAY'::"VARCHAR", A.CREATE_TSTMP) = C.DAY_DT)))));

\echo
\echo *****  Creating view:  "USR_STORE_FLAG_VW"

CREATE or replace VIEW  USR_STORE_FLAG_VW
(
     STORE_NBR,
     LOCATION_ID,
     DAY_DT,
     PET_SAFETY_FLAG,
     ASSOCIATE_SAFETY_FLAG,
     SHRINK_FLAG
) AS
SELECT DISTINCT A.STORE_NBR, A.LOCATION_ID, A.DAY_DT, MAX(A.PET_SAFETY_FLAG) OVER (PARTITION BY A.STORE_NBR, A.LOCATION_ID, A.DAY_DT ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS PET_SAFETY_FLAG, MAX(A.ASSOCIATE_SAFETY_FLAG) OVER (PARTITION BY A.STORE_NBR, A.LOCATION_ID, A.DAY_DT ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS ASSOCIATE_SAFETY_FLAG, MAX(A.SHRINK_FLAG) OVER (PARTITION BY A.STORE_NBR, A.LOCATION_ID, A.DAY_DT ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SHRINK_FLAG FROM (SELECT S.STORE_NBR, S.LOCATION_ID, D.DAY_DT, CASE WHEN ((UPPER(F.FLAG_TYPE) = 'PET_SAFETY'::"NCHAR") AND ((D.DAY_DT >= "TIMESTAMP"(F.EFF_START_DATE)) AND (D.DAY_DT <= "TIMESTAMP"(F.EFF_END_DATE)))) THEN 1 ELSE 0 END AS PET_SAFETY_FLAG, CASE WHEN ((UPPER(F.FLAG_TYPE) = 'ASSOCIATE_SAFETY'::"NCHAR") AND ((D.DAY_DT >= "TIMESTAMP"(F.EFF_START_DATE)) AND (D.DAY_DT <= "TIMESTAMP"(F.EFF_END_DATE)))) THEN 1 ELSE 0 END AS ASSOCIATE_SAFETY_FLAG, CASE WHEN ((UPPER(F.FLAG_TYPE) = 'SHRINK'::"NCHAR") AND ((D.DAY_DT >= "TIMESTAMP"(F.EFF_START_DATE)) AND (D.DAY_DT <= "TIMESTAMP"(F.EFF_END_DATE)))) THEN 1 ELSE 0 END AS SHRINK_FLAG FROM ((ADMIN.SITE_PROFILE S LEFT JOIN ADMIN.USR_STORE_FLAG F ON ((F.STORE_NBR = S.STORE_NBR))) CROSS JOIN ADMIN.DAYS D) WHERE ((S.LOCATION_TYPE_ID = 8) AND (D.DAY_DT >= '2010-01-01 00:00:00'::"TIMESTAMP"))) A;

\echo
\echo *****  Creating view:  "STORE_DIRECTORY_SENTIMENT_VW"

CREATE or replace VIEW  STORE_DIRECTORY_SENTIMENT_VW
(
     DAY_DT,
     TXA_DOCUMENT_ID,
     TXA_SOURCE_ID,
     LOCATION_ID,
     STORE_NBR,
     STORE_NAME,
     DISTRICT_ID,
     DISTRICT_DESC,
     REGION_ID,
     REGION_DESC,
     DIST_MGR_NAME,
     TXA_VERBATIM_ID,
     GEO_LATITUDE_NBR,
     GEO_LONGITUDE_NBR,
     SITE_ADDRESS,
     SITE_CITY,
     SITE_EMAIL_ADDRESS,
     SITE_MAIN_TELE_NO,
     SITE_GROOM_TELE_NO,
     STATE_CD,
     POSTAL_CD,
     AVG_SENTIMENT,
     TXA_VERBATIM,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPLOYEE,
     POSITION_SORT,
     PS_POSITION_DESC,
     SMG_SURVEY_TYPE_ID,
     SMG_SURVEY_TYPE_DESC,
     CHK,
     DEPT_SORT,
     DEPT_DESC,
     EMPL_NAME_CNT
) AS
SELECT ONES.DAY_DT, ONES.TXA_DOCUMENT_ID, ONES.TXA_SOURCE_ID, ONES.LOCATION_ID, ONES.STORE_NBR, ONES.STORE_NAME, ONES.DISTRICT_ID, ONES.DISTRICT_DESC, ONES.REGION_ID, ONES.REGION_DESC, ONES.DIST_MGR_NAME, ONES.TXA_VERBATIM_ID, ONES.GEO_LATITUDE_NBR, ONES.GEO_LONGITUDE_NBR, ONES.SITE_ADDRESS, ONES.SITE_CITY, ONES.SITE_EMAIL_ADDRESS, ONES.SITE_MAIN_TELE_NO, ONES.SITE_GROOM_TELE_NO, ONES.STATE_CD, ONES.POSTAL_CD, ONES.AVG_SENTIMENT, ONES.TXA_VERBATIM, ONES.EMPLOYEE_ID, ONES.EMPL_FIRST_NAME, ONES.EMPLOYEE, ONES.POSITION_SORT, ONES.PS_POSITION_DESC, ONES.SMG_SURVEY_TYPE_ID, ONES.SMG_SURVEY_TYPE_DESC, ONES.CHK, ONES.DEPT_SORT, ONES.DEPT_DESC, COUNT(1) OVER (PARTITION BY ONES.TXA_VERBATIM_ID, ONES.EMPL_FIRST_NAME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS EMPL_NAME_CNT FROM (SELECT DISTINCT D.TXA_DOCUMENT_DATE AS DAY_DT, T.TXA_DOCUMENT_ID, D.TXA_SOURCE_ID, D.LOCATION_ID, SP.STORE_NBR, SP.STORE_NAME, SP.DISTRICT_ID, SP.DISTRICT_DESC, SP.REGION_ID, SP.REGION_DESC, SP.DIST_MGR_NAME, T.TXA_VERBATIM_ID, SP.GEO_LATITUDE_NBR, SP.GEO_LONGITUDE_NBR, SP.SITE_ADDRESS, SP.SITE_CITY, SP.SITE_EMAIL_ADDRESS, SP.SITE_MAIN_TELE_NO, SP.SITE_GROOM_TELE_NO, SP.STATE_CD, SP.POSTAL_CD, S.AVG_SCORE AS AVG_SENTIMENT, V.TXA_VERBATIM, E.EMPLOYEE_ID, E.EMPL_FIRST_NAME, ((E.EMPL_FIRST_NAME || ' '::"VARCHAR") || E.EMPL_LAST_NAME) AS EMPLOYEE, CASE WHEN (E.PS_POSITION_DESC /=/ 'Store Manager'::"VARCHAR") THEN 1 WHEN (E.PS_POSITION_DESC /=/ 'Co Store Manager'::"VARCHAR") THEN 2 WHEN (E.PS_POSITION_DESC /=/ 'Operations Manager'::"VARCHAR") THEN 3 WHEN (E.PS_POSITION_DESC /=/ 'PetsHotel Manager'::"VARCHAR") THEN 4 WHEN (E.PS_POSITION_DESC /=/ 'PetsHotel Assistant Manager'::"VARCHAR") THEN 5 WHEN (E.PS_POSITION_DESC /=/ 'Pet Care Manager'::"VARCHAR") THEN 6 WHEN (E.PS_POSITION_DESC /=/ 'Presentation Manager'::"VARCHAR") THEN 7 WHEN (E.PS_POSITION_DESC /=/ 'Pet Products Manager'::"VARCHAR") THEN 8 WHEN (E.PS_POSITION_DESC /=/ 'Pet Salon Manager'::"VARCHAR") THEN 9 WHEN (E.PS_POSITION_DESC /=/ 'Salon Manager'::"VARCHAR") THEN 9 ELSE 10 END AS POSITION_SORT, E.PS_POSITION_DESC, D.SMG_SURVEY_TYPE_ID, ST.SMG_SURVEY_TYPE_DESC, CASE WHEN ((ST.SMG_SURVEY_TYPE_DESC = 'Grooming Survey'::"VARCHAR") AND ((CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END <> 'Grooming Associate'::"VARCHAR") AND (CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END <> 'Store Management'::"VARCHAR"))) THEN 0 WHEN ((ST.SMG_SURVEY_TYPE_DESC = 'PetsHotel Survey'::"VARCHAR") AND (((CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END <> 'PetsHotel Associate'::"VARCHAR") AND (CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END <> 'PetsHotel Associates'::"VARCHAR")) AND (CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END <> 'Store Management'::"VARCHAR"))) THEN 0 WHEN ((ST.SMG_SURVEY_TYPE_DESC = 'Training Survey'::"VARCHAR") AND ((CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END <> 'Pet Training Associate'::"VARCHAR") AND (CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END <> 'Store Management'::"VARCHAR"))) THEN 0 ELSE 1 END AS CHK, CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 1 ELSE CASE WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Management'::"VARCHAR") THEN 1 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Core Associate'::"VARCHAR") THEN 2 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Pet Care Associate'::"VARCHAR") THEN 3 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'PetsHotel Associate'::"VARCHAR") THEN 4 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Grooming Associate'::"VARCHAR") THEN 5 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Pet Training Associate'::"VARCHAR") THEN 6 ELSE 7 END END AS DEPT_SORT, CASE WHEN (E.PS_POSITION_DESC ~~ LIKE_ESCAPE('%Manager%'::"VARCHAR", '\'::"VARCHAR")) THEN 'Store Management'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END AS DEPT_DESC FROM ((((((ADMIN.TXA_TOKEN T JOIN ADMIN.TXA_VERBATIM V ON ((T.TXA_VERBATIM_ID = V.TXA_VERBATIM_ID))) JOIN ADMIN.TXA_DOCUMENT D ON (((((T.TXA_DOCUMENT_ID = D.TXA_DOCUMENT_ID) AND (D.TXA_DOCUMENT_DATE >= "TIMESTAMP"((DATE('now'::"VARCHAR") - 31)))) AND (D.LOCATION_ID NOTNULL)) AND (D.TXA_SOURCE_ID = ('13'::NUMERIC(2,0))::NUMERIC(2,0))))) JOIN ADMIN.SMG_SURVEY_TYPE ST ON ((D.SMG_SURVEY_TYPE_ID = ST.SMG_SURVEY_TYPE_ID))) JOIN (SELECT EE.EMPLOYEE_ID, EE.EMPL_FIRST_NAME, EE.EMPL_LAST_NAME, EE.PS_POSITION_DESC, EE.PS_DEPT_DESC, EE.EMPL_STATUS_CD, SS.LOCATION_ID, CASE WHEN (N.EMPL_NICK_NAME NOTNULL) THEN N.EMPL_NICK_NAME WHEN (EE.EMPL_FIRST_NAME NOTNULL) THEN EE.EMPL_FIRST_NAME ELSE NULL::"VARCHAR" END AS NICKNAME FROM ((ADMIN.EMPLOYEE_PROFILE_RPT EE JOIN ADMIN.SITE_PROFILE_RPT SS ON (((EE.LOCATION_ID = SS.LOCATION_ID) AND (SS.LOCATION_TYPE_ID = 8)))) LEFT JOIN ADMIN.NICKNAMES N ON ((EE.EMPL_FIRST_NAME = N.EMPL_FIRST_NAME))) WHERE (EE.EMPL_STATUS_CD = 'A'::"VARCHAR")) E ON ((((D.LOCATION_ID = E.LOCATION_ID) AND ((UPPER(T.ACTUAL_TOKEN_NAME) = UPPER(E.EMPL_FIRST_NAME)) OR (UPPER(T.ACTUAL_TOKEN_NAME) = UPPER(E.NICKNAME)))) AND (E.EMPL_STATUS_CD = 'A'::"VARCHAR")))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((D.LOCATION_ID = SP.LOCATION_ID))) JOIN (SELECT TXA_SENTENCE.TXA_VERBATIM_ID, (SUM(TXA_SENTENCE.D_SENTIMENT_SCORE) / "NUMERIC"(COUNT(TXA_SENTENCE.D_SENTIMENT_SCORE))) AS AVG_SCORE FROM ADMIN.TXA_SENTENCE GROUP BY TXA_SENTENCE.TXA_VERBATIM_ID) S ON ((T.TXA_VERBATIM_ID = S.TXA_VERBATIM_ID)))) ONES WHERE ((ONES.CHK = 1) AND (ONES.AVG_SENTIMENT >= ('1'::NUMERIC(1,0))::NUMERIC(1,0)));

\echo
\echo *****  Creating view:  "PE_SALES_DAY_SKU_STORE_VW"

CREATE or replace VIEW  PE_SALES_DAY_SKU_STORE_VW
(
     PE_PROMO_ID,
     EM_EVENT_ID,
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     SALES_CUST_CAPTURE_CD,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     WEEK_DT,
     FISCAL_YR,
     SKU_NBR,
     STORE_NBR,
     VENDOR_ID,
     PROMO_FLAG,
     STATUS_ID,
     BRAND_NAME,
     OWNBRAND_FLAG,
     SKU_VEND_TXN_CNT,
     PE_PROMO_NAME,
     CURR_PROMO_IND,
     EM_DISP_LOC_ID,
     EM_DISP_LOC_NAME,
     VERSION,
     RANK_NBR,
     RANK_PRIORITY,
     PE_PROMO_EVENT_RANK,
     DISP_LOC_CNT,
     EM_DISCOUNT_TYPE_ID,
     EM_DISCOUNT_TYPE_DESC,
     IS_PET_PERKS_IND,
     COMP_FLAG,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     OTB_FINAL_PE_PROMO_ID,
     OTB_FINAL_PE_PROMO_NAME,
     OTB_FINAL_CURR_PROMO_IND,
     EM_DISP_LOC_STR_CNT,
     EM_DISP_LOC_RANK_OTB
) AS
(SELECT PP.PE_PROMO_ID, PSSR.EM_EVENT_ID, SDSSR.DAY_DT, SDSSR.PRODUCT_ID, SDSSR.LOCATION_ID, SDSSR.SALES_CUST_CAPTURE_CD, ('TY'::"VARCHAR")::VARCHAR(2) AS TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, SDSSR.WEEK_DT, SDSSR.FISCAL_YR, SDSSR.SKU_NBR, SDSSR.STORE_NBR, SDSSR.VENDOR_ID, SDSSR.PROMO_FLAG, SDSSR.STATUS_ID, SDSSR.BRAND_NAME, SDSSR.OWNBRAND_FLAG, SDSSR.SKU_VEND_TXN_CNT, PP.PE_PROMO_NAME, PP.CURR_PROMO_IND, PSSR.EM_DISP_LOC_ID, EDL.EM_DISP_LOC_NAME, EDL."VERSION", PDLR.RANK_NBR, PSSR.RANK_PRIORITY, PRK.PE_PROMO_EVENT_RANK, PSSR.DISP_LOC_CNT, EDT.EM_DISCOUNT_TYPE_ID, EDT.EM_DISCOUNT_TYPE_DESC, EDT.IS_PET_PERKS_IND, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT = SPR.COMP_EFF_DT)) AND (DTL.DAY_DT = SPR.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, SDSSR.NET_SALES_AMT, SDSSR.NET_SALES_QTY, SDSSR.NET_MARGIN_AMT, SDSSR.SALES_AMT, SDSSR.SALES_COST, SDSSR.SALES_QTY, SDSSR.RETURN_AMT, SDSSR.RETURN_COST, SDSSR.RETURN_QTY, SDSSR.DISCOUNT_AMT, SDSSR.DISCOUNT_QTY, SDSSR.DISCOUNT_RETURN_AMT, SDSSR.DISCOUNT_RETURN_QTY, SDSSR.POS_COUPON_AMT, SDSSR.POS_COUPON_QTY, SDSSR.SPECIAL_SALES_AMT, SDSSR.SPECIAL_SALES_QTY, SDSSR.SPECIAL_RETURN_AMT, SDSSR.SPECIAL_RETURN_QTY, SDSSR.SPECIAL_SRVC_AMT, SDSSR.SPECIAL_SRVC_QTY, SDSSR.MA_SALES_AMT, SDSSR.MA_SALES_QTY, SDSSR.MA_TRANS_AMT, SDSSR.MA_TRANS_COST, SDSSR.MA_TRANS_QTY, (CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SDSSR.EXCH_RATE_PCT END)::NUMERIC(9,6) AS EXCH_RATE_PCT, PPF.PE_PROMO_ID AS OTB_FINAL_PE_PROMO_ID, PPF.PE_PROMO_NAME AS OTB_FINAL_PE_PROMO_NAME, CASE WHEN (PPF.CURR_PROMO_IND NOTNULL) THEN INT4(PPF.CURR_PROMO_IND) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS OTB_FINAL_CURR_PROMO_IND, EESR.EM_DISP_LOC_STR_CNT, EESR.EM_DISP_LOC_RANK_OTB FROM ((((((((((((((ADMIN.SALES_DAY_SKU_STORE_RPT SDSSR JOIN ADMIN.PE_SKU_STORE_RANK PSSR ON (((SDSSR.PRODUCT_ID = PSSR.PRODUCT_ID) AND (SDSSR.LOCATION_ID = PSSR.LOCATION_ID)))) JOIN ADMIN.PE_PROMO_EVENT PPE ON ((PSSR.EM_EVENT_ID = PPE.EM_EVENT_ID))) JOIN ADMIN.EM_EVENT EE ON ((((PPE.EM_EVENT_ID = EE.EM_EVENT_ID) AND (SDSSR.DAY_DT >= EE.EVENT_START_DT)) AND (SDSSR.DAY_DT <= EE.EVENT_END_DT)))) JOIN ADMIN.PE_PROMO PP ON ((PPE.PE_PROMO_ID = PP.PE_PROMO_ID))) JOIN ADMIN.EM_DISP_LOC EDL ON ((PSSR.EM_DISP_LOC_ID = EDL.EM_DISP_LOC_ID))) JOIN ADMIN.PE_DISP_LOC_RANK PDLR ON ((EDL.EM_DISP_LOC_NAME = PDLR.EM_DISP_LOC_NAME))) JOIN ADMIN.EM_DISCOUNT_TYPE EDT ON ((PSSR.EM_DISCOUNT_TYPE_ID = EDT.EM_DISCOUNT_TYPE_ID))) JOIN ADMIN.DAYS_TY_LY DTL ON (((SDSSR.DAY_DT = DTL.DAY_DT) AND (DTL.TY_LY_FLAG = 'TY'::"VARCHAR")))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SDSSR.LOCATION_ID = SPR.LOCATION_ID))) JOIN ADMIN.EM_EVENT_SKU_RPT EESR ON ((((PSSR.EM_EVENT_ID = EESR.EM_EVENT_ID) AND (PSSR.PRODUCT_ID = EESR.PRODUCT_ID)) AND (SPR.COUNTRY_CD = EESR.COUNTRY_CD)))) JOIN ADMIN.PE_PROMO_EVENT_RANK PRK ON (((((EESR.EM_EVENT_ID = PRK.EM_EVENT_ID) AND (SDSSR.DAY_DT = PRK.DAY_DT)) AND (EESR.PRODUCT_ID = PRK.PRODUCT_ID)) AND (EESR.COUNTRY_CD = PRK.COUNTRY_CD)))) LEFT JOIN ADMIN.PE_PROMO_SKU_OTB PPSO ON ((((PP.PE_PROMO_ID = PPSO.PE_PROMO_ID) AND (SDSSR.PRODUCT_ID = PPSO.PRODUCT_ID)) AND ((SPR.COUNTRY_CD)::"VARCHAR" = PPSO.COUNTRY_CD)))) LEFT JOIN ADMIN.PE_PROMO PPF ON ((PPSO.FINAL_PE_PROMO_ID = PPF.PE_PROMO_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) WHERE (PSSR.RANK_PRIORITY = 1)) UNION ALL (SELECT PTY.PE_PROMO_ID, PTY.EM_EVENT_ID, DTL.DAY_DT, SDSSR.PRODUCT_ID, SDSSR.LOCATION_ID, SDSSR.SALES_CUST_CAPTURE_CD, ('LY'::"VARCHAR")::VARCHAR(2) AS TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, DTL.WEEK_DT, DTL.FISCAL_YR, SDSSR.SKU_NBR, SDSSR.STORE_NBR, SDSSR.VENDOR_ID, SDSSR.PROMO_FLAG, SDSSR.STATUS_ID, SDSSR.BRAND_NAME, SDSSR.OWNBRAND_FLAG, SDSSR.SKU_VEND_TXN_CNT, PTY.PE_PROMO_NAME, PP.CURR_PROMO_LY_IND AS CURR_PROMO_IND, PSSR.EM_DISP_LOC_ID, EDL.EM_DISP_LOC_NAME, EDL."VERSION", PDLR.RANK_NBR, PSSR.RANK_PRIORITY, PRK.PE_PROMO_EVENT_RANK, PSSR.DISP_LOC_CNT, EDT.EM_DISCOUNT_TYPE_ID, EDT.EM_DISCOUNT_TYPE_DESC, EDT.IS_PET_PERKS_IND, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT = SPR.COMP_EFF_DT)) AND (DTL.DAY_DT = SPR.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, SDSSR.NET_SALES_AMT, SDSSR.NET_SALES_QTY, SDSSR.NET_MARGIN_AMT, SDSSR.SALES_AMT, SDSSR.SALES_COST, SDSSR.SALES_QTY, SDSSR.RETURN_AMT, SDSSR.RETURN_COST, SDSSR.RETURN_QTY, SDSSR.DISCOUNT_AMT, SDSSR.DISCOUNT_QTY, SDSSR.DISCOUNT_RETURN_AMT, SDSSR.DISCOUNT_RETURN_QTY, SDSSR.POS_COUPON_AMT, SDSSR.POS_COUPON_QTY, SDSSR.SPECIAL_SALES_AMT, SDSSR.SPECIAL_SALES_QTY, SDSSR.SPECIAL_RETURN_AMT, SDSSR.SPECIAL_RETURN_QTY, SDSSR.SPECIAL_SRVC_AMT, SDSSR.SPECIAL_SRVC_QTY, SDSSR.MA_SALES_AMT, SDSSR.MA_SALES_QTY, SDSSR.MA_TRANS_AMT, SDSSR.MA_TRANS_COST, SDSSR.MA_TRANS_QTY, (CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SDSSR.EXCH_RATE_PCT END)::NUMERIC(9,6) AS EXCH_RATE_PCT, PPF.PE_PROMO_ID AS OTB_FINAL_PE_PROMO_ID, PPF.PE_PROMO_NAME AS OTB_FINAL_PE_PROMO_NAME, CASE WHEN (PPF.CURR_PROMO_IND NOTNULL) THEN INT4(PPF.CURR_PROMO_IND) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS OTB_FINAL_CURR_PROMO_IND, EESR.EM_DISP_LOC_STR_CNT, EESR.EM_DISP_LOC_RANK_OTB FROM (((((((((((((((ADMIN.SALES_DAY_SKU_STORE_RPT SDSSR JOIN ADMIN.PE_SKU_STORE_RANK PSSR ON (((SDSSR.PRODUCT_ID = PSSR.PRODUCT_ID) AND (SDSSR.LOCATION_ID = PSSR.LOCATION_ID)))) JOIN ADMIN.PE_PROMO_EVENT PPE ON ((PSSR.EM_EVENT_ID = PPE.EM_EVENT_ID))) JOIN ADMIN.EM_EVENT EE ON ((((PPE.EM_EVENT_ID = EE.EM_EVENT_ID) AND (SDSSR.DAY_DT >= EE.EVENT_START_DT)) AND (SDSSR.DAY_DT <= EE.EVENT_END_DT)))) JOIN ADMIN.PE_PROMO PP ON ((PPE.PE_PROMO_ID = PP.PE_PROMO_ID))) JOIN ADMIN.EM_DISP_LOC EDL ON ((PSSR.EM_DISP_LOC_ID = EDL.EM_DISP_LOC_ID))) JOIN ADMIN.PE_DISP_LOC_RANK PDLR ON ((EDL.EM_DISP_LOC_NAME = PDLR.EM_DISP_LOC_NAME))) JOIN ADMIN.EM_DISCOUNT_TYPE EDT ON ((PSSR.EM_DISCOUNT_TYPE_ID = EDT.EM_DISCOUNT_TYPE_ID))) JOIN ADMIN.DAYS_TY_LY DTL ON (((SDSSR.DAY_DT = DTL.TRANS_DAY_DT) AND (DTL.TY_LY_FLAG = 'LY'::"VARCHAR")))) JOIN (SELECT DISTINCT PP.PE_PROMO_ID, PP.PE_PROMO_NAME, EE.EM_EVENT_ID, EE.EVENT_START_DT, EE.EVENT_END_DT FROM ((ADMIN.PE_PROMO PP JOIN ADMIN.PE_PROMO_EVENT PPE ON ((PP.PE_PROMO_ID = PPE.PE_PROMO_ID))) JOIN ADMIN.EM_EVENT EE ON ((PPE.PE_EM_EVENT_ID = EE.EM_EVENT_ID)))) PTY ON (((DTL.DAY_DT >= PTY.EVENT_START_DT) AND (DTL.DAY_DT <= PTY.EVENT_END_DT)))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SDSSR.LOCATION_ID = SPR.LOCATION_ID))) JOIN ADMIN.EM_EVENT_SKU_RPT EESR ON ((((PSSR.EM_EVENT_ID = EESR.EM_EVENT_ID) AND (PSSR.PRODUCT_ID = EESR.PRODUCT_ID)) AND (SPR.COUNTRY_CD = EESR.COUNTRY_CD)))) JOIN ADMIN.PE_PROMO_EVENT_RANK PRK ON (((((EESR.EM_EVENT_ID = PRK.EM_EVENT_ID) AND (SDSSR.DAY_DT = PRK.DAY_DT)) AND (EESR.PRODUCT_ID = PRK.PRODUCT_ID)) AND (EESR.COUNTRY_CD = PRK.COUNTRY_CD)))) LEFT JOIN ADMIN.PE_PROMO_SKU_OTB PPSO ON ((((PP.PE_PROMO_ID = PPSO.PE_PROMO_ID) AND (SDSSR.PRODUCT_ID = PPSO.PRODUCT_ID)) AND ((SPR.COUNTRY_CD)::"VARCHAR" = PPSO.COUNTRY_CD)))) LEFT JOIN ADMIN.PE_PROMO PPF ON ((PPSO.FINAL_PE_PROMO_ID = PPF.PE_PROMO_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) WHERE (PSSR.RANK_PRIORITY = 1));

\echo
\echo *****  Creating view:  "PE_DAY_SKU_STORE_VW"

CREATE or replace VIEW  PE_DAY_SKU_STORE_VW
(
     EM_EVENT_ID,
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     EM_DISP_LOC_ID,
     EM_DISP_LOC_NAME,
     VERSION,
     RANK_NBR,
     RANK_PRIORITY,
     DISP_LOC_CNT,
     PE_PROMO_EVENT_RANK
) AS
SELECT PSSR.EM_EVENT_ID, D.DAY_DT, PSSR.PRODUCT_ID, PSSR.LOCATION_ID, PSSR.EM_DISP_LOC_ID, EDL.EM_DISP_LOC_NAME, EDL."VERSION", PDLR.RANK_NBR, PSSR.RANK_PRIORITY, PSSR.DISP_LOC_CNT, PRK.PE_PROMO_EVENT_RANK FROM ((((((ADMIN.PE_SKU_STORE_RANK PSSR JOIN ADMIN.EM_EVENT EE ON ((PSSR.EM_EVENT_ID = EE.EM_EVENT_ID))) JOIN ADMIN.EM_DISP_LOC EDL ON ((PSSR.EM_DISP_LOC_ID = EDL.EM_DISP_LOC_ID))) JOIN ADMIN.DAYS D ON (((D.DAY_DT >= EE.EVENT_START_DT) AND (D.DAY_DT <= EE.EVENT_END_DT)))) JOIN ADMIN.PE_DISP_LOC_RANK PDLR ON ((EDL.EM_DISP_LOC_NAME = PDLR.EM_DISP_LOC_NAME))) JOIN ADMIN.SITE_PROFILE SP ON ((PSSR.LOCATION_ID = SP.LOCATION_ID))) JOIN ADMIN.PE_PROMO_EVENT_RANK PRK ON (((((PRK.EM_EVENT_ID = PSSR.EM_EVENT_ID) AND (PRK.DAY_DT = D.DAY_DT)) AND (PRK.PRODUCT_ID = PSSR.PRODUCT_ID)) AND (PRK.COUNTRY_CD = SP.COUNTRY_CD)))) WHERE (PSSR.RANK_PRIORITY = 1);

\echo
\echo *****  Creating view:  "PE_EVENT_PLAN_DAY_CRCY_VW"

CREATE or replace VIEW  PE_EVENT_PLAN_DAY_CRCY_VW
(
     PE_PROMO_ID,
     EM_EVENT_ID,
     DAY_DT,
     PRODUCT_ID,
     LOCATION_TYPE_ID,
     COUNTRY_CD,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     PE_PROMO_NAME,
     WEEK_DT,
     EM_DISP_LOC_NAME,
     PE_PROMO_EVENT_RANK,
     SKU_NBR,
     SKU_STATUS_ID,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     EM_DISCOUNT_TYPE_ID,
     EPLAN_SALES_AMT,
     EPLAN_MARGIN_AMT,
     EPLAN_SALES_QTY,
     EXCH_RATE_PCT
) AS
SELECT PP.PE_PROMO_ID, PP.EM_EVENT_ID, E.DAY_DT, E.PRODUCT_ID, E.LOCATION_TYPE_ID, E.COUNTRY_CD, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, PP.PE_PROMO_NAME, E.WEEK_DT, E.EM_DISP_LOC_NAME, PRK.PE_PROMO_EVENT_RANK, E.SKU_NBR, E.SKU_STATUS_ID, E.FISCAL_WK, E.FISCAL_MO, E.FISCAL_YR, 0 AS EM_DISCOUNT_TYPE_ID, E.EPLAN_SALES_AMT, E.EPLAN_MARGIN_AMT, E.EPLAN_SALES_QTY, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE E.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM (((ADMIN.PE_EVENT_PLAN_DAY E JOIN (SELECT DISTINCT PP.PE_PROMO_ID, PP.PE_PROMO_NAME, EE.EM_EVENT_ID, EE.EVENT_START_DT, EE.EVENT_END_DT FROM ((ADMIN.PE_PROMO PP JOIN ADMIN.PE_PROMO_EVENT PPE ON ((PP.PE_PROMO_ID = PPE.PE_PROMO_ID))) JOIN ADMIN.EM_EVENT EE ON ((PPE.PE_EM_EVENT_ID = EE.EM_EVENT_ID)))) PP ON (((E.DAY_DT >= PP.EVENT_START_DT) AND (E.DAY_DT <= PP.EVENT_END_DT)))) JOIN ADMIN.PE_PROMO_EVENT_RANK PRK ON (((((PRK.EM_EVENT_ID = PP.EM_EVENT_ID) AND (PRK.DAY_DT = E.DAY_DT)) AND (PRK.PRODUCT_ID = E.PRODUCT_ID)) AND ((PRK.COUNTRY_CD)::"VARCHAR" = E.COUNTRY_CD)))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SMS_APPOINTMENT_RPT_VW"

CREATE or replace VIEW  SMS_APPOINTMENT_RPT_VW
(
     DATA_SOURCE_CD,
     SMS_APPOINTMENT_ID,
     SMS_BOOKING_NUMBER,
     PETM_POS_INVOICE_ID,
     SMS_ORDER_ID,
     SMS_APPT_STATUS_ID,
     SMS_APPOINTMENT_DT,
     SMS_SERVICE_CATEGORY_ID,
     SMS_CUSTOMER_ID,
     SMS_PET_ID,
     LOCATION_ID,
     APPT_CREATE_TSTMP,
     WALK_IN_IND,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_UPDATE_IND,
     CHECK_IN_TSTMP,
     CHECK_OUT_TSTMP,
     COMPLETE_IND,
     NO_SHOW_IND,
     APPT_CANCEL_TSTMP,
     APPT_CANCEL_IND,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     PAYMENT_TSTMP,
     PAYMENT_AMT,
     SMS_PAYMENT_METHOD_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
(SELECT ('SMS'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, SMS_APPOINTMENT_RPT.SMS_APPOINTMENT_ID, SMS_APPOINTMENT_RPT.SMS_BOOKING_NUMBER, SMS_APPOINTMENT_RPT.PETM_POS_INVOICE_ID, SMS_APPOINTMENT_RPT.SMS_ORDER_ID, SMS_APPOINTMENT_RPT.SMS_APPT_STATUS_ID, SMS_APPOINTMENT_RPT.SMS_APPOINTMENT_DT, SMS_APPOINTMENT_RPT.SMS_SERVICE_CATEGORY_ID, SMS_APPOINTMENT_RPT.SMS_CUSTOMER_ID, SMS_APPOINTMENT_RPT.SMS_PET_ID, SMS_APPOINTMENT_RPT.LOCATION_ID, SMS_APPOINTMENT_RPT.APPT_CREATE_TSTMP, INT4(SMS_APPOINTMENT_RPT.WALK_IN_IND) AS WALK_IN_IND, SMS_APPOINTMENT_RPT.SCHED_APPT_START_TSTMP, SMS_APPOINTMENT_RPT.SCHED_APPT_END_TSTMP, SMS_APPOINTMENT_RPT.APPT_LAST_MODIFY_TSTMP, INT4(SMS_APPOINTMENT_RPT.APPT_UPDATE_IND) AS APPT_UPDATE_IND, SMS_APPOINTMENT_RPT.CHECK_IN_TSTMP, SMS_APPOINTMENT_RPT.CHECK_OUT_TSTMP, INT4(SMS_APPOINTMENT_RPT.COMPLETE_IND) AS COMPLETE_IND, INT4(SMS_APPOINTMENT_RPT.NO_SHOW_IND) AS NO_SHOW_IND, SMS_APPOINTMENT_RPT.APPT_CANCEL_TSTMP, INT4(SMS_APPOINTMENT_RPT.CANCEL_IND) AS APPT_CANCEL_IND, SMS_APPOINTMENT_RPT.APPT_TOTAL_PRICE_AMT, SMS_APPOINTMENT_RPT.APPT_TOTAL_ITEM_QTY, SMS_APPOINTMENT_RPT.PAYMENT_TSTMP, SMS_APPOINTMENT_RPT.PAYMENT_AMT, INT4(SMS_APPOINTMENT_RPT.SMS_PAYMENT_METHOD_ID) AS SMS_PAYMENT_METHOD_ID, SMS_APPOINTMENT_RPT.EXCH_RATE_PCT, "TIMESTAMP"('now(0)'::"VARCHAR") AS LOAD_TSTMP FROM ADMIN.SMS_APPOINTMENT_RPT) UNION ALL (SELECT ('TP'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, TP_INVOICE_RPT.TP_INVOICE_NBR AS SMS_APPOINTMENT_ID, (NULL::"VARCHAR")::VARCHAR(20) AS SMS_BOOKING_NUMBER, TP_INVOICE_RPT.TP_BASE_INVOICE_NBR AS PETM_POS_INVOICE_ID, NULL::INT8 AS SMS_ORDER_ID, CASE WHEN (TP_INVOICE_RPT.INVOICE_STATE_ID = 1) THEN 2 WHEN (TP_INVOICE_RPT.INVOICE_STATE_ID = 2) THEN 4 WHEN (TP_INVOICE_RPT.INVOICE_STATE_ID = 3) THEN 5 WHEN ((TP_INVOICE_RPT.INVOICE_STATE_ID = 4) AND (TP_INVOICE_RPT.CANCEL_REASON_ID = 4)) THEN 7 WHEN (TP_INVOICE_RPT.INVOICE_STATE_ID = 4) THEN 6 ELSE NULL::INT4 END AS SMS_APPT_STATUS_ID, DATE(TP_INVOICE_RPT.APPT_START_TSTMP) AS SMS_APPOINTMENT_DT, TP_INVOICE_RPT.SMS_SERVICE_CATEGORY_ID, TP_INVOICE_RPT.TP_CUSTOMER_NBR AS SMS_CUSTOMER_ID, TP_INVOICE_RPT.TP_PET_NBR AS SMS_PET_ID, TP_INVOICE_RPT.LOCATION_ID, TP_INVOICE_RPT.RESERV_CREATE_DT AS APPT_CREATE_TSTMP, CASE WHEN (TP_INVOICE_RPT.RESERV_CREATE_DT NOTNULL) THEN 1 ELSE 0 END AS WALK_IN_IND, TP_INVOICE_RPT.APPT_START_TSTMP AS SCHED_APPT_START_TSTMP, TP_INVOICE_RPT.APPT_END_TSTMP AS SCHED_APPT_END_TSTMP, TP_INVOICE_RPT.RESERV_LAST_UPDATE_DT AS APPT_LAST_MODIFY_TSTMP, CASE WHEN (TP_INVOICE_RPT.RESERV_LAST_UPDATE_DT NOTNULL) THEN 1 ELSE 0 END AS APPT_UPDATE_IND, TP_INVOICE_RPT.ACTUAL_IN_DT AS CHECK_IN_TSTMP, TP_INVOICE_RPT.ACTUAL_OUT_DT AS CHECK_OUT_TSTMP, CASE WHEN (TP_INVOICE_RPT.INVOICE_STATE_ID = 3) THEN 1 ELSE 0 END AS COMPLETE_IND, CASE WHEN (TP_INVOICE_RPT.CANCEL_REASON_ID = 4) THEN 1 ELSE 0 END AS NO_SHOW_IND, TP_INVOICE_RPT.CANCEL_DT AS APPT_CANCEL_TSTMP, CASE WHEN (TP_INVOICE_RPT.CANCEL_DT ISNULL) THEN 0 ELSE 1 END AS APPT_CANCEL_IND, TP_INVOICE_RPT.TP_EXTENDED_PRICE AS APPT_TOTAL_PRICE_AMT, TP_INVOICE_RPT.TP_ITEM_QTY AS APPT_TOTAL_ITEM_QTY, TP_INVOICE_RPT.PAYMENT_DT AS PAYMENT_TSTMP, TP_INVOICE_RPT.PAYMENT_AMT, 14 AS SMS_PAYMENT_METHOD_ID, TP_INVOICE_RPT.EXCH_RATE_PCT, "TIMESTAMP"('now(0)'::"VARCHAR") AS LOAD_TSTMP FROM ADMIN.TP_INVOICE_RPT);

\echo
\echo *****  Creating view:  "SMS_APPOINTMENT_SERVICE_RPT_VW"

CREATE or replace VIEW  SMS_APPOINTMENT_SERVICE_RPT_VW
(
     DATA_SOURCE_CD,
     SMS_APPOINTMENT_ID,
     SMS_APPT_SERVICE_ID,
     SMS_APPT_STATUS_ID,
     SMS_APPOINTMENT_DT,
     SMS_ROOM_DESC,
     SMS_ROOM_TYPE_DESC,
     PRODUCT_ID,
     UPC_ID,
     EMPLOYEE_ID,
     SMS_CUST_LAST_NAME,
     SMS_PET_ID,
     SMS_PET_NAME,
     SMS_PET_CREATE_TSTMP,
     LOCATION_ID,
     APPT_SVC_CREATE_TSTMP,
     APPT_SVC_LAST_MODIFY_TSTMP,
     APPT_SVC_UPDATE_IND,
     SCHED_SERVICE_START_TSTMP,
     SCHED_SERVICE_END_TSTMP,
     SERVICE_CANCEL_TSTMP,
     SERVICE_CANCEL_IND,
     SERVICE_START_TSTMP,
     SERVICE_END_TSTMP,
     SERVICE_COMPLETE_IND,
     ORIG_UNIT_PRICE_AMT,
     FINAL_UNIT_PRICE_AMT,
     OVERRIDE_REASON_ID,
     OVERRIDE_DT,
     APPT_SERVICE_ITEM_QTY,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
(SELECT ('SMS'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, SAS.SMS_APPOINTMENT_ID, SAS.SMS_APPT_SERVICE_ID, INT4(SAS.SMS_APPT_STATUS_ID) AS SMS_APPT_STATUS_ID, SAS.SMS_APPOINTMENT_DT, SAS.SMS_ROOM_DESC, SAS.SMS_ROOM_TYPE_DESC, SAS.PRODUCT_ID, SAS.UPC_ID, INT8(SAS.EMPLOYEE_ID) AS EMPLOYEE_ID, C.SMS_CUST_LAST_NAME, SAS.SMS_PET_ID, P.SMS_PET_NAME, P.CREATE_TSTMP AS SMS_PET_CREATE_TSTMP, SAS.LOCATION_ID, SAS.APPT_SVC_CREATE_TSTMP, SAS.APPT_SVC_LAST_MODIFY_TSTMP, INT4(SAS.APPT_SVC_UPDATE_IND) AS APPT_SVC_UPDATE_IND, SAS.SCHED_SERVICE_START_TSTMP, SAS.SCHED_SERVICE_END_TSTMP, SAS.SERVICE_CANCEL_TSTMP, INT4(SAS.SERVICE_CANCEL_IND) AS SERVICE_CANCEL_IND, SAS.SERVICE_START_TSTMP, SAS.SERVICE_END_TSTMP, INT4(SAS.SERVICE_COMPLETE_IND) AS SERVICE_COMPLETE_IND, SAS.ORIG_PRICE_AMT AS ORIG_UNIT_PRICE_AMT, SAS.FINAL_PRICE_AMT AS FINAL_UNIT_PRICE_AMT, SAS.OVERRIDE_REASON_ID, NULL::DATE AS OVERRIDE_DT, SAS.APPT_SERVICE_ITEM_QTY, SAS.EXCH_RATE_PCT, "TIMESTAMP"('now(0)'::"VARCHAR") AS LOAD_TSTMP FROM ((ADMIN.SMS_APPOINTMENT_SERVICE_RPT SAS LEFT JOIN ADMIN.SMS_PET P ON ((SAS.SMS_PET_ID = P.SMS_PET_ID))) LEFT JOIN ADMIN.SMS_CUSTOMER C ON ((SAS.SMS_CUSTOMER_ID = C.SMS_CUSTOMER_ID)))) UNION ALL (SELECT ('TP'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, TISR.TP_INVOICE_NBR AS SMS_APPOINTMENT_ID, INT8(TISR.ITEM_ID) AS SMS_APPT_SERVICE_ID, CASE WHEN (TISR.INVOICE_STATE_ID = 1) THEN 2 WHEN (TISR.INVOICE_STATE_ID = 2) THEN 4 WHEN (TISR.INVOICE_STATE_ID = 3) THEN 5 WHEN ((TISR.INVOICE_STATE_ID = 4) AND (TISR.CANCEL_REASON_ID = 4)) THEN 7 WHEN (TISR.INVOICE_STATE_ID = 4) THEN 6 ELSE NULL::INT4 END AS SMS_APPT_STATUS_ID, DATE(TISR.APPT_START_TSTMP) AS SMS_APPOINTMENT_DT, TISR.TP_ROOM_NUMBER AS SMS_ROOM_DESC, TISR.TP_ROOM_TYPE_DESC AS SMS_ROOM_TYPE_DESC, TISR.PRODUCT_ID, TISR.UPC_ID, TISR.TP_EMPLOYEE_ID AS EMPLOYEE_ID, (TISR.CUST_LAST_NAME)::VARCHAR(128) AS SMS_CUST_LAST_NAME, TISR.TP_PET_NBR AS SMS_PET_ID, TISR.PET_NAME AS SMS_PET_NAME, "TIMESTAMP"(TISR.PET_CREATE_DT) AS SMS_PET_CREATE_TSTMP, TISR.LOCATION_ID, TISR.CREATE_DT AS APPT_SVC_CREATE_TSTMP, TISR.RESERV_LAST_UPDATE_DT AS APPT_SVC_LAST_MODIFY_TSTMP, CASE WHEN (TISR.RESERV_LAST_UPDATE_DT NOTNULL) THEN 1 ELSE 0 END AS APPT_SVC_UPDATE_IND, TISR.APPT_START_TSTMP AS SCHED_SERVICE_START_TSTMP, TISR.APPT_END_TSTMP AS SCHED_SERVICE_END_TSTMP, TISR.CANCEL_DT AS SERVICE_CANCEL_TSTMP, CASE WHEN (TISR.CANCEL_DT NOTNULL) THEN 1 ELSE 0 END AS SERVICE_CANCEL_IND, CASE WHEN (TISR.CANCEL_DT ISNULL) THEN TISR.ACTUAL_IN_DT ELSE NULL::"TIMESTAMP" END AS SERVICE_START_TSTMP, CASE WHEN (TISR.CANCEL_DT ISNULL) THEN TISR.ACTUAL_OUT_DT ELSE NULL::"TIMESTAMP" END AS SERVICE_END_TSTMP, CASE WHEN ((TISR.ACTUAL_OUT_DT NOTNULL) AND (TISR.CANCEL_DT ISNULL)) THEN 1 ELSE 0 END AS SERVICE_COMPLETE_IND, TISR.ORIGINAL_ITEM_PRICE AS ORIG_UNIT_PRICE_AMT, TISR.FINAL_ITEM_PRICE AS FINAL_UNIT_PRICE_AMT, TISR.TP_REASON_CODE_ID AS OVERRIDE_REASON_ID, TISR.OVERRIDE_DT, TISR.TP_ITEM_QTY AS APPT_SERVICE_ITEM_QTY, TISR.EXCH_RATE_PCT, "TIMESTAMP"('now(0)'::"VARCHAR") AS LOAD_TSTMP FROM ADMIN.TP_INVOICE_SERVICE_RPT TISR);

\echo
\echo *****  Creating view:  "SMS_APPT_HISTORY_VW"

CREATE or replace VIEW  SMS_APPT_HISTORY_VW
(
     DATA_SOURCE_CD,
     SMS_APPOINTMENT_ID,
     APPT_HISTORY_TSTMP,
     LOCATION_ID,
     SMS_CUSTOMER_ID,
     SMS_PET_ID,
     SMS_HISTORY_ACTION_ID,
     SMS_USER_ID,
     SMS_USER_LOGIN,
     CC_AGENT_NAME,
     ACTION_ORIGIN_IND,
     CC_AGENT_LOGIN_ID
) AS
((SELECT ('SMS'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, H.SMS_APPOINTMENT_ID, H.APPT_HISTORY_TSTMP, H.LOCATION_ID, H.SMS_CUSTOMER_ID, H.SMS_PET_ID, INT4(H.SMS_HISTORY_ACTION_ID) AS SMS_HISTORY_ACTION_ID, U.SMS_USER_ID, U.SMS_USER_LOGIN, CASE WHEN (X.TP_CC_AGENT_NAME NOTNULL) THEN X.TP_CC_AGENT_NAME WHEN (U.SMS_USER_NAME NOTNULL) THEN U.SMS_USER_NAME ELSE NULL::"VARCHAR" END AS CC_AGENT_NAME, CASE WHEN (U.SMS_USER_TYPE_ID = 1) THEN 4 WHEN (U.SMS_USER_TYPE_ID = 2) THEN 0 WHEN (U.SMS_USER_TYPE_ID = 3) THEN 1 WHEN (U.SMS_USER_TYPE_ID = 4) THEN 3 ELSE 0 END AS ACTION_ORIGIN_IND, X.CC_AGENT_LOGIN_ID FROM ((ADMIN.SMS_APPT_HISTORY H LEFT JOIN ADMIN.SMS_USER U ON ((H.SMS_USER_ID = U.SMS_USER_ID))) LEFT JOIN ADMIN.USR_TP_SMS_USER_XREF X ON ((LOWER(U.SMS_USER_LOGIN) = LOWER(X.SMS_USER_LOGIN))))) UNION ALL (SELECT ('SMS'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, A.SMS_APPOINTMENT_ID, H.ORDER_HISTORY_TSTMP AS APPT_HISTORY_TSTMP, H.LOCATION_ID, H.SMS_CUSTOMER_ID, A.SMS_PET_ID, INT4(H.SMS_HISTORY_ACTION_ID) AS SMS_HISTORY_ACTION_ID, U.SMS_USER_ID, U.SMS_USER_LOGIN, CASE WHEN (X.TP_CC_AGENT_NAME NOTNULL) THEN X.TP_CC_AGENT_NAME WHEN (U.SMS_USER_NAME NOTNULL) THEN U.SMS_USER_NAME ELSE NULL::"VARCHAR" END AS CC_AGENT_NAME, CASE WHEN (U.SMS_USER_TYPE_ID = 1) THEN 4 WHEN (U.SMS_USER_TYPE_ID = 2) THEN 0 WHEN (U.SMS_USER_TYPE_ID = 3) THEN 1 WHEN (U.SMS_USER_TYPE_ID = 4) THEN 3 ELSE 0 END AS ACTION_ORIGIN_IND, X.CC_AGENT_LOGIN_ID FROM (((ADMIN.SMS_ORDER_HISTORY H JOIN ADMIN.SMS_APPOINTMENT A ON ((H.SMS_ORDER_ID = A.SMS_ORDER_ID))) LEFT JOIN ADMIN.SMS_USER U ON ((H.SMS_USER_ID = U.SMS_USER_ID))) LEFT JOIN ADMIN.USR_TP_SMS_USER_XREF X ON ((LOWER(U.SMS_USER_LOGIN) = LOWER(X.SMS_USER_LOGIN)))))) UNION (SELECT ('TP'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, H.TP_INVOICE_NBR AS SMS_APPOINTMENT_ID, H.HISTORY_DT AS APPT_HISTORY_TSTMP, H.LOCATION_ID, H.TP_CUSTOMER_NBR AS SMS_CUSTOMER_ID, H.TP_PET_NBR AS SMS_PET_ID, CASE WHEN (UPPER(H.TP_HIST_ACTION) = 'CREATE'::"VARCHAR") THEN 3 WHEN (UPPER(H.TP_HIST_ACTION) = 'CHANGE'::"VARCHAR") THEN 4 WHEN (UPPER(H.TP_HIST_ACTION) = 'ROOM SHUFFLE'::"VARCHAR") THEN 0 WHEN (UPPER(H.TP_HIST_ACTION) = 'CHECK IN'::"VARCHAR") THEN 7 WHEN (UPPER(H.TP_HIST_ACTION) = 'CHECK OUT'::"VARCHAR") THEN 130 WHEN (UPPER(H.TP_HIST_ACTION) = 'DELETE'::"VARCHAR") THEN 17 WHEN (UPPER(H.TP_HIST_ACTION) = 'REVERSE'::"VARCHAR") THEN 0 ELSE 0 END AS SMS_HISTORY_ACTION_ID, NULL::INT8 AS SMS_USER_ID, (NULL::"VARCHAR")::VARCHAR(255) AS SMS_USER_LOGIN, (X.TP_CC_AGENT_NAME)::VARCHAR(257) AS CC_AGENT_NAME, INT4(H.RESERVATION_ORIGIN_IND) AS ACTION_ORIGIN_IND, X.CC_AGENT_LOGIN_ID FROM (ADMIN.TP_HISTORY H LEFT JOIN ADMIN.USR_TP_SMS_USER_XREF X ON ((UPPER(H.USER_NAME) = X.TP_CC_LOGIN))) WHERE ((((H.TP_INVOICE_NBR NOTNULL) AND (H.TP_INVOICE_NBR > 0)) AND (H.HISTORY_DT = H.CHANGE_DT)) AND (H.HISTORY_DT > '2013-01-01 00:00:00'::"TIMESTAMP")));

\echo
\echo *****  Creating view:  "SMS_PETSHOTEL_ACCRUAL_VW"

CREATE or replace VIEW  SMS_PETSHOTEL_ACCRUAL_VW
(
     DATA_SOURCE_CD,
     DAY_DT,
     LOCATION_ID,
     SMS_APPOINTMENT_ID,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     STORE_NBR,
     SCHED_APPT_START_DT,
     SCHED_APPT_END_DT,
     LENGTH_OF_STAY,
     PETCOUNT,
     APPT_TOTAL_PRICE,
     ACCRUAL_AMT,
     EXCH_RATE_PCT
) AS
(SELECT ('SMS'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, SMS_PETSHOTEL_ACCRUAL.DAY_DT, SMS_PETSHOTEL_ACCRUAL.LOCATION_ID, SMS_PETSHOTEL_ACCRUAL.SMS_APPOINTMENT_ID, SMS_PETSHOTEL_ACCRUAL.WEEK_DT, SMS_PETSHOTEL_ACCRUAL.FISCAL_WK, SMS_PETSHOTEL_ACCRUAL.FISCAL_MO, SMS_PETSHOTEL_ACCRUAL.FISCAL_YR, SMS_PETSHOTEL_ACCRUAL.STORE_NBR, SMS_PETSHOTEL_ACCRUAL.SCHED_APPT_START_DT, SMS_PETSHOTEL_ACCRUAL.SCHED_APPT_END_DT, SMS_PETSHOTEL_ACCRUAL.LENGTH_OF_STAY, SMS_PETSHOTEL_ACCRUAL.PETCOUNT, SMS_PETSHOTEL_ACCRUAL.APPT_TOTAL_PRICE, SMS_PETSHOTEL_ACCRUAL.ACCRUAL_AMT, SMS_PETSHOTEL_ACCRUAL.EXCH_RATE_PCT FROM ADMIN.SMS_PETSHOTEL_ACCRUAL) UNION ALL (SELECT ('TP'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, TP_PETSHOTEL_ACCRUAL.DAY_DT, TP_PETSHOTEL_ACCRUAL.LOCATION_ID, TP_PETSHOTEL_ACCRUAL.TP_INVOICE_NBR AS SMS_APPOINTMENT_ID, TP_PETSHOTEL_ACCRUAL.WEEK_DT, TP_PETSHOTEL_ACCRUAL.FISCAL_WK, TP_PETSHOTEL_ACCRUAL.FISCAL_MO, TP_PETSHOTEL_ACCRUAL.FISCAL_YR, TP_PETSHOTEL_ACCRUAL.STORE_NBR, TP_PETSHOTEL_ACCRUAL.SCHED_APPT_START_DT, TP_PETSHOTEL_ACCRUAL.SCHED_APPT_END_DT, TP_PETSHOTEL_ACCRUAL.LENGTH_OF_STAY, TP_PETSHOTEL_ACCRUAL.PETCOUNT, TP_PETSHOTEL_ACCRUAL.APPT_TOTAL_PRICE, TP_PETSHOTEL_ACCRUAL.ACCRUAL_AMT, TP_PETSHOTEL_ACCRUAL.EXCH_RATE_PCT FROM ADMIN.TP_PETSHOTEL_ACCRUAL);

\echo
\echo *****  Creating view:  "SCM_PO_SHIPMENT_VW"

CREATE or replace VIEW  SCM_PO_SHIPMENT_VW
(
     SCM_PO_GID,
     SCM_SHIPMENT_GID,
     STOP_NBR,
     SCM_SOURCE_TYPE_ID,
     PO_NBR,
     SHIPMENT_ID,
     DO_NBR,
     IB_OB_FLAG,
     BOL_ID,
     LOAD_TSTMP,
     UPDATE_TSTMP
) AS
(SELECT SCM_PO_SHIPMENT.SCM_PO_GID, SCM_PO_SHIPMENT.SCM_SHIPMENT_GID, SCM_PO_SHIPMENT.STOP_NBR, SCM_PO_SHIPMENT.SCM_SOURCE_TYPE_ID, SCM_PO_SHIPMENT.PO_NBR, SCM_PO_SHIPMENT.SHIPMENT_ID, SCM_PO_SHIPMENT.DO_NBR, SCM_PO_SHIPMENT.IB_OB_FLAG, SCM_PO_SHIPMENT.BOL_ID, SCM_PO_SHIPMENT.LOAD_TSTMP, SCM_PO_SHIPMENT.UPDATE_TSTMP FROM ADMIN.SCM_PO_SHIPMENT) UNION (SELECT PO.SCM_PO_GID, '0'::INT8 AS SCM_SHIPMENT_GID, ('0'::NUMERIC)::NUMERIC(2,0) AS STOP_NBR, '3'::INT8 AS SCM_SOURCE_TYPE_ID, PO.PO_NBR, ('0'::"VARCHAR")::VARCHAR(50) AS SHIPMENT_ID, ('0'::"VARCHAR")::VARCHAR(50) AS DO_NBR, ('I'::"VARCHAR")::VARCHAR(1) AS IB_OB_FLAG, '0'::INT8 AS BOL_ID, PO.UPDATE_TSTMP AS LOAD_TSTMP, PO.LOAD_TSTMP AS UPDATE_TSTMP FROM (ADMIN.SCM_PO PO LEFT JOIN ADMIN.SCM_PO_SHIPMENT PO_SHIP ON (((PO_SHIP.SCM_PO_GID = PO.SCM_PO_GID) AND (PO.SCM_SOURCE_TYPE_ID = PO_SHIP.SCM_SOURCE_TYPE_ID)))) WHERE (PO_SHIP.SCM_PO_GID ISNULL));

\echo
\echo *****  Creating view:  "STORE_THRESHOLD_VW"

CREATE or replace VIEW  STORE_THRESHOLD_VW
(
     LOCATION_ID,
     DAY_DT,
     THRESHOLD_NM,
     HIGH_VALUE,
     LOW_VALUE,
     HIGH_SCORE,
     MED_SCORE,
     LOW_SCORE,
     HIGH_OPERATOR,
     LOW_OPERATOR,
     HIGH_EXPRESSION,
     MED_EXPRESSION,
     LOW_EXPRESSION
) AS
SELECT S.LOCATION_ID, D.DAY_DT, T.THRESHOLD_NM, T.HIGH_VALUE, T.LOW_VALUE, T.HIGH_SCORE, T.MED_SCORE, T.LOW_SCORE, T.HIGH_OPERATOR, T.LOW_OPERATOR, T.HIGH_EXPRESSION, T.MED_EXPRESSION, T.LOW_EXPRESSION FROM ((ADMIN.USR_STORE_THRESHOLD T JOIN ADMIN.SITE_PROFILE S ON ((((CASE WHEN (T.COMPANY_ID NOTNULL) THEN T.COMPANY_ID WHEN (S.COMPANY_ID NOTNULL) THEN S.COMPANY_ID ELSE NULL::INT4 END = S.COMPANY_ID) AND (CASE WHEN (T.COUNTRY_CD NOTNULL) THEN T.COUNTRY_CD WHEN (S.COUNTRY_CD NOTNULL) THEN S.COUNTRY_CD ELSE NULL::BPCHAR END = S.COUNTRY_CD)) AND (CASE WHEN (T.LOCATION_TYPE_ID NOTNULL) THEN T.LOCATION_TYPE_ID WHEN (S.LOCATION_TYPE_ID NOTNULL) THEN S.LOCATION_TYPE_ID ELSE NULL::INT1 END = S.LOCATION_TYPE_ID)))) JOIN ADMIN.DAYS D ON (((((D.DAY_DT >= "TIMESTAMP"(T.REC_EFF_DT)) AND (D.DAY_DT <= "TIMESTAMP"(T.REC_END_DT))) AND ((D.DAY_DT >= S.OPEN_DT) AND (D.DAY_DT <= S.CLOSE_DT))) AND (S.OPEN_DT <> S.ADD_DT))));

\echo
\echo *****  Creating view:  "SALES_TRANS_SKU_CUST_TYLY_CRCY_VW"

CREATE or replace VIEW  SALES_TRANS_SKU_CUST_TYLY_CRCY_VW
(
     DAY_DT,
     SALES_INSTANCE_ID_DIST_KEY,
     PRODUCT_ID,
     SALES_INSTANCE_ID,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     CUSTOMER_EID,
     CUSTOMER_GID,
     LOYALTY_NBR,
     LUID,
     LOYALTY_REDEMPTION_ID,
     LOAD_TSTMP,
     SALES_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     COMP_FLAG,
     SALES_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     TRANS_TSTMP,
     CUST_TRANS_ID,
     SPECIAL_SALES_FLAG,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     NET_SALES_AMT,
     NET_SALES_COST,
     NET_SALES_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     NET_MARGIN_AMT,
     EXCH_RATE_PCT,
     UPDATE_TSTMP
) AS
SELECT DATE(DTL.DAY_DT) AS DAY_DT, U.SALES_INSTANCE_ID_DIST_KEY, U.PRODUCT_ID, U.SALES_INSTANCE_ID, DTL.TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, U.CUSTOMER_EID, U.CUSTOMER_GID, U.LOYALTY_NBR, U.LUID, U.LOYALTY_REDEMPTION_ID, U.LOAD_TSTMP, U.DAY_DT AS SALES_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, U.LOCATION_ID, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, U.SALES_TYPE_ID, U.VOID_TYPE_CD, U.TXN_WAS_POST_VOIDED_FLAG, U.ORDER_NBR, U.ORDER_SEQ_NBR, U.ORDER_CHANNEL, U.ORDER_ASSIST_LOCATION_ID, U.TRANS_TSTMP, U.CUST_TRANS_ID, U.SPECIAL_SALES_FLAG, U.SALES_AMT, U.SALES_COST, U.SALES_QTY, U.SPECIAL_SALES_AMT, U.SPECIAL_SALES_QTY, U.RETURN_AMT, U.RETURN_COST, U.RETURN_QTY, U.SPECIAL_RETURN_AMT, U.SPECIAL_RETURN_QTY, U.SPECIAL_SRVC_AMT, U.CLEARANCE_AMT, U.CLEARANCE_QTY, U.CLEARANCE_RETURN_AMT, U.CLEARANCE_RETURN_QTY, U.DISCOUNT_AMT, U.DISCOUNT_QTY, U.DISCOUNT_RETURN_AMT, U.DISCOUNT_RETURN_QTY, U.POS_COUPON_AMT, U.POS_COUPON_QTY, U.POS_COUPON_ALLOC_AMT, U.POS_COUPON_ALLOC_QTY, U.NET_SALES_AMT, U.NET_SALES_COST, U.NET_SALES_QTY, U.MA_SALES_AMT, U.MA_SALES_QTY, U.MA_TRANS_AMT, U.MA_TRANS_COST, U.MA_TRANS_QTY, U.NET_MARGIN_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE U.EXCH_RATE_PCT END AS EXCH_RATE_PCT, U.UPDATE_TSTMP FROM ((((ADMIN.SALES_TRANS_SKU U JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(U.DAY_DT) = DTL.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((U.LOCATION_ID = SP.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SALES_TRANS_SKU_TYLY_VW"

CREATE or replace VIEW  SALES_TRANS_SKU_TYLY_VW
(
     DAY_DT,
     SALES_INSTANCE_ID_DIST_KEY,
     PRODUCT_ID,
     SALES_INSTANCE_ID,
     TY_LY_FLAG,
     CUSTOMER_EID,
     CUSTOMER_GID,
     LOYALTY_NBR,
     LUID,
     LOYALTY_REDEMPTION_ID,
     SALES_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     COMP_FLAG,
     SALES_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     TRANS_TSTMP,
     CUST_TRANS_ID,
     SPECIAL_SALES_FLAG,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     NET_SALES_AMT,
     NET_SALES_COST,
     NET_SALES_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     NET_MARGIN_AMT,
     EXCH_RATE_PCT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT DATE(DTL.DAY_DT) AS DAY_DT, U.SALES_INSTANCE_ID_DIST_KEY, U.PRODUCT_ID, U.SALES_INSTANCE_ID, DTL.TY_LY_FLAG, U.CUSTOMER_EID, U.CUSTOMER_GID, U.LOYALTY_NBR, U.LUID, U.LOYALTY_REDEMPTION_ID, U.DAY_DT AS SALES_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, U.LOCATION_ID, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, U.SALES_TYPE_ID, U.VOID_TYPE_CD, U.TXN_WAS_POST_VOIDED_FLAG, U.ORDER_NBR, U.ORDER_SEQ_NBR, U.ORDER_CHANNEL, U.ORDER_ASSIST_LOCATION_ID, U.TRANS_TSTMP, U.CUST_TRANS_ID, U.SPECIAL_SALES_FLAG, U.SALES_AMT, U.SALES_COST, U.SALES_QTY, U.SPECIAL_SALES_AMT, U.SPECIAL_SALES_QTY, U.RETURN_AMT, U.RETURN_COST, U.RETURN_QTY, U.SPECIAL_RETURN_AMT, U.SPECIAL_RETURN_QTY, U.SPECIAL_SRVC_AMT, U.CLEARANCE_AMT, U.CLEARANCE_QTY, U.CLEARANCE_RETURN_AMT, U.CLEARANCE_RETURN_QTY, U.DISCOUNT_AMT, U.DISCOUNT_QTY, U.DISCOUNT_RETURN_AMT, U.DISCOUNT_RETURN_QTY, U.POS_COUPON_AMT, U.POS_COUPON_QTY, U.POS_COUPON_ALLOC_AMT, U.POS_COUPON_ALLOC_QTY, U.NET_SALES_AMT, U.NET_SALES_COST, U.NET_SALES_QTY, U.MA_SALES_AMT, U.MA_SALES_QTY, U.MA_TRANS_AMT, U.MA_TRANS_COST, U.MA_TRANS_QTY, U.NET_MARGIN_AMT, U.EXCH_RATE_PCT, U.UPDATE_TSTMP, U.LOAD_TSTMP FROM (((ADMIN.SALES_TRANS_SKU U JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(U.DAY_DT) = DTL.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((U.LOCATION_ID = SP.LOCATION_ID)));

\echo
\echo *****  Creating view:  "CUST_BRAND_MTH_VW"

CREATE or replace VIEW  CUST_BRAND_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     BRAND_NAME,
     BRAND_CD,
     BRAND_CLASSIFICATION_ID,
     BRAND_CLASSIFICATION_NAME,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.BRAND_NAME, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID, C.BRAND_CLASSIFICATION_NAME, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.BRAND_NAME, SKU.BRAND_CD, SKU.BRAND_CLASSIFICATION_ID, SKU.BRAND_CLASSIFICATION_NAME FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.BRAND_NAME, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID, C.BRAND_CLASSIFICATION_NAME, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_BUYER_MTH_VW"

CREATE or replace VIEW  CUST_BUYER_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     BUYER_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.BUYER_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.CATEGORY_BUYER_ID AS BUYER_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.BUYER_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_CATEGORY_MTH_VW"

CREATE or replace VIEW  CUST_CATEGORY_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     SAP_CATEGORY_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_CATEGORY_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.SAP_CATEGORY_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_CATEGORY_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_CLASS_MTH_VW"

CREATE or replace VIEW  CUST_CLASS_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     SAP_CLASS_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_CLASS_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.SAP_CLASS_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_CLASS_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_DEPT_MTH_VW"

CREATE or replace VIEW  CUST_DEPT_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     SAP_DEPT_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_DEPT_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.SAP_DEPT_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_DEPT_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_DIRECTOR_MTH_VW"

CREATE or replace VIEW  CUST_DIRECTOR_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     DIRECTOR_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.DIRECTOR_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.DIRECTOR_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.DIRECTOR_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_DIVISION_MTH_VW"

CREATE or replace VIEW  CUST_DIVISION_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     SAP_DIVISION_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_DIVISION_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.SAP_DIVISION_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_DIVISION_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_MTH_VW"

CREATE or replace VIEW  CUST_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND FROM ADMIN.CUST_MTH_RAW CM) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_SVP_MTH_VW"

CREATE or replace VIEW  CUST_SVP_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     SVP_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SVP_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.SVP_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SVP_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "CUST_VP_MTH_VW"

CREATE or replace VIEW  CUST_VP_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     VP_ID,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.VP_ID, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.VP_ID FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.VP_ID, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "PS2_EARNED_LABOR_VW"

CREATE or replace VIEW  PS2_EARNED_LABOR_VW
(
     WEEK_DT,
     LOCATION_ID,
     WFA_BUSN_AREA_ID,
     WFA_DEPT_ID,
     WFA_TASK_ID,
     "TYPE",
     SOURCE,
     EARNED_OT_HRS,
     EARNED_LOC_OT_AMT,
     FCST_HRS,
     EARNED_TTL_HRS,
     EARNED_LOC_TTL_AMT,
     ACTUAL_EXCH_RATE,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     STORE_NBR,
     WFA_BUSN_AREA_DESC,
     WFA_DEPT_DESC,
     WFA_TASK_DESC,
     LOAD_DT
) AS
SELECT CASE WHEN (PEL.WEEK_DT ISNULL) THEN FCST.WEEK_DT ELSE PEL.WEEK_DT END AS WEEK_DT, CASE WHEN (PEL.LOCATION_ID ISNULL) THEN FCST.LOCATION_ID ELSE PEL.LOCATION_ID END AS LOCATION_ID, CASE WHEN (PEL.WFA_BUSN_AREA_ID ISNULL) THEN FCST.WFA_BUSN_AREA_ID ELSE PEL.WFA_BUSN_AREA_ID END AS WFA_BUSN_AREA_ID, CASE WHEN (PEL.WFA_DEPT_ID ISNULL) THEN FCST.WFA_DEPT_ID ELSE PEL.WFA_DEPT_ID END AS WFA_DEPT_ID, CASE WHEN (PEL.WFA_TASK_ID ISNULL) THEN FCST.WFA_TASK_ID ELSE PEL.WFA_TASK_ID END AS WFA_TASK_ID, CASE WHEN (PEL."TYPE" ISNULL) THEN "VARCHAR"(FCST.WFA_BUSN_AREA_DESC) ELSE PEL."TYPE" END AS "TYPE", PEL.SOURCE, CASE WHEN (PEL.EARNED_OT_HRS ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_OT_HRS END AS EARNED_OT_HRS, CASE WHEN (PEL.EARNED_LOC_OT_AMT ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_LOC_OT_AMT END AS EARNED_LOC_OT_AMT, CASE WHEN ((FCST.FCST_HRS ISNULL) AND (FCHTL.FCST_HRS ISNULL)) THEN '0'::NUMERIC WHEN (FCHTL.FCST_HRS NOTNULL) THEN FCHTL.FCST_HRS ELSE FCST.FCST_HRS END AS FCST_HRS, CASE WHEN (PEL.EARNED_TTL_HRS ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_TTL_HRS END AS EARNED_TTL_HRS, CASE WHEN (PEL.EARNED_LOC_TTL_AMT ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_LOC_TTL_AMT END AS EARNED_LOC_TTL_AMT, CASE WHEN (PEL.ACTUAL_EXCH_RATE ISNULL) THEN PS2.ACTUAL_EXCH_RATE ELSE PEL.ACTUAL_EXCH_RATE END AS ACTUAL_EXCH_RATE, CASE WHEN (PEL.FISCAL_WK ISNULL) THEN FCST.FISCAL_WK ELSE PEL.FISCAL_WK END AS FISCAL_WK, CASE WHEN (PEL.FISCAL_MO ISNULL) THEN FCST.FISCAL_MO ELSE PEL.FISCAL_MO END AS FISCAL_MO, CASE WHEN (PEL.FISCAL_YR ISNULL) THEN FCST.FISCAL_YR ELSE PEL.FISCAL_YR END AS FISCAL_YR, CASE WHEN (PEL.STORE_NBR ISNULL) THEN FCST.STORE_NBR ELSE PEL.STORE_NBR END AS STORE_NBR, CASE WHEN (PEL.WFA_BUSN_AREA_DESC ISNULL) THEN "VARCHAR"(FCST.WFA_BUSN_AREA_DESC) ELSE PEL.WFA_BUSN_AREA_DESC END AS WFA_BUSN_AREA_DESC, CASE WHEN (PEL.WFA_DEPT_DESC ISNULL) THEN "VARCHAR"(FCST.WFA_DEPT_DESC) ELSE PEL.WFA_DEPT_DESC END AS WFA_DEPT_DESC, CASE WHEN (PEL.WFA_TASK_DESC ISNULL) THEN "VARCHAR"(FCST.WFA_TASK_DESC) ELSE PEL.WFA_TASK_DESC END AS WFA_TASK_DESC, CASE WHEN (PEL.LOAD_DT ISNULL) THEN FCST.LOAD_DT ELSE PEL.LOAD_DT END AS LOAD_DT FROM (((((((SELECT PS2_EARNED_LABOR_PSOFT.WEEK_DT, PS2_EARNED_LABOR_PSOFT.LOCATION_ID, PS2_EARNED_LABOR_PSOFT.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR_PSOFT.WFA_DEPT_ID, PS2_EARNED_LABOR_PSOFT.WFA_TASK_ID, PS2_EARNED_LABOR_PSOFT."TYPE", PS2_EARNED_LABOR_PSOFT.SOURCE, (PS2_EARNED_LABOR_PSOFT.EARNED_OT_HRS)::NUMERIC(38,2) AS EARNED_OT_HRS, (PS2_EARNED_LABOR_PSOFT.EARNED_LOC_OT_AMT)::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR_PSOFT.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR_PSOFT.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR_PSOFT.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR_PSOFT.FISCAL_WK, PS2_EARNED_LABOR_PSOFT.FISCAL_MO, PS2_EARNED_LABOR_PSOFT.FISCAL_YR, PS2_EARNED_LABOR_PSOFT.STORE_NBR, PS2_EARNED_LABOR_PSOFT.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR_PSOFT.WFA_DEPT_DESC, PS2_EARNED_LABOR_PSOFT.WFA_TASK_DESC, PS2_EARNED_LABOR_PSOFT.LOAD_DT FROM ADMIN.PS2_EARNED_LABOR_PSOFT) UNION ALL (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.SOURCE, (PS2_EARNED_LABOR.EARNED_OT_HRS)::NUMERIC(38,2) AS EARNED_OT_HRS, (PS2_EARNED_LABOR.EARNED_LOC_OT_AMT)::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR.FISCAL_WK, PS2_EARNED_LABOR.FISCAL_MO, PS2_EARNED_LABOR.FISCAL_YR, PS2_EARNED_LABOR.STORE_NBR, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.LOAD_DT FROM ADMIN.PS2_EARNED_LABOR WHERE (PS2_EARNED_LABOR.WEEK_DT < '2012-12-30 00:00:00'::"TIMESTAMP"))) UNION ALL (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.SOURCE, (PS2_EARNED_LABOR.EARNED_OT_HRS)::NUMERIC(38,2) AS EARNED_OT_HRS, (PS2_EARNED_LABOR.EARNED_LOC_OT_AMT)::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR.FISCAL_WK, PS2_EARNED_LABOR.FISCAL_MO, PS2_EARNED_LABOR.FISCAL_YR, PS2_EARNED_LABOR.STORE_NBR, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.LOAD_DT FROM (ADMIN.PS2_EARNED_LABOR JOIN ADMIN.SITE_PROFILE_RPT ON ((PS2_EARNED_LABOR.LOCATION_ID = SITE_PROFILE_RPT.LOCATION_ID))) WHERE ((PS2_EARNED_LABOR.WEEK_DT >= '2012-12-30 00:00:00'::"TIMESTAMP") AND (((SITE_PROFILE_RPT.HOTEL_FLAG = 1) AND (PS2_EARNED_LABOR."TYPE" NOT IN (('PetsHotel'::"VARCHAR")::VARCHAR(50), ('Day Camp'::"VARCHAR")::VARCHAR(50)))) OR ((SITE_PROFILE_RPT.HOTEL_FLAG = 0) AND (PS2_EARNED_LABOR.WFA_BUSN_AREA_ID <> 4)))))) UNION ALL (SELECT HTL.WEEK_DT, HTL.LOCATION_ID, HTL.WFA_BUSN_AREA_ID, MAX(HTL.WFA_DEPT_ID) AS WFA_DEPT_ID, MAX(HTL.WFA_TASK_ID) AS WFA_TASK_ID, (MAX(HTL."TYPE"))::VARCHAR(50) AS "TYPE", (MAX(HTL.SOURCE))::CHAR(1) AS SOURCE, (SUM(HTL.EARNED_OT_HRS))::NUMERIC(38,2) AS EARNED_OT_HRS, (SUM(HTL.EARNED_LOC_OT_AMT))::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (SUM(HTL.EARNED_TTL_HRS))::NUMERIC(38,2) AS EARNED_TTL_HRS, (SUM(HTL.EARNED_LOC_TTL_AMT))::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, (MAX(HTL.ACTUAL_EXCH_RATE))::NUMERIC(9,6) AS ACTUAL_EXCH_RATE, MAX(HTL.FISCAL_WK) AS FISCAL_WK, MAX(HTL.FISCAL_MO) AS FISCAL_MO, MAX(HTL.FISCAL_YR) AS FISCAL_YR, MAX(HTL.STORE_NBR) AS STORE_NBR, (MAX(HTL.WFA_BUSN_AREA_DESC))::VARCHAR(50) AS WFA_BUSN_AREA_DESC, (MAX(HTL.WFA_DEPT_DESC))::VARCHAR(50) AS WFA_DEPT_DESC, (MAX(HTL.WFA_TASK_DESC))::VARCHAR(50) AS WFA_TASK_DESC, MAX(HTL.LOAD_DT) AS LOAD_DT FROM ((SELECT "TIMESTAMP"(HTL.WEEK_DT) AS WEEK_DT, HTL.LOCATION_ID, P.WFA_BUSN_AREA_ID, P.WFA_DEPT_ID, P.WFA_TASK_ID, P."TYPE", P.SOURCE, ('0'::NUMERIC)::NUMERIC(9,2) AS EARNED_OT_HRS, ('0'::NUMERIC)::NUMERIC(9,2) AS EARNED_LOC_OT_AMT, HTL.TOTAL_EARNED_HRS AS EARNED_TTL_HRS, HTL.TOTAL_EARNED_AMT AS EARNED_LOC_TTL_AMT, P.ACTUAL_EXCH_RATE, HTL.FISCAL_WK, HTL.FISCAL_MO, HTL.FISCAL_YR, HTL.STORE_NBR, P.WFA_BUSN_AREA_DESC, P.WFA_DEPT_DESC, P.WFA_TASK_DESC, HTL.LOAD_TSTMP AS LOAD_DT FROM (((SELECT PS2_HTL_EARNED.WEEK_DT, PS2_HTL_EARNED.LOCATION_ID, SUM(PS2_HTL_EARNED.TOTAL_EARNED_HRS) AS TOTAL_EARNED_HRS, SUM(PS2_HTL_EARNED.TOTAL_EARNED_AMT) AS TOTAL_EARNED_AMT, PS2_HTL_EARNED.FISCAL_WK, PS2_HTL_EARNED.FISCAL_MO, PS2_HTL_EARNED.FISCAL_YR, PS2_HTL_EARNED.STORE_NBR, MAX(PS2_HTL_EARNED.LOAD_TSTMP) AS LOAD_TSTMP FROM ADMIN.PS2_HTL_EARNED GROUP BY PS2_HTL_EARNED.WEEK_DT, PS2_HTL_EARNED.LOCATION_ID, PS2_HTL_EARNED.FISCAL_WK, PS2_HTL_EARNED.FISCAL_MO, PS2_HTL_EARNED.FISCAL_YR, PS2_HTL_EARNED.STORE_NBR) HTL JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SPR.LOCATION_ID = HTL.LOCATION_ID))) JOIN (SELECT P.WEEK_DT, P.LOCATION_ID, P.WFA_DEPT_ID, P.WFA_TASK_ID, P.SOURCE, P."TYPE", P.WFA_BUSN_AREA_ID, P.WFA_BUSN_AREA_DESC, P.WFA_DEPT_DESC, P.WFA_TASK_DESC, P.ACTUAL_EXCH_RATE, ROW_NUMBER() OVER (PARTITION BY P.WEEK_DT, P.LOCATION_ID  ORDER BY P.ROW_CNT DESC ) AS RN FROM (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR.SOURCE, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, SUM(1) AS ROW_CNT FROM ADMIN.PS2_EARNED_LABOR WHERE (PS2_EARNED_LABOR.WFA_BUSN_AREA_ID = 4::INT2) GROUP BY PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR.SOURCE, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE) P) P ON ((((("TIMESTAMP"(HTL.WEEK_DT) = P.WEEK_DT) AND (HTL.LOCATION_ID = P.LOCATION_ID)) AND (P.RN = 1)) AND (SPR.HOTEL_FLAG = 1)))) WHERE (HTL.WEEK_DT >= '2012-12-30'::DATE)) UNION ALL (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.SOURCE, PS2_EARNED_LABOR.EARNED_OT_HRS, PS2_EARNED_LABOR.EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR.FISCAL_WK, PS2_EARNED_LABOR.FISCAL_MO, PS2_EARNED_LABOR.FISCAL_YR, PS2_EARNED_LABOR.STORE_NBR, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.LOAD_DT FROM (ADMIN.PS2_EARNED_LABOR JOIN ADMIN.SITE_PROFILE_RPT ON ((PS2_EARNED_LABOR.LOCATION_ID = SITE_PROFILE_RPT.LOCATION_ID))) WHERE ((PS2_EARNED_LABOR.WEEK_DT >= '2012-12-30 00:00:00'::"TIMESTAMP") AND ((SITE_PROFILE_RPT.HOTEL_FLAG = 0) AND (PS2_EARNED_LABOR.WFA_BUSN_AREA_ID = 4))))) HTL GROUP BY HTL.WEEK_DT, HTL.LOCATION_ID, HTL.WFA_BUSN_AREA_ID)) PEL FULL JOIN (SELECT WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID, WFST.WFA_DEPT_ID, WFST.WFA_TASK_ID, MAX(WFST.WFA_BUSN_AREA_DESC) AS WFA_BUSN_AREA_DESC, MAX(WFST.WFA_DEPT_DESC) AS WFA_DEPT_DESC, MAX(WFST.WFA_TASK_DESC) AS WFA_TASK_DESC, SUM(WFST.FCST_HRS) AS FCST_HRS, MAX(SP.STORE_NBR) AS STORE_NBR, MAX(DA.FISCAL_WK) AS FISCAL_WK, MAX(DA.FISCAL_MO) AS FISCAL_MO, MAX(DA.FISCAL_YR) AS FISCAL_YR, MAX(WFST.LOAD_DT) AS LOAD_DT FROM (((ADMIN.WFA_FCST_SLS_TASK WFST LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.LOCATION_ID = WFST.LOCATION_ID))) LEFT JOIN (SELECT DISTINCT DAYS.WEEK_DT, DAYS.FISCAL_WK, DAYS.FISCAL_MO, DAYS.FISCAL_YR FROM ADMIN.DAYS) DA ON ((DA.WEEK_DT = WFST.WEEK_DT))) CROSS JOIN (SELECT MAX(PS2_EARNED_LABOR.WEEK_DT) AS MAX_DATE FROM ADMIN.PS2_EARNED_LABOR) MXDT) WHERE ((((WFST.FCST_HRS > '0'::NUMERIC) AND (WFST.WFA_BUSN_AREA_ID <> 4)) AND (WFST.WEEK_DT > '2012-12-30 00:00:00'::"TIMESTAMP")) AND (WFST.WEEK_DT <= MXDT.MAX_DATE)) GROUP BY WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID, WFST.WFA_DEPT_ID, WFST.WFA_TASK_ID) FCST ON ((((((PEL.WEEK_DT = FCST.WEEK_DT) AND (PEL.LOCATION_ID = FCST.LOCATION_ID)) AND (PEL.WFA_BUSN_AREA_ID = FCST.WFA_BUSN_AREA_ID)) AND (PEL.WFA_DEPT_ID = FCST.WFA_DEPT_ID)) AND (PEL.WFA_TASK_ID = FCST.WFA_TASK_ID)))) LEFT JOIN (SELECT WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID, MAX(WFST.WFA_BUSN_AREA_DESC) AS WFA_BUSN_AREA_DESC, SUM(WFST.FCST_HRS) AS FCST_HRS, MAX(SP.STORE_NBR) AS STORE_NBR, MAX(DA.FISCAL_WK) AS FISCAL_WK, MAX(DA.FISCAL_MO) AS FISCAL_MO, MAX(DA.FISCAL_YR) AS FISCAL_YR, MAX(WFST.LOAD_DT) AS LOAD_DT FROM (((ADMIN.WFA_FCST_SLS_TASK WFST LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.LOCATION_ID = WFST.LOCATION_ID))) LEFT JOIN (SELECT DISTINCT DAYS.WEEK_DT, DAYS.FISCAL_WK, DAYS.FISCAL_MO, DAYS.FISCAL_YR FROM ADMIN.DAYS) DA ON ((DA.WEEK_DT = WFST.WEEK_DT))) CROSS JOIN (SELECT MAX(PS2_EARNED_LABOR.WEEK_DT) AS MAX_DATE FROM ADMIN.PS2_EARNED_LABOR) MXDT) WHERE ((((WFST.FCST_HRS > '0'::NUMERIC) AND (WFST.WFA_BUSN_AREA_ID = 4)) AND (WFST.WEEK_DT > '2012-12-30 00:00:00'::"TIMESTAMP")) AND (WFST.WEEK_DT <= MXDT.MAX_DATE)) GROUP BY WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID) FCHTL ON ((((PEL.WEEK_DT = FCHTL.WEEK_DT) AND (PEL.LOCATION_ID = FCHTL.LOCATION_ID)) AND (PEL.WFA_BUSN_AREA_ID = FCHTL.WFA_BUSN_AREA_ID)))) LEFT JOIN (SELECT PS2.WEEK_DT, PS2.LOCATION_ID, MAX(PS2.ACTUAL_EXCH_RATE) AS ACTUAL_EXCH_RATE FROM ADMIN.PS2_EARNED_LABOR PS2 GROUP BY PS2.WEEK_DT, PS2.LOCATION_ID) PS2 ON (((PEL.WEEK_DT = PS2.WEEK_DT) AND (PEL.LOCATION_ID = PS2.LOCATION_ID))));

\echo
\echo *****  Creating view:  "CUST_DEPT_BRAND_MTH_VW"

CREATE or replace VIEW  CUST_DEPT_BRAND_MTH_VW
(
     CUSTOMER_EID,
     FISCAL_MO,
     TY_LY_FLAG,
     SAP_DEPT_ID,
     BRAND_NAME,
     BRAND_CD,
     BRAND_CLASSIFICATION_ID,
     BRAND_CLASSIFICATION_NAME,
     STORE_GROUP_ID,
     M1_CUST_IND,
     M2_TO_M13_CUST_IND,
     M13_CUST_IND,
     R12_CUST_IND,
     M13_TO_M24_CUST_IND,
     NEW_CUST_IND,
     REACTIVATED_CUST_IND,
     NEW_PETM_CUST_IND,
     EXISTING_CUST_IND,
     LAPSED_CUST_IND,
     NEW_CUST_TTM_IND,
     REACTIVATED_CUST_TTM_IND,
     NEW_PETM_CUST_TTM_IND,
     EXISTING_CUST_TTM_IND,
     LAPSED_CUST_TTM_IND,
     COMP_M1_CUST_IND,
     COMP_M2_TO_M13_CUST_IND,
     COMP_M13_CUST_IND,
     COMP_R12_CUST_IND,
     COMP_M13_TO_M24_CUST_IND,
     COMP_NEW_CUST_IND,
     COMP_REACTIVATED_CUST_IND,
     COMP_NEW_PETM_CUST_IND,
     COMP_EXISTING_CUST_IND,
     COMP_LAPSED_CUST_IND,
     COMP_NEW_CUST_TTM_IND,
     COMP_REACTIVATED_CUST_TTM_IND,
     COMP_NEW_PETM_CUST_TTM_IND,
     COMP_EXISTING_CUST_TTM_IND,
     COMP_LAPSED_CUST_TTM_IND
) AS
SELECT C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_DEPT_ID, C.BRAND_NAME, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID, C.BRAND_CLASSIFICATION_NAME, C.STORE_GROUP_ID, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS M1_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS M2_TO_M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS M13_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS R12_CUST_IND, MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN (C.STORE_GROUP_SHOPPED_IND = 1) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS LAPSED_CUST_TTM_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) AS COMP_M1_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M2_TO_M13_CUST_IND) ELSE 0 END) AS COMP_M2_TO_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) AS COMP_M13_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) AS COMP_R12_CUST_IND, MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) AS COMP_M13_TO_M24_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 0)) AND (MAX(CMN.GT13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M1_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M2_TO_M13_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_NEW_CUST_TTM_IND, CASE WHEN (((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 0)) AND (MAX(CMN.GT24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_REACTIVATED_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMNPR.NEW_PETM_CUST_TTM_IND) ELSE 0 END) = 1)) THEN 1 ELSE 0 END AS COMP_NEW_PETM_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.R12_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.M13_TO_M24_CUST_IND) = 1)) THEN 1 ELSE 0 END AS COMP_EXISTING_CUST_TTM_IND, CASE WHEN ((MAX(CASE WHEN ((C.COMP_FLAG = 1) AND (C.STORE_GROUP_SHOPPED_IND = 1)) THEN INT4(CMN.M13_TO_M24_CUST_IND) ELSE 0 END) = 1) AND (MAX(CMN.R12_CUST_IND) = 0)) THEN 1 ELSE 0 END AS COMP_LAPSED_CUST_TTM_IND FROM (((SELECT DISTINCT CM.CUSTOMER_EID, CM.FISCAL_MO, CM.TY_LY_FLAG, CM.COMP_FLAG, CM.STORE_GROUP_ID, CM.STORE_GROUP_SHOPPED_IND, SKU.SAP_DEPT_ID, SKU.BRAND_NAME, SKU.BRAND_CD, SKU.BRAND_CLASSIFICATION_ID, SKU.BRAND_CLASSIFICATION_NAME FROM (ADMIN.CUST_MTH_RAW CM JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CM.PRODUCT_ID = SKU.PRODUCT_ID)))) C JOIN ADMIN.CUST_MTH_NBR CMN ON ((C.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.CUST_MTH_NEW_PETM_RAW CMNPR ON ((((C.CUSTOMER_EID = CMNPR.CUSTOMER_EID) AND (C.TY_LY_FLAG = CMNPR.TY_LY_FLAG)) AND (CMN.FISCAL_MO = CMNPR.FISCAL_MO)))) GROUP BY C.CUSTOMER_EID, CMN.FISCAL_MO, C.TY_LY_FLAG, C.SAP_DEPT_ID, C.BRAND_NAME, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID, C.BRAND_CLASSIFICATION_NAME, C.STORE_GROUP_ID;

\echo
\echo *****  Creating view:  "PS2_HTL_PLAYROOM_CAPACITY_VW"

CREATE or replace VIEW  PS2_HTL_PLAYROOM_CAPACITY_VW
(
     DAY_DT,
     LOCATION_ID,
     PLAYROOM_CAP_EFF_DT,
     PLAYROOM_CAP_END_DT,
     NORMAL_HRS_ROOM_QTY,
     NORMAL_HRS_CAPACITY,
     SPLIT_HRS_CAPACITY,
     PLAYROOM_01_CAPACITY,
     PLAYROOM_02_CAPACITY,
     PLAYROOM_03_CAPACITY,
     PLAYROOM_04_CAPACITY,
     PLAYROOM_05_CAPACITY,
     PLAYROOM_06_CAPACITY,
     PLAYROOM_07_CAPACITY,
     PLAYROOM_08_CAPACITY,
     PLAYROOM_09_CAPACITY,
     PLAYROOM_10_CAPACITY
) AS
SELECT D.DAY_DT, PHPC.LOCATION_ID, PHPC.PLAYROOM_CAP_EFF_DT, PHPC.PLAYROOM_CAP_END_DT, MAX(PHPC.NORMAL_HRS_ROOM_QTY) AS NORMAL_HRS_ROOM_QTY, CASE WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 1) THEN SUM(PHPC.PLAYROOM_01_CAPACITY) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 2) THEN (SUM(PHPC.PLAYROOM_01_CAPACITY) + SUM(PHPC.PLAYROOM_02_CAPACITY)) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 3) THEN ((SUM(PHPC.PLAYROOM_01_CAPACITY) + SUM(PHPC.PLAYROOM_02_CAPACITY)) + SUM(PHPC.PLAYROOM_03_CAPACITY)) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 4) THEN (((SUM(PHPC.PLAYROOM_01_CAPACITY) + SUM(PHPC.PLAYROOM_02_CAPACITY)) + SUM(PHPC.PLAYROOM_03_CAPACITY)) + SUM(PHPC.PLAYROOM_04_CAPACITY)) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 5) THEN ((((SUM(PHPC.PLAYROOM_01_CAPACITY) + SUM(PHPC.PLAYROOM_02_CAPACITY)) + SUM(PHPC.PLAYROOM_03_CAPACITY)) + SUM(PHPC.PLAYROOM_04_CAPACITY)) + SUM(PHPC.PLAYROOM_05_CAPACITY)) ELSE '0'::NUMERIC END AS NORMAL_HRS_CAPACITY, CASE WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 1) THEN ((((((((SUM(PHPC.PLAYROOM_10_CAPACITY) + SUM(PHPC.PLAYROOM_09_CAPACITY)) + SUM(PHPC.PLAYROOM_08_CAPACITY)) + SUM(PHPC.PLAYROOM_07_CAPACITY)) + SUM(PHPC.PLAYROOM_06_CAPACITY)) + SUM(PHPC.PLAYROOM_05_CAPACITY)) + SUM(PHPC.PLAYROOM_04_CAPACITY)) + SUM(PHPC.PLAYROOM_03_CAPACITY)) + SUM(PHPC.PLAYROOM_02_CAPACITY)) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 2) THEN (((((((SUM(PHPC.PLAYROOM_10_CAPACITY) + SUM(PHPC.PLAYROOM_09_CAPACITY)) + SUM(PHPC.PLAYROOM_08_CAPACITY)) + SUM(PHPC.PLAYROOM_07_CAPACITY)) + SUM(PHPC.PLAYROOM_06_CAPACITY)) + SUM(PHPC.PLAYROOM_05_CAPACITY)) + SUM(PHPC.PLAYROOM_04_CAPACITY)) + SUM(PHPC.PLAYROOM_03_CAPACITY)) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 3) THEN ((((((SUM(PHPC.PLAYROOM_10_CAPACITY) + SUM(PHPC.PLAYROOM_09_CAPACITY)) + SUM(PHPC.PLAYROOM_08_CAPACITY)) + SUM(PHPC.PLAYROOM_07_CAPACITY)) + SUM(PHPC.PLAYROOM_06_CAPACITY)) + SUM(PHPC.PLAYROOM_05_CAPACITY)) + SUM(PHPC.PLAYROOM_04_CAPACITY)) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 4) THEN (((((SUM(PHPC.PLAYROOM_10_CAPACITY) + SUM(PHPC.PLAYROOM_09_CAPACITY)) + SUM(PHPC.PLAYROOM_08_CAPACITY)) + SUM(PHPC.PLAYROOM_07_CAPACITY)) + SUM(PHPC.PLAYROOM_06_CAPACITY)) + SUM(PHPC.PLAYROOM_05_CAPACITY)) WHEN (PHPC.NORMAL_HRS_ROOM_QTY = 5) THEN ((((SUM(PHPC.PLAYROOM_10_CAPACITY) + SUM(PHPC.PLAYROOM_09_CAPACITY)) + SUM(PHPC.PLAYROOM_08_CAPACITY)) + SUM(PHPC.PLAYROOM_07_CAPACITY)) + SUM(PHPC.PLAYROOM_06_CAPACITY)) ELSE '0'::NUMERIC END AS SPLIT_HRS_CAPACITY, MAX(PHPC.PLAYROOM_01_CAPACITY) AS PLAYROOM_01_CAPACITY, MAX(PHPC.PLAYROOM_02_CAPACITY) AS PLAYROOM_02_CAPACITY, MAX(PHPC.PLAYROOM_03_CAPACITY) AS PLAYROOM_03_CAPACITY, MAX(PHPC.PLAYROOM_04_CAPACITY) AS PLAYROOM_04_CAPACITY, MAX(PHPC.PLAYROOM_05_CAPACITY) AS PLAYROOM_05_CAPACITY, MAX(PHPC.PLAYROOM_06_CAPACITY) AS PLAYROOM_06_CAPACITY, MAX(PHPC.PLAYROOM_07_CAPACITY) AS PLAYROOM_07_CAPACITY, MAX(PHPC.PLAYROOM_08_CAPACITY) AS PLAYROOM_08_CAPACITY, MAX(PHPC.PLAYROOM_09_CAPACITY) AS PLAYROOM_09_CAPACITY, MAX(PHPC.PLAYROOM_10_CAPACITY) AS PLAYROOM_10_CAPACITY FROM (ADMIN.PS2_HTL_PLAYROOM_CAPACITY PHPC JOIN ADMIN.DAYS D ON ((((D.DAY_DT >= "TIMESTAMP"(PHPC.PLAYROOM_CAP_EFF_DT)) AND (D.DAY_DT <= "TIMESTAMP"(PHPC.PLAYROOM_CAP_END_DT))) AND (CASE WHEN ((D.DAY_OF_WK_NBR = 6) OR (D.DAY_OF_WK_NBR = 7)) THEN 'Weekend'::"VARCHAR" ELSE 'Weekday'::"VARCHAR" END = PHPC.DAY_OF_WEEK)))) GROUP BY D.DAY_DT, PHPC.LOCATION_ID, PHPC.PLAYROOM_CAP_EFF_DT, PHPC.PLAYROOM_CAP_END_DT, PHPC.NORMAL_HRS_ROOM_QTY;

\echo
\echo *****  Creating view:  "SMS_APPT_SERVICE_DAY_VW"

CREATE or replace VIEW  SMS_APPT_SERVICE_DAY_VW
(
     DATA_SOURCE_CD,
     DAY_DT,
     LOCATION_ID,
     SMS_APPOINTMENT_ID,
     SMS_APPT_STATUS_ID,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     APPT_DAY_STATUS_FLAG,
     PRODUCT_ID,
     SMS_ROOM_CD,
     ROOM_TYPE_DESC,
     APPT_SERVICE_ITEM_QTY,
     PETCOUNT
) AS
(SELECT ('SMS'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, A.DAY_DT, A.LOCATION_ID, A.SMS_APPOINTMENT_ID, A.SMS_APPT_STATUS_ID, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.APPT_DAY_STATUS_FLAG, A.PRODUCT_ID, (A.SMS_ROOM_CD)::VARCHAR(50) AS SMS_ROOM_CD, A.SMS_ROOM_TYPE_DESC AS ROOM_TYPE_DESC, A.APPT_SERVICE_ITEM_QTY, A.PETCOUNT FROM ADMIN.SMS_APPT_SERVICE_DAY A) UNION ALL (SELECT ('TP'::"VARCHAR")::VARCHAR(3) AS DATA_SOURCE_CD, S.DAY_DT, S.LOCATION_ID, S.TP_INVOICE_NBR AS SMS_APPOINTMENT_ID, CASE WHEN (S.INVOICE_STATE_ID = 1) THEN 2 WHEN (S.INVOICE_STATE_ID = 2) THEN 4 WHEN (S.INVOICE_STATE_ID = 3) THEN 5 WHEN (S.INVOICE_STATE_ID = 4) THEN 6 ELSE NULL::INT4 END AS SMS_APPT_STATUS_ID, S.APPT_START_TSTMP AS SCHED_APPT_START_TSTMP, S.APPT_END_TSTMP AS SCHED_APPT_END_TSTMP, S.FOLIO_STATUS_FLAG AS APPT_DAY_STATUS_FLAG, S.PRODUCT_ID, S.TP_ROOM_NUMBER AS SMS_ROOM_CD, S.TP_ROOM_TYPE_DESC AS ROOM_TYPE_DESC, S.SERVICE_SCHEDULE_QTY AS APPT_SERVICE_ITEM_QTY, '1'::INT8 AS PETCOUNT FROM ADMIN.TP_INVOICE_SERVICE_DAY S);

\echo
\echo *****  Creating view:  "AMS_OFFER_REWARDS_VW"

CREATE or replace VIEW  AMS_OFFER_REWARDS_VW
(
     OFFER_ID,
     TIER_ID,
     DISCOUNT_TYPE_ID,
     DISCOUNT_TYPE_NAME,
     OFFER_CHARGEBACK_ID,
     OFFER_CHARGEBACK_DESC,
     DISCOUNT_AMT_TYPE_ID,
     DISCOUNT_AMT_TYPE_NAME,
     DISCOUNT_AMT,
     DISCOUNT_LIMIT_QTY,
     DISCOUNT_LIMIT_WEIGHT,
     DISCOUNT_LIMIT_AMT,
     DISCOUNT_RECEIPT_TXT,
     DISCOUNT_UP_TO_AMT,
     ALLOW_MARKUP_IND,
     FLEX_NEGATIVE_IND,
     DISCOUNT_INCL_PRODUCT_GROUP_ID,
     DISCOUNT_INCL_PRODUCT_GROUP_NAME,
     DISCOUNT_EXCL_PRODUCT_GROUP_ID,
     DISCOUNT_EXCL_PRODUCT_GROUP_NAME,
     PRINTED_MSG_TYPE_ID,
     PRINTED_MSG_TYPE_NAME,
     SORT_ID,
     MSG_TXT,
     DELIVERY_REQUIRED_IND,
     PRINTED_MSG_UPC_ID,
     PRINTED_MSG_PRODUCT_ID
) AS
SELECT CASE WHEN (AOD.OFFER_ID NOTNULL) THEN AOD.OFFER_ID WHEN (AOPM.OFFER_ID NOTNULL) THEN AOPM.OFFER_ID ELSE NULL::INT8 END AS OFFER_ID, CASE WHEN (AOD.TIER_ID NOTNULL) THEN AOD.TIER_ID WHEN (AOPM.TIER_ID NOTNULL) THEN AOPM.TIER_ID ELSE NULL::INT1 END AS TIER_ID, AOD.DISCOUNT_TYPE_ID, AOD.DISCOUNT_TYPE_NAME, AOD.OFFER_CHARGEBACK_ID, AOD.OFFER_CHARGEBACK_DESC, AOD.DISCOUNT_AMT_TYPE_ID, AOD.DISCOUNT_AMT_TYPE_NAME, AOD.DISCOUNT_AMT, AOD.DISCOUNT_LIMIT_QTY, AOD.DISCOUNT_LIMIT_WEIGHT, AOD.DISCOUNT_LIMIT_AMT, AOD.DISCOUNT_RECEIPT_TXT, AOD.DISCOUNT_UP_TO_AMT, AOD.ALLOW_MARKUP_IND, AOD.FLEX_NEGATIVE_IND, AOD.DISCOUNT_INCL_PRODUCT_GROUP_ID, AOD.DISCOUNT_INCL_PRODUCT_GROUP_NAME, AOD.DISCOUNT_EXCL_PRODUCT_GROUP_ID, AOD.DISCOUNT_EXCL_PRODUCT_GROUP_NAME, AOPM.PRINTED_MSG_TYPE_ID, AOPM.PRINTED_MSG_TYPE_NAME, AOPM.SORT_ID, AOPM.MSG_TXT, AOPM.DELIVERY_REQUIRED_IND, AOPM.UPC_ID AS PRINTED_MSG_UPC_ID, UPC.PRODUCT_ID AS PRINTED_MSG_PRODUCT_ID FROM (((SELECT AOD.OFFER_ID, AOD.TIER_ID, ADT.DISCOUNT_TYPE_ID, ADT.DISCOUNT_TYPE_NAME, AOC.OFFER_CHARGEBACK_ID, AOC.OFFER_CHARGEBACK_DESC, ADAT.DISCOUNT_AMT_TYPE_ID, ADAT.DISCOUNT_AMT_TYPE_NAME, AOD.DISCOUNT_AMT, AOD.DISCOUNT_LIMIT_QTY, AOD.DISCOUNT_LIMIT_WEIGHT, AOD.DISCOUNT_LIMIT_AMT, AOD.DISCOUNT_RECEIPT_TXT, AOD.DISCOUNT_UP_TO_AMT, AOD.ALLOW_MARKUP_IND, AOD.FLEX_NEGATIVE_IND, APGI.PRODUCT_GROUP_ID AS DISCOUNT_INCL_PRODUCT_GROUP_ID, APGI.PRODUCT_GROUP_NAME AS DISCOUNT_INCL_PRODUCT_GROUP_NAME, APGE.PRODUCT_GROUP_ID AS DISCOUNT_EXCL_PRODUCT_GROUP_ID, APGE.PRODUCT_GROUP_NAME AS DISCOUNT_EXCL_PRODUCT_GROUP_NAME FROM (((((ADMIN.AMS_OFFER_DISCOUNT AOD LEFT JOIN ADMIN.AMS_DISCOUNT_TYPE ADT ON ((CASE WHEN (AOD.DISCOUNT_TYPE_ID NOTNULL) THEN AOD.DISCOUNT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = ADT.DISCOUNT_TYPE_ID))) LEFT JOIN ADMIN.AMS_OFFER_CHARGEBACK AOC ON ((CASE WHEN (AOD.OFFER_CHARGEBACK_ID NOTNULL) THEN INT4(AOD.OFFER_CHARGEBACK_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = AOC.OFFER_CHARGEBACK_ID))) LEFT JOIN ADMIN.AMS_DISCOUNT_AMT_TYPE ADAT ON ((CASE WHEN (AOD.DISCOUNT_AMT_TYPE_ID NOTNULL) THEN AOD.DISCOUNT_AMT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = ADAT.DISCOUNT_AMT_TYPE_ID))) LEFT JOIN ADMIN.AMS_PRODUCT_GROUP APGI ON ((CASE WHEN (AOD.PRODUCT_GROUP_ID NOTNULL) THEN AOD.PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END = APGI.PRODUCT_GROUP_ID))) LEFT JOIN ADMIN.AMS_PRODUCT_GROUP APGE ON ((CASE WHEN (AOD.EXCLUDED_PRODUCT_GROUP_ID NOTNULL) THEN AOD.EXCLUDED_PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END = APGE.PRODUCT_GROUP_ID)))) AOD FULL JOIN (SELECT AOPM.OFFER_ID, AOPM.TIER_ID, APMT.PRINTED_MSG_TYPE_ID, APMT.PRINTED_MSG_TYPE_NAME, AOPM.SORT_ID, AOPM.MSG_TXT, AOPM.DELIVERY_REQUIRED_IND, AOPM.UPC_ID FROM (ADMIN.AMS_OFFER_PRINTED_MSG AOPM LEFT JOIN ADMIN.AMS_PRINTED_MSG_TYPE APMT ON ((CASE WHEN (AOPM.PRINTED_MSG_TYPE_ID NOTNULL) THEN AOPM.PRINTED_MSG_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = APMT.PRINTED_MSG_TYPE_ID)))) AOPM ON (((AOD.OFFER_ID = AOPM.OFFER_ID) AND (AOD.TIER_ID = AOPM.TIER_ID)))) LEFT JOIN ADMIN.UPC ON ((AOPM.UPC_ID = UPC.UPC_ID)));

\echo
\echo *****  Creating view:  "CI_LANE_VW"

CREATE or replace VIEW  CI_LANE_VW
(
     "PRODUCT_ID",
     SKU_NBR,
     SAP_DEPT_ID,
     BRAND_CD,
     BRAND_NAME,
     BRAND_CLASSIFICATION_ID,
     STATUS_ID,
     PRICING_ROLE_ID,
     PRICING_ROLE_DESC,
     GBB_ID,
     GBB_DESC,
     CHANNEL_POSITION_ID,
     CHANNEL_POSITION_DESC
) AS
SELECT PAM.PRODUCT_ID, SP.SKU_NBR, SP.SAP_DEPT_ID, SP.BRAND_CD, CASE WHEN ((B.BRAND_NAME = ' '::"VARCHAR") OR (B.BRAND_NAME = 'NA'::"VARCHAR")) THEN 'NA'::"VARCHAR" ELSE B.BRAND_NAME END AS BRAND_NAME, SP.BRAND_CLASSIFICATION_ID, SP.STATUS_ID, CASE WHEN ((PAM.PRICING_ROLE_ID = ' '::"VARCHAR") OR (PAM.PRICING_ROLE_ID = 'NA'::"VARCHAR")) THEN 'NA'::"VARCHAR" ELSE PAM.PRICING_ROLE_ID END AS PRICING_ROLE_ID, CASE WHEN ((PAM.PRICING_ROLE_DESC = ' '::"VARCHAR") OR (PAM.PRICING_ROLE_DESC = 'NA'::"VARCHAR")) THEN 'NA'::"VARCHAR" ELSE PAM.PRICING_ROLE_DESC END AS PRICING_ROLE_DESC, CASE WHEN ((PAM.GBB_ID = ' '::"VARCHAR") OR (PAM.GBB_ID = 'NA'::"VARCHAR")) THEN 'NA'::"VARCHAR" ELSE PAM.GBB_ID END AS GBB_ID, CASE WHEN ((PAM.GBB_DESC = ' '::"VARCHAR") OR (PAM.GBB_DESC = 'NA'::"VARCHAR")) THEN 'NA'::"VARCHAR" ELSE PAM.GBB_DESC END AS GBB_DESC, CASE WHEN ((PAM.CHANNEL_POSITION_ID = ' '::"VARCHAR") OR (PAM.CHANNEL_POSITION_ID = 'NA'::"VARCHAR")) THEN 'NA'::"VARCHAR" ELSE PAM.CHANNEL_POSITION_ID END AS CHANNEL_POSITION_ID, CASE WHEN ((PAM.CHANNEL_POSITION_DESC = ' '::"VARCHAR") OR (PAM.CHANNEL_POSITION_DESC = 'NA'::"VARCHAR")) THEN 'NA'::"VARCHAR" ELSE PAM.CHANNEL_POSITION_DESC END AS CHANNEL_POSITION_DESC FROM ((ADMIN.PRODUCT_ATTRIBUTE_MV PAM JOIN ADMIN.SKU_PROFILE SP ON ((PAM.PRODUCT_ID = SP.PRODUCT_ID))) LEFT JOIN ADMIN.BRAND B ON ((SP.BRAND_CD = B.BRAND_CD)));

\echo
\echo *****  Creating view:  "SALES_DAY_SKU_STORE_VW"

CREATE or replace VIEW  SALES_DAY_SKU_STORE_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_ID,
     SALES_CUST_CAPTURE_CD,
     DATE_LOADED,
     VENDOR_ID,
     PROMO_FLAG,
     WEEK_DT,
     FISCAL_YR,
     SKU_VEND_TXN_CNT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     EXCH_RATE_PCT,
     STATUS_ID,
     STATUS_ID_IND,
     BRAND_NAME,
     BRAND_NAME_IND,
     OWNBRAND_FLAG,
     OWNBRAND_FLAG_IND
) AS
SELECT SDSS.DAY_DT, SDSS.PRODUCT_ID, SDSS.LOCATION_ID, SDSS.SALES_CUST_CAPTURE_CD, SDSS.DATE_LOADED, SDSS.VENDOR_ID, SDSS.PROMO_FLAG, SDSS.WEEK_DT, SDSS.FISCAL_YR, SDSS.SKU_VEND_TXN_CNT, SDSS.SALES_AMT, SDSS.SALES_COST, SDSS.SALES_QTY, SDSS.RETURN_AMT, SDSS.RETURN_COST, SDSS.RETURN_QTY, SDSS.DISCOUNT_AMT, SDSS.DISCOUNT_QTY, SDSS.DISCOUNT_RETURN_AMT, SDSS.DISCOUNT_RETURN_QTY, SDSS.POS_COUPON_AMT, SDSS.POS_COUPON_QTY, SDSS.POS_COUPON_ALLOC_AMT, SDSS.POS_COUPON_ALLOC_QTY, SDSS.SPECIAL_SALES_AMT, SDSS.SPECIAL_SALES_QTY, SDSS.SPECIAL_RETURN_AMT, SDSS.SPECIAL_RETURN_QTY, SDSS.SPECIAL_SRVC_AMT, SDSS.SPECIAL_SRVC_QTY, SDSS.EXCH_RATE_PCT, SPH.STATUS_ID, CASE WHEN (SDSS.DAY_DT = SPH.REC_START_DT) THEN INT4(SPH.STATUS_ID_IND) ELSE 0 END AS STATUS_ID_IND, B.BRAND_NAME, CASE WHEN (SDSS.DAY_DT = SPH.REC_START_DT) THEN INT4(SPH.BRAND_CD_IND) ELSE 0 END AS BRAND_NAME_IND, SPH.OWNBRAND_FLAG, CASE WHEN (SDSS.DAY_DT = SPH.REC_START_DT) THEN INT4(SPH.OWNBRAND_FLAG_IND) ELSE 0 END AS OWNBRAND_FLAG_IND FROM ((ADMIN.SALES_DAY_SKU_STORE SDSS LEFT JOIN ADMIN.SKU_PROFILE_HIST SPH ON ((((SDSS.PRODUCT_ID = SPH.PRODUCT_ID) AND (SDSS.DAY_DT >= SPH.REC_START_DT)) AND (SDSS.DAY_DT < SPH.REC_END_DT)))) LEFT JOIN ADMIN.BRAND B ON ((B.BRAND_CD = SPH.BRAND_CD)));

\echo
\echo *****  Creating view:  "CI_DEPT_MTH_VW"

CREATE or replace VIEW  CI_DEPT_MTH_VW
(
     "CAL_MO",
     COMP_COMPANY_ID,
     COMP_COMPANY_NAME,
     COMP_STORE_TYPE,
     SAP_DEPT_ID,
     PRICING_ROLE_ID,
     PRICING_ROLE_DESC,
     CHANNEL_POSITION_ID,
     CHANNEL_POSITION_DESC,
     GBB_ID,
     GBB_DESC,
     BRAND_NAME,
     BRAND_CD,
     BRAND_CLASSIFICATION_ID,
     COMP_BRAND_NAME,
     GOOD_SKU_LANE_SALES_QTY,
     GOOD_SKU_LANE_SALES_AMT,
     GOOD_SKU_LANE_MARGIN_AMT,
     AVG_WGHTD_BASE_PCNT_DIFF,
     AVG_WGHTD_OVRLL_PCNT_DIFF,
     SHOPPED_SKU_CNT,
     ACTIVE_LANE_SKU_CNT,
     VENDOR_RETURNED_SKU_CNT,
     AVG_WGHTD_ACTIVE_LANE_ELASTICITY,
     ACTIVE_DEPT_SALES_QTY,
     ACTIVE_DEPT_SALES_AMT,
     ACTIVE_DEPT_MARGIN_AMT,
     ACTIVE_LANE_REG_SALES_AMT,
     ACTIVE_LANE_PROMO_SALES_AMT,
     ACTIVE_LANE_TOTAL_SALES_AMT,
     ACTIVE_LANE_TOTAL_MARGIN_AMT,
     DEPT_PLAN_SALES_AMT,
     DEPT_PLAN_MARGIN_AMT
) AS
SELECT "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, MAX("TEMP".COMP_COMPANY_NAME) AS COMP_COMPANY_NAME, MAX("TEMP".COMP_STORE_TYPE) AS COMP_STORE_TYPE, "TEMP".SAP_DEPT_ID, "TEMP".PRICING_ROLE_ID, MAX("TEMP".PRICING_ROLE_DESC) AS PRICING_ROLE_DESC, "TEMP".CHANNEL_POSITION_ID, MAX("TEMP".CHANNEL_POSITION_DESC) AS CHANNEL_POSITION_DESC, "TEMP".GBB_ID, MAX("TEMP".GBB_DESC) AS GBB_DESC, "TEMP".BRAND_NAME, "TEMP".BRAND_CD, "TEMP".BRAND_CLASSIFICATION_ID, "TEMP".COMP_BRAND_NAME, MAX("TEMP".GOOD_SKU_LANE_SALES_QTY) AS GOOD_SKU_LANE_SALES_QTY, MAX("TEMP".GOOD_SKU_LANE_SALES_AMT) AS GOOD_SKU_LANE_SALES_AMT, MAX("TEMP".GOOD_SKU_LANE_MARGIN_AMT) AS GOOD_SKU_LANE_MARGIN_AMT, MAX("TEMP".AVG_WGHTD_BASE_PCNT_DIFF) AS AVG_WGHTD_BASE_PCNT_DIFF, MAX("TEMP".AVG_WGHTD_OVRLL_PCNT_DIFF) AS AVG_WGHTD_OVRLL_PCNT_DIFF, MAX("TEMP".SHOPPED_SKU_CNT) AS SHOPPED_SKU_CNT, MAX("TEMP".ACTIVE_LANE_SKU_CNT) AS ACTIVE_LANE_SKU_CNT, MAX("TEMP".VENDOR_RETURNED_SKU_CNT) AS VENDOR_RETURNED_SKU_CNT, MAX("TEMP".AVG_WGHTD_ACTIVE_LANE_ELASTICITY) AS AVG_WGHTD_ACTIVE_LANE_ELASTICITY, MAX("TEMP".ACTIVE_DEPT_SALES_QTY) AS ACTIVE_DEPT_SALES_QTY, MAX("TEMP".ACTIVE_DEPT_SALES_AMT) AS ACTIVE_DEPT_SALES_AMT, MAX("TEMP".ACTIVE_DEPT_MARGIN_AMT) AS ACTIVE_DEPT_MARGIN_AMT, MAX("TEMP".ACTIVE_LANE_REG_SALES_AMT) AS ACTIVE_LANE_REG_SALES_AMT, MAX("TEMP".ACTIVE_LANE_PROMO_SALES_AMT) AS ACTIVE_LANE_PROMO_SALES_AMT, MAX("TEMP".ACTIVE_LANE_TOTAL_SALES_AMT) AS ACTIVE_LANE_TOTAL_SALES_AMT, MAX("TEMP".ACTIVE_LANE_TOTAL_MARGIN_AMT) AS ACTIVE_LANE_TOTAL_MARGIN_AMT, MAX("TEMP".DEPT_PLAN_SALES_AMT) AS DEPT_PLAN_SALES_AMT, MAX("TEMP".DEPT_PLAN_MARGIN_AMT) AS DEPT_PLAN_MARGIN_AMT FROM (SELECT CI_PRE.CAL_MO, CI_PRE.COMP_COMPANY_ID, COMP.COMP_COMPANY_NAME, COMP.COMP_STORE_TYPE, CI_PRE.SAP_DEPT_ID, CI_PRE.PRICING_ROLE_ID, CI_PRE.PRICING_ROLE_DESC, CI_PRE.CHANNEL_POSITION_ID, CI_PRE.CHANNEL_POSITION_DESC, CI_PRE.GBB_ID, CI_PRE.GBB_DESC, CI_PRE.TOTAL_NET_52_WK_SALES_QTY AS GOOD_SKU_LANE_SALES_QTY, CI_PRE.TOTAL_NET_52_WK_SALES_AMT AS GOOD_SKU_LANE_SALES_AMT, CI_PRE.TOTAL_MARGIN_52_WK_AMT AS GOOD_SKU_LANE_MARGIN_AMT, CI_PRE.AVG_WGHTD_BASE_PCNT_DIFF, CI_PRE.AVG_WGHTD_OVRLL_PCNT_DIFF, CASE WHEN (SSC.SHOPPED_SKU_CNT NOTNULL) THEN SSC.SHOPPED_SKU_CNT WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END AS SHOPPED_SKU_CNT, CASE WHEN (C.DEPT_SKU_CNT NOTNULL) THEN C.DEPT_SKU_CNT WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END AS ACTIVE_LANE_SKU_CNT, RETURN_CNT.RETURN_SKU_CNT AS VENDOR_RETURNED_SKU_CNT, CI_PRE.BRAND_NAME, CI_PRE.BRAND_CD, CI_PRE.BRAND_CLASSIFICATION_ID, CASE WHEN (D.COMP_BRAND_NAME NOTNULL) THEN D.COMP_BRAND_NAME WHEN (CI_PRE.BRAND_NAME NOTNULL) THEN CI_PRE.BRAND_NAME ELSE NULL::"VARCHAR" END AS COMP_BRAND_NAME, CLM.AVG_ELASTICITY_VAL AS AVG_WGHTD_ACTIVE_LANE_ELASTICITY, SUM(CLM.NET_52_WK_SALES_QTY) OVER (PARTITION BY CI_PRE.CAL_MO, CI_PRE.SAP_DEPT_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS ACTIVE_DEPT_SALES_QTY, SUM((CLM.REG_NET_52_WK_SALES_AMT + CLM.PROMO_NET_52_WK_SALES_AMT)) OVER (PARTITION BY CI_PRE.CAL_MO, CI_PRE.SAP_DEPT_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS ACTIVE_DEPT_SALES_AMT, SUM(CLM.MARGIN_52_WK_SALES_AMT) OVER (PARTITION BY CI_PRE.CAL_MO, CI_PRE.SAP_DEPT_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS ACTIVE_DEPT_MARGIN_AMT, CLM.REG_NET_52_WK_SALES_AMT AS ACTIVE_LANE_REG_SALES_AMT, CLM.PROMO_NET_52_WK_SALES_AMT AS ACTIVE_LANE_PROMO_SALES_AMT, CLM.NET_52_WK_SALES_AMT AS ACTIVE_LANE_TOTAL_SALES_AMT, CLM.MARGIN_52_WK_SALES_AMT AS ACTIVE_LANE_TOTAL_MARGIN_AMT, DEPT_PLAN.PLAN_52_WK_SALES_AMT AS DEPT_PLAN_SALES_AMT, DEPT_PLAN.PLAN_MARGIN_52_WK_AMT AS DEPT_PLAN_MARGIN_AMT FROM (((((((((SELECT FINAL_PASS.CAL_MO, FINAL_PASS.COMP_COMPANY_ID, FINAL_PASS.SAP_DEPT_ID, FINAL_PASS.PRICING_ROLE_ID, FINAL_PASS.PRICING_ROLE_DESC, FINAL_PASS.CHANNEL_POSITION_ID, FINAL_PASS.CHANNEL_POSITION_DESC, FINAL_PASS.GBB_ID, FINAL_PASS.GBB_DESC, FINAL_PASS.BRAND_NAME, FINAL_PASS.BRAND_CD, FINAL_PASS.BRAND_CLASSIFICATION_ID, MAX(FINAL_PASS.QTY) AS TOTAL_NET_52_WK_SALES_QTY, MAX(FINAL_PASS.AMT) AS TOTAL_NET_52_WK_SALES_AMT, MAX(FINAL_PASS.MARG) AS TOTAL_MARGIN_52_WK_AMT, (SUM(FINAL_PASS.BASE) / "NUMERIC"(COUNT(FINAL_PASS.BASE))) AS AVG_WGHTD_BASE_PCNT_DIFF, (SUM(FINAL_PASS.OVRLL) / "NUMERIC"(COUNT(FINAL_PASS.OVRLL))) AS AVG_WGHTD_OVRLL_PCNT_DIFF FROM (SELECT PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_DEPT_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID, PRE.PRICING_ROLE_DESC, PRE.CHANNEL_POSITION_ID, PRE.CHANNEL_POSITION_DESC, PRE.GBB_ID, PRE.GBB_DESC, PRE.BRAND_NAME, PRE.BRAND_CD, PRE.BRAND_CLASSIFICATION_ID, PRE.QTY, PRE.AMT, PRE.MARG, SUM(PRE.WEIGHTED_BASE) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_DEPT_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID, PRE.CHANNEL_POSITION_ID, PRE.GBB_ID, PRE.BRAND_NAME, PRE.BRAND_CD, PRE.BRAND_CLASSIFICATION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS BASE, SUM(PRE.WEIGHTED_OVER) OVER (PARTITION BY PRE.CAL_MO, PRE.COMP_COMPANY_ID, PRE.SAP_DEPT_ID, PRE.PRICE_ZONE_ID, PRE.PRICING_ROLE_ID, PRE.CHANNEL_POSITION_ID, PRE.GBB_ID, PRE.BRAND_NAME, PRE.BRAND_CD, PRE.BRAND_CLASSIFICATION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS OVRLL FROM (SELECT SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.SAP_DEPT_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID, SUB.PRICING_ROLE_DESC, SUB.CHANNEL_POSITION_ID, SUB.CHANNEL_POSITION_DESC, SUB.GBB_ID, SUB.GBB_DESC, SUB.BRAND_NAME, SUB.BRAND_CD, SUB.BRAND_CLASSIFICATION_ID, SUM(SUB.BASE) AS WEIGHTED_BASE, SUM(SUB.OVERALL) AS WEIGHTED_OVER, MAX(SUB.SALES_QTY) AS QTY, MAX(SUB.SALES_AMT) AS AMT, MAX(SUB.MARGIN) AS MARG FROM (SELECT DRV.CAL_MO, DRV.PRODUCT_ID, DRV.SKU_NBR, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.PRICING_ROLE_DESC, DRV.CHANNEL_POSITION_ID, DRV.CHANNEL_POSITION_DESC, DRV.GBB_ID, DRV.GBB_DESC, DRV.BRAND_NAME, DRV.BRAND_CD, DRV.BRAND_CLASSIFICATION_ID, DRV.BASE_PCNT_DIFF, DRV.OVER_PCNT_DIFF, SUM(DISTINCT PERF.NET_52_WK_SALES_QTY) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICING_ROLE_ID, DRV.CHANNEL_POSITION_ID, DRV.GBB_ID, DRV.BRAND_NAME ) AS SALES_QTY, SUM(DISTINCT PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICING_ROLE_ID, DRV.CHANNEL_POSITION_ID, DRV.GBB_ID, DRV.BRAND_NAME ) AS SALES_AMT, SUM(DISTINCT PERF.MARGIN_52_WK_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICING_ROLE_ID, DRV.CHANNEL_POSITION_ID, DRV.GBB_ID, DRV.BRAND_NAME ) AS MARGIN, CASE WHEN (SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICING_ROLE_ID, DRV.CHANNEL_POSITION_ID, DRV.GBB_ID, DRV.BRAND_NAME, DRV.BRAND_CD, DRV.BRAND_CLASSIFICATION_ID, DRV.PRICE_ZONE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ((DRV.BASE_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.BRAND_NAME, DRV.BRAND_CD, DRV.BRAND_CLASSIFICATION_ID, DRV.PRICING_ROLE_ID, DRV.CHANNEL_POSITION_ID, DRV.GBB_ID, DRV.PRICE_ZONE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) END AS BASE, CASE WHEN (SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICING_ROLE_ID, DRV.CHANNEL_POSITION_ID, DRV.GBB_ID, DRV.BRAND_NAME, DRV.BRAND_CD, DRV.BRAND_CLASSIFICATION_ID, DRV.PRICE_ZONE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ((DRV.OVER_PCNT_DIFF * PERF.NET_52_WK_SALES_AMT) / SUM(PERF.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICING_ROLE_ID, DRV.CHANNEL_POSITION_ID, DRV.GBB_ID, DRV.BRAND_NAME, DRV.BRAND_CD, DRV.BRAND_CLASSIFICATION_ID, DRV.PRICE_ZONE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) END AS OVERALL, PERF.NET_52_WK_SALES_AMT FROM ((SELECT CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, PAM.SAP_DEPT_ID, PAM.BRAND_NAME, PAM.BRAND_CD, PAM.BRAND_CLASSIFICATION_ID, SITE.PRICE_ZONE_ID, PAM.PRICING_ROLE_ID, PAM.PRICING_ROLE_DESC, PAM.GBB_ID, PAM.GBB_DESC, PAM.CHANNEL_POSITION_ID, PAM.CHANNEL_POSITION_DESC, (SUM(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS BASE_PCNT_DIFF, (SUM(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS OVER_PCNT_DIFF FROM (((ADMIN.CI_COMP_SKU_DAY CI JOIN ADMIN.SITE_PROFILE SITE ON ((CI.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.CI_COMPETITOR COMP ON ((CI.COMP_ID = COMP.COMP_ID))) JOIN ADMIN.CI_LANE_VW PAM ON ((CI.PRODUCT_ID = PAM.PRODUCT_ID))) WHERE ((CI.CAL_MO > 201201) AND (CASE WHEN (CI.PETM_PRICE_AMT NOTNULL) THEN CI.PETM_PRICE_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC)) GROUP BY CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, PAM.SAP_DEPT_ID, SITE.PRICE_ZONE_ID, PAM.PRICING_ROLE_ID, PAM.PRICING_ROLE_DESC, PAM.GBB_ID, PAM.GBB_DESC, PAM.CHANNEL_POSITION_ID, PAM.CHANNEL_POSITION_DESC, PAM.BRAND_NAME, PAM.BRAND_CD, PAM.BRAND_CLASSIFICATION_ID) DRV JOIN (SELECT DISTINCT P.CAL_MO, P.COMP_COMPANY_ID, P.PRODUCT_ID, SPR.PRICE_ZONE_ID, P.NET_52_WK_SALES_QTY, P.NET_52_WK_SALES_AMT, P.MARGIN_52_WK_AMT FROM (ADMIN.CI_52WK_SLS_PERF_MONTH P JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((P.LOCATION_ID = SPR.LOCATION_ID)))) PERF ON (((((DRV.CAL_MO = PERF.CAL_MO) AND (DRV.COMP_COMPANY_ID = PERF.COMP_COMPANY_ID)) AND (DRV.PRODUCT_ID = PERF.PRODUCT_ID)) AND (DRV.PRICE_ZONE_ID = PERF.PRICE_ZONE_ID))))) SUB GROUP BY SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.SAP_DEPT_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID, SUB.PRICING_ROLE_DESC, SUB.CHANNEL_POSITION_ID, SUB.CHANNEL_POSITION_DESC, SUB.GBB_ID, SUB.GBB_DESC, SUB.BRAND_NAME, SUB.BRAND_CD, SUB.BRAND_CLASSIFICATION_ID) PRE) FINAL_PASS GROUP BY FINAL_PASS.CAL_MO, FINAL_PASS.COMP_COMPANY_ID, FINAL_PASS.SAP_DEPT_ID, FINAL_PASS.PRICING_ROLE_ID, FINAL_PASS.PRICING_ROLE_DESC, FINAL_PASS.CHANNEL_POSITION_ID, FINAL_PASS.CHANNEL_POSITION_DESC, FINAL_PASS.GBB_ID, FINAL_PASS.GBB_DESC, FINAL_PASS.BRAND_NAME, FINAL_PASS.BRAND_CD, FINAL_PASS.BRAND_CLASSIFICATION_ID) CI_PRE LEFT JOIN (SELECT DISTINCT A.CAL_MO, B.SAP_DEPT_ID, A.COMP_COMPANY_ID, C.PRICING_ROLE_ID, C.GBB_ID, C.CHANNEL_POSITION_ID, C.BRAND_NAME, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID FROM ((ADMIN.CI_COMP_SKU_DAY A JOIN ADMIN.SKU_PROFILE B ON ((A.PRODUCT_ID = B.PRODUCT_ID))) JOIN ADMIN.CI_LANE_VW C ON ((A.PRODUCT_ID = C.PRODUCT_ID))) WHERE (A.CAL_MO > 201201)) PETM_BRAND ON (((((((CI_PRE.CAL_MO = PETM_BRAND.CAL_MO) AND (CI_PRE.SAP_DEPT_ID = PETM_BRAND.SAP_DEPT_ID)) AND (CI_PRE.COMP_COMPANY_ID = PETM_BRAND.COMP_COMPANY_ID)) AND (CI_PRE.PRICING_ROLE_ID = PETM_BRAND.PRICING_ROLE_ID)) AND (CI_PRE.GBB_ID = PETM_BRAND.GBB_ID)) AND (CI_PRE.CHANNEL_POSITION_ID = PETM_BRAND.CHANNEL_POSITION_ID)))) LEFT JOIN (SELECT SPR.SAP_DEPT_ID, CLV.PRICING_ROLE_ID, CLV.GBB_ID, CLV.CHANNEL_POSITION_ID, CLV.BRAND_NAME, CLV.BRAND_CD, CLV.BRAND_CLASSIFICATION_ID, COUNT(SPR.SKU_NBR) AS DEPT_SKU_CNT FROM (ADMIN.SKU_PROFILE_RPT SPR JOIN ADMIN.CI_LANE_VW CLV ON ((SPR.PRODUCT_ID = CLV.PRODUCT_ID))) WHERE (INT4((SPR.STATUS_ID)::"VARCHAR") IN (44, 23, 21, 11, 10, 42, 40, 37, 25)) GROUP BY SPR.SAP_DEPT_ID, CLV.PRICING_ROLE_ID, CLV.GBB_ID, CLV.CHANNEL_POSITION_ID, CLV.BRAND_NAME, CLV.BRAND_CD, CLV.BRAND_CLASSIFICATION_ID) C ON (((((((CI_PRE.SAP_DEPT_ID = C.SAP_DEPT_ID) AND (CI_PRE.PRICING_ROLE_ID = C.PRICING_ROLE_ID)) AND (CI_PRE.GBB_ID = C.GBB_ID)) AND (CI_PRE.CHANNEL_POSITION_ID = C.CHANNEL_POSITION_ID)) AND (CI_PRE.BRAND_NAME = C.BRAND_NAME)) AND (CI_PRE.BRAND_CLASSIFICATION_ID = C.BRAND_CLASSIFICATION_ID)))) LEFT JOIN ADMIN.CI_COMP_BRAND D ON (((((CI_PRE.CAL_MO = D.CAL_MO) AND (CI_PRE.SAP_DEPT_ID = D.SAP_DEPT_ID)) AND (CI_PRE.COMP_COMPANY_ID = D.COMP_COMPANY_ID)) AND (CI_PRE.BRAND_NAME = D.PETM_BRAND_NAME)))) LEFT JOIN (SELECT DISTINCT A.CAL_MO, A.SAP_DEPT_ID, A.COMP_COMPANY_ID, C.PRICING_ROLE_ID, C.GBB_ID, C.CHANNEL_POSITION_ID, C.BRAND_NAME, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID, COUNT(DISTINCT A.PRODUCT_ID) OVER (PARTITION BY A.SAP_DEPT_ID, A.COMP_COMPANY_ID, C.PRICING_ROLE_ID, C.GBB_ID, C.CHANNEL_POSITION_ID, C.BRAND_NAME, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID ) AS SHOPPED_SKU_CNT FROM (ADMIN.CI_SHOP_LIST A JOIN ADMIN.CI_LANE_VW C ON ((A.PRODUCT_ID = C.PRODUCT_ID)))) SSC ON ((((((((CI_PRE.CAL_MO = SSC.CAL_MO) AND (CI_PRE.SAP_DEPT_ID = SSC.SAP_DEPT_ID)) AND (CI_PRE.COMP_COMPANY_ID = SSC.COMP_COMPANY_ID)) AND (CI_PRE.PRICING_ROLE_ID = SSC.PRICING_ROLE_ID)) AND (CI_PRE.GBB_ID = SSC.GBB_ID)) AND (CI_PRE.CHANNEL_POSITION_ID = SSC.CHANNEL_POSITION_ID)) AND (CI_PRE.BRAND_NAME = SSC.BRAND_NAME)))) LEFT JOIN (SELECT CSH.CAL_MO, CSH.COMP_COMPANY_ID, PAMV.SAP_DEPT_ID, PAMV.PRICING_ROLE_ID, PAMV.GBB_ID, PAMV.CHANNEL_POSITION_ID, PAMV.BRAND_NAME, PAMV.BRAND_CD, PAMV.BRAND_CLASSIFICATION_ID, COUNT(DISTINCT CSH.PRODUCT_ID) AS RETURN_SKU_CNT FROM (ADMIN.CI_SHOP_HIST CSH JOIN ADMIN.CI_LANE_VW PAMV ON ((CSH.PRODUCT_ID = PAMV.PRODUCT_ID))) GROUP BY CSH.CAL_MO, CSH.COMP_COMPANY_ID, PAMV.SAP_DEPT_ID, PAMV.PRICING_ROLE_ID, PAMV.GBB_ID, PAMV.CHANNEL_POSITION_ID, PAMV.BRAND_NAME, PAMV.BRAND_CD, PAMV.BRAND_CLASSIFICATION_ID) RETURN_CNT ON ((((((((CI_PRE.CAL_MO = RETURN_CNT.CAL_MO) AND (CI_PRE.SAP_DEPT_ID = RETURN_CNT.SAP_DEPT_ID)) AND (CI_PRE.COMP_COMPANY_ID = RETURN_CNT.COMP_COMPANY_ID)) AND (CI_PRE.PRICING_ROLE_ID = RETURN_CNT.PRICING_ROLE_ID)) AND (CI_PRE.GBB_ID = RETURN_CNT.GBB_ID)) AND (CI_PRE.CHANNEL_POSITION_ID = RETURN_CNT.CHANNEL_POSITION_ID)) AND (CI_PRE.BRAND_NAME = RETURN_CNT.BRAND_NAME)))) LEFT JOIN ADMIN.CI_52WK_LANE_MONTH CLM ON ((((((((CI_PRE.CAL_MO = CLM.CAL_MO) AND (CI_PRE.SAP_DEPT_ID = CLM.SAP_DEPT_ID)) AND (CI_PRE.PRICING_ROLE_ID = CLM.PRICING_ROLE_ID)) AND (CI_PRE.GBB_ID = CLM.GBB_ID)) AND (CI_PRE.CHANNEL_POSITION_ID = CLM.CHANNEL_POSITION_ID)) AND (CI_PRE.BRAND_NAME = CLM.BRAND_NAME)) AND (CLM.COUNTRY_CD = 'US'::"VARCHAR")))) LEFT JOIN ADMIN.CI_52WK_PLAN_DEPT_MONTH DEPT_PLAN ON ((((CI_PRE.CAL_MO = DEPT_PLAN.CAL_MO) AND (CI_PRE.SAP_DEPT_ID = DEPT_PLAN.SAP_DEPT_ID)) AND (DEPT_PLAN.COUNTRY_CD = 'US'::"VARCHAR")))) JOIN ADMIN.CI_COMP_COMPANY COMP ON ((CI_PRE.COMP_COMPANY_ID = COMP.COMP_COMPANY_ID))) WHERE (CI_PRE.CAL_MO > 201301)) "TEMP" GROUP BY "TEMP".CAL_MO, "TEMP".COMP_COMPANY_ID, "TEMP".SAP_DEPT_ID, "TEMP".PRICING_ROLE_ID, "TEMP".CHANNEL_POSITION_ID, "TEMP".GBB_ID, "TEMP".BRAND_NAME, "TEMP".COMP_BRAND_NAME, "TEMP".BRAND_CD, "TEMP".BRAND_CLASSIFICATION_ID;

\echo
\echo *****  Creating view:  "SKU_PROFILE_WK_VW"

CREATE or replace VIEW  SKU_PROFILE_WK_VW
(
     WEEK_DT,
     PRODUCT_ID,
     STATUS_ID,
     STATUS_ID_IND,
     BRAND_NAME,
     BRAND_NAME_IND,
     OWNBRAND_FLAG,
     OWNBRAND_FLAG_IND
) AS
SELECT W.WEEK_DT, SPH.PRODUCT_ID, SPH.STATUS_ID, CASE WHEN ((W.WEEK_DT >= SPH.REC_START_DT) AND (W.WEEK_DT <= "TIMESTAMP"((DATE(SPH.REC_START_DT) + 6)))) THEN INT4(SPH.STATUS_ID_IND) ELSE 0 END AS STATUS_ID_IND, B.BRAND_NAME, CASE WHEN ((W.WEEK_DT >= SPH.REC_START_DT) AND (W.WEEK_DT <= "TIMESTAMP"((DATE(SPH.REC_START_DT) + 6)))) THEN INT4(SPH.BRAND_CD_IND) ELSE 0 END AS BRAND_NAME_IND, SPH.OWNBRAND_FLAG, CASE WHEN ((W.WEEK_DT >= SPH.REC_START_DT) AND (W.WEEK_DT <= "TIMESTAMP"((DATE(SPH.REC_START_DT) + 6)))) THEN INT4(SPH.OWNBRAND_FLAG_IND) ELSE 0 END AS OWNBRAND_FLAG_IND FROM ADMIN.WEEKS W, (ADMIN.SKU_PROFILE_HIST SPH LEFT JOIN ADMIN.BRAND B ON ((B.BRAND_CD = SPH.BRAND_CD))) WHERE ((W.WEEK_DT >= SPH.REC_START_DT) AND (W.WEEK_DT < SPH.REC_END_DT));

\echo
\echo *****  Creating view:  "SMS_APPT_REMINDER_ROLLOUT_VW"

CREATE or replace VIEW  SMS_APPT_REMINDER_ROLLOUT_VW
(
     LOCATION_ID,
     STORE_NBR,
     "OWNER",
     PHONE_NUMBER,
     PET,
     SPECIES,
     BREED,
     GROOMER,
     LAST_APPOINTMENT_DT,
     PRODUCT_ID,
     SAP_CLASS_ID,
     "SERVICE",
     VACCINATION_EXPIRE
) AS
SELECT DISTINCT Y.LOCATION_ID, Y.STORE_NBR, Y."OWNER", Y.PHONE_NUMBER, Y.PET, Y.SPECIES, Y.BREED, E.EMPLOYEE_NAME AS GROOMER, DATE(S.APPT_START_TSTMP) AS LAST_APPOINTMENT_DT, SP.PRODUCT_ID, SP.SAP_CLASS_ID, SP.SKU_DESC AS "SERVICE", Y.VACCINATION_EXPIRE FROM ((((SELECT DISTINCT X.LOCATION_ID, FIRST_VALUE(X.STORE_NBR) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS STORE_NBR, X.PET_LINK, FIRST_VALUE(X.APPOINTMENT_ID) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS APPOINTMENT_ID, FIRST_VALUE(X."OWNER") OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS "OWNER", FIRST_VALUE(X.PHONE_NUMBER) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS PHONE_NUMBER, FIRST_VALUE(X.PET) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS PET, FIRST_VALUE(X.SPECIES) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SPECIES, FIRST_VALUE(X.BREED) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS BREED, FIRST_VALUE(X.VACCINATION_EXPIRE) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS VACCINATION_EXPIRE FROM ((SELECT R.LOCATION_ID, R.STORE_NBR, ((TRANSLATE(TRANSLATE(UPPER(C.SMS_CUST_LAST_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR") || TRANSLATE(TRANSLATE(UPPER(P.SMS_PET_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR")))::VARCHAR(160) AS PET_LINK, A.SMS_APPOINTMENT_ID AS APPOINTMENT_ID, A.SMS_APPOINTMENT_DT AS APPOINTMENT_DT, (((C.SMS_CUST_LAST_NAME || ', '::"VARCHAR") || C.SMS_CUST_FIRST_NAME))::VARCHAR(258) AS "OWNER", CASE WHEN (C.PREFERRED_COMM_METHOD_ID = 2) THEN (((((('('::"VARCHAR" || SUBSTR("VARCHAR"(C.SMS_CUST_MOBILE_PHONE), 1, 3)) || ') '::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_MOBILE_PHONE), 4, 3)) || '-'::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_MOBILE_PHONE), 7, 4)) || ' (M)'::"VARCHAR") ELSE (((((('('::"VARCHAR" || SUBSTR("VARCHAR"(C.SMS_CUST_HOME_PHONE), 1, 3)) || ') '::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_HOME_PHONE), 4, 3)) || '-'::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_HOME_PHONE), 7, 4)) || ' (H)'::"VARCHAR") END AS PHONE_NUMBER, P.SMS_PET_NAME AS PET, CASE WHEN (P.SMS_SPECIES_ID = 12) THEN 'Dog'::"VARCHAR" WHEN (P.SMS_SPECIES_ID = 20) THEN 'Cat'::"VARCHAR" ELSE 'Unknown'::"VARCHAR" END AS SPECIES, B.SMS_BREED_DESC AS BREED, V.VACCINATION_EXPIRE_DT AS VACCINATION_EXPIRE FROM ((((((ADMIN.SMS_STORE_ROLLOUT R JOIN ADMIN.SMS_APPOINTMENT_RPT A ON ((R.LOCATION_ID = A.LOCATION_ID))) JOIN ADMIN.SMS_SERVICE_PROFILE SP ON ((A.SMS_PRIMARY_SERVICE_ID = SP.SMS_SERVICE_ID))) JOIN ADMIN.SMS_CUSTOMER C ON ((A.SMS_CUSTOMER_ID = C.SMS_CUSTOMER_ID))) JOIN ADMIN.SMS_PET P ON ((A.SMS_PET_ID = P.SMS_PET_ID))) JOIN ADMIN.SMS_BREED B ON ((P.SMS_BREED_ID = B.SMS_BREED_ID))) JOIN ADMIN.SMS_PET_VACCINATION V ON ((P.SMS_PET_ID = V.SMS_PET_ID))) WHERE (((((((A.SMS_APPT_STATUS_ID NOT IN (1, 6, 7)) AND (A.SMS_APPOINTMENT_DT >= (DATE('now(0)'::"VARCHAR") - 63))) AND (R.SMS_START_DT >= (DATE('now(0)'::"VARCHAR") - 56))) AND (R.SMS_START_DT <= (DATE('now(0)'::"VARCHAR") + 56))) AND (P.SMS_PET_STATUS_ID = 1)) AND (V.SMS_VACCINATION_ID = 132)) AND (SP.SMS_SERVICE_CATEGORY_ID = 3509))) UNION ALL (SELECT R.LOCATION_ID, R.STORE_NBR, ((TRANSLATE(TRANSLATE(UPPER(C.CUST_LAST_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR") || TRANSLATE(TRANSLATE(UPPER(P.PET_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR")))::VARCHAR(160) AS PET_LINK, A.TP_INVOICE_NBR_FINAL AS APPOINTMENT_ID, DATE(A.APPT_START_TSTMP) AS APPOINTMENT_DT, (((C.CUST_LAST_NAME || ', '::"VARCHAR") || C.CUST_FIRST_NAME))::VARCHAR(258) AS "OWNER", PHONE.PHONE AS PHONE_NUMBER, P.PET_NAME AS PET, CASE WHEN (P.SPECIES_ID = 1) THEN 'Dog'::"VARCHAR" WHEN (P.SPECIES_ID = 2) THEN 'Cat'::"VARCHAR" ELSE 'Unknown'::"VARCHAR" END AS SPECIES, B.BREED_DESC AS BREED, V.EXPIRE_DT AS VACCINATION_EXPIRE FROM ((((((((ADMIN.SMS_STORE_ROLLOUT R JOIN ADMIN.TP_INVOICE_RPT A ON ((R.LOCATION_ID = A.LOCATION_ID))) JOIN ADMIN.TP_INVOICE_SERVICE_RPT S ON ((A.TP_INVOICE_NBR = S.TP_INVOICE_NBR))) JOIN ADMIN.SKU_PROFILE SP ON ((S.PRODUCT_ID = SP.PRODUCT_ID))) JOIN ADMIN.TP_CUSTOMER C ON ((A.TP_CUSTOMER_NBR = C.TP_CUSTOMER_NBR))) LEFT JOIN (SELECT X.TP_CUSTOMER_NBR, (((((('('::"VARCHAR" || SUBSTR(X.CUST_PHONE, 1, 3)) || ') '::"VARCHAR") || SUBSTR(X.CUST_PHONE, 4, 3)) || '-'::"VARCHAR") || SUBSTR(X.CUST_PHONE, 7, 4)) || X.PHONE_TYPE) AS PHONE FROM (SELECT TP_CUSTOMER_PHONE.TP_CUSTOMER_NBR, CASE WHEN ((TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 1) OR (TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 2)) THEN ' (H)'::"VARCHAR" WHEN ((TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 3) OR (TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 4)) THEN ' (M)'::"VARCHAR" WHEN ((TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 5) OR (TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 6)) THEN ' (W)'::"VARCHAR" ELSE ' (O)'::"VARCHAR" END AS PHONE_TYPE, "VARCHAR"(TP_CUSTOMER_PHONE.CUST_PHONE_NBR) AS CUST_PHONE, ROW_NUMBER() OVER (PARTITION BY TP_CUSTOMER_PHONE.TP_CUSTOMER_NBR  ORDER BY TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID ) AS ROWNUM FROM ADMIN.TP_CUSTOMER_PHONE WHERE (TP_CUSTOMER_PHONE.ACTIVE_NBR_FLAG = 1)) X WHERE (X.ROWNUM = 1)) PHONE ON ((C.TP_CUSTOMER_NBR = PHONE.TP_CUSTOMER_NBR))) JOIN ADMIN.TP_PET P ON ((A.TP_PET_NBR = P.TP_PET_NBR))) JOIN ADMIN.TP_BREED B ON ((P.BREED_ID = B.BREED_ID))) LEFT JOIN (SELECT TP_PET_VACC.TP_PET_NBR, MAX(TP_PET_VACC.EXPIRE_DT) AS EXPIRE_DT FROM ADMIN.TP_PET_VACC WHERE (((TP_PET_VACC.VACC_ID IN (9, 10)) AND (TP_PET_VACC.EXPIRE_DT < '2025-12-31 00:00:00'::"TIMESTAMP")) AND (TP_PET_VACC.EXPIRE_DT NOTNULL)) GROUP BY TP_PET_VACC.TP_PET_NBR) V ON ((P.TP_PET_NBR = V.TP_PET_NBR))) WHERE (((((((A.INVOICE_STATE_ID <> 4) AND (DATE(A.APPT_START_TSTMP) >= (DATE('now(0)'::"VARCHAR") - 63))) AND (R.SMS_START_DT >= (DATE('now(0)'::"VARCHAR") - 56))) AND (R.SMS_START_DT <= (DATE('now(0)'::"VARCHAR") + 56))) AND (S.CANCEL_DT ISNULL)) AND (P.RECORD_STATUS_ID = 0)) AND (A.SMS_SERVICE_CATEGORY_ID = 3509)))) X) Y JOIN ADMIN.TP_INVOICE_SERVICE_RPT S ON ((Y.APPOINTMENT_ID = S.TP_INVOICE_NBR_FINAL))) JOIN ADMIN.SKU_PROFILE SP ON ((S.PRODUCT_ID = SP.PRODUCT_ID))) LEFT JOIN ADMIN.TP_EMPLOYEE E ON (((S.LOCATION_ID = E.LOCATION_ID) AND (S.TP_EMPLOYEE_ID = E.TP_EMPLOYEE_ID)))) WHERE (((S.CANCEL_DT ISNULL) AND (DATE(S.APPT_START_TSTMP) >= (DATE('now(0)'::"VARCHAR") - 63))) AND (DATE(S.APPT_START_TSTMP) < (DATE('now(0)'::"VARCHAR") - 56)));

\echo
\echo *****  Creating view:  "SMS_APPT_REMINDER_ROLLOUT_16WK_VW"

CREATE or replace VIEW  SMS_APPT_REMINDER_ROLLOUT_16WK_VW
(
     LOCATION_ID,
     STORE_NBR,
     "OWNER",
     PHONE_NUMBER,
     PET,
     SPECIES,
     BREED,
     GROOMER,
     LAST_APPOINTMENT_DT,
     PRODUCT_ID,
     SAP_CLASS_ID,
     "SERVICE",
     VACCINATION_EXPIRE
) AS
SELECT DISTINCT Y.LOCATION_ID, Y.STORE_NBR, Y."OWNER", Y.PHONE_NUMBER, Y.PET, Y.SPECIES, Y.BREED, E.EMPLOYEE_NAME AS GROOMER, DATE(S.APPT_START_TSTMP) AS LAST_APPOINTMENT_DT, SP.PRODUCT_ID, SP.SAP_CLASS_ID, SP.SKU_DESC AS "SERVICE", Y.VACCINATION_EXPIRE FROM ((((SELECT DISTINCT X.LOCATION_ID, FIRST_VALUE(X.STORE_NBR) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS STORE_NBR, X.PET_LINK, FIRST_VALUE(X.APPOINTMENT_ID) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS APPOINTMENT_ID, FIRST_VALUE(X."OWNER") OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS "OWNER", FIRST_VALUE(X.PHONE_NUMBER) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS PHONE_NUMBER, FIRST_VALUE(X.PET) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS PET, FIRST_VALUE(X.SPECIES) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SPECIES, FIRST_VALUE(X.BREED) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS BREED, FIRST_VALUE(X.VACCINATION_EXPIRE) OVER (PARTITION BY X.LOCATION_ID, X.PET_LINK  ORDER BY X.APPOINTMENT_DT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS VACCINATION_EXPIRE FROM ((SELECT R.LOCATION_ID, R.STORE_NBR, ((TRANSLATE(TRANSLATE(UPPER(C.SMS_CUST_LAST_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR") || TRANSLATE(TRANSLATE(UPPER(P.SMS_PET_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR")))::VARCHAR(160) AS PET_LINK, A.SMS_APPOINTMENT_ID AS APPOINTMENT_ID, A.SMS_APPOINTMENT_DT AS APPOINTMENT_DT, (((C.SMS_CUST_LAST_NAME || ', '::"VARCHAR") || C.SMS_CUST_FIRST_NAME))::VARCHAR(258) AS "OWNER", CASE WHEN (C.PREFERRED_COMM_METHOD_ID = 2) THEN (((((('('::"VARCHAR" || SUBSTR("VARCHAR"(C.SMS_CUST_MOBILE_PHONE), 1, 3)) || ') '::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_MOBILE_PHONE), 4, 3)) || '-'::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_MOBILE_PHONE), 7, 4)) || ' (M)'::"VARCHAR") ELSE (((((('('::"VARCHAR" || SUBSTR("VARCHAR"(C.SMS_CUST_HOME_PHONE), 1, 3)) || ') '::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_HOME_PHONE), 4, 3)) || '-'::"VARCHAR") || SUBSTR("VARCHAR"(C.SMS_CUST_HOME_PHONE), 7, 4)) || ' (H)'::"VARCHAR") END AS PHONE_NUMBER, P.SMS_PET_NAME AS PET, CASE WHEN (P.SMS_SPECIES_ID = 12) THEN 'Dog'::"VARCHAR" WHEN (P.SMS_SPECIES_ID = 20) THEN 'Cat'::"VARCHAR" ELSE 'Unknown'::"VARCHAR" END AS SPECIES, B.SMS_BREED_DESC AS BREED, V.VACCINATION_EXPIRE_DT AS VACCINATION_EXPIRE FROM ((((((ADMIN.SMS_STORE_ROLLOUT R JOIN ADMIN.SMS_APPOINTMENT_RPT A ON ((R.LOCATION_ID = A.LOCATION_ID))) JOIN ADMIN.SMS_SERVICE_PROFILE SP ON ((A.SMS_PRIMARY_SERVICE_ID = SP.SMS_SERVICE_ID))) JOIN ADMIN.SMS_CUSTOMER C ON ((A.SMS_CUSTOMER_ID = C.SMS_CUSTOMER_ID))) JOIN ADMIN.SMS_PET P ON ((A.SMS_PET_ID = P.SMS_PET_ID))) JOIN ADMIN.SMS_BREED B ON ((P.SMS_BREED_ID = B.SMS_BREED_ID))) JOIN ADMIN.SMS_PET_VACCINATION V ON ((P.SMS_PET_ID = V.SMS_PET_ID))) WHERE (((((((A.SMS_APPT_STATUS_ID NOT IN (1, 6, 7)) AND (A.SMS_APPOINTMENT_DT >= (DATE('now(0)'::"VARCHAR") - 119))) AND (R.SMS_START_DT >= (DATE('now(0)'::"VARCHAR") - 112))) AND (R.SMS_START_DT <= (DATE('now(0)'::"VARCHAR") + 112))) AND (P.SMS_PET_STATUS_ID = 1)) AND (V.SMS_VACCINATION_ID = 132)) AND (SP.SMS_SERVICE_CATEGORY_ID = 3509))) UNION ALL (SELECT R.LOCATION_ID, R.STORE_NBR, ((TRANSLATE(TRANSLATE(UPPER(C.CUST_LAST_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR") || TRANSLATE(TRANSLATE(UPPER(P.PET_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR")))::VARCHAR(160) AS PET_LINK, A.TP_INVOICE_NBR_FINAL AS APPOINTMENT_ID, DATE(A.APPT_START_TSTMP) AS APPOINTMENT_DT, (((C.CUST_LAST_NAME || ', '::"VARCHAR") || C.CUST_FIRST_NAME))::VARCHAR(258) AS "OWNER", PHONE.PHONE AS PHONE_NUMBER, P.PET_NAME AS PET, CASE WHEN (P.SPECIES_ID = 1) THEN 'Dog'::"VARCHAR" WHEN (P.SPECIES_ID = 2) THEN 'Cat'::"VARCHAR" ELSE 'Unknown'::"VARCHAR" END AS SPECIES, B.BREED_DESC AS BREED, V.EXPIRE_DT AS VACCINATION_EXPIRE FROM ((((((((ADMIN.SMS_STORE_ROLLOUT R JOIN ADMIN.TP_INVOICE_RPT A ON ((R.LOCATION_ID = A.LOCATION_ID))) JOIN ADMIN.TP_INVOICE_SERVICE_RPT S ON ((A.TP_INVOICE_NBR = S.TP_INVOICE_NBR))) JOIN ADMIN.SKU_PROFILE SP ON ((S.PRODUCT_ID = SP.PRODUCT_ID))) JOIN ADMIN.TP_CUSTOMER C ON ((A.TP_CUSTOMER_NBR = C.TP_CUSTOMER_NBR))) LEFT JOIN (SELECT X.TP_CUSTOMER_NBR, (((((('('::"VARCHAR" || SUBSTR(X.CUST_PHONE, 1, 3)) || ') '::"VARCHAR") || SUBSTR(X.CUST_PHONE, 4, 3)) || '-'::"VARCHAR") || SUBSTR(X.CUST_PHONE, 7, 4)) || X.PHONE_TYPE) AS PHONE FROM (SELECT TP_CUSTOMER_PHONE.TP_CUSTOMER_NBR, CASE WHEN ((TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 1) OR (TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 2)) THEN ' (H)'::"VARCHAR" WHEN ((TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 3) OR (TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 4)) THEN ' (M)'::"VARCHAR" WHEN ((TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 5) OR (TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID = 6)) THEN ' (W)'::"VARCHAR" ELSE ' (O)'::"VARCHAR" END AS PHONE_TYPE, "VARCHAR"(TP_CUSTOMER_PHONE.CUST_PHONE_NBR) AS CUST_PHONE, ROW_NUMBER() OVER (PARTITION BY TP_CUSTOMER_PHONE.TP_CUSTOMER_NBR  ORDER BY TP_CUSTOMER_PHONE.TP_PHONE_TYPE_ID ) AS ROWNUM FROM ADMIN.TP_CUSTOMER_PHONE WHERE (TP_CUSTOMER_PHONE.ACTIVE_NBR_FLAG = 1)) X WHERE (X.ROWNUM = 1)) PHONE ON ((C.TP_CUSTOMER_NBR = PHONE.TP_CUSTOMER_NBR))) JOIN ADMIN.TP_PET P ON ((A.TP_PET_NBR = P.TP_PET_NBR))) JOIN ADMIN.TP_BREED B ON ((P.BREED_ID = B.BREED_ID))) LEFT JOIN (SELECT TP_PET_VACC.TP_PET_NBR, MAX(TP_PET_VACC.EXPIRE_DT) AS EXPIRE_DT FROM ADMIN.TP_PET_VACC WHERE (((TP_PET_VACC.VACC_ID IN (9, 10)) AND (TP_PET_VACC.EXPIRE_DT < '2025-12-31 00:00:00'::"TIMESTAMP")) AND (TP_PET_VACC.EXPIRE_DT NOTNULL)) GROUP BY TP_PET_VACC.TP_PET_NBR) V ON ((P.TP_PET_NBR = V.TP_PET_NBR))) WHERE (((((((A.INVOICE_STATE_ID <> 4) AND (DATE(A.APPT_START_TSTMP) >= (DATE('now(0)'::"VARCHAR") - 119))) AND (R.SMS_START_DT >= (DATE('now(0)'::"VARCHAR") - 112))) AND (R.SMS_START_DT <= (DATE('now(0)'::"VARCHAR") + 112))) AND (S.CANCEL_DT ISNULL)) AND (P.RECORD_STATUS_ID = 0)) AND (A.SMS_SERVICE_CATEGORY_ID = 3509)))) X) Y JOIN ADMIN.TP_INVOICE_SERVICE_RPT S ON ((Y.APPOINTMENT_ID = S.TP_INVOICE_NBR_FINAL))) JOIN ADMIN.SKU_PROFILE SP ON ((S.PRODUCT_ID = SP.PRODUCT_ID))) LEFT JOIN ADMIN.TP_EMPLOYEE E ON (((S.LOCATION_ID = E.LOCATION_ID) AND (S.TP_EMPLOYEE_ID = E.TP_EMPLOYEE_ID)))) WHERE (((S.CANCEL_DT ISNULL) AND (DATE(S.APPT_START_TSTMP) >= (DATE('now(0)'::"VARCHAR") - 119))) AND (DATE(S.APPT_START_TSTMP) < (DATE('now(0)'::"VARCHAR") - 112)));

\echo
\echo *****  Creating view:  "EMS_AMS_AUDIT_OFFER_VW"

CREATE or replace VIEW  EMS_AMS_AUDIT_OFFER_VW
(
     AMS_OFFER_SUBMISSION_GUID,
     OS_AMS_OFFER_SUBMISSION_ID,
     OS_BUSINESS_OWNER,
     OS_APPROVER,
     OS_OFFER_DEPT_AND_DIV,
     OS_OFFER_NAME,
     OS_OFFER_DESC,
     OS_DEFERRED_REVENUE,
     OS_LEGACY_PB_OFFER_IND,
     OS_VENDOR_FUNDED_TYPE,
     OS_VENDOR_FUNDED_VALUE,
     OS_VENDOR_FUNDED_LIMIT,
     OS_MFG_VENDOR_BRAND_NAME,
     OS_OFFER_MEDIA,
     OS_OFFER_PATH,
     OS_PLANNER_PERIOD,
     OS_START_DT,
     OS_EXP_DT,
     OS_OFFER_TIME_BASED_IND,
     OS_OFFER_TIME_DESC,
     OS_US_OFFER_IND,
     OS_PR_OFFER_IND,
     OS_CA_OFFER_IND,
     OS_STORE_LIST,
     OS_CUSTOMER_GROUP,
     OS_QUALIFYING_PRODUCT,
     OS_QUALIFYING_PRODUCT_DTL,
     OS_QUALIFYING_PRODUCT_CONDITION,
     OS_BUY_SPEND_REQ,
     OS_BUY_SPEND_REQ_DTL,
     OS_MIN_UNIT_PRICE,
     OS_TIERED_OFFER_IND,
     OS_TIERED_OFFER_DESC,
     OS_OFFER_QUALIFICATION_TIMEFRAME,
     OS_OFFER_QUALIFICATION_TIMEFRAME_DTL,
     OS_REWARD_PRODUCT,
     OS_REWARD_PRODUCT_DTL,
     OS_REWARD,
     OS_REWARD_DTL,
     OS_REWARD_LEVEL,
     OS_REWARD_ITEM_QTY,
     OS_MAX_DISC,
     OS_OFFER_LIMITATION,
     OS_OFFER_LIMITATION_DTL,
     OS_MUTUALLY_EXCLUSIVE_OFFER_IND,
     OS_RECEIPT_TXT,
     OS_ISSUANCE_MESSAGE,
     OS_OFFER_STATUS,
     OS_CANCELLED_IND,
     OS_SCHED_OFFER_DEPLOYMENT_DT,
     OS_APPROVAL_DTL,
     OS_UPCA_NBR_TXT,
     OS_CATEGORY_CD_AND_NAME,
     OS_AMS_OFFER_ID,
     OS_AMS_TEMPLATE,
     OS_UAT_TEST_STATUS,
     OS_CREATED_BY,
     OS_MODIFIED_BY,
     EM_OFFER_ID,
     EM_EVENT_ID,
     EM_EVENT_NAME,
     EM_EVENT_DESC,
     EM_EVENT_START_DT,
     EM_EVENT_END_DT,
     EM_PURGED_FLAG,
     EM_AMS_OFFER_SUBMISSION_ID,
     EM_OFFER_NAME,
     EM_AMS_TEMPLATE_TYPE_ID,
     EM_AMS_TEMPLATE_TYPE_NAME,
     EM_AMS_OFFER_LIMIT_QTY,
     EM_AMS_OFFER_LIMIT_TYPE_ID,
     EM_AMS_OFFER_LIMIT_TYPE_NAME,
     EM_AMS_DISCOUNT_TYPE_ID,
     EM_AMS_DISCOUNT_TYPE_NAME,
     EM_DISCOUNT_AMT,
     EM_TOTAL_DISCOUNT_AMT,
     EM_MIN_SPEND_AMT,
     EM_BUY_QTY,
     EM_BUY_DESC,
     EM_GET_QTY,
     EM_GET_DESC,
     EM_BB_BUY_OR_SPEND_IND,
     EM_BB_SPEND_AMT,
     EM_BTGT_GRP_A_BUY_QTY,
     EM_BTGT_GRP_A_BUY_DESC,
     EM_BTGT_GRP_A_MIN_SPEND_AMT,
     EM_BTGT_GRP_B_BUY_QTY,
     EM_BTGT_GRP_B_BUY_DESC,
     EM_BTGT_GRP_B_MIN_SPEND_AMT,
     EM_SS_SPEND_AMT,
     EM_SS_SPEND_DESC,
     EM_SS_SAVE_DESC,
     EM_TP_T1_MIN_QTY,
     EM_TP_T1_MAX_QTY,
     EM_TP_T1_DISCOUNT_AMT,
     EM_TP_T2_MIN_QTY,
     EM_TP_T2_MAX_QTY,
     EM_TP_T2_DISCOUNT_AMT,
     EM_TP_T3_MIN_QTY,
     EM_TP_T3_MAX_QTY,
     EM_TP_T3_DISCOUNT_AMT,
     EM_TP_T4_MIN_QTY,
     EM_TP_T4_MAX_QTY,
     EM_TP_T4_DISCOUNT_AMT,
     EM_SS_SAME_SPEND_ITEM_IND,
     EM_BOGO_SAME_BUY_ITEM_IND,
     EM_GET_LABEL_SUPPRESSED_IND,
     EM_DISCLAIMER_1_TYPE_ID,
     EM_DISCLAIMER_1_TYPE_DESC,
     EM_DISCLAIMER_1_OTHER_DESC,
     EM_DISCLAIMER_2_TYPE_ID,
     EM_DISCLAIMER_2_TYPE_DESC,
     EM_DISCLAIMER_2_OTHER_DESC,
     EM_BTGT_GRP_A_DISCLAIMER_TYPE_ID,
     EM_BTGT_GRP_A_DISCLAIMER_TYPE_DESC,
     EM_BTGT_GRP_A_DISCLAIMER_OTHER_DESC,
     EM_BTGT_GRP_B_DISCLAIMER_TYPE_ID,
     EM_BTGT_GRP_B_DISCLAIMER_TYPE_DESC,
     EM_BTGT_GRP_B_DISCLAIMER_OTHER_DESC,
     EM_OFFER_UNLOCK_TSTMP,
     EM_CREATED_BY,
     EM_CREATED_TSTMP,
     EM_MODIFIED_BY,
     EM_MODIFIED_TSTMP,
     EM_US_OFFER_FLAG,
     EM_CA_OFFER_FLAG,
     EM_PR_OFFER_FLAG,
     AMS_OFFER_ID,
     AMS_IS_TEMPLATE_IND,
     AMS_FROM_TEMPLATE_IND,
     AMS_OFFER_NAME,
     AMS_OFFER_DESC,
     AMS_OFFER_CATEGORY_ID,
     AMS_OFFER_CATEGORY_NAME,
     AMS_OFFER_PRIORITY,
     AMS_OFFER_START_DT,
     AMS_OFFER_END_DT,
     AMS_OFFER_LIMIT_TYPE_ID,
     AMS_OFFER_LIMIT_TYPE_DESC,
     AMS_OFFER_LIMIT_QTY,
     AMS_OFFER_LIMIT_PERIOD_DAYS,
     AMS_SYS_CREATE_TSTMP,
     AMS_SYS_UPDATE_TSTMP,
     AMS_DELETE_FLAG,
     AMS_STATUS_FLAG,
     AMS_OFFER_STATUS_ID,
     AMS_OFFER_STATUS_NAME,
     AMS_EMPLOYEES_ONLY_IND,
     AMS_EMPLOYEES_EXCLUDED_IND,
     AMS_SEND_ISSUANCE_IND,
     AMS_VENDOR_COUPON_CD,
     AMS_TIER_LEVEL_CNT,
     AMS_MIN_ITEM_PRICE_AMT,
     AMS_QTY_FOR_INCENTIVE,
     AMS_QTY_UNIT_TYPE_NAME,
     AMS_T2_QTY_FOR_INCENTIVE,
     AMS_T2_QTY_UNIT_TYPE_NAME,
     AMS_T3_QTY_FOR_INCENTIVE,
     AMS_T3_QTY_UNIT_TYPE_NAME,
     AMS_T4_QTY_FOR_INCENTIVE,
     AMS_T4_QTY_UNIT_TYPE_NAME,
     AMS_DISC_EVAL_TYPE_ID,
     AMS_DISC_EVAL_TYPE_NAME,
     AMS_DISCOUNT_TYPE_ID,
     AMS_DISCOUNT_TYPE_NAME,
     AMS_OFFER_CHARGEBACK_ID,
     AMS_OFFER_CHARGEBACK_DESC,
     AMS_DISCOUNT_AMT_TYPE_ID,
     AMS_DISCOUNT_AMT_TYPE_NAME,
     AMS_DISCOUNT_AMT,
     AMS_DISCOUNT_LIMIT_QTY,
     AMS_DISCOUNT_LIMIT_WEIGHT,
     AMS_DISCOUNT_LIMIT_AMT,
     AMS_DISCOUNT_RECEIPT_TXT,
     AMS_DISCOUNT_UP_TO_AMT,
     AMS_ALLOW_MARKUP_IND,
     AMS_FLEX_NEGATIVE_IND,
     AMS_DISCOUNT_INCL_PRODUCT_GROUP_ID,
     AMS_DISCOUNT_INCL_PRODUCT_GROUP_NAME,
     AMS_DISCOUNT_EXCL_PRODUCT_GROUP_ID,
     AMS_DISCOUNT_EXCL_PRODUCT_GROUP_NAME,
     AMS_T2_DISCOUNT_AMT,
     AMS_T2_DISCOUNT_LIMIT_QTY,
     AMS_T2_DISCOUNT_LIMIT_WEIGHT,
     AMS_T2_DISCOUNT_LIMIT_AMT,
     AMS_T2_DISCOUNT_RECEIPT_TXT,
     AMS_T3_DISCOUNT_AMT,
     AMS_T3_DISCOUNT_LIMIT_QTY,
     AMS_T3_DISCOUNT_LIMIT_WEIGHT,
     AMS_T3_DISCOUNT_LIMIT_AMT,
     AMS_T3_DISCOUNT_RECEIPT_TXT,
     AMS_T4_DISCOUNT_AMT,
     AMS_T4_DISCOUNT_LIMIT_QTY,
     AMS_T4_DISCOUNT_LIMIT_WEIGHT,
     AMS_T4_DISCOUNT_LIMIT_AMT,
     AMS_T4_DISCOUNT_RECEIPT_TXT,
     AMS_PRINTED_MSG_TYPE_ID,
     AMS_PRINTED_MSG_TYPE_NAME,
     AMS_SORT_ID,
     AMS_MSG_TXT,
     AMS_DELIVERY_REQUIRED_IND,
     AMS_PRINTED_MSG_UPC_ID,
     AMS_PRINTED_MSG_PRODUCT_ID,
     AMS_T2_MSG_TXT,
     AMS_T2_PRINTED_MSG_UPC_ID,
     AMS_T2_PRINTED_MSG_PRODUCT_ID,
     AMS_T3_MSG_TXT,
     AMS_T3_PRINTED_MSG_UPC_ID,
     AMS_T3_PRINTED_MSG_PRODUCT_ID,
     AMS_T4_MSG_TXT,
     AMS_T4_PRINTED_MSG_UPC_ID,
     AMS_T4_PRINTED_MSG_PRODUCT_ID,
     AMS_US_OFFER_FLAG,
     AMS_CA_OFFER_FLAG,
     AMS_PR_OFFER_FLAG,
     AMS_UPCA_NBR
) AS
SELECT CASE WHEN (OS.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN OS.AMS_OFFER_SUBMISSION_ID WHEN (EM.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN EM.AMS_OFFER_SUBMISSION_ID WHEN ((EM.AMS_OFFER_SUBMISSION_ID ISNULL) AND (EM.EM_OFFER_ID NOTNULL)) THEN INT8((1000000000 + EM.EM_OFFER_ID)) WHEN (AM.OFFER_ID NOTNULL) THEN (2000000000 + AM.OFFER_ID) ELSE NULL::INT8 END AS AMS_OFFER_SUBMISSION_GUID, OS.AMS_OFFER_SUBMISSION_ID AS OS_AMS_OFFER_SUBMISSION_ID, OS.BUSINESS_OWNER AS OS_BUSINESS_OWNER, OS.APPROVER AS OS_APPROVER, OS.OFFER_DEPT_AND_DIV AS OS_OFFER_DEPT_AND_DIV, OS.OFFER_NAME AS OS_OFFER_NAME, OS.OFFER_DESC AS OS_OFFER_DESC, OS.DEFERRED_REVENUE AS OS_DEFERRED_REVENUE, OS.LEGACY_PB_OFFER_IND AS OS_LEGACY_PB_OFFER_IND, OS.VENDOR_FUNDED_TYPE AS OS_VENDOR_FUNDED_TYPE, OS.VENDOR_FUNDED_VALUE AS OS_VENDOR_FUNDED_VALUE, OS.VENDOR_FUNDED_LIMIT AS OS_VENDOR_FUNDED_LIMIT, OS.MFG_VENDOR_BRAND_NAME AS OS_MFG_VENDOR_BRAND_NAME, OS.OFFER_MEDIA AS OS_OFFER_MEDIA, OS.OFFER_PATH AS OS_OFFER_PATH, OS.PLANNER_PERIOD AS OS_PLANNER_PERIOD, OS.START_DT AS OS_START_DT, OS.EXP_DT AS OS_EXP_DT, OS.OFFER_TIME_BASED_IND AS OS_OFFER_TIME_BASED_IND, OS.OFFER_TIME_DESC AS OS_OFFER_TIME_DESC, OS.US_OFFER_IND AS OS_US_OFFER_IND, OS.PR_OFFER_IND AS OS_PR_OFFER_IND, OS.CA_OFFER_IND AS OS_CA_OFFER_IND, OS.STORE_LIST AS OS_STORE_LIST, OS.CUSTOMER_GROUP AS OS_CUSTOMER_GROUP, OS.QUALIFYING_PRODUCT AS OS_QUALIFYING_PRODUCT, OS.QUALIFYING_PRODUCT_DTL AS OS_QUALIFYING_PRODUCT_DTL, OS.QUALIFYING_PRODUCT_CONDITION AS OS_QUALIFYING_PRODUCT_CONDITION, OS.BUY_SPEND_REQ AS OS_BUY_SPEND_REQ, OS.BUY_SPEND_REQ_DTL AS OS_BUY_SPEND_REQ_DTL, OS.MIN_UNIT_PRICE AS OS_MIN_UNIT_PRICE, OS.TIERED_OFFER_IND AS OS_TIERED_OFFER_IND, OS.TIERED_OFFER_DESC AS OS_TIERED_OFFER_DESC, OS.OFFER_QUALIFICATION_TIMEFRAME AS OS_OFFER_QUALIFICATION_TIMEFRAME, OS.OFFER_QUALIFICATION_TIMEFRAME_DTL AS OS_OFFER_QUALIFICATION_TIMEFRAME_DTL, OS.REWARD_PRODUCT AS OS_REWARD_PRODUCT, OS.REWARD_PRODUCT_DTL AS OS_REWARD_PRODUCT_DTL, OS.REWARD AS OS_REWARD, OS.REWARD_DTL AS OS_REWARD_DTL, OS.REWARD_LEVEL AS OS_REWARD_LEVEL, OS.REWARD_ITEM_QTY AS OS_REWARD_ITEM_QTY, OS.MAX_DISC AS OS_MAX_DISC, OS.OFFER_LIMITATION AS OS_OFFER_LIMITATION, OS.OFFER_LIMITATION_DTL AS OS_OFFER_LIMITATION_DTL, OS.MUTUALLY_EXCLUSIVE_OFFER_IND AS OS_MUTUALLY_EXCLUSIVE_OFFER_IND, OS.RECEIPT_TXT AS OS_RECEIPT_TXT, OS.ISSUANCE_MESSAGE AS OS_ISSUANCE_MESSAGE, OS.OFFER_STATUS AS OS_OFFER_STATUS, OS.CANCELLED_IND AS OS_CANCELLED_IND, OS.SCHED_OFFER_DEPLOYMENT_DT AS OS_SCHED_OFFER_DEPLOYMENT_DT, OS.APPROVAL_DTL AS OS_APPROVAL_DTL, BTRIM(LTRIM(OS.UPCA_NBR_TXT, '0'::"VARCHAR")) AS OS_UPCA_NBR_TXT, OS.CATEGORY_CD_AND_NAME AS OS_CATEGORY_CD_AND_NAME, OS.AMS_OFFER_ID AS OS_AMS_OFFER_ID, OS.AMS_TEMPLATE AS OS_AMS_TEMPLATE, OS.UAT_TEST_STATUS AS OS_UAT_TEST_STATUS, OS.CREATED_BY AS OS_CREATED_BY, OS.MODIFIED_BY AS OS_MODIFIED_BY, EM.EM_OFFER_ID, EM.EM_EVENT_ID, EM.EVENT_NAME AS EM_EVENT_NAME, EM.EVENT_DESC AS EM_EVENT_DESC, EM.EVENT_START_DT AS EM_EVENT_START_DT, EM.EVENT_END_DT AS EM_EVENT_END_DT, EM.EM_PURGED_FLAG, EM.AMS_OFFER_SUBMISSION_ID AS EM_AMS_OFFER_SUBMISSION_ID, EM.EM_OFFER_NAME, EM.EM_AMS_TEMPLATE_TYPE_ID, EM.EM_AMS_TEMPLATE_TYPE_NAME, EM.EM_AMS_OFFER_LIMIT_QTY, EM.EM_AMS_OFFER_LIMIT_TYPE_ID, EM.EM_AMS_OFFER_LIMIT_TYPE_NAME, EM.EM_AMS_DISCOUNT_TYPE_ID, EM.EM_AMS_DISCOUNT_TYPE_NAME, EM.DISCOUNT_AMT AS EM_DISCOUNT_AMT, EM.TOTAL_DISCOUNT_AMT AS EM_TOTAL_DISCOUNT_AMT, EM.MIN_SPEND_AMT AS EM_MIN_SPEND_AMT, EM.BUY_QTY AS EM_BUY_QTY, EM.BUY_DESC AS EM_BUY_DESC, EM.GET_QTY AS EM_GET_QTY, EM.GET_DESC AS EM_GET_DESC, EM.BB_BUY_OR_SPEND_IND AS EM_BB_BUY_OR_SPEND_IND, EM.BB_SPEND_AMT AS EM_BB_SPEND_AMT, EM.BTGT_GRP_A_BUY_QTY AS EM_BTGT_GRP_A_BUY_QTY, EM.BTGT_GRP_A_BUY_DESC AS EM_BTGT_GRP_A_BUY_DESC, EM.BTGT_GRP_A_MIN_SPEND_AMT AS EM_BTGT_GRP_A_MIN_SPEND_AMT, EM.BTGT_GRP_B_BUY_QTY AS EM_BTGT_GRP_B_BUY_QTY, EM.BTGT_GRP_B_BUY_DESC AS EM_BTGT_GRP_B_BUY_DESC, EM.BTGT_GRP_B_MIN_SPEND_AMT AS EM_BTGT_GRP_B_MIN_SPEND_AMT, EM.SS_SPEND_AMT AS EM_SS_SPEND_AMT, EM.SS_SPEND_DESC AS EM_SS_SPEND_DESC, EM.SS_SAVE_DESC AS EM_SS_SAVE_DESC, EM.EM_T1_MIN_QTY AS EM_TP_T1_MIN_QTY, EM.EM_T1_MAX_QTY AS EM_TP_T1_MAX_QTY, EM.EM_T1_DISCOUNT_AMT AS EM_TP_T1_DISCOUNT_AMT, EM.EM_T2_MIN_QTY AS EM_TP_T2_MIN_QTY, EM.EM_T2_MAX_QTY AS EM_TP_T2_MAX_QTY, EM.EM_T2_DISCOUNT_AMT AS EM_TP_T2_DISCOUNT_AMT, EM.EM_T3_MIN_QTY AS EM_TP_T3_MIN_QTY, EM.EM_T3_MAX_QTY AS EM_TP_T3_MAX_QTY, EM.EM_T3_DISCOUNT_AMT AS EM_TP_T3_DISCOUNT_AMT, EM.EM_T4_MIN_QTY AS EM_TP_T4_MIN_QTY, EM.EM_T4_MAX_QTY AS EM_TP_T4_MAX_QTY, EM.EM_T4_DISCOUNT_AMT AS EM_TP_T4_DISCOUNT_AMT, EM.SS_SAME_SPEND_ITEM_IND AS EM_SS_SAME_SPEND_ITEM_IND, EM.BOGO_SAME_BUY_ITEM_IND AS EM_BOGO_SAME_BUY_ITEM_IND, EM.GET_LABEL_SUPPRESSED_IND AS EM_GET_LABEL_SUPPRESSED_IND, EM.DISCLAIMER_1_TYPE_ID AS EM_DISCLAIMER_1_TYPE_ID, EM.DISCLAIMER_1_TYPE_DESC AS EM_DISCLAIMER_1_TYPE_DESC, EM.DISCLAIMER_1_OTHER_DESC AS EM_DISCLAIMER_1_OTHER_DESC, EM.DISCLAIMER_2_TYPE_ID AS EM_DISCLAIMER_2_TYPE_ID, EM.DISCLAIMER_2_TYPE_DESC AS EM_DISCLAIMER_2_TYPE_DESC, EM.DISCLAIMER_2_OTHER_DESC AS EM_DISCLAIMER_2_OTHER_DESC, EM.BTGT_GRP_A_DISCLAIMER_TYPE_ID AS EM_BTGT_GRP_A_DISCLAIMER_TYPE_ID, EM.BTGT_GRP_A_DISCLAIMER_TYPE_DESC AS EM_BTGT_GRP_A_DISCLAIMER_TYPE_DESC, EM.BTGT_GRP_A_DISCLAIMER_OTHER_DESC AS EM_BTGT_GRP_A_DISCLAIMER_OTHER_DESC, EM.BTGT_GRP_B_DISCLAIMER_TYPE_ID AS EM_BTGT_GRP_B_DISCLAIMER_TYPE_ID, EM.BTGT_GRP_B_DISCLAIMER_TYPE_DESC AS EM_BTGT_GRP_B_DISCLAIMER_TYPE_DESC, EM.BTGT_GRP_B_DISCLAIMER_OTHER_DESC AS EM_BTGT_GRP_B_DISCLAIMER_OTHER_DESC, EM.EM_OFFER_UNLOCK_TSTMP, EM.EM_CREATED_BY, EM.EM_CREATED_TSTMP, EM.EM_MODIFIED_BY, EM.EM_MODIFIED_TSTMP, EM.EM_US_OFFER_FLAG, EM.EM_CA_OFFER_FLAG, EM.EM_PR_OFFER_FLAG, AM.OFFER_ID AS AMS_OFFER_ID, AM.IS_TEMPLATE_IND AS AMS_IS_TEMPLATE_IND, AM.FROM_TEMPLATE_IND AS AMS_FROM_TEMPLATE_IND, AM.OFFER_NAME AS AMS_OFFER_NAME, AM.OFFER_DESC AS AMS_OFFER_DESC, AM.OFFER_CATEGORY_ID AS AMS_OFFER_CATEGORY_ID, AM.OFFER_CATEGORY_NAME AS AMS_OFFER_CATEGORY_NAME, AM.OFFER_PRIORITY AS AMS_OFFER_PRIORITY, AM.OFFER_START_DT AS AMS_OFFER_START_DT, AM.OFFER_END_DT AS AMS_OFFER_END_DT, AM.OFFER_LIMIT_TYPE_ID AS AMS_OFFER_LIMIT_TYPE_ID, AM.OFFER_LIMIT_TYPE_DESC AS AMS_OFFER_LIMIT_TYPE_DESC, AM.OFFER_LIMIT_QTY AS AMS_OFFER_LIMIT_QTY, AM.OFFER_LIMIT_PERIOD_DAYS AS AMS_OFFER_LIMIT_PERIOD_DAYS, AM.SYS_CREATE_TSTMP AS AMS_SYS_CREATE_TSTMP, AM.SYS_UPDATE_TSTMP AS AMS_SYS_UPDATE_TSTMP, AM.DELETE_FLAG AS AMS_DELETE_FLAG, AM.STATUS_FLAG AS AMS_STATUS_FLAG, AM.OFFER_STATUS_ID AS AMS_OFFER_STATUS_ID, AM.OFFER_STATUS_NAME AS AMS_OFFER_STATUS_NAME, AM.EMPLOYEES_ONLY_IND AS AMS_EMPLOYEES_ONLY_IND, AM.EMPLOYEES_EXCLUDED_IND AS AMS_EMPLOYEES_EXCLUDED_IND, AM.SEND_ISSUANCE_IND AS AMS_SEND_ISSUANCE_IND, AM.VENDOR_COUPON_CD AS AMS_VENDOR_COUPON_CD, AM.TIER_LEVEL_CNT AS AMS_TIER_LEVEL_CNT, AM.MIN_ITEM_PRICE_AMT AS AMS_MIN_ITEM_PRICE_AMT, AM.QTY_FOR_INCENTIVE AS AMS_QTY_FOR_INCENTIVE, AM.QTY_UNIT_TYPE_NAME AS AMS_QTY_UNIT_TYPE_NAME, AM.T2_QTY_FOR_INCENTIVE AS AMS_T2_QTY_FOR_INCENTIVE, AM.T2_QTY_UNIT_TYPE_NAME AS AMS_T2_QTY_UNIT_TYPE_NAME, AM.T3_QTY_FOR_INCENTIVE AS AMS_T3_QTY_FOR_INCENTIVE, AM.T3_QTY_UNIT_TYPE_NAME AS AMS_T3_QTY_UNIT_TYPE_NAME, AM.T4_QTY_FOR_INCENTIVE AS AMS_T4_QTY_FOR_INCENTIVE, AM.T4_QTY_UNIT_TYPE_NAME AS AMS_T4_QTY_UNIT_TYPE_NAME, AM.DISC_EVAL_TYPE_ID AS AMS_DISC_EVAL_TYPE_ID, AM.DISC_EVAL_TYPE_NAME AS AMS_DISC_EVAL_TYPE_NAME, AM.DISCOUNT_TYPE_ID AS AMS_DISCOUNT_TYPE_ID, AM.DISCOUNT_TYPE_NAME AS AMS_DISCOUNT_TYPE_NAME, AM.OFFER_CHARGEBACK_ID AS AMS_OFFER_CHARGEBACK_ID, AM.OFFER_CHARGEBACK_DESC AS AMS_OFFER_CHARGEBACK_DESC, AM.DISCOUNT_AMT_TYPE_ID AS AMS_DISCOUNT_AMT_TYPE_ID, AM.DISCOUNT_AMT_TYPE_NAME AS AMS_DISCOUNT_AMT_TYPE_NAME, AM.DISCOUNT_AMT AS AMS_DISCOUNT_AMT, AM.DISCOUNT_LIMIT_QTY AS AMS_DISCOUNT_LIMIT_QTY, AM.DISCOUNT_LIMIT_WEIGHT AS AMS_DISCOUNT_LIMIT_WEIGHT, AM.DISCOUNT_LIMIT_AMT AS AMS_DISCOUNT_LIMIT_AMT, AM.DISCOUNT_RECEIPT_TXT AS AMS_DISCOUNT_RECEIPT_TXT, AM.DISCOUNT_UP_TO_AMT AS AMS_DISCOUNT_UP_TO_AMT, AM.ALLOW_MARKUP_IND AS AMS_ALLOW_MARKUP_IND, AM.FLEX_NEGATIVE_IND AS AMS_FLEX_NEGATIVE_IND, AM.DISCOUNT_INCL_PRODUCT_GROUP_ID AS AMS_DISCOUNT_INCL_PRODUCT_GROUP_ID, AM.DISCOUNT_INCL_PRODUCT_GROUP_NAME AS AMS_DISCOUNT_INCL_PRODUCT_GROUP_NAME, AM.DISCOUNT_EXCL_PRODUCT_GROUP_ID AS AMS_DISCOUNT_EXCL_PRODUCT_GROUP_ID, AM.DISCOUNT_EXCL_PRODUCT_GROUP_NAME AS AMS_DISCOUNT_EXCL_PRODUCT_GROUP_NAME, AM.T2_DISCOUNT_AMT AS AMS_T2_DISCOUNT_AMT, AM.T2_DISCOUNT_LIMIT_QTY AS AMS_T2_DISCOUNT_LIMIT_QTY, AM.T2_DISCOUNT_LIMIT_WEIGHT AS AMS_T2_DISCOUNT_LIMIT_WEIGHT, AM.T2_DISCOUNT_LIMIT_AMT AS AMS_T2_DISCOUNT_LIMIT_AMT, AM.T2_DISCOUNT_RECEIPT_TXT AS AMS_T2_DISCOUNT_RECEIPT_TXT, AM.T3_DISCOUNT_AMT AS AMS_T3_DISCOUNT_AMT, AM.T3_DISCOUNT_LIMIT_QTY AS AMS_T3_DISCOUNT_LIMIT_QTY, AM.T3_DISCOUNT_LIMIT_WEIGHT AS AMS_T3_DISCOUNT_LIMIT_WEIGHT, AM.T3_DISCOUNT_LIMIT_AMT AS AMS_T3_DISCOUNT_LIMIT_AMT, AM.T3_DISCOUNT_RECEIPT_TXT AS AMS_T3_DISCOUNT_RECEIPT_TXT, AM.T4_DISCOUNT_AMT AS AMS_T4_DISCOUNT_AMT, AM.T4_DISCOUNT_LIMIT_QTY AS AMS_T4_DISCOUNT_LIMIT_QTY, AM.T4_DISCOUNT_LIMIT_WEIGHT AS AMS_T4_DISCOUNT_LIMIT_WEIGHT, AM.T4_DISCOUNT_LIMIT_AMT AS AMS_T4_DISCOUNT_LIMIT_AMT, AM.T4_DISCOUNT_RECEIPT_TXT AS AMS_T4_DISCOUNT_RECEIPT_TXT, AM.PRINTED_MSG_TYPE_ID AS AMS_PRINTED_MSG_TYPE_ID, AM.PRINTED_MSG_TYPE_NAME AS AMS_PRINTED_MSG_TYPE_NAME, AM.SORT_ID AS AMS_SORT_ID, AM.MSG_TXT AS AMS_MSG_TXT, AM.DELIVERY_REQUIRED_IND AS AMS_DELIVERY_REQUIRED_IND, AM.PRINTED_MSG_UPC_ID AS AMS_PRINTED_MSG_UPC_ID, AM.PRINTED_MSG_PRODUCT_ID AS AMS_PRINTED_MSG_PRODUCT_ID, AM.T2_MSG_TXT AS AMS_T2_MSG_TXT, AM.T2_PRINTED_MSG_UPC_ID AS AMS_T2_PRINTED_MSG_UPC_ID, AM.T2_PRINTED_MSG_PRODUCT_ID AS AMS_T2_PRINTED_MSG_PRODUCT_ID, AM.T3_MSG_TXT AS AMS_T3_MSG_TXT, AM.T3_PRINTED_MSG_UPC_ID AS AMS_T3_PRINTED_MSG_UPC_ID, AM.T3_PRINTED_MSG_PRODUCT_ID AS AMS_T3_PRINTED_MSG_PRODUCT_ID, AM.T4_MSG_TXT AS AMS_T4_MSG_TXT, AM.T4_PRINTED_MSG_UPC_ID AS AMS_T4_PRINTED_MSG_UPC_ID, AM.T4_PRINTED_MSG_PRODUCT_ID AS AMS_T4_PRINTED_MSG_PRODUCT_ID, AM.AMS_US_OFFER_FLAG, AM.AMS_CA_OFFER_FLAG, AM.AMS_PR_OFFER_FLAG, AM.TRIGGER_UPC AS AMS_UPCA_NBR FROM ((ADMIN.AMS_OFFER_SUBMISSION OS FULL JOIN (SELECT L.EM_OFFER_ID, L.EM_EVENT_ID, L.AMS_OFFER_SUBMISSION_ID, L.EM_OFFER_NAME, L.EM_AMS_TEMPLATE_TYPE_ID, L.EM_AMS_OFFER_LIMIT_QTY, L.EM_AMS_OFFER_LIMIT_TYPE_ID, L.EM_AMS_DISCOUNT_TYPE_ID, L.DISCOUNT_AMT, L.TOTAL_DISCOUNT_AMT, L.MIN_SPEND_AMT, L.BUY_QTY, L.BUY_DESC, L.GET_QTY, L.GET_DESC, L.BB_BUY_OR_SPEND_IND, L.BB_SPEND_AMT, L.BTGT_GRP_A_BUY_QTY, L.BTGT_GRP_A_BUY_DESC, L.BTGT_GRP_A_MIN_SPEND_AMT, L.BTGT_GRP_B_BUY_QTY, L.BTGT_GRP_B_BUY_DESC, L.BTGT_GRP_B_MIN_SPEND_AMT, L.SS_SPEND_AMT, L.SS_SPEND_DESC, L.SS_SAVE_DESC, L.SS_SAME_SPEND_ITEM_IND, L.BOGO_SAME_BUY_ITEM_IND, L.GET_LABEL_SUPPRESSED_IND, L.DISCLAIMER_1_TYPE_ID, L.DISCLAIMER_1_TYPE_DESC, L.DISCLAIMER_1_OTHER_DESC, L.DISCLAIMER_2_TYPE_ID, L.DISCLAIMER_2_TYPE_DESC, L.DISCLAIMER_2_OTHER_DESC, L.BTGT_GRP_A_DISCLAIMER_TYPE_ID, L.BTGT_GRP_A_DISCLAIMER_TYPE_DESC, L.BTGT_GRP_A_DISCLAIMER_OTHER_DESC, L.BTGT_GRP_B_DISCLAIMER_TYPE_ID, L.BTGT_GRP_B_DISCLAIMER_TYPE_DESC, L.BTGT_GRP_B_DISCLAIMER_OTHER_DESC, L.EM_OFFER_UNLOCK_TSTMP, L.EM_CREATED_BY, L.EM_CREATED_TSTMP, L.EM_MODIFIED_BY, L.EM_MODIFIED_TSTMP, L.UPDATE_TSTMP, L.LOAD_TSTMP, P.EM_T1_MIN_QTY, P.EM_T1_MAX_QTY, P.EM_T1_DISCOUNT_AMT, P.EM_T2_MIN_QTY, P.EM_T2_MAX_QTY, P.EM_T2_DISCOUNT_AMT, P.EM_T3_MIN_QTY, P.EM_T3_MAX_QTY, P.EM_T3_DISCOUNT_AMT, P.EM_T4_MIN_QTY, P.EM_T4_MAX_QTY, P.EM_T4_DISCOUNT_AMT, C.EM_US_OFFER_FLAG, C.EM_CA_OFFER_FLAG, C.EM_PR_OFFER_FLAG, T.EM_AMS_TEMPLATE_TYPE_NAME, LT.EM_AMS_OFFER_LIMIT_TYPE_NAME, D.EM_AMS_DISCOUNT_TYPE_NAME, E.EVENT_NAME, E.EVENT_DESC, E.EVENT_START_DT, E.EVENT_END_DT, E.EVENT_LOCK_DT, E.EVENT_US_LOCK_DT, E.EVENT_TURN_IN_DT, E.EVENT_DEFAULT_START_DT, E.EVENT_DEFAULT_END_DT, E.STANDARD_FLAG, E.EM_PURGED_FLAG FROM ((((((ADMIN.EM_AMS_OFFER_LABEL L LEFT JOIN (SELECT EM_AMS_OFFER_TIERED_PRICE.EM_OFFER_ID, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 1) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T1_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 1) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T1_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 1) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T1_DISCOUNT_AMT, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 2) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T2_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 2) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T2_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 2) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T2_DISCOUNT_AMT, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 3) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T3_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 3) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T3_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 3) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T3_DISCOUNT_AMT, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 4) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T4_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 4) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T4_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 4) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T4_DISCOUNT_AMT FROM ADMIN.EM_AMS_OFFER_TIERED_PRICE WHERE (EM_AMS_OFFER_TIERED_PRICE.DELETE_IND = 0) GROUP BY EM_AMS_OFFER_TIERED_PRICE.EM_OFFER_ID) P ON ((L.EM_OFFER_ID = P.EM_OFFER_ID))) LEFT JOIN (SELECT EM_AMS_OFFER_COUNTRY.EM_OFFER_ID, MAX(CASE WHEN (BTRIM(EM_AMS_OFFER_COUNTRY.COUNTRY_CD) = 'US'::"VARCHAR") THEN 1 ELSE 0 END) AS EM_US_OFFER_FLAG, MAX(CASE WHEN (BTRIM(EM_AMS_OFFER_COUNTRY.COUNTRY_CD) = 'CA'::"VARCHAR") THEN 1 ELSE 0 END) AS EM_CA_OFFER_FLAG, MAX(CASE WHEN (BTRIM(EM_AMS_OFFER_COUNTRY.COUNTRY_CD) = 'PR'::"VARCHAR") THEN 1 ELSE 0 END) AS EM_PR_OFFER_FLAG FROM ADMIN.EM_AMS_OFFER_COUNTRY WHERE (EM_AMS_OFFER_COUNTRY.DELETE_IND = 0) GROUP BY EM_AMS_OFFER_COUNTRY.EM_OFFER_ID) C ON ((L.EM_OFFER_ID = C.EM_OFFER_ID))) LEFT JOIN ADMIN.EM_AMS_TEMPLATE_TYPE T ON ((L.EM_AMS_TEMPLATE_TYPE_ID = T.EM_AMS_TEMPLATE_TYPE_ID))) LEFT JOIN ADMIN.EM_AMS_OFFER_LIMIT_TYPE LT ON ((L.EM_AMS_OFFER_LIMIT_TYPE_ID = LT.EM_AMS_OFFER_LIMIT_TYPE_ID))) LEFT JOIN ADMIN.EM_AMS_DISCOUNT_TYPE D ON ((L.EM_AMS_DISCOUNT_TYPE_ID = D.EM_AMS_DISCOUNT_TYPE_ID))) LEFT JOIN ADMIN.EM_EVENT E ON ((L.EM_EVENT_ID = E.EM_EVENT_ID)))) EM ON ((OS.AMS_OFFER_SUBMISSION_ID = EM.AMS_OFFER_SUBMISSION_ID))) FULL JOIN (SELECT A.OFFER_ID, A.IS_TEMPLATE_IND, A.FROM_TEMPLATE_IND, A.OFFER_NAME, A.OFFER_DESC, A.OFFER_CATEGORY_ID, A.OFFER_CATEGORY_NAME, A.OFFER_PRIORITY, A.OFFER_START_DT, A.OFFER_END_DT, A.OFFER_LIMIT_TYPE_ID, A.OFFER_LIMIT_TYPE_DESC, A.OFFER_LIMIT_QTY, A.OFFER_LIMIT_PERIOD_DAYS, A.SYS_CREATE_TSTMP, A.SYS_UPDATE_TSTMP, A.DELETE_FLAG, A.STATUS_FLAG, A.OFFER_STATUS_ID, A.OFFER_STATUS_NAME, A.EMPLOYEES_ONLY_IND, A.EMPLOYEES_EXCLUDED_IND, A.SEND_ISSUANCE_IND, A.VENDOR_COUPON_CD, A.TIER_LEVEL_CNT, A.DISC_EVAL_TYPE_ID, A.DISC_EVAL_TYPE_NAME, CASE WHEN (LG.OFFER_ID NOTNULL) THEN 1 ELSE OL.AMS_US_OFFER_FLAG END AS AMS_US_OFFER_FLAG, CASE WHEN (LG.OFFER_ID NOTNULL) THEN 1 ELSE OL.AMS_CA_OFFER_FLAG END AS AMS_CA_OFFER_FLAG, CASE WHEN (LG.OFFER_ID NOTNULL) THEN 1 ELSE OL.AMS_PR_OFFER_FLAG END AS AMS_PR_OFFER_FLAG, BTRIM(LTRIM(OT.TRIGGER_CD, '0'::"VARCHAR")) AS TRIGGER_UPC, IP.MIN_ITEM_PRICE_AMT, IP.T1_QTY_FOR_INCENTIVE AS QTY_FOR_INCENTIVE, IP.T1_QTY_UNIT_TYPE_NAME AS QTY_UNIT_TYPE_NAME, IP.T2_QTY_FOR_INCENTIVE, IP.T2_QTY_UNIT_TYPE_NAME, IP.T3_QTY_FOR_INCENTIVE, IP.T3_QTY_UNIT_TYPE_NAME, IP.T4_QTY_FOR_INCENTIVE, IP.T4_QTY_UNIT_TYPE_NAME, CASE WHEN (D1.DISCOUNT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS DISCOUNT_TYPE_ID, ADT.DISCOUNT_TYPE_NAME, CASE WHEN (D1.OFFER_CHARGEBACK_ID NOTNULL) THEN INT4(D1.OFFER_CHARGEBACK_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS OFFER_CHARGEBACK_ID, AOC.OFFER_CHARGEBACK_DESC, CASE WHEN (D1.DISCOUNT_AMT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_AMT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS DISCOUNT_AMT_TYPE_ID, ADAT.DISCOUNT_AMT_TYPE_NAME, D1.DISCOUNT_AMT, D1.DISCOUNT_LIMIT_QTY, D1.DISCOUNT_LIMIT_WEIGHT, D1.DISCOUNT_LIMIT_AMT, D1.DISCOUNT_RECEIPT_TXT, D1.DISCOUNT_UP_TO_AMT, D1.ALLOW_MARKUP_IND, D1.FLEX_NEGATIVE_IND, CASE WHEN (D1.PRODUCT_GROUP_ID NOTNULL) THEN D1.PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END AS PRODUCT_GROUP_ID, CASE WHEN (D1.EXCLUDED_PRODUCT_GROUP_ID NOTNULL) THEN D1.EXCLUDED_PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END AS EXCLUDED_PRODUCT_GROUP_ID, APGI.PRODUCT_GROUP_ID AS DISCOUNT_INCL_PRODUCT_GROUP_ID, APGI.PRODUCT_GROUP_NAME AS DISCOUNT_INCL_PRODUCT_GROUP_NAME, APGE.PRODUCT_GROUP_ID AS DISCOUNT_EXCL_PRODUCT_GROUP_ID, APGE.PRODUCT_GROUP_NAME AS DISCOUNT_EXCL_PRODUCT_GROUP_NAME, D2.DISCOUNT_AMT AS T2_DISCOUNT_AMT, D2.DISCOUNT_LIMIT_QTY AS T2_DISCOUNT_LIMIT_QTY, D2.DISCOUNT_LIMIT_WEIGHT AS T2_DISCOUNT_LIMIT_WEIGHT, D2.DISCOUNT_LIMIT_AMT AS T2_DISCOUNT_LIMIT_AMT, D2.DISCOUNT_RECEIPT_TXT AS T2_DISCOUNT_RECEIPT_TXT, D3.DISCOUNT_AMT AS T3_DISCOUNT_AMT, D3.DISCOUNT_LIMIT_QTY AS T3_DISCOUNT_LIMIT_QTY, D3.DISCOUNT_LIMIT_WEIGHT AS T3_DISCOUNT_LIMIT_WEIGHT, D3.DISCOUNT_LIMIT_AMT AS T3_DISCOUNT_LIMIT_AMT, D3.DISCOUNT_RECEIPT_TXT AS T3_DISCOUNT_RECEIPT_TXT, D4.DISCOUNT_AMT AS T4_DISCOUNT_AMT, D4.DISCOUNT_LIMIT_QTY AS T4_DISCOUNT_LIMIT_QTY, D4.DISCOUNT_LIMIT_WEIGHT AS T4_DISCOUNT_LIMIT_WEIGHT, D4.DISCOUNT_LIMIT_AMT AS T4_DISCOUNT_LIMIT_AMT, D4.DISCOUNT_RECEIPT_TXT AS T4_DISCOUNT_RECEIPT_TXT, CASE WHEN (M1.PRINTED_MSG_TYPE_ID NOTNULL) THEN M1.PRINTED_MSG_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS PRINTED_MSG_TYPE_ID, APMT.PRINTED_MSG_TYPE_NAME, M1.SORT_ID, M1.MSG_TXT, M1.DELIVERY_REQUIRED_IND, M1.UPC_ID AS PRINTED_MSG_UPC_ID, U1.PRODUCT_ID AS PRINTED_MSG_PRODUCT_ID, M2.MSG_TXT AS T2_MSG_TXT, M2.UPC_ID AS T2_PRINTED_MSG_UPC_ID, U2.PRODUCT_ID AS T2_PRINTED_MSG_PRODUCT_ID, M3.MSG_TXT AS T3_MSG_TXT, M3.UPC_ID AS T3_PRINTED_MSG_UPC_ID, U3.PRODUCT_ID AS T3_PRINTED_MSG_PRODUCT_ID, M4.MSG_TXT AS T4_MSG_TXT, M4.UPC_ID AS T4_PRINTED_MSG_UPC_ID, U4.PRODUCT_ID AS T4_PRINTED_MSG_PRODUCT_ID FROM ((((((((((((((((((((((ADMIN.AMS_OFFER_RPT A LEFT JOIN ADMIN.AMS_OFFER_LOCATION_GROUP LG ON ((((A.OFFER_ID = LG.OFFER_ID) AND (LG.LOCATION_GROUP_ID = 1)) AND (LG.DELETE_IND = 0)))) LEFT JOIN (SELECT L.OFFER_ID, MAX(CASE WHEN ((BTRIM((S.COUNTRY_CD)::"VARCHAR") = 'US'::"VARCHAR") AND (S.STATE_CD <> 'PR'::BPCHAR)) THEN 1 ELSE 0 END) AS AMS_US_OFFER_FLAG, MAX(CASE WHEN (BTRIM((S.COUNTRY_CD)::"VARCHAR") = 'CA'::"VARCHAR") THEN 1 ELSE 0 END) AS AMS_CA_OFFER_FLAG, MAX(CASE WHEN ((BTRIM((S.COUNTRY_CD)::"VARCHAR") = 'US'::"VARCHAR") AND (S.STATE_CD = 'PR'::BPCHAR)) THEN 1 ELSE 0 END) AS AMS_PR_OFFER_FLAG FROM ADMIN.AMS_OFFER_LOCATION_GROUP_STORE L, ADMIN.SITE_PROFILE S WHERE ((L.STORE_NBR = S.STORE_NBR) AND (L.DELETE_IND = 0)) GROUP BY L.OFFER_ID) OL ON ((A.OFFER_ID = OL.OFFER_ID))) LEFT JOIN (SELECT AMS_OFFER_TRIGGER.OFFER_ID, MAX(AMS_OFFER_TRIGGER.TRIGGER_CD) AS TRIGGER_CD FROM ADMIN.AMS_OFFER_TRIGGER WHERE (AMS_OFFER_TRIGGER.DELETE_IND = 0) GROUP BY AMS_OFFER_TRIGGER.OFFER_ID) OT ON ((A.OFFER_ID = OT.OFFER_ID))) LEFT JOIN (SELECT P.OFFER_ID, MAX(P.MIN_ITEM_PRICE_AMT) AS MIN_ITEM_PRICE_AMT, SUM(CASE WHEN (P.TIER_ID = 1) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T1_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 1) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T1_QTY_UNIT_TYPE_NAME, SUM(CASE WHEN (P.TIER_ID = 2) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T2_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 2) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T2_QTY_UNIT_TYPE_NAME, SUM(CASE WHEN (P.TIER_ID = 3) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T3_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 3) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T3_QTY_UNIT_TYPE_NAME, SUM(CASE WHEN (P.TIER_ID = 4) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T4_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 4) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T4_QTY_UNIT_TYPE_NAME FROM ADMIN.AMS_OFFER_PRODUCT_GROUP P, ADMIN.AMS_QTY_UNIT_TYPE Q WHERE ((P.DELETE_IND = 0) AND (P.QTY_UNIT_TYPE_ID = Q.QTY_UNIT_TYPE_ID)) GROUP BY P.OFFER_ID) IP ON ((A.OFFER_ID = IP.OFFER_ID))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D1 ON (((A.OFFER_ID = D1.OFFER_ID) AND (D1.TIER_ID = 1)))) LEFT JOIN ADMIN.AMS_DISCOUNT_TYPE ADT ON ((CASE WHEN (D1.DISCOUNT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = ADT.DISCOUNT_TYPE_ID))) LEFT JOIN ADMIN.AMS_OFFER_CHARGEBACK AOC ON ((CASE WHEN (D1.OFFER_CHARGEBACK_ID NOTNULL) THEN INT4(D1.OFFER_CHARGEBACK_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = AOC.OFFER_CHARGEBACK_ID))) LEFT JOIN ADMIN.AMS_DISCOUNT_AMT_TYPE ADAT ON ((CASE WHEN (D1.DISCOUNT_AMT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_AMT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = ADAT.DISCOUNT_AMT_TYPE_ID))) LEFT JOIN ADMIN.AMS_PRODUCT_GROUP APGI ON ((CASE WHEN (D1.PRODUCT_GROUP_ID NOTNULL) THEN D1.PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END = APGI.PRODUCT_GROUP_ID))) LEFT JOIN ADMIN.AMS_PRODUCT_GROUP APGE ON ((CASE WHEN (D1.EXCLUDED_PRODUCT_GROUP_ID NOTNULL) THEN D1.EXCLUDED_PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END = APGE.PRODUCT_GROUP_ID))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D2 ON (((A.OFFER_ID = D2.OFFER_ID) AND (D2.TIER_ID = 2)))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D3 ON (((A.OFFER_ID = D3.OFFER_ID) AND (D3.TIER_ID = 3)))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D4 ON (((A.OFFER_ID = D4.OFFER_ID) AND (D4.TIER_ID = 4)))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M1 ON (((A.OFFER_ID = M1.OFFER_ID) AND (M1.TIER_ID = 1)))) LEFT JOIN ADMIN.AMS_PRINTED_MSG_TYPE APMT ON ((CASE WHEN (M1.PRINTED_MSG_TYPE_ID NOTNULL) THEN M1.PRINTED_MSG_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = APMT.PRINTED_MSG_TYPE_ID))) LEFT JOIN ADMIN.UPC U1 ON ((M1.UPC_ID = U1.UPC_ID))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M2 ON (((A.OFFER_ID = M2.OFFER_ID) AND (M1.TIER_ID = 2)))) LEFT JOIN ADMIN.UPC U2 ON ((M2.UPC_ID = U2.UPC_ID))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M3 ON (((A.OFFER_ID = M3.OFFER_ID) AND (M3.TIER_ID = 3)))) LEFT JOIN ADMIN.UPC U3 ON ((M3.UPC_ID = U3.UPC_ID))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M4 ON (((A.OFFER_ID = M4.OFFER_ID) AND (M4.TIER_ID = 4)))) LEFT JOIN ADMIN.UPC U4 ON ((M4.UPC_ID = U4.UPC_ID)))) AM ON ((INT8(OS.AMS_OFFER_ID) = AM.OFFER_ID)));

\echo
\echo *****  Creating view:  "USR_STORE_GROUP_STORE_VW"

CREATE or replace VIEW  USR_STORE_GROUP_STORE_VW
(
     STORE_GROUP_ID,
     STORE_GROUP_DESC,
     LOCATION_ID,
     CUSTOMER_CUBE_IND
) AS
SELECT USG.STORE_GROUP_ID, USG.STORE_GROUP_DESC, SITE.LOCATION_ID, USG.CUSTOMER_CUBE_IND FROM ((ADMIN.USR_STORE_GROUP USG JOIN ADMIN.USR_STORE_GROUP_HIERARCHY USGH ON ((USG.STORE_GROUP_ID = USGH.STORE_GROUP_ID))) JOIN ADMIN.SITE_PROFILE_RPT SITE ON ((((((((CASE WHEN (USGH.LOCATION_TYPE_ID NOTNULL) THEN INT4(USGH.LOCATION_TYPE_ID) WHEN (CASE WHEN (SITE.LOCATION_TYPE_ID NOTNULL) THEN INT4(SITE.LOCATION_TYPE_ID) WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SITE.LOCATION_TYPE_ID NOTNULL) THEN INT4(SITE.LOCATION_TYPE_ID) WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END = CASE WHEN (SITE.LOCATION_TYPE_ID NOTNULL) THEN INT4(SITE.LOCATION_TYPE_ID) WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END) AND (CASE WHEN (USGH.COMPANY_ID NOTNULL) THEN USGH.COMPANY_ID WHEN (CASE WHEN (SITE.COMPANY_ID NOTNULL) THEN SITE.COMPANY_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SITE.COMPANY_ID NOTNULL) THEN SITE.COMPANY_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END = CASE WHEN (SITE.COMPANY_ID NOTNULL) THEN SITE.COMPANY_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END)) AND (CASE WHEN (USGH.COUNTRY_CD NOTNULL) THEN USGH.COUNTRY_CD WHEN (CASE WHEN (SITE.COUNTRY_CD NOTNULL) THEN SITE.COUNTRY_CD WHEN ('~~~' NOTNULL) THEN '~~~'::BPCHAR ELSE NULL::BPCHAR END NOTNULL) THEN CASE WHEN (SITE.COUNTRY_CD NOTNULL) THEN SITE.COUNTRY_CD WHEN ('~~~' NOTNULL) THEN '~~~'::BPCHAR ELSE NULL::BPCHAR END ELSE NULL::BPCHAR END = CASE WHEN (SITE.COUNTRY_CD NOTNULL) THEN SITE.COUNTRY_CD WHEN ('~~~' NOTNULL) THEN '~~~'::BPCHAR ELSE NULL::BPCHAR END)) AND (CASE WHEN (USGH.SUPER_REGION_ID NOTNULL) THEN USGH.SUPER_REGION_ID WHEN (CASE WHEN (SITE.SUPER_REGION_ID NOTNULL) THEN SITE.SUPER_REGION_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END NOTNULL) THEN CASE WHEN (SITE.SUPER_REGION_ID NOTNULL) THEN SITE.SUPER_REGION_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END ELSE NULL::INT8 END = CASE WHEN (SITE.SUPER_REGION_ID NOTNULL) THEN SITE.SUPER_REGION_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END)) AND (CASE WHEN (USGH.REGION_ID NOTNULL) THEN USGH.REGION_ID WHEN (CASE WHEN (SITE.REGION_ID NOTNULL) THEN SITE.REGION_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END NOTNULL) THEN CASE WHEN (SITE.REGION_ID NOTNULL) THEN SITE.REGION_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END ELSE NULL::INT8 END = CASE WHEN (SITE.REGION_ID NOTNULL) THEN SITE.REGION_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END)) AND (CASE WHEN (USGH.DISTRICT_ID NOTNULL) THEN USGH.DISTRICT_ID WHEN (CASE WHEN (SITE.DISTRICT_ID NOTNULL) THEN SITE.DISTRICT_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END NOTNULL) THEN CASE WHEN (SITE.DISTRICT_ID NOTNULL) THEN SITE.DISTRICT_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END ELSE NULL::INT8 END = CASE WHEN (SITE.DISTRICT_ID NOTNULL) THEN SITE.DISTRICT_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END)) AND (CASE WHEN (USGH.STORE_NBR NOTNULL) THEN USGH.STORE_NBR WHEN (CASE WHEN (SITE.STORE_NBR NOTNULL) THEN SITE.STORE_NBR WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SITE.STORE_NBR NOTNULL) THEN SITE.STORE_NBR WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END = CASE WHEN (SITE.STORE_NBR NOTNULL) THEN SITE.STORE_NBR WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END)))) WHERE (USGH.RETIRE_IND = 0);

\echo
\echo *****  Creating view:  "USR_DATE_RANGE_DAY_VW"

CREATE or replace VIEW  USR_DATE_RANGE_DAY_VW
(
     DATE_RANGE_ID,
     DATE_RANGE_DESC,
     DATE_RANGE_LONG_DESC,
     DATE_RANGE_COMPONENT_TYPE_CD,
     DATE_RANGE_COMPONENT_DESC,
     DAY_DT
) AS
SELECT DISTINCT UDR.DATE_RANGE_ID, UDR.DATE_RANGE_DESC, UDR.DATE_RANGE_LONG_DESC, UDRC.DATE_RANGE_COMPONENT_TYPE_CD, UDRC.DATE_RANGE_COMPONENT_DESC, D.DAY_DT FROM ((ADMIN.USR_DATE_RANGE UDR JOIN ADMIN.USR_DATE_RANGE_COMPONENT UDRC ON ((UDR.DATE_RANGE_ID = UDRC.DATE_RANGE_ID))) JOIN ADMIN.DAYS D ON (((((((((D.DAY_DT >= CASE WHEN (UDRC.START_DT NOTNULL) THEN UDRC.START_DT WHEN (D.DAY_DT NOTNULL) THEN D.DAY_DT ELSE NULL::"TIMESTAMP" END) AND (D.DAY_DT <= CASE WHEN (UDRC.END_DT NOTNULL) THEN UDRC.END_DT WHEN (D.DAY_DT NOTNULL) THEN D.DAY_DT ELSE NULL::"TIMESTAMP" END)) AND (D.DAY_OF_WK_NAME = CASE WHEN (UDRC.DAY_OF_WEEK_NAME NOTNULL) THEN UDRC.DAY_OF_WEEK_NAME WHEN (D.DAY_OF_WK_NAME NOTNULL) THEN D.DAY_OF_WK_NAME ELSE NULL::BPCHAR END)) AND (D.FISCAL_WK = CASE WHEN (UDRC.FISCAL_WK NOTNULL) THEN UDRC.FISCAL_WK WHEN (D.FISCAL_WK NOTNULL) THEN D.FISCAL_WK ELSE NULL::INT4 END)) AND (D.FISCAL_MO = CASE WHEN (UDRC.FISCAL_MO NOTNULL) THEN UDRC.FISCAL_MO WHEN (D.FISCAL_MO NOTNULL) THEN D.FISCAL_MO ELSE NULL::INT4 END)) AND (D.FISCAL_QTR = CASE WHEN (UDRC.FISCAL_QTR NOTNULL) THEN UDRC.FISCAL_QTR WHEN (D.FISCAL_QTR NOTNULL) THEN D.FISCAL_QTR ELSE NULL::INT4 END)) AND (D.FISCAL_YR = CASE WHEN (UDRC.FISCAL_YR NOTNULL) THEN UDRC.FISCAL_YR WHEN (D.FISCAL_YR NOTNULL) THEN D.FISCAL_YR ELSE NULL::INT2 END)) AND (D.WEEK_DT = CASE WHEN (UDRC.WEEK_DT NOTNULL) THEN UDRC.WEEK_DT WHEN (D.WEEK_DT NOTNULL) THEN D.WEEK_DT ELSE NULL::"TIMESTAMP" END)))) WHERE (UDRC.RETIRE_IND = 0);

\echo
\echo *****  Creating view:  "USR_PRODUCT_GROUP_SKU_VW"

CREATE or replace VIEW  USR_PRODUCT_GROUP_SKU_VW
(
     PRODUCT_GROUP_ID,
     PRODUCT_GROUP_DESC,
     CUSTOMER_CUBE_IND,
     PRODUCT_GROUP_HIERARCHY_LEVEL_ID,
     PRODUCT_GROUP_HIERARCHY_LEVEL_DESC,
     AGGREGATE_IND,
     PRODUCT_ID,
     CATEGORY_PRODUCT_GROUP_ID,
     SAP_CATEGORY_ID,
     SAP_CATEGORY_DESC,
     CLASS_PRODUCT_GROUP_ID,
     SAP_CLASS_ID,
     SAP_CLASS_DESC,
     DEPT_PRODUCT_GROUP_ID,
     SAP_DEPT_ID,
     SAP_DEPT_DESC,
     DIVISION_PRODUCT_GROUP_ID,
     SAP_DIVISION_ID,
     SAP_DIVISION_DESC,
     VP_PRODUCT_GROUP_ID,
     VP_ID,
     VP_DESC
) AS
SELECT DISTINCT UPG.PRODUCT_GROUP_ID, UPG.PRODUCT_GROUP_DESC, UPG.CUSTOMER_CUBE_IND, UPG.PRODUCT_GROUP_HIERARCHY_LEVEL_ID, PGHL.PRODUCT_GROUP_HIERARCHY_LEVEL_DESC, PGHL.AGGREGATE_IND, SKU.PRODUCT_ID, UPG.CATEGORY_PRODUCT_GROUP_ID, UPG.SAP_CATEGORY_ID, UPG.SAP_CATEGORY_DESC, UPG.CLASS_PRODUCT_GROUP_ID, UPG.SAP_CLASS_ID, UPG.SAP_CLASS_DESC, UPG.DEPT_PRODUCT_GROUP_ID, UPG.SAP_DEPT_ID, UPG.SAP_DEPT_DESC, UPG.DIVISION_PRODUCT_GROUP_ID, UPG.SAP_DIVISION_ID, UPG.SAP_DIVISION_DESC, UPG.VP_PRODUCT_GROUP_ID, UPG.VP_ID, UPG.VP_DESC FROM (((ADMIN.SKU_PROFILE_RPT SKU JOIN ADMIN.USR_PRODUCT_GROUP_HIERARCHY UPGH ON ((((((((((CASE WHEN (SKU.SKU_NBR NOTNULL) THEN SKU.SKU_NBR WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END = CASE WHEN (UPGH.SKU_NBR NOTNULL) THEN UPGH.SKU_NBR WHEN (CASE WHEN (SKU.SKU_NBR NOTNULL) THEN SKU.SKU_NBR WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SKU.SKU_NBR NOTNULL) THEN SKU.SKU_NBR WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END) AND (CASE WHEN (SKU.SAP_CATEGORY_ID NOTNULL) THEN SKU.SAP_CATEGORY_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END = CASE WHEN (UPGH.SAP_CATEGORY_ID NOTNULL) THEN UPGH.SAP_CATEGORY_ID WHEN (CASE WHEN (SKU.SAP_CATEGORY_ID NOTNULL) THEN SKU.SAP_CATEGORY_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SKU.SAP_CATEGORY_ID NOTNULL) THEN SKU.SAP_CATEGORY_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END)) AND (CASE WHEN (SKU.SAP_CLASS_ID NOTNULL) THEN SKU.SAP_CLASS_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END = CASE WHEN (UPGH.SAP_CLASS_ID NOTNULL) THEN UPGH.SAP_CLASS_ID WHEN (CASE WHEN (SKU.SAP_CLASS_ID NOTNULL) THEN SKU.SAP_CLASS_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SKU.SAP_CLASS_ID NOTNULL) THEN SKU.SAP_CLASS_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END)) AND (CASE WHEN (SKU.SAP_DEPT_ID NOTNULL) THEN SKU.SAP_DEPT_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END = CASE WHEN (UPGH.SAP_DEPT_ID NOTNULL) THEN UPGH.SAP_DEPT_ID WHEN (CASE WHEN (SKU.SAP_DEPT_ID NOTNULL) THEN SKU.SAP_DEPT_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SKU.SAP_DEPT_ID NOTNULL) THEN SKU.SAP_DEPT_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END)) AND (CASE WHEN (SKU.SAP_DIVISION_ID NOTNULL) THEN SKU.SAP_DIVISION_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END = CASE WHEN (UPGH.SAP_DIVISION_ID NOTNULL) THEN UPGH.SAP_DIVISION_ID WHEN (CASE WHEN (SKU.SAP_DIVISION_ID NOTNULL) THEN SKU.SAP_DIVISION_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SKU.SAP_DIVISION_ID NOTNULL) THEN SKU.SAP_DIVISION_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END)) AND (CASE WHEN (SKU.VP_ID NOTNULL) THEN SKU.VP_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END = CASE WHEN (UPGH.VP_ID NOTNULL) THEN UPGH.VP_ID WHEN (CASE WHEN (SKU.VP_ID NOTNULL) THEN SKU.VP_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SKU.VP_ID NOTNULL) THEN SKU.VP_ID WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END)) AND (CASE WHEN (SKU.BRAND_CD NOTNULL) THEN SKU.BRAND_CD WHEN ('~~~~' NOTNULL) THEN '~~~~'::"VARCHAR" ELSE NULL::"VARCHAR" END = CASE WHEN (UPGH.BRAND_CD NOTNULL) THEN UPGH.BRAND_CD WHEN (CASE WHEN (SKU.BRAND_CD NOTNULL) THEN SKU.BRAND_CD WHEN ('~~~~' NOTNULL) THEN '~~~~'::"VARCHAR" ELSE NULL::"VARCHAR" END NOTNULL) THEN CASE WHEN (SKU.BRAND_CD NOTNULL) THEN SKU.BRAND_CD WHEN ('~~~~' NOTNULL) THEN '~~~~'::"VARCHAR" ELSE NULL::"VARCHAR" END ELSE NULL::"VARCHAR" END)) AND (CASE WHEN (SKU.BRAND_CLASSIFICATION_ID NOTNULL) THEN INT4(SKU.BRAND_CLASSIFICATION_ID) WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END = CASE WHEN (UPGH.BRAND_CLASSIFICATION_ID NOTNULL) THEN INT4(UPGH.BRAND_CLASSIFICATION_ID) WHEN (CASE WHEN (SKU.BRAND_CLASSIFICATION_ID NOTNULL) THEN INT4(SKU.BRAND_CLASSIFICATION_ID) WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END NOTNULL) THEN CASE WHEN (SKU.BRAND_CLASSIFICATION_ID NOTNULL) THEN INT4(SKU.BRAND_CLASSIFICATION_ID) WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END ELSE NULL::INT4 END)) AND (CASE WHEN (SKU.PRIMARY_VENDOR_ID NOTNULL) THEN SKU.PRIMARY_VENDOR_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END = CASE WHEN (UPGH.PRIMARY_VENDOR_ID NOTNULL) THEN UPGH.PRIMARY_VENDOR_ID WHEN (CASE WHEN (SKU.PRIMARY_VENDOR_ID NOTNULL) THEN SKU.PRIMARY_VENDOR_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END NOTNULL) THEN CASE WHEN (SKU.PRIMARY_VENDOR_ID NOTNULL) THEN SKU.PRIMARY_VENDOR_ID WHEN (-1 NOTNULL) THEN '-1'::INT8 ELSE NULL::INT8 END ELSE NULL::INT8 END)))) JOIN ADMIN.USR_PRODUCT_GROUP UPG ON ((UPGH.PRODUCT_GROUP_ID = UPG.PRODUCT_GROUP_ID))) JOIN ADMIN.PRODUCT_GROUP_HIERARCHY_LEVEL PGHL ON ((UPG.PRODUCT_GROUP_HIERARCHY_LEVEL_ID = PGHL.PRODUCT_GROUP_HIERARCHY_LEVEL_ID))) WHERE (UPGH.RETIRE_IND = 0);

\echo
\echo *****  Creating view:  "P4P_EMPL_LM_DAY_RPT_VW"

CREATE or replace VIEW  P4P_EMPL_LM_DAY_RPT_VW
(
     DAY_DT,
     EMPLOYEE_ID,
     LOCATION_ID,
     PARENT_LOCATION_ID,
     DC_NBR,
     STORE_NAME,
     PARENT_DC_NBR,
     WMS_SHIFT_CD,
     WMS_JOB_FUNCTION_ID,
     WMS_JOB_FUNCTION_NAME,
     P4P_JOB_FUNCTION_ID,
     P4P_JOB_FUNCTION_DESC,
     P4P_DIRECT_FL,
     P4P_LEARNING_GROUP_ID,
     WMS_DEPT_CD,
     P4P_PERIOD_ID,
     LOGIN_USER_ID,
     WM_EMPL_FIRST_NAME,
     WM_EMPL_LAST_NAME,
     WMS_SUPERVISOR_USER_ID,
     WMS_TOTAL_EARNED_MINS,
     WMS_TOTAL_DIRECT_EARNED_MINS,
     WMS_STD_DIRECT_MINS,
     WMS_NON_STD_DIRECT_MINS,
     WMS_INDIRECT_MINS,
     WMS_USER_DEF_INDIRECT_MINS,
     WMS_PAID_BREAK_MINS,
     WMS_UNPAID_BREAK_MINS,
     WMS_TOTAL_MINS,
     WMS_TOTAL_DIRECT_MINS,
     WMS_TOTAL_INDIRECT_MINS,
     WMS_CALC_STD_DIRECT_MINS,
     WMS_TRAINED_MINS,
     WMS_UNTRAINED_MINS,
     WMS_TRAINED_EARNED_MINS,
     WMS_UNTRAINED_EARNED_MINS,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT P.DAY_DT, P.EMPLOYEE_ID, S1.LOCATION_ID, S2.LOCATION_ID AS PARENT_LOCATION_ID, P.STORE_NBR AS DC_NBR, S1.STORE_NAME, D.DC_GROUP AS PARENT_DC_NBR, P.WMS_SHIFT_CD, P.WMS_JOB_FUNCTION_ID, UPPER(P.WMS_JOB_FUNCTION_NAME) AS WMS_JOB_FUNCTION_NAME, J.P4P_JOB_FUNCTION_ID, UPPER(J.P4P_JOB_FUNCTION_DESC) AS P4P_JOB_FUNCTION_DESC, J.P4P_DIRECT_FL, P.P4P_LEARNING_GROUP_ID, P.WMS_DEPT_CD, P.P4P_PERIOD_ID, P.LOGIN_USER_ID, P.WMS_EMPL_FIRST_NAME AS WM_EMPL_FIRST_NAME, P.WMS_EMPL_LAST_NAME AS WM_EMPL_LAST_NAME, P.WMS_SUPERVISOR_USER_ID, P.WMS_TOTAL_EARNED_MINS, CASE WHEN (J.P4P_DIRECT_FL = 'D'::"VARCHAR") THEN P.WMS_TOTAL_EARNED_MINS ELSE '0'::NUMERIC END AS WMS_TOTAL_DIRECT_EARNED_MINS, P.WMS_STD_DIRECT_MINS, P.WMS_NON_STD_DIRECT_MINS, P.WMS_INDIRECT_MINS, P.WMS_USER_DEF_INDIRECT_MINS, P.WMS_PAID_BREAK_MINS, P.WMS_UNPAID_BREAK_MINS, P.WMS_TOTAL_MINS, P.WMS_TOTAL_DIRECT_MINS, P.WMS_TOTAL_INDIRECT_MINS, P.WMS_CALC_STD_DIRECT_MINS, P.WMS_TRAINED_MINS, P.WMS_UNTRAINED_MINS, P.WMS_TRAINED_EARNED_MINS, P.WMS_UNTRAINED_EARNED_MINS, P.UPDATE_TSTMP, P.LOAD_TSTMP FROM ((((ADMIN.P4P_EMPL_LM_DAY P JOIN ADMIN.P4P_DC_GROUP D ON ((P.STORE_NBR = D.STORE_NBR))) JOIN ADMIN.SITE_PROFILE S1 ON ((P.STORE_NBR = S1.STORE_NBR))) JOIN ADMIN.SITE_PROFILE S2 ON ((D.DC_GROUP = S2.STORE_NBR))) JOIN ADMIN.P4P_JOB_FUNCTION J ON (((UPPER(P.WMS_JOB_FUNCTION_NAME) = UPPER(J.P4P_JOB_FUNCTION_DESC)) AND ((DATE('now(0)'::"VARCHAR") >= J.P4P_JOB_LEARN_GRP_EFF_DT) AND (DATE('now(0)'::"VARCHAR") <= J.P4P_JOB_LEARN_GRP_END_DT)))));

\echo
\echo *****  Creating view:  "SALES_DAY_SKU_RPT_CRCY_VW"

CREATE or replace VIEW  SALES_DAY_SKU_RPT_CRCY_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_TYPE_ID,
     COUNTRY_CD,
     COMP_FLAG,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     WEEK_DT,
     FISCAL_YR,
     SKU_NBR,
     STATUS_ID,
     BRAND_NAME,
     OWNBRAND_FLAG,
     SKU_TXN_CNT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, SDSR.PRODUCT_ID, SDSR.LOCATION_TYPE_ID, SDSR.COUNTRY_CD, CASE WHEN ((DTL.COMP_IND = 1) AND (DTL.TY_LY_FLAG = 'TY'::"VARCHAR")) THEN INT4(SDSR.COMP_FLAG) WHEN ((DTL.COMP_IND = 1) AND (DTL.TY_LY_FLAG = 'LY'::"VARCHAR")) THEN INT4(SDSR.COMP_FLAG_NY) ELSE 0 END AS COMP_FLAG, DTL.TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, DTL.WEEK_DT, DTL.FISCAL_YR, SDSR.SKU_NBR, SDSR.STATUS_ID, SDSR.BRAND_NAME, SDSR.OWNBRAND_FLAG, SDSR.SKU_TXN_CNT, SDSR.NET_SALES_AMT, SDSR.NET_SALES_QTY, SDSR.NET_MARGIN_AMT, SDSR.SALES_AMT, SDSR.SALES_COST, SDSR.SALES_QTY, SDSR.RETURN_AMT, SDSR.RETURN_COST, SDSR.RETURN_QTY, SDSR.CLEARANCE_AMT, SDSR.CLEARANCE_QTY, SDSR.CLEARANCE_RETURN_AMT, SDSR.CLEARANCE_RETURN_QTY, SDSR.DISCOUNT_AMT, SDSR.DISCOUNT_QTY, SDSR.DISCOUNT_RETURN_AMT, SDSR.DISCOUNT_RETURN_QTY, SDSR.POS_COUPON_AMT, SDSR.POS_COUPON_QTY, SDSR.POS_COUPON_ALLOC_AMT, SDSR.POS_COUPON_ALLOC_QTY, SDSR.SPECIAL_SALES_AMT, SDSR.SPECIAL_SALES_QTY, SDSR.SPECIAL_RETURN_AMT, SDSR.SPECIAL_RETURN_QTY, SDSR.SPECIAL_SRVC_AMT, SDSR.SPECIAL_SRVC_QTY, SDSR.MA_SALES_AMT, SDSR.MA_SALES_QTY, SDSR.MA_TRANS_AMT, SDSR.MA_TRANS_COST, SDSR.MA_TRANS_QTY, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SDSR.EXCH_RATE_PCT END AS EXCH_RATE_PCT, SDSR.UPDATE_DT, SDSR.LOAD_DT FROM ((ADMIN.SALES_DAY_SKU_RPT SDSR JOIN ADMIN.DAYS_TY_LY DTL ON ((SDSR.DAY_DT = DTL.TRANS_DAY_DT))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SALES_DAY_SKU_RPT_VW"

CREATE or replace VIEW  SALES_DAY_SKU_RPT_VW
(
     DAY_DT,
     PRODUCT_ID,
     LOCATION_TYPE_ID,
     COUNTRY_CD,
     COMP_FLAG,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     SKU_NBR,
     STATUS_ID,
     BRAND_NAME,
     OWNBRAND_FLAG,
     SKU_TXN_CNT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, SDSR.PRODUCT_ID, SDSR.LOCATION_TYPE_ID, SDSR.COUNTRY_CD, CASE WHEN ((DTL.COMP_IND = 1) AND (DTL.TY_LY_FLAG = 'TY'::"VARCHAR")) THEN INT4(SDSR.COMP_FLAG) WHEN ((DTL.COMP_IND = 1) AND (DTL.TY_LY_FLAG = 'LY'::"VARCHAR")) THEN INT4(SDSR.COMP_FLAG_NY) ELSE 0 END AS COMP_FLAG, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, SDSR.SKU_NBR, SDSR.STATUS_ID, SDSR.BRAND_NAME, SDSR.OWNBRAND_FLAG, SDSR.SKU_TXN_CNT, SDSR.NET_SALES_AMT, SDSR.NET_SALES_QTY, SDSR.NET_MARGIN_AMT, SDSR.SALES_AMT, SDSR.SALES_COST, SDSR.SALES_QTY, SDSR.RETURN_AMT, SDSR.RETURN_COST, SDSR.RETURN_QTY, SDSR.CLEARANCE_AMT, SDSR.CLEARANCE_QTY, SDSR.CLEARANCE_RETURN_AMT, SDSR.CLEARANCE_RETURN_QTY, SDSR.DISCOUNT_AMT, SDSR.DISCOUNT_QTY, SDSR.DISCOUNT_RETURN_AMT, SDSR.DISCOUNT_RETURN_QTY, SDSR.POS_COUPON_AMT, SDSR.POS_COUPON_QTY, SDSR.POS_COUPON_ALLOC_AMT, SDSR.POS_COUPON_ALLOC_QTY, SDSR.SPECIAL_SALES_AMT, SDSR.SPECIAL_SALES_QTY, SDSR.SPECIAL_RETURN_AMT, SDSR.SPECIAL_RETURN_QTY, SDSR.SPECIAL_SRVC_AMT, SDSR.SPECIAL_SRVC_QTY, SDSR.MA_SALES_AMT, SDSR.MA_SALES_QTY, SDSR.MA_TRANS_AMT, SDSR.MA_TRANS_COST, SDSR.MA_TRANS_QTY, SDSR.EXCH_RATE_PCT, SDSR.UPDATE_DT, SDSR.LOAD_DT FROM (ADMIN.SALES_DAY_SKU_RPT SDSR JOIN ADMIN.DAYS_TY_LY DTL ON ((SDSR.DAY_DT = DTL.TRANS_DAY_DT)));

\echo
\echo *****  Creating view:  "EM_EVENT_STORE_SMART_SALES_VW"

CREATE or replace VIEW  EM_EVENT_STORE_SMART_SALES_VW
(
     EM_EVENT_ID,
     DATE_RANGE_CD,
     PROMO_FLAG,
     DAY_DT,
     PRODUCT_ID,
     LOCATION_TYPE_ID,
     COUNTRY_CD,
     COMP_FLAG,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     WEEK_DT,
     FISCAL_YR,
     SKU_NBR,
     STATUS_ID,
     BRAND_NAME,
     OWNBRAND_FLAG,
     SKU_TXN_CNT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT EE.EM_EVENT_ID, CASE WHEN ((SDSRCV.DAY_DT >= EE.EVENT_START_DT) AND (SDSRCV.DAY_DT <= EE.EVENT_END_DT)) THEN 'E'::"VARCHAR" ELSE 'P'::"VARCHAR" END AS DATE_RANGE_CD, CASE WHEN (EES.PROMO_FLAG NOTNULL) THEN EES.PROMO_FLAG WHEN ('0' NOTNULL) THEN '0'::BPCHAR ELSE NULL::BPCHAR END AS PROMO_FLAG, SDSRCV.DAY_DT, SDSRCV.PRODUCT_ID, SDSRCV.LOCATION_TYPE_ID, SDSRCV.COUNTRY_CD, SDSRCV.COMP_FLAG, SDSRCV.TY_LY_FLAG, SDSRCV.CURRENCY_TYPE_ID, SDSRCV.CURRENCY_TYPE_DESC, SDSRCV.WEEK_DT, SDSRCV.FISCAL_YR, SDSRCV.SKU_NBR, SDSRCV.STATUS_ID, SDSRCV.BRAND_NAME, SDSRCV.OWNBRAND_FLAG, SDSRCV.SKU_TXN_CNT, SDSRCV.NET_SALES_AMT, SDSRCV.NET_SALES_QTY, SDSRCV.NET_MARGIN_AMT, SDSRCV.SALES_AMT, SDSRCV.SALES_COST, SDSRCV.SALES_QTY, SDSRCV.RETURN_AMT, SDSRCV.RETURN_COST, SDSRCV.RETURN_QTY, SDSRCV.DISCOUNT_AMT, SDSRCV.DISCOUNT_QTY, SDSRCV.DISCOUNT_RETURN_AMT, SDSRCV.DISCOUNT_RETURN_QTY, SDSRCV.POS_COUPON_AMT, SDSRCV.POS_COUPON_QTY, SDSRCV.POS_COUPON_ALLOC_AMT, SDSRCV.POS_COUPON_ALLOC_QTY, SDSRCV.SPECIAL_SALES_AMT, SDSRCV.SPECIAL_SALES_QTY, SDSRCV.SPECIAL_RETURN_AMT, SDSRCV.SPECIAL_RETURN_QTY, SDSRCV.SPECIAL_SRVC_AMT, SDSRCV.SPECIAL_SRVC_QTY, SDSRCV.MA_SALES_AMT, SDSRCV.MA_SALES_QTY, SDSRCV.MA_TRANS_AMT, SDSRCV.MA_TRANS_COST, SDSRCV.MA_TRANS_QTY, SDSRCV.EXCH_RATE_PCT, SDSRCV.UPDATE_DT, SDSRCV.LOAD_DT FROM ((ADMIN.SALES_DAY_SKU_RPT_CRCY_VW SDSRCV JOIN (SELECT EE.EM_EVENT_ID, D.DAY_DT, EE.EVENT_START_DT, EE.EVENT_END_DT FROM ((ADMIN.EM_EVENT EE JOIN ADMIN.DAYS D ON (((D.DAY_DT >= "TIMESTAMP"((DATE(EE.EVENT_START_DT) - 56))) AND (D.DAY_DT <= EE.EVENT_END_DT)))) JOIN (SELECT DISTINCT EE.EM_EVENT_ID, D.DAY_OF_WK_NAME FROM (ADMIN.EM_EVENT EE JOIN ADMIN.DAYS D ON (((D.DAY_DT >= EE.EVENT_START_DT) AND (D.DAY_DT <= EE.EVENT_END_DT))))) ED ON (((EE.EM_EVENT_ID = ED.EM_EVENT_ID) AND (D.DAY_OF_WK_NAME = ED.DAY_OF_WK_NAME))))) EE ON ((SDSRCV.DAY_DT = EE.DAY_DT))) LEFT JOIN ADMIN.EM_EVENT_SKU EES ON ((((EE.EM_EVENT_ID = EES.EM_EVENT_ID) AND (SDSRCV.PRODUCT_ID = EES.PRODUCT_ID)) AND (SDSRCV.COUNTRY_CD = (EES.COUNTRY_CD)::"VARCHAR"))));

\echo
\echo *****  Creating view:  "SALES_TRANS_COMPONENT_CRCY_VW"

CREATE or replace VIEW  SALES_TRANS_COMPONENT_CRCY_VW
(
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     CPN_POS_TXN_SEQ_NBR,
     OFFER_ID,
     MA_EVENT_ID,
     DISCOUNT_TYPE_ID,
     COUPON_TYPE_ID,
     COUPON_ACCESS_CD,
     PRODUCT_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     PAYMENT_TYPE_ID,
     TRANS_ACCT_NBR,
     AUTH_APPROVAL_CODE,
     SALES_COMPONENT_ID,
     SALES_COMPONENT_TYPE_ID,
     ISSUANCE_ID,
     TAX_TYPE_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     TRANS_TSTMP,
     REGISTER_NBR,
     TRANSACTION_NBR,
     SALES_TYPE_ID,
     SALES_CUST_CAPTURE_CD,
     CUST_TRANS_ID,
     CASHIER_NBR,
     PETPERK_OVERRIDE_NBR,
     PETPERK_EMAIL_IND,
     KEYED_FLAG,
     NON_TAX_FLAG,
     EMPLOYEE_ID,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     TENDER_UID,
     TAX_EXEMPT_ID,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     CDC_EMAIL_ID,
     CDC_FIRST_NAME_ID,
     CDC_LAST_NAME_ID,
     CDC_PHONE_NBR_ID,
     DIGITAL_RECEIPT_ANSWER_CD,
     OFFLINE_CUST_LKP_IND,
     REV_SALES_TYPE_CTRL_ID,
     REV_SALES_TYPE_ID,
     EP_SALES_TYPE_ID,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     SALES_TRANS_AMT,
     RETURN_TRANS_AMT,
     ISSUANCE_QTY,
     OFFER_QTY,
     TAX_PCT,
     TAX_AMT,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT STC.DAY_DT, STC.LOCATION_ID, STC.SALES_INSTANCE_ID, STC.UPC_ID, STC.TP_INVOICE_NBR, STC.PARENT_UPC_ID, STC.COMBO_TYPE_CD, STC.POS_TXN_SEQ_NBR, STC.CPN_POS_TXN_SEQ_NBR, STC.OFFER_ID, STC.MA_EVENT_ID, STC.DISCOUNT_TYPE_ID, STC.COUPON_TYPE_ID, STC.COUPON_ACCESS_CD, STC.PRODUCT_ID, STC.MOVEMENT_ID, STC.PO_NBR, STC.PO_LINE_NBR, STC.PAYMENT_TYPE_ID, STC.TRANS_ACCT_NBR, STC.AUTH_APPROVAL_CODE, STC.SALES_COMPONENT_ID, STC.SALES_COMPONENT_TYPE_ID, STC.ISSUANCE_ID, STC.TAX_TYPE_ID, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, STC.VOID_TYPE_CD, STC.TXN_WAS_POST_VOIDED_FLAG, STC.TRANS_TSTMP, STC.REGISTER_NBR, STC.TRANSACTION_NBR, STC.SALES_TYPE_ID, STC.SALES_CUST_CAPTURE_CD, STC.CUST_TRANS_ID, STC.CASHIER_NBR, STC.PETPERK_OVERRIDE_NBR, STC.PETPERK_EMAIL_IND, STC.KEYED_FLAG, STC.NON_TAX_FLAG, STC.EMPLOYEE_ID, STC.CUST_FIRST_NAME, STC.CUST_LAST_NAME, STC.TENDER_UID, STC.TAX_EXEMPT_ID, STC.ORDER_NBR, STC.ORDER_CHANNEL, STC.ORDER_ASSIST_LOCATION_ID, STC.ORDER_FULFILLMENT_CHANNEL, STC.ORDER_CREATION_CHANNEL, STC.CDC_EMAIL_ID, STC.CDC_FIRST_NAME_ID, STC.CDC_LAST_NAME_ID, STC.CDC_PHONE_NBR_ID, STC.DIGITAL_RECEIPT_ANSWER_CD, STC.OFFLINE_CUST_LKP_IND, STC.REV_SALES_TYPE_CTRL_ID, STC.REV_SALES_TYPE_ID, STC.EP_SALES_TYPE_ID, STC.NET_SALES_AMT, STC.NET_SALES_QTY, STC.NET_MARGIN_AMT, STC.SALES_AMT, STC.SALES_COST, STC.SALES_QTY, STC.RETURN_AMT, STC.RETURN_COST, STC.RETURN_QTY, STC.CLEARANCE_AMT, STC.CLEARANCE_QTY, STC.CLEARANCE_RETURN_AMT, STC.CLEARANCE_RETURN_QTY, STC.DISCOUNT_AMT, STC.DISCOUNT_QTY, STC.DISCOUNT_RETURN_AMT, STC.DISCOUNT_RETURN_QTY, STC.POS_COUPON_AMT, STC.POS_COUPON_QTY, STC.POS_COUPON_ALLOC_AMT, STC.POS_COUPON_ALLOC_QTY, STC.SPECIAL_SALES_AMT, STC.SPECIAL_SALES_QTY, STC.SPECIAL_RETURN_AMT, STC.SPECIAL_RETURN_QTY, STC.SPECIAL_SRVC_AMT, STC.SPECIAL_SRVC_QTY, STC.MA_SALES_AMT, STC.MA_SALES_QTY, STC.MA_TRANS_AMT, STC.MA_TRANS_COST, STC.MA_TRANS_QTY, STC.SALES_TRANS_AMT, STC.RETURN_TRANS_AMT, STC.ISSUANCE_QTY, STC.OFFER_QTY, STC.TAX_PCT, STC.TAX_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE STC.EXCH_RATE_PCT END AS EXCH_RATE_PCT, STC.UPDATE_DT, STC.LOAD_DT FROM (ADMIN.SALES_TRANS_COMPONENT STC CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "CI_VP_ROLE_DETAIL_VW"

CREATE or replace VIEW  CI_VP_ROLE_DETAIL_VW
(
     "CAL_MO",
     COMP_COMPANY_ID,
     VP_ID,
     PRICING_ROLE_ID,
     PRICING_ROLE_DESC,
     GBB_ID,
     GBB_DESC,
     CHANNEL_POSITION_ID,
     CHANNEL_POSITION_DESC,
     NET_52_WK_SALES_QTY,
     NET_52_WK_SALES_AMT,
     MARGIN_52_WK_AMT,
     AVG_WGHTD_BASE_PCNT_DIFF,
     AVG_WGHTD_OVRLL_PCNT_DIFF
) AS
SELECT FINAL_PASS.CAL_MO, FINAL_PASS.COMP_COMPANY_ID, FINAL_PASS.VP_ID, FINAL_PASS.PRICING_ROLE_ID, FINAL_PASS.PRICING_ROLE_DESC, FINAL_PASS.GBB_ID, FINAL_PASS.GBB_DESC, FINAL_PASS.CHANNEL_POSITION_ID, FINAL_PASS.CHANNEL_POSITION_DESC, MAX(FINAL_PASS.QTY) AS NET_52_WK_SALES_QTY, MAX(FINAL_PASS.AMT) AS NET_52_WK_SALES_AMT, MAX(FINAL_PASS.MARG) AS MARGIN_52_WK_AMT, (SUM(FINAL_PASS.WEIGHTED_BASE) / "NUMERIC"(COUNT(FINAL_PASS.WEIGHTED_BASE))) AS AVG_WGHTD_BASE_PCNT_DIFF, (SUM(FINAL_PASS.WEIGHTED_OVER) / "NUMERIC"(COUNT(FINAL_PASS.WEIGHTED_OVER))) AS AVG_WGHTD_OVRLL_PCNT_DIFF FROM (SELECT SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.VP_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID, SUB.PRICING_ROLE_DESC, SUB.GBB_ID, SUB.GBB_DESC, SUB.CHANNEL_POSITION_ID, SUB.CHANNEL_POSITION_DESC, SUM(SUB.BASE) AS WEIGHTED_BASE, SUM(SUB.OVERALL) AS WEIGHTED_OVER, MAX(SUB.SALES_QTY) AS QTY, MAX(SUB.SALES_AMT) AS AMT, MAX(SUB.MARGIN) AS MARG FROM (SELECT DRV.CAL_MO, DRV.PRODUCT_ID, DRV.SKU_NBR, DRV.COMP_COMPANY_ID, DRV.VP_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.PRICING_ROLE_DESC, DRV.GBB_ID, DRV.GBB_DESC, DRV.CHANNEL_POSITION_ID, DRV.CHANNEL_POSITION_DESC, DRV.BASE_PCNT_DIFF, DRV.OVER_PCNT_DIFF, SUM(DISTINCT DRV.NET_52_WK_SALES_QTY) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.VP_ID, DRV.GBB_ID, DRV.CHANNEL_POSITION_ID ) AS SALES_QTY, SUM(DISTINCT DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.VP_ID, DRV.GBB_ID, DRV.CHANNEL_POSITION_ID ) AS SALES_AMT, SUM(DISTINCT DRV.MARGIN_52_WK_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.PRICING_ROLE_ID, DRV.COMP_COMPANY_ID, DRV.VP_ID, DRV.GBB_ID, DRV.CHANNEL_POSITION_ID ) AS MARGIN, CASE WHEN (SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.VP_ID, DRV.GBB_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = '0'::NUMERIC) THEN (DRV.BASE_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) ELSE ((DRV.BASE_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) / SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.VP_ID, DRV.GBB_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) END AS BASE, CASE WHEN (SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.VP_ID, DRV.GBB_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = '0'::NUMERIC) THEN (DRV.OVER_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) ELSE ((DRV.OVER_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) / SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.PRICING_ROLE_ID, DRV.VP_ID, DRV.GBB_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) END AS OVERALL FROM (SELECT CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.VP_ID, SITE.PRICE_ZONE_ID, LANE.PRICING_ROLE_ID, LANE.PRICING_ROLE_DESC, LANE.GBB_ID, LANE.GBB_DESC, LANE.CHANNEL_POSITION_ID, LANE.CHANNEL_POSITION_DESC, (SUM(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS BASE_PCNT_DIFF, (SUM(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS OVER_PCNT_DIFF, MAX(CI.NET_52_WK_SALES_QTY) AS NET_52_WK_SALES_QTY, MAX(CI.NET_52_WK_SALES_AMT) AS NET_52_WK_SALES_AMT, MAX(CI.MARGIN_52_WK_AMT) AS MARGIN_52_WK_AMT FROM ((((ADMIN.CI_COMP_SKU_DAY CI JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((CI.PRODUCT_ID = SKU.PRODUCT_ID))) JOIN ADMIN.SITE_PROFILE_RPT SITE ON ((CI.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.CI_COMPETITOR COMP ON ((CI.COMP_ID = COMP.COMP_ID))) JOIN ADMIN.CI_LANE_VW LANE ON ((CI.PRODUCT_ID = LANE.PRODUCT_ID))) WHERE (CASE WHEN (CI.PETM_PRICE_AMT NOTNULL) THEN CI.PETM_PRICE_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC) GROUP BY CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, SKU.VP_ID, SITE.PRICE_ZONE_ID, LANE.PRICING_ROLE_ID, LANE.PRICING_ROLE_DESC, LANE.CHANNEL_POSITION_ID, LANE.CHANNEL_POSITION_DESC, LANE.GBB_ID, LANE.GBB_DESC) DRV) SUB GROUP BY SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.VP_ID, SUB.PRICE_ZONE_ID, SUB.PRICING_ROLE_ID, SUB.PRICING_ROLE_DESC, SUB.GBB_ID, SUB.GBB_DESC, SUB.CHANNEL_POSITION_ID, SUB.CHANNEL_POSITION_DESC) FINAL_PASS GROUP BY FINAL_PASS.CAL_MO, FINAL_PASS.COMP_COMPANY_ID, FINAL_PASS.VP_ID, FINAL_PASS.PRICING_ROLE_ID, FINAL_PASS.PRICING_ROLE_DESC, FINAL_PASS.GBB_ID, FINAL_PASS.GBB_DESC, FINAL_PASS.CHANNEL_POSITION_ID, FINAL_PASS.CHANNEL_POSITION_DESC;

\echo
\echo *****  Creating view:  "CI_CHANNEL_POSITION_VW"

CREATE or replace VIEW  CI_CHANNEL_POSITION_VW
(
     "CAL_MO",
     COMP_COMPANY_ID,
     SAP_DEPT_ID,
     CHANNEL_POSITION_ID,
     CHANNEL_POSITION_DESC,
     NET_52_WK_SALES_QTY,
     NET_52_WK_SALES_AMT,
     MARGIN_52_WK_AMT,
     AVG_WGHTD_BASE_PCNT_DIFF,
     AVG_WGHTD_OVRLL_PCNT_DIFF
) AS
SELECT FINAL_PASS.CAL_MO, FINAL_PASS.COMP_COMPANY_ID, FINAL_PASS.SAP_DEPT_ID, FINAL_PASS.CHANNEL_POSITION_ID, FINAL_PASS.CHANNEL_POSITION_DESC, MAX(FINAL_PASS.QTY) AS NET_52_WK_SALES_QTY, MAX(FINAL_PASS.AMT) AS NET_52_WK_SALES_AMT, MAX(FINAL_PASS.MARG) AS MARGIN_52_WK_AMT, (SUM(FINAL_PASS.WEIGHTED_BASE) / "NUMERIC"(COUNT(FINAL_PASS.WEIGHTED_BASE))) AS AVG_WGHTD_BASE_PCNT_DIFF, (SUM(FINAL_PASS.WEIGHTED_OVER) / "NUMERIC"(COUNT(FINAL_PASS.WEIGHTED_OVER))) AS AVG_WGHTD_OVRLL_PCNT_DIFF FROM (SELECT SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.PRICE_ZONE_ID, SUB.SAP_DEPT_ID, SUB.CHANNEL_POSITION_ID, SUB.CHANNEL_POSITION_DESC, SUM(SUB.BASE) AS WEIGHTED_BASE, SUM(SUB.OVERALL) AS WEIGHTED_OVER, MAX(SUB.SALES_QTY) AS QTY, MAX(SUB.SALES_AMT) AS AMT, MAX(SUB.MARGIN) AS MARG FROM (SELECT DRV.CAL_MO, DRV.PRODUCT_ID, DRV.SKU_NBR, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.PRICE_ZONE_ID, DRV.CHANNEL_POSITION_ID, DRV.CHANNEL_POSITION_DESC, DRV.BASE_PCNT_DIFF, DRV.OVER_PCNT_DIFF, SUM(DISTINCT DRV.NET_52_WK_SALES_QTY) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.CHANNEL_POSITION_ID ) AS SALES_QTY, SUM(DISTINCT DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.CHANNEL_POSITION_ID ) AS SALES_AMT, SUM(DISTINCT DRV.MARGIN_52_WK_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.SAP_DEPT_ID, DRV.CHANNEL_POSITION_ID ) AS MARGIN, CASE WHEN (SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.SAP_DEPT_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = '0'::NUMERIC) THEN (DRV.BASE_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) ELSE ((DRV.BASE_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) / SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.SAP_DEPT_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) END AS BASE, CASE WHEN (SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.SAP_DEPT_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) = '0'::NUMERIC) THEN (DRV.OVER_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) ELSE ((DRV.OVER_PCNT_DIFF * DRV.NET_52_WK_SALES_AMT) / SUM(DRV.NET_52_WK_SALES_AMT) OVER (PARTITION BY DRV.CAL_MO, DRV.COMP_COMPANY_ID, DRV.PRICE_ZONE_ID, DRV.SAP_DEPT_ID, DRV.CHANNEL_POSITION_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) END AS OVERALL FROM (SELECT CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, LANE.SAP_DEPT_ID, SITE.PRICE_ZONE_ID, LANE.CHANNEL_POSITION_ID, LANE.CHANNEL_POSITION_DESC, (SUM(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_BASE_PRICE_AMT / CI.PETM_BASE_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS BASE_PCNT_DIFF, (SUM(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))) / "NUMERIC"(COUNT(((CI.COMP_PRICE_AMT / CI.PETM_PRICE_AMT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0))))) AS OVER_PCNT_DIFF, MAX(CI.NET_52_WK_SALES_QTY) AS NET_52_WK_SALES_QTY, MAX(CI.NET_52_WK_SALES_AMT) AS NET_52_WK_SALES_AMT, MAX(CI.MARGIN_52_WK_AMT) AS MARGIN_52_WK_AMT FROM (((ADMIN.CI_COMP_SKU_DAY CI JOIN ADMIN.SITE_PROFILE_RPT SITE ON ((CI.LOCATION_ID = SITE.LOCATION_ID))) JOIN ADMIN.CI_COMPETITOR COMP ON ((CI.COMP_ID = COMP.COMP_ID))) JOIN ADMIN.CI_LANE_VW LANE ON ((CI.PRODUCT_ID = LANE.PRODUCT_ID))) WHERE (CASE WHEN (CI.PETM_PRICE_AMT NOTNULL) THEN CI.PETM_PRICE_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC) GROUP BY CI.CAL_MO, CI.PRODUCT_ID, CI.SKU_NBR, COMP.COMP_COMPANY_ID, LANE.SAP_DEPT_ID, SITE.PRICE_ZONE_ID, LANE.CHANNEL_POSITION_ID, LANE.CHANNEL_POSITION_DESC) DRV) SUB GROUP BY SUB.CAL_MO, SUB.COMP_COMPANY_ID, SUB.PRICE_ZONE_ID, SUB.SAP_DEPT_ID, SUB.CHANNEL_POSITION_ID, SUB.CHANNEL_POSITION_DESC) FINAL_PASS GROUP BY FINAL_PASS.CAL_MO, FINAL_PASS.COMP_COMPANY_ID, FINAL_PASS.SAP_DEPT_ID, FINAL_PASS.CHANNEL_POSITION_ID, FINAL_PASS.CHANNEL_POSITION_DESC;

\echo
\echo *****  Creating view:  "AMS_OFFER_PRODUCT_GROUP_UPC_VW"

CREATE or replace VIEW  AMS_OFFER_PRODUCT_GROUP_UPC_VW
(
     OFFER_ID,
     PRODUCT_GROUP_ID,
     UPC_ID,
     PRODUCT_ID
) AS
SELECT DISTINCT AOPGV.OFFER_ID, AOPGV.PRODUCT_GROUP_ID, AOPGU.UPC_ID, AOPGU.PRODUCT_ID FROM (ADMIN.AMS_OFFER_PRODUCT_GROUP_VW AOPGV JOIN ADMIN.AMS_OFFER_PRODUCT_GROUP_UPC AOPGU ON (((AOPGV.OFFER_ID = AOPGU.OFFER_ID) AND (AOPGV.PRODUCT_GROUP_ID = AOPGU.PRODUCT_GROUP_ID)))) WHERE (AOPGU.DELETE_IND = 0);

\echo
\echo *****  Creating view:  "CUST_MTH_SALES_VW"

CREATE or replace VIEW  CUST_MTH_SALES_VW
(
     SALES_INSTANCE_ID,
     PRODUCT_ID,
     TY_LY_FLAG,
     CUSTOMER_EID,
     FISCAL_MO,
     STORE_GROUP_ID,
     CURRENCY_TYPE_ID,
     M1_CUST_IND,
     R12_CUST_IND,
     COMP_FLAG,
     SALES_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     NET_SALES_AMT,
     NET_SALES_COST,
     NET_SALES_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     NET_MARGIN_AMT,
     EXCH_RATE_PCT
) AS
SELECT U.SALES_INSTANCE_ID, U.PRODUCT_ID, DTL.TY_LY_FLAG, U.CUSTOMER_EID, CMN.FISCAL_MO, USGSV.STORE_GROUP_ID, CTL.CURRENCY_TYPE_ID, CMN.M1_CUST_IND, CMN.R12_CUST_IND, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, U.SALES_TYPE_ID, U.VOID_TYPE_CD, U.TXN_WAS_POST_VOIDED_FLAG, U.SALES_AMT, U.SALES_COST, U.SALES_QTY, U.SPECIAL_SALES_AMT, U.SPECIAL_SALES_QTY, U.RETURN_AMT, U.RETURN_COST, U.RETURN_QTY, U.SPECIAL_RETURN_AMT, U.SPECIAL_RETURN_QTY, U.SPECIAL_SRVC_AMT, U.DISCOUNT_AMT, U.DISCOUNT_QTY, U.DISCOUNT_RETURN_AMT, U.DISCOUNT_RETURN_QTY, U.POS_COUPON_AMT, U.POS_COUPON_QTY, U.POS_COUPON_ALLOC_AMT, U.POS_COUPON_ALLOC_QTY, U.NET_SALES_AMT, U.NET_SALES_COST, U.NET_SALES_QTY, U.MA_SALES_AMT, U.MA_SALES_QTY, U.NET_MARGIN_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE U.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM ((((((ADMIN.SALES_TRANS_SKU U JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(U.DAY_DT) = DTL.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((U.LOCATION_ID = SP.LOCATION_ID))) JOIN ADMIN.CUST_MTH_NBR CMN ON ((D.FISCAL_MO = CMN.ROLLING_FISCAL_MO))) JOIN ADMIN.USR_STORE_GROUP_STORE_VW USGSV ON (((U.LOCATION_ID = USGSV.LOCATION_ID) AND (USGSV.CUSTOMER_CUBE_IND = 1)))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) WHERE ((CMN.R12_CUST_IND = 1) AND (CASE WHEN ((CTL.CURRENCY_TYPE_ID = 2) AND (USGSV.STORE_GROUP_ID = 12000001)) THEN 1 WHEN (CTL.CURRENCY_TYPE_ID = 1) THEN 1 ELSE 0 END = 1));

\echo
\echo *****  Creating view:  "EMS_AMS_AUDIT_OFFER_SKU_VW"

CREATE or replace VIEW  EMS_AMS_AUDIT_OFFER_SKU_VW
(
     AMS_OFFER_SUBMISSION_GUID,
     PRODUCT_ID,
     OS_AMS_OFFER_SUBMISSION_ID,
     EM_OFFER_ID,
     EM_AMS_OFFER_SUBMISSION_ID,
     EM_SKU_NBR,
     EM_PRODUCT_ID,
     EM_BUY_SKU_FLAG,
     EM_GET_SKU_FLAG,
     AMS_OFFER_ID,
     AMS_PRODUCT_GROUP_NAME,
     AMS_PRODUCT_ID,
     AMS_BUY_SKU_FLAG,
     AMS_GET_SKU_FLAG,
     AMS_QTY_FOR_INCENTIVE,
     AMS_QTY_UNIT_TYPE_NAME,
     AMS_T2_QTY_FOR_INCENTIVE,
     AMS_T2_QTY_UNIT_TYPE_NAME,
     AMS_T3_QTY_FOR_INCENTIVE,
     AMS_T3_QTY_UNIT_TYPE_NAME,
     AMS_T4_QTY_FOR_INCENTIVE,
     AMS_T4_QTY_UNIT_TYPE_NAME
) AS
SELECT CASE WHEN (TT.AMS_OFFER_SUBMISSION_GUID NOTNULL) THEN TT.AMS_OFFER_SUBMISSION_GUID ELSE OS.AMS_OFFER_SUBMISSION_ID END AS AMS_OFFER_SUBMISSION_GUID, TT.PRODUCT_ID, OS.AMS_OFFER_SUBMISSION_ID AS OS_AMS_OFFER_SUBMISSION_ID, TT.EM_OFFER_ID, TT.EM_AMS_OFFER_SUBMISSION_ID, TT.EM_SKU_NBR, TT.EM_PRODUCT_ID, TT.EM_BUY_SKU_FLAG, TT.EM_GET_SKU_FLAG, TT.AMS_OFFER_ID, TT.AMS_PRODUCT_GROUP_NAME, TT.AMS_PRODUCT_ID, TT.AMS_BUY_SKU_FLAG, TT.AMS_GET_SKU_FLAG, TT.AMS_QTY_FOR_INCENTIVE, TT.AMS_QTY_UNIT_TYPE_NAME, TT.AMS_T2_QTY_FOR_INCENTIVE, TT.AMS_T2_QTY_UNIT_TYPE_NAME, TT.AMS_T3_QTY_FOR_INCENTIVE, TT.AMS_T3_QTY_UNIT_TYPE_NAME, TT.AMS_T4_QTY_FOR_INCENTIVE, TT.AMS_T4_QTY_UNIT_TYPE_NAME FROM (ADMIN.AMS_OFFER_SUBMISSION OS FULL JOIN (SELECT CASE WHEN (EM.AMS_OFFER_SUBMISSION_GUID NOTNULL) THEN EM.AMS_OFFER_SUBMISSION_GUID WHEN (AM.AMS_OFFER_SUBMISSION_GUID NOTNULL) THEN AM.AMS_OFFER_SUBMISSION_GUID ELSE NULL::INT8 END AS AMS_OFFER_SUBMISSION_GUID, CASE WHEN (EM.PRODUCT_ID NOTNULL) THEN EM.PRODUCT_ID WHEN (AM.PRODUCT_ID NOTNULL) THEN AM.PRODUCT_ID ELSE NULL::INT4 END AS PRODUCT_ID, EM.EM_OFFER_ID, EM.AMS_OFFER_SUBMISSION_ID AS EM_AMS_OFFER_SUBMISSION_ID, EM.SKU_NBR AS EM_SKU_NBR, EM.PRODUCT_ID AS EM_PRODUCT_ID, EM.BUY_SKU_FLAG AS EM_BUY_SKU_FLAG, EM.GET_SKU_FLAG AS EM_GET_SKU_FLAG, AM.OFFER_ID AS AMS_OFFER_ID, AM.PRODUCT_GROUP_NAME AS AMS_PRODUCT_GROUP_NAME, AM.PRODUCT_ID AS AMS_PRODUCT_ID, AM.BUY_SKU_FLAG AS AMS_BUY_SKU_FLAG, AM.GET_SKU_FLAG AS AMS_GET_SKU_FLAG, AM.T1_QTY_FOR_INCENTIVE AS AMS_QTY_FOR_INCENTIVE, AM.T1_QTY_UNIT_TYPE_NAME AS AMS_QTY_UNIT_TYPE_NAME, AM.T2_QTY_FOR_INCENTIVE AS AMS_T2_QTY_FOR_INCENTIVE, AM.T2_QTY_UNIT_TYPE_NAME AS AMS_T2_QTY_UNIT_TYPE_NAME, AM.T3_QTY_FOR_INCENTIVE AS AMS_T3_QTY_FOR_INCENTIVE, AM.T3_QTY_UNIT_TYPE_NAME AS AMS_T3_QTY_UNIT_TYPE_NAME, AM.T4_QTY_FOR_INCENTIVE AS AMS_T4_QTY_FOR_INCENTIVE, AM.T4_QTY_UNIT_TYPE_NAME AS AMS_T4_QTY_UNIT_TYPE_NAME FROM ((SELECT S.EM_OFFER_ID, CASE WHEN (O.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN O.AMS_OFFER_SUBMISSION_ID ELSE INT8((1000000000 + S.EM_OFFER_ID)) END AS AMS_OFFER_SUBMISSION_GUID, S.SKU_NBR, S.PRODUCT_ID, MAX(L.AMS_OFFER_SUBMISSION_ID) AS AMS_OFFER_SUBMISSION_ID, MAX(CASE WHEN (G.BUY_GET_IND = 'B'::"VARCHAR") THEN 1 ELSE 0 END) AS BUY_SKU_FLAG, MAX(CASE WHEN (G.BUY_GET_IND = 'G'::"VARCHAR") THEN 1 ELSE 0 END) AS GET_SKU_FLAG FROM (((ADMIN.EM_AMS_OFFER_LABEL L JOIN ADMIN.EM_AMS_OFFER_SKU S ON ((L.EM_OFFER_ID = S.EM_OFFER_ID))) JOIN ADMIN.EM_AMS_SKU_GROUP_TYPE G ON ((S.EM_AMS_SKU_GROUP_TYPE_ID = G.EM_AMS_SKU_GROUP_TYPE_ID))) LEFT JOIN ADMIN.AMS_OFFER_SUBMISSION O ON ((O.AMS_OFFER_SUBMISSION_ID = L.AMS_OFFER_SUBMISSION_ID))) WHERE (S.DELETE_IND = 0) GROUP BY S.EM_OFFER_ID, CASE WHEN (O.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN O.AMS_OFFER_SUBMISSION_ID ELSE INT8((1000000000 + S.EM_OFFER_ID)) END, S.SKU_NBR, S.PRODUCT_ID) EM FULL JOIN (SELECT P.OFFER_ID, CASE WHEN (O.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN O.AMS_OFFER_SUBMISSION_ID ELSE (2000000000 + P.OFFER_ID) END AS AMS_OFFER_SUBMISSION_GUID, MAX(G.PRODUCT_GROUP_NAME) AS PRODUCT_GROUP_NAME, U.PRODUCT_ID, P.PRODUCT_GROUP_ID, MAX(CASE WHEN (P.OFFER_PRODUCT_GROUP_TYPE_ID = 2) THEN 1 ELSE 0 END) AS BUY_SKU_FLAG, MAX(CASE WHEN (P.OFFER_PRODUCT_GROUP_TYPE_ID = 1) THEN 1 ELSE 0 END) AS GET_SKU_FLAG, MAX(CASE WHEN (P.TIER_ID = 1) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T1_QTY_FOR_INCENTIVE, MIN(CASE WHEN (P.TIER_ID = 1) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T1_QTY_UNIT_TYPE_NAME, MAX(CASE WHEN (P.TIER_ID = 2) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T2_QTY_FOR_INCENTIVE, MIN(CASE WHEN (P.TIER_ID = 2) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T2_QTY_UNIT_TYPE_NAME, MAX(CASE WHEN (P.TIER_ID = 3) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T3_QTY_FOR_INCENTIVE, MIN(CASE WHEN (P.TIER_ID = 3) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T3_QTY_UNIT_TYPE_NAME, MAX(CASE WHEN (P.TIER_ID = 4) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T4_QTY_FOR_INCENTIVE, MIN(CASE WHEN (P.TIER_ID = 4) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T4_QTY_UNIT_TYPE_NAME FROM ((((ADMIN.AMS_OFFER_PRODUCT_GROUP_VW P JOIN ADMIN.AMS_OFFER_PRODUCT_GROUP_UPC_VW U ON (((P.OFFER_ID = U.OFFER_ID) AND (P.PRODUCT_GROUP_ID = U.PRODUCT_GROUP_ID)))) JOIN ADMIN.AMS_QTY_UNIT_TYPE Q ON ((P.QTY_UNIT_TYPE_ID = Q.QTY_UNIT_TYPE_ID))) JOIN ADMIN.AMS_PRODUCT_GROUP G ON ((P.PRODUCT_GROUP_ID = G.PRODUCT_GROUP_ID))) LEFT JOIN ADMIN.AMS_OFFER_SUBMISSION O ON ((INT8(O.AMS_OFFER_ID) = P.OFFER_ID))) GROUP BY P.OFFER_ID, CASE WHEN (O.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN O.AMS_OFFER_SUBMISSION_ID ELSE (2000000000 + P.OFFER_ID) END, U.PRODUCT_ID, P.PRODUCT_GROUP_ID HAVING (MAX(P.IS_EXCLUDED_IND) = 0)) AM ON (((EM.AMS_OFFER_SUBMISSION_GUID = AM.AMS_OFFER_SUBMISSION_GUID) AND (EM.PRODUCT_ID = AM.PRODUCT_ID))))) TT ON ((OS.AMS_OFFER_SUBMISSION_ID = TT.AMS_OFFER_SUBMISSION_GUID)));

\echo
\echo *****  Creating view:  "EMS_AMS_AUDIT_OFFER_VW_RRH"

CREATE or replace VIEW  EMS_AMS_AUDIT_OFFER_VW_RRH
(
     AMS_OFFER_SUBMISSION_GUID,
     OS_AMS_OFFER_SUBMISSION_ID,
     OS_BUSINESS_OWNER,
     OS_APPROVER,
     OS_OFFER_DEPT_AND_DIV,
     OS_OFFER_NAME,
     OS_OFFER_DESC,
     OS_DEFERRED_REVENUE,
     OS_LEGACY_PB_OFFER_IND,
     OS_VENDOR_FUNDED_TYPE,
     OS_VENDOR_FUNDED_VALUE,
     OS_VENDOR_FUNDED_LIMIT,
     OS_MFG_VENDOR_BRAND_NAME,
     OS_OFFER_MEDIA,
     OS_OFFER_PATH,
     OS_PLANNER_PERIOD,
     OS_START_DT,
     OS_EXP_DT,
     OS_OFFER_TIME_BASED_IND,
     OS_OFFER_TIME_DESC,
     OS_US_OFFER_IND,
     OS_PR_OFFER_IND,
     OS_CA_OFFER_IND,
     OS_STORE_LIST,
     OS_CUSTOMER_GROUP,
     OS_QUALIFYING_PRODUCT,
     OS_QUALIFYING_PRODUCT_DTL,
     OS_QUALIFYING_PRODUCT_CONDITION,
     OS_BUY_SPEND_REQ,
     OS_BUY_SPEND_REQ_DTL,
     OS_MIN_UNIT_PRICE,
     OS_TIERED_OFFER_IND,
     OS_TIERED_OFFER_DESC,
     OS_OFFER_QUALIFICATION_TIMEFRAME,
     OS_OFFER_QUALIFICATION_TIMEFRAME_DTL,
     OS_REWARD_PRODUCT,
     OS_REWARD_PRODUCT_DTL,
     OS_REWARD,
     OS_REWARD_DTL,
     OS_REWARD_LEVEL,
     OS_REWARD_ITEM_QTY,
     OS_MAX_DISC,
     OS_OFFER_LIMITATION,
     OS_OFFER_LIMITATION_DTL,
     OS_MUTUALLY_EXCLUSIVE_OFFER_IND,
     OS_RECEIPT_TXT,
     OS_ISSUANCE_MESSAGE,
     OS_OFFER_STATUS,
     OS_CANCELLED_IND,
     OS_SCHED_OFFER_DEPLOYMENT_DT,
     OS_APPROVAL_DTL,
     OS_UPCA_NBR_TXT,
     OS_CATEGORY_CD_AND_NAME,
     OS_AMS_OFFER_ID,
     OS_AMS_TEMPLATE,
     OS_UAT_TEST_STATUS,
     OS_CREATED_BY,
     OS_MODIFIED_BY,
     EM_OFFER_ID,
     EM_EVENT_ID,
     EM_EVENT_NAME,
     EM_EVENT_DESC,
     EM_EVENT_START_DT,
     EM_EVENT_END_DT,
     EM_PURGED_FLAG,
     EM_AMS_OFFER_SUBMISSION_ID,
     EM_OFFER_NAME,
     EM_AMS_TEMPLATE_TYPE_ID,
     EM_AMS_TEMPLATE_TYPE_NAME,
     EM_AMS_OFFER_LIMIT_QTY,
     EM_AMS_OFFER_LIMIT_TYPE_ID,
     EM_AMS_OFFER_LIMIT_TYPE_NAME,
     EM_AMS_DISCOUNT_TYPE_ID,
     EM_AMS_DISCOUNT_TYPE_NAME,
     EM_DISCOUNT_AMT,
     EM_TOTAL_DISCOUNT_AMT,
     EM_MIN_SPEND_AMT,
     EM_BUY_QTY,
     EM_BUY_DESC,
     EM_GET_QTY,
     EM_GET_DESC,
     EM_BB_BUY_OR_SPEND_IND,
     EM_BB_SPEND_AMT,
     EM_BTGT_GRP_A_BUY_QTY,
     EM_BTGT_GRP_A_BUY_DESC,
     EM_BTGT_GRP_A_MIN_SPEND_AMT,
     EM_BTGT_GRP_B_BUY_QTY,
     EM_BTGT_GRP_B_BUY_DESC,
     EM_BTGT_GRP_B_MIN_SPEND_AMT,
     EM_SS_SPEND_AMT,
     EM_SS_SPEND_DESC,
     EM_SS_SAVE_DESC,
     EM_TP_T1_MIN_QTY,
     EM_TP_T1_MAX_QTY,
     EM_TP_T1_DISCOUNT_AMT,
     EM_TP_T2_MIN_QTY,
     EM_TP_T2_MAX_QTY,
     EM_TP_T2_DISCOUNT_AMT,
     EM_TP_T3_MIN_QTY,
     EM_TP_T3_MAX_QTY,
     EM_TP_T3_DISCOUNT_AMT,
     EM_TP_T4_MIN_QTY,
     EM_TP_T4_MAX_QTY,
     EM_TP_T4_DISCOUNT_AMT,
     EM_SS_SAME_SPEND_ITEM_IND,
     EM_BOGO_SAME_BUY_ITEM_IND,
     EM_GET_LABEL_SUPPRESSED_IND,
     EM_DISCLAIMER_1_TYPE_ID,
     EM_DISCLAIMER_1_TYPE_DESC,
     EM_DISCLAIMER_1_OTHER_DESC,
     EM_DISCLAIMER_2_TYPE_ID,
     EM_DISCLAIMER_2_TYPE_DESC,
     EM_DISCLAIMER_2_OTHER_DESC,
     EM_BTGT_GRP_A_DISCLAIMER_TYPE_ID,
     EM_BTGT_GRP_A_DISCLAIMER_TYPE_DESC,
     EM_BTGT_GRP_A_DISCLAIMER_OTHER_DESC,
     EM_BTGT_GRP_B_DISCLAIMER_TYPE_ID,
     EM_BTGT_GRP_B_DISCLAIMER_TYPE_DESC,
     EM_BTGT_GRP_B_DISCLAIMER_OTHER_DESC,
     EM_OFFER_UNLOCK_TSTMP,
     EM_CREATED_BY,
     EM_CREATED_TSTMP,
     EM_MODIFIED_BY,
     EM_MODIFIED_TSTMP,
     EM_US_OFFER_FLAG,
     EM_CA_OFFER_FLAG,
     EM_PR_OFFER_FLAG,
     AMS_OFFER_ID,
     AMS_IS_TEMPLATE_IND,
     AMS_FROM_TEMPLATE_IND,
     AMS_OFFER_NAME,
     AMS_OFFER_DESC,
     AMS_OFFER_CATEGORY_ID,
     AMS_OFFER_CATEGORY_NAME,
     AMS_OFFER_PRIORITY,
     AMS_OFFER_START_DT,
     AMS_OFFER_END_DT,
     AMS_OFFER_LIMIT_TYPE_ID,
     AMS_OFFER_LIMIT_TYPE_DESC,
     AMS_OFFER_LIMIT_QTY,
     AMS_OFFER_LIMIT_PERIOD_DAYS,
     AMS_SYS_CREATE_TSTMP,
     AMS_SYS_UPDATE_TSTMP,
     AMS_DELETE_FLAG,
     AMS_STATUS_FLAG,
     AMS_OFFER_STATUS_ID,
     AMS_OFFER_STATUS_NAME,
     AMS_EMPLOYEES_ONLY_IND,
     AMS_EMPLOYEES_EXCLUDED_IND,
     AMS_SEND_ISSUANCE_IND,
     AMS_VENDOR_COUPON_CD,
     AMS_TIER_LEVEL_CNT,
     AMS_MIN_ITEM_PRICE_AMT,
     AMS_QTY_FOR_INCENTIVE,
     AMS_QTY_UNIT_TYPE_NAME,
     AMS_T2_QTY_FOR_INCENTIVE,
     AMS_T2_QTY_UNIT_TYPE_NAME,
     AMS_T3_QTY_FOR_INCENTIVE,
     AMS_T3_QTY_UNIT_TYPE_NAME,
     AMS_T4_QTY_FOR_INCENTIVE,
     AMS_T4_QTY_UNIT_TYPE_NAME,
     AMS_DISC_EVAL_TYPE_ID,
     AMS_DISC_EVAL_TYPE_NAME,
     AMS_DISCOUNT_TYPE_ID,
     AMS_DISCOUNT_TYPE_NAME,
     AMS_OFFER_CHARGEBACK_ID,
     AMS_OFFER_CHARGEBACK_DESC,
     AMS_DISCOUNT_AMT_TYPE_ID,
     AMS_DISCOUNT_AMT_TYPE_NAME,
     AMS_DISCOUNT_AMT,
     AMS_DISCOUNT_LIMIT_QTY,
     AMS_DISCOUNT_LIMIT_WEIGHT,
     AMS_DISCOUNT_LIMIT_AMT,
     AMS_DISCOUNT_RECEIPT_TXT,
     AMS_DISCOUNT_UP_TO_AMT,
     AMS_ALLOW_MARKUP_IND,
     AMS_FLEX_NEGATIVE_IND,
     AMS_DISCOUNT_INCL_PRODUCT_GROUP_ID,
     AMS_DISCOUNT_INCL_PRODUCT_GROUP_NAME,
     AMS_DISCOUNT_EXCL_PRODUCT_GROUP_ID,
     AMS_DISCOUNT_EXCL_PRODUCT_GROUP_NAME,
     AMS_T2_DISCOUNT_AMT,
     AMS_T2_DISCOUNT_LIMIT_QTY,
     AMS_T2_DISCOUNT_LIMIT_WEIGHT,
     AMS_T2_DISCOUNT_LIMIT_AMT,
     AMS_T2_DISCOUNT_RECEIPT_TXT,
     AMS_T3_DISCOUNT_AMT,
     AMS_T3_DISCOUNT_LIMIT_QTY,
     AMS_T3_DISCOUNT_LIMIT_WEIGHT,
     AMS_T3_DISCOUNT_LIMIT_AMT,
     AMS_T3_DISCOUNT_RECEIPT_TXT,
     AMS_T4_DISCOUNT_AMT,
     AMS_T4_DISCOUNT_LIMIT_QTY,
     AMS_T4_DISCOUNT_LIMIT_WEIGHT,
     AMS_T4_DISCOUNT_LIMIT_AMT,
     AMS_T4_DISCOUNT_RECEIPT_TXT,
     AMS_PRINTED_MSG_TYPE_ID,
     AMS_PRINTED_MSG_TYPE_NAME,
     AMS_SORT_ID,
     AMS_MSG_TXT,
     AMS_DELIVERY_REQUIRED_IND,
     AMS_PRINTED_MSG_UPC_ID,
     AMS_PRINTED_MSG_PRODUCT_ID,
     AMS_T2_MSG_TXT,
     AMS_T2_PRINTED_MSG_UPC_ID,
     AMS_T2_PRINTED_MSG_PRODUCT_ID,
     AMS_T3_MSG_TXT,
     AMS_T3_PRINTED_MSG_UPC_ID,
     AMS_T3_PRINTED_MSG_PRODUCT_ID,
     AMS_T4_MSG_TXT,
     AMS_T4_PRINTED_MSG_UPC_ID,
     AMS_T4_PRINTED_MSG_PRODUCT_ID,
     AMS_US_OFFER_FLAG,
     AMS_CA_OFFER_FLAG,
     AMS_PR_OFFER_FLAG,
     AMS_UPCA_NBR
) AS
SELECT CASE WHEN (OS.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN OS.AMS_OFFER_SUBMISSION_ID WHEN (EM.AMS_OFFER_SUBMISSION_ID NOTNULL) THEN EM.AMS_OFFER_SUBMISSION_ID WHEN ((EM.AMS_OFFER_SUBMISSION_ID ISNULL) AND (EM.EM_OFFER_ID NOTNULL)) THEN INT8((1000000000 + EM.EM_OFFER_ID)) ELSE NULL::INT8 END AS AMS_OFFER_SUBMISSION_GUID, OS.AMS_OFFER_SUBMISSION_ID AS OS_AMS_OFFER_SUBMISSION_ID, OS.BUSINESS_OWNER AS OS_BUSINESS_OWNER, OS.APPROVER AS OS_APPROVER, OS.OFFER_DEPT_AND_DIV AS OS_OFFER_DEPT_AND_DIV, OS.OFFER_NAME AS OS_OFFER_NAME, OS.OFFER_DESC AS OS_OFFER_DESC, OS.DEFERRED_REVENUE AS OS_DEFERRED_REVENUE, OS.LEGACY_PB_OFFER_IND AS OS_LEGACY_PB_OFFER_IND, OS.VENDOR_FUNDED_TYPE AS OS_VENDOR_FUNDED_TYPE, OS.VENDOR_FUNDED_VALUE AS OS_VENDOR_FUNDED_VALUE, OS.VENDOR_FUNDED_LIMIT AS OS_VENDOR_FUNDED_LIMIT, OS.MFG_VENDOR_BRAND_NAME AS OS_MFG_VENDOR_BRAND_NAME, OS.OFFER_MEDIA AS OS_OFFER_MEDIA, OS.OFFER_PATH AS OS_OFFER_PATH, OS.PLANNER_PERIOD AS OS_PLANNER_PERIOD, OS.START_DT AS OS_START_DT, OS.EXP_DT AS OS_EXP_DT, OS.OFFER_TIME_BASED_IND AS OS_OFFER_TIME_BASED_IND, OS.OFFER_TIME_DESC AS OS_OFFER_TIME_DESC, OS.US_OFFER_IND AS OS_US_OFFER_IND, OS.PR_OFFER_IND AS OS_PR_OFFER_IND, OS.CA_OFFER_IND AS OS_CA_OFFER_IND, OS.STORE_LIST AS OS_STORE_LIST, OS.CUSTOMER_GROUP AS OS_CUSTOMER_GROUP, OS.QUALIFYING_PRODUCT AS OS_QUALIFYING_PRODUCT, OS.QUALIFYING_PRODUCT_DTL AS OS_QUALIFYING_PRODUCT_DTL, OS.QUALIFYING_PRODUCT_CONDITION AS OS_QUALIFYING_PRODUCT_CONDITION, OS.BUY_SPEND_REQ AS OS_BUY_SPEND_REQ, OS.BUY_SPEND_REQ_DTL AS OS_BUY_SPEND_REQ_DTL, OS.MIN_UNIT_PRICE AS OS_MIN_UNIT_PRICE, OS.TIERED_OFFER_IND AS OS_TIERED_OFFER_IND, OS.TIERED_OFFER_DESC AS OS_TIERED_OFFER_DESC, OS.OFFER_QUALIFICATION_TIMEFRAME AS OS_OFFER_QUALIFICATION_TIMEFRAME, OS.OFFER_QUALIFICATION_TIMEFRAME_DTL AS OS_OFFER_QUALIFICATION_TIMEFRAME_DTL, OS.REWARD_PRODUCT AS OS_REWARD_PRODUCT, OS.REWARD_PRODUCT_DTL AS OS_REWARD_PRODUCT_DTL, OS.REWARD AS OS_REWARD, OS.REWARD_DTL AS OS_REWARD_DTL, OS.REWARD_LEVEL AS OS_REWARD_LEVEL, OS.REWARD_ITEM_QTY AS OS_REWARD_ITEM_QTY, OS.MAX_DISC AS OS_MAX_DISC, OS.OFFER_LIMITATION AS OS_OFFER_LIMITATION, OS.OFFER_LIMITATION_DTL AS OS_OFFER_LIMITATION_DTL, OS.MUTUALLY_EXCLUSIVE_OFFER_IND AS OS_MUTUALLY_EXCLUSIVE_OFFER_IND, OS.RECEIPT_TXT AS OS_RECEIPT_TXT, OS.ISSUANCE_MESSAGE AS OS_ISSUANCE_MESSAGE, OS.OFFER_STATUS AS OS_OFFER_STATUS, OS.CANCELLED_IND AS OS_CANCELLED_IND, OS.SCHED_OFFER_DEPLOYMENT_DT AS OS_SCHED_OFFER_DEPLOYMENT_DT, OS.APPROVAL_DTL AS OS_APPROVAL_DTL, BTRIM(LTRIM(OS.UPCA_NBR_TXT, '0'::"VARCHAR")) AS OS_UPCA_NBR_TXT, OS.CATEGORY_CD_AND_NAME AS OS_CATEGORY_CD_AND_NAME, OS.AMS_OFFER_ID AS OS_AMS_OFFER_ID, OS.AMS_TEMPLATE AS OS_AMS_TEMPLATE, OS.UAT_TEST_STATUS AS OS_UAT_TEST_STATUS, OS.CREATED_BY AS OS_CREATED_BY, OS.MODIFIED_BY AS OS_MODIFIED_BY, EM.EM_OFFER_ID, EM.EM_EVENT_ID, EM.EVENT_NAME AS EM_EVENT_NAME, EM.EVENT_DESC AS EM_EVENT_DESC, EM.EVENT_START_DT AS EM_EVENT_START_DT, EM.EVENT_END_DT AS EM_EVENT_END_DT, EM.EM_PURGED_FLAG, EM.AMS_OFFER_SUBMISSION_ID AS EM_AMS_OFFER_SUBMISSION_ID, EM.EM_OFFER_NAME, EM.EM_AMS_TEMPLATE_TYPE_ID, EM.EM_AMS_TEMPLATE_TYPE_NAME, EM.EM_AMS_OFFER_LIMIT_QTY, EM.EM_AMS_OFFER_LIMIT_TYPE_ID, EM.EM_AMS_OFFER_LIMIT_TYPE_NAME, EM.EM_AMS_DISCOUNT_TYPE_ID, EM.EM_AMS_DISCOUNT_TYPE_NAME, EM.DISCOUNT_AMT AS EM_DISCOUNT_AMT, EM.TOTAL_DISCOUNT_AMT AS EM_TOTAL_DISCOUNT_AMT, EM.MIN_SPEND_AMT AS EM_MIN_SPEND_AMT, EM.BUY_QTY AS EM_BUY_QTY, EM.BUY_DESC AS EM_BUY_DESC, EM.GET_QTY AS EM_GET_QTY, EM.GET_DESC AS EM_GET_DESC, EM.BB_BUY_OR_SPEND_IND AS EM_BB_BUY_OR_SPEND_IND, EM.BB_SPEND_AMT AS EM_BB_SPEND_AMT, EM.BTGT_GRP_A_BUY_QTY AS EM_BTGT_GRP_A_BUY_QTY, EM.BTGT_GRP_A_BUY_DESC AS EM_BTGT_GRP_A_BUY_DESC, EM.BTGT_GRP_A_MIN_SPEND_AMT AS EM_BTGT_GRP_A_MIN_SPEND_AMT, EM.BTGT_GRP_B_BUY_QTY AS EM_BTGT_GRP_B_BUY_QTY, EM.BTGT_GRP_B_BUY_DESC AS EM_BTGT_GRP_B_BUY_DESC, EM.BTGT_GRP_B_MIN_SPEND_AMT AS EM_BTGT_GRP_B_MIN_SPEND_AMT, EM.SS_SPEND_AMT AS EM_SS_SPEND_AMT, EM.SS_SPEND_DESC AS EM_SS_SPEND_DESC, EM.SS_SAVE_DESC AS EM_SS_SAVE_DESC, EM.EM_T1_MIN_QTY AS EM_TP_T1_MIN_QTY, EM.EM_T1_MAX_QTY AS EM_TP_T1_MAX_QTY, EM.EM_T1_DISCOUNT_AMT AS EM_TP_T1_DISCOUNT_AMT, EM.EM_T2_MIN_QTY AS EM_TP_T2_MIN_QTY, EM.EM_T2_MAX_QTY AS EM_TP_T2_MAX_QTY, EM.EM_T2_DISCOUNT_AMT AS EM_TP_T2_DISCOUNT_AMT, EM.EM_T3_MIN_QTY AS EM_TP_T3_MIN_QTY, EM.EM_T3_MAX_QTY AS EM_TP_T3_MAX_QTY, EM.EM_T3_DISCOUNT_AMT AS EM_TP_T3_DISCOUNT_AMT, EM.EM_T4_MIN_QTY AS EM_TP_T4_MIN_QTY, EM.EM_T4_MAX_QTY AS EM_TP_T4_MAX_QTY, EM.EM_T4_DISCOUNT_AMT AS EM_TP_T4_DISCOUNT_AMT, EM.SS_SAME_SPEND_ITEM_IND AS EM_SS_SAME_SPEND_ITEM_IND, EM.BOGO_SAME_BUY_ITEM_IND AS EM_BOGO_SAME_BUY_ITEM_IND, EM.GET_LABEL_SUPPRESSED_IND AS EM_GET_LABEL_SUPPRESSED_IND, EM.DISCLAIMER_1_TYPE_ID AS EM_DISCLAIMER_1_TYPE_ID, EM.DISCLAIMER_1_TYPE_DESC AS EM_DISCLAIMER_1_TYPE_DESC, EM.DISCLAIMER_1_OTHER_DESC AS EM_DISCLAIMER_1_OTHER_DESC, EM.DISCLAIMER_2_TYPE_ID AS EM_DISCLAIMER_2_TYPE_ID, EM.DISCLAIMER_2_TYPE_DESC AS EM_DISCLAIMER_2_TYPE_DESC, EM.DISCLAIMER_2_OTHER_DESC AS EM_DISCLAIMER_2_OTHER_DESC, EM.BTGT_GRP_A_DISCLAIMER_TYPE_ID AS EM_BTGT_GRP_A_DISCLAIMER_TYPE_ID, EM.BTGT_GRP_A_DISCLAIMER_TYPE_DESC AS EM_BTGT_GRP_A_DISCLAIMER_TYPE_DESC, EM.BTGT_GRP_A_DISCLAIMER_OTHER_DESC AS EM_BTGT_GRP_A_DISCLAIMER_OTHER_DESC, EM.BTGT_GRP_B_DISCLAIMER_TYPE_ID AS EM_BTGT_GRP_B_DISCLAIMER_TYPE_ID, EM.BTGT_GRP_B_DISCLAIMER_TYPE_DESC AS EM_BTGT_GRP_B_DISCLAIMER_TYPE_DESC, EM.BTGT_GRP_B_DISCLAIMER_OTHER_DESC AS EM_BTGT_GRP_B_DISCLAIMER_OTHER_DESC, EM.EM_OFFER_UNLOCK_TSTMP, EM.EM_CREATED_BY, EM.EM_CREATED_TSTMP, EM.EM_MODIFIED_BY, EM.EM_MODIFIED_TSTMP, EM.EM_US_OFFER_FLAG, EM.EM_CA_OFFER_FLAG, EM.EM_PR_OFFER_FLAG, AM.OFFER_ID AS AMS_OFFER_ID, AM.IS_TEMPLATE_IND AS AMS_IS_TEMPLATE_IND, AM.FROM_TEMPLATE_IND AS AMS_FROM_TEMPLATE_IND, AM.OFFER_NAME AS AMS_OFFER_NAME, AM.OFFER_DESC AS AMS_OFFER_DESC, AM.OFFER_CATEGORY_ID AS AMS_OFFER_CATEGORY_ID, AM.OFFER_CATEGORY_NAME AS AMS_OFFER_CATEGORY_NAME, AM.OFFER_PRIORITY AS AMS_OFFER_PRIORITY, AM.OFFER_START_DT AS AMS_OFFER_START_DT, AM.OFFER_END_DT AS AMS_OFFER_END_DT, AM.OFFER_LIMIT_TYPE_ID AS AMS_OFFER_LIMIT_TYPE_ID, AM.OFFER_LIMIT_TYPE_DESC AS AMS_OFFER_LIMIT_TYPE_DESC, AM.OFFER_LIMIT_QTY AS AMS_OFFER_LIMIT_QTY, AM.OFFER_LIMIT_PERIOD_DAYS AS AMS_OFFER_LIMIT_PERIOD_DAYS, AM.SYS_CREATE_TSTMP AS AMS_SYS_CREATE_TSTMP, AM.SYS_UPDATE_TSTMP AS AMS_SYS_UPDATE_TSTMP, AM.DELETE_FLAG AS AMS_DELETE_FLAG, AM.STATUS_FLAG AS AMS_STATUS_FLAG, AM.OFFER_STATUS_ID AS AMS_OFFER_STATUS_ID, AM.OFFER_STATUS_NAME AS AMS_OFFER_STATUS_NAME, AM.EMPLOYEES_ONLY_IND AS AMS_EMPLOYEES_ONLY_IND, AM.EMPLOYEES_EXCLUDED_IND AS AMS_EMPLOYEES_EXCLUDED_IND, AM.SEND_ISSUANCE_IND AS AMS_SEND_ISSUANCE_IND, AM.VENDOR_COUPON_CD AS AMS_VENDOR_COUPON_CD, AM.TIER_LEVEL_CNT AS AMS_TIER_LEVEL_CNT, AM.MIN_ITEM_PRICE_AMT AS AMS_MIN_ITEM_PRICE_AMT, AM.QTY_FOR_INCENTIVE AS AMS_QTY_FOR_INCENTIVE, AM.QTY_UNIT_TYPE_NAME AS AMS_QTY_UNIT_TYPE_NAME, AM.T2_QTY_FOR_INCENTIVE AS AMS_T2_QTY_FOR_INCENTIVE, AM.T2_QTY_UNIT_TYPE_NAME AS AMS_T2_QTY_UNIT_TYPE_NAME, AM.T3_QTY_FOR_INCENTIVE AS AMS_T3_QTY_FOR_INCENTIVE, AM.T3_QTY_UNIT_TYPE_NAME AS AMS_T3_QTY_UNIT_TYPE_NAME, AM.T4_QTY_FOR_INCENTIVE AS AMS_T4_QTY_FOR_INCENTIVE, AM.T4_QTY_UNIT_TYPE_NAME AS AMS_T4_QTY_UNIT_TYPE_NAME, AM.DISC_EVAL_TYPE_ID AS AMS_DISC_EVAL_TYPE_ID, AM.DISC_EVAL_TYPE_NAME AS AMS_DISC_EVAL_TYPE_NAME, AM.DISCOUNT_TYPE_ID AS AMS_DISCOUNT_TYPE_ID, AM.DISCOUNT_TYPE_NAME AS AMS_DISCOUNT_TYPE_NAME, AM.OFFER_CHARGEBACK_ID AS AMS_OFFER_CHARGEBACK_ID, AM.OFFER_CHARGEBACK_DESC AS AMS_OFFER_CHARGEBACK_DESC, AM.DISCOUNT_AMT_TYPE_ID AS AMS_DISCOUNT_AMT_TYPE_ID, AM.DISCOUNT_AMT_TYPE_NAME AS AMS_DISCOUNT_AMT_TYPE_NAME, AM.DISCOUNT_AMT AS AMS_DISCOUNT_AMT, AM.DISCOUNT_LIMIT_QTY AS AMS_DISCOUNT_LIMIT_QTY, AM.DISCOUNT_LIMIT_WEIGHT AS AMS_DISCOUNT_LIMIT_WEIGHT, AM.DISCOUNT_LIMIT_AMT AS AMS_DISCOUNT_LIMIT_AMT, AM.DISCOUNT_RECEIPT_TXT AS AMS_DISCOUNT_RECEIPT_TXT, AM.DISCOUNT_UP_TO_AMT AS AMS_DISCOUNT_UP_TO_AMT, AM.ALLOW_MARKUP_IND AS AMS_ALLOW_MARKUP_IND, AM.FLEX_NEGATIVE_IND AS AMS_FLEX_NEGATIVE_IND, AM.DISCOUNT_INCL_PRODUCT_GROUP_ID AS AMS_DISCOUNT_INCL_PRODUCT_GROUP_ID, AM.DISCOUNT_INCL_PRODUCT_GROUP_NAME AS AMS_DISCOUNT_INCL_PRODUCT_GROUP_NAME, AM.DISCOUNT_EXCL_PRODUCT_GROUP_ID AS AMS_DISCOUNT_EXCL_PRODUCT_GROUP_ID, AM.DISCOUNT_EXCL_PRODUCT_GROUP_NAME AS AMS_DISCOUNT_EXCL_PRODUCT_GROUP_NAME, AM.T2_DISCOUNT_AMT AS AMS_T2_DISCOUNT_AMT, AM.T2_DISCOUNT_LIMIT_QTY AS AMS_T2_DISCOUNT_LIMIT_QTY, AM.T2_DISCOUNT_LIMIT_WEIGHT AS AMS_T2_DISCOUNT_LIMIT_WEIGHT, AM.T2_DISCOUNT_LIMIT_AMT AS AMS_T2_DISCOUNT_LIMIT_AMT, AM.T2_DISCOUNT_RECEIPT_TXT AS AMS_T2_DISCOUNT_RECEIPT_TXT, AM.T3_DISCOUNT_AMT AS AMS_T3_DISCOUNT_AMT, AM.T3_DISCOUNT_LIMIT_QTY AS AMS_T3_DISCOUNT_LIMIT_QTY, AM.T3_DISCOUNT_LIMIT_WEIGHT AS AMS_T3_DISCOUNT_LIMIT_WEIGHT, AM.T3_DISCOUNT_LIMIT_AMT AS AMS_T3_DISCOUNT_LIMIT_AMT, AM.T3_DISCOUNT_RECEIPT_TXT AS AMS_T3_DISCOUNT_RECEIPT_TXT, AM.T4_DISCOUNT_AMT AS AMS_T4_DISCOUNT_AMT, AM.T4_DISCOUNT_LIMIT_QTY AS AMS_T4_DISCOUNT_LIMIT_QTY, AM.T4_DISCOUNT_LIMIT_WEIGHT AS AMS_T4_DISCOUNT_LIMIT_WEIGHT, AM.T4_DISCOUNT_LIMIT_AMT AS AMS_T4_DISCOUNT_LIMIT_AMT, AM.T4_DISCOUNT_RECEIPT_TXT AS AMS_T4_DISCOUNT_RECEIPT_TXT, AM.PRINTED_MSG_TYPE_ID AS AMS_PRINTED_MSG_TYPE_ID, AM.PRINTED_MSG_TYPE_NAME AS AMS_PRINTED_MSG_TYPE_NAME, AM.SORT_ID AS AMS_SORT_ID, AM.MSG_TXT AS AMS_MSG_TXT, AM.DELIVERY_REQUIRED_IND AS AMS_DELIVERY_REQUIRED_IND, AM.PRINTED_MSG_UPC_ID AS AMS_PRINTED_MSG_UPC_ID, AM.PRINTED_MSG_PRODUCT_ID AS AMS_PRINTED_MSG_PRODUCT_ID, AM.T2_MSG_TXT AS AMS_T2_MSG_TXT, AM.T2_PRINTED_MSG_UPC_ID AS AMS_T2_PRINTED_MSG_UPC_ID, AM.T2_PRINTED_MSG_PRODUCT_ID AS AMS_T2_PRINTED_MSG_PRODUCT_ID, AM.T3_MSG_TXT AS AMS_T3_MSG_TXT, AM.T3_PRINTED_MSG_UPC_ID AS AMS_T3_PRINTED_MSG_UPC_ID, AM.T3_PRINTED_MSG_PRODUCT_ID AS AMS_T3_PRINTED_MSG_PRODUCT_ID, AM.T4_MSG_TXT AS AMS_T4_MSG_TXT, AM.T4_PRINTED_MSG_UPC_ID AS AMS_T4_PRINTED_MSG_UPC_ID, AM.T4_PRINTED_MSG_PRODUCT_ID AS AMS_T4_PRINTED_MSG_PRODUCT_ID, AM.AMS_US_OFFER_FLAG, AM.AMS_CA_OFFER_FLAG, AM.AMS_PR_OFFER_FLAG, AM.TRIGGER_UPC AS AMS_UPCA_NBR FROM ((ADMIN.AMS_OFFER_SUBMISSION OS FULL JOIN (SELECT L.EM_OFFER_ID, L.EM_EVENT_ID, L.AMS_OFFER_SUBMISSION_ID, L.EM_OFFER_NAME, L.EM_AMS_TEMPLATE_TYPE_ID, L.EM_AMS_OFFER_LIMIT_QTY, L.EM_AMS_OFFER_LIMIT_TYPE_ID, L.EM_AMS_DISCOUNT_TYPE_ID, L.DISCOUNT_AMT, L.TOTAL_DISCOUNT_AMT, L.MIN_SPEND_AMT, L.BUY_QTY, L.BUY_DESC, L.GET_QTY, L.GET_DESC, L.BB_BUY_OR_SPEND_IND, L.BB_SPEND_AMT, L.BTGT_GRP_A_BUY_QTY, L.BTGT_GRP_A_BUY_DESC, L.BTGT_GRP_A_MIN_SPEND_AMT, L.BTGT_GRP_B_BUY_QTY, L.BTGT_GRP_B_BUY_DESC, L.BTGT_GRP_B_MIN_SPEND_AMT, L.SS_SPEND_AMT, L.SS_SPEND_DESC, L.SS_SAVE_DESC, L.SS_SAME_SPEND_ITEM_IND, L.BOGO_SAME_BUY_ITEM_IND, L.GET_LABEL_SUPPRESSED_IND, L.DISCLAIMER_1_TYPE_ID, L.DISCLAIMER_1_TYPE_DESC, L.DISCLAIMER_1_OTHER_DESC, L.DISCLAIMER_2_TYPE_ID, L.DISCLAIMER_2_TYPE_DESC, L.DISCLAIMER_2_OTHER_DESC, L.BTGT_GRP_A_DISCLAIMER_TYPE_ID, L.BTGT_GRP_A_DISCLAIMER_TYPE_DESC, L.BTGT_GRP_A_DISCLAIMER_OTHER_DESC, L.BTGT_GRP_B_DISCLAIMER_TYPE_ID, L.BTGT_GRP_B_DISCLAIMER_TYPE_DESC, L.BTGT_GRP_B_DISCLAIMER_OTHER_DESC, L.EM_OFFER_UNLOCK_TSTMP, L.EM_CREATED_BY, L.EM_CREATED_TSTMP, L.EM_MODIFIED_BY, L.EM_MODIFIED_TSTMP, L.UPDATE_TSTMP, L.LOAD_TSTMP, P.EM_T1_MIN_QTY, P.EM_T1_MAX_QTY, P.EM_T1_DISCOUNT_AMT, P.EM_T2_MIN_QTY, P.EM_T2_MAX_QTY, P.EM_T2_DISCOUNT_AMT, P.EM_T3_MIN_QTY, P.EM_T3_MAX_QTY, P.EM_T3_DISCOUNT_AMT, P.EM_T4_MIN_QTY, P.EM_T4_MAX_QTY, P.EM_T4_DISCOUNT_AMT, C.EM_US_OFFER_FLAG, C.EM_CA_OFFER_FLAG, C.EM_PR_OFFER_FLAG, T.EM_AMS_TEMPLATE_TYPE_NAME, LT.EM_AMS_OFFER_LIMIT_TYPE_NAME, D.EM_AMS_DISCOUNT_TYPE_NAME, E.EVENT_NAME, E.EVENT_DESC, E.EVENT_START_DT, E.EVENT_END_DT, E.EVENT_LOCK_DT, E.EVENT_US_LOCK_DT, E.EVENT_TURN_IN_DT, E.EVENT_DEFAULT_START_DT, E.EVENT_DEFAULT_END_DT, E.STANDARD_FLAG, E.EM_PURGED_FLAG FROM ((((((ADMIN.EM_AMS_OFFER_LABEL L LEFT JOIN (SELECT EM_AMS_OFFER_TIERED_PRICE.EM_OFFER_ID, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 1) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T1_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 1) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T1_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 1) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T1_DISCOUNT_AMT, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 2) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T2_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 2) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T2_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 2) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T2_DISCOUNT_AMT, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 3) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T3_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 3) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T3_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 3) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T3_DISCOUNT_AMT, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 4) THEN EM_AMS_OFFER_TIERED_PRICE.MIN_QTY ELSE NULL::INT4 END) AS EM_T4_MIN_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 4) THEN EM_AMS_OFFER_TIERED_PRICE.MAX_QTY ELSE NULL::INT4 END) AS EM_T4_MAX_QTY, MAX(CASE WHEN (EM_AMS_OFFER_TIERED_PRICE.TIER_NBR = 4) THEN EM_AMS_OFFER_TIERED_PRICE.DISCOUNT_AMT ELSE NULL::"NUMERIC" END) AS EM_T4_DISCOUNT_AMT FROM ADMIN.EM_AMS_OFFER_TIERED_PRICE WHERE (EM_AMS_OFFER_TIERED_PRICE.DELETE_IND = 0) GROUP BY EM_AMS_OFFER_TIERED_PRICE.EM_OFFER_ID) P ON ((L.EM_OFFER_ID = P.EM_OFFER_ID))) LEFT JOIN (SELECT EM_AMS_OFFER_COUNTRY.EM_OFFER_ID, MAX(CASE WHEN (BTRIM(EM_AMS_OFFER_COUNTRY.COUNTRY_CD) = 'US'::"VARCHAR") THEN 1 ELSE 0 END) AS EM_US_OFFER_FLAG, MAX(CASE WHEN (BTRIM(EM_AMS_OFFER_COUNTRY.COUNTRY_CD) = 'CA'::"VARCHAR") THEN 1 ELSE 0 END) AS EM_CA_OFFER_FLAG, MAX(CASE WHEN (BTRIM(EM_AMS_OFFER_COUNTRY.COUNTRY_CD) = 'PR'::"VARCHAR") THEN 1 ELSE 0 END) AS EM_PR_OFFER_FLAG FROM ADMIN.EM_AMS_OFFER_COUNTRY WHERE (EM_AMS_OFFER_COUNTRY.DELETE_IND = 0) GROUP BY EM_AMS_OFFER_COUNTRY.EM_OFFER_ID) C ON ((L.EM_OFFER_ID = C.EM_OFFER_ID))) LEFT JOIN ADMIN.EM_AMS_TEMPLATE_TYPE T ON ((L.EM_AMS_TEMPLATE_TYPE_ID = T.EM_AMS_TEMPLATE_TYPE_ID))) LEFT JOIN ADMIN.EM_AMS_OFFER_LIMIT_TYPE LT ON ((L.EM_AMS_OFFER_LIMIT_TYPE_ID = LT.EM_AMS_OFFER_LIMIT_TYPE_ID))) LEFT JOIN ADMIN.EM_AMS_DISCOUNT_TYPE D ON ((L.EM_AMS_DISCOUNT_TYPE_ID = D.EM_AMS_DISCOUNT_TYPE_ID))) LEFT JOIN ADMIN.EM_EVENT E ON ((L.EM_EVENT_ID = E.EM_EVENT_ID)))) EM ON ((OS.AMS_OFFER_SUBMISSION_ID = EM.AMS_OFFER_SUBMISSION_ID))) FULL JOIN (SELECT A.OFFER_ID, A.IS_TEMPLATE_IND, A.FROM_TEMPLATE_IND, A.OFFER_NAME, A.OFFER_DESC, A.OFFER_CATEGORY_ID, A.OFFER_CATEGORY_NAME, A.OFFER_PRIORITY, A.OFFER_START_DT, A.OFFER_END_DT, A.OFFER_LIMIT_TYPE_ID, A.OFFER_LIMIT_TYPE_DESC, A.OFFER_LIMIT_QTY, A.OFFER_LIMIT_PERIOD_DAYS, A.SYS_CREATE_TSTMP, A.SYS_UPDATE_TSTMP, A.DELETE_FLAG, A.STATUS_FLAG, A.OFFER_STATUS_ID, A.OFFER_STATUS_NAME, A.EMPLOYEES_ONLY_IND, A.EMPLOYEES_EXCLUDED_IND, A.SEND_ISSUANCE_IND, A.VENDOR_COUPON_CD, A.TIER_LEVEL_CNT, A.DISC_EVAL_TYPE_ID, A.DISC_EVAL_TYPE_NAME, CASE WHEN (LG.OFFER_ID NOTNULL) THEN 1 ELSE OL.AMS_US_OFFER_FLAG END AS AMS_US_OFFER_FLAG, CASE WHEN (LG.OFFER_ID NOTNULL) THEN 1 ELSE OL.AMS_CA_OFFER_FLAG END AS AMS_CA_OFFER_FLAG, CASE WHEN (LG.OFFER_ID NOTNULL) THEN 1 ELSE OL.AMS_PR_OFFER_FLAG END AS AMS_PR_OFFER_FLAG, BTRIM(LTRIM(OT.TRIGGER_CD, '0'::"VARCHAR")) AS TRIGGER_UPC, IP.MIN_ITEM_PRICE_AMT, IP.T1_QTY_FOR_INCENTIVE AS QTY_FOR_INCENTIVE, IP.T1_QTY_UNIT_TYPE_NAME AS QTY_UNIT_TYPE_NAME, IP.T2_QTY_FOR_INCENTIVE, IP.T2_QTY_UNIT_TYPE_NAME, IP.T3_QTY_FOR_INCENTIVE, IP.T3_QTY_UNIT_TYPE_NAME, IP.T4_QTY_FOR_INCENTIVE, IP.T4_QTY_UNIT_TYPE_NAME, CASE WHEN (D1.DISCOUNT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS DISCOUNT_TYPE_ID, ADT.DISCOUNT_TYPE_NAME, CASE WHEN (D1.OFFER_CHARGEBACK_ID NOTNULL) THEN INT4(D1.OFFER_CHARGEBACK_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS OFFER_CHARGEBACK_ID, AOC.OFFER_CHARGEBACK_DESC, CASE WHEN (D1.DISCOUNT_AMT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_AMT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS DISCOUNT_AMT_TYPE_ID, ADAT.DISCOUNT_AMT_TYPE_NAME, D1.DISCOUNT_AMT, D1.DISCOUNT_LIMIT_QTY, D1.DISCOUNT_LIMIT_WEIGHT, D1.DISCOUNT_LIMIT_AMT, D1.DISCOUNT_RECEIPT_TXT, D1.DISCOUNT_UP_TO_AMT, D1.ALLOW_MARKUP_IND, D1.FLEX_NEGATIVE_IND, CASE WHEN (D1.PRODUCT_GROUP_ID NOTNULL) THEN D1.PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END AS PRODUCT_GROUP_ID, CASE WHEN (D1.EXCLUDED_PRODUCT_GROUP_ID NOTNULL) THEN D1.EXCLUDED_PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END AS EXCLUDED_PRODUCT_GROUP_ID, APGI.PRODUCT_GROUP_ID AS DISCOUNT_INCL_PRODUCT_GROUP_ID, APGI.PRODUCT_GROUP_NAME AS DISCOUNT_INCL_PRODUCT_GROUP_NAME, APGE.PRODUCT_GROUP_ID AS DISCOUNT_EXCL_PRODUCT_GROUP_ID, APGE.PRODUCT_GROUP_NAME AS DISCOUNT_EXCL_PRODUCT_GROUP_NAME, D2.DISCOUNT_AMT AS T2_DISCOUNT_AMT, D2.DISCOUNT_LIMIT_QTY AS T2_DISCOUNT_LIMIT_QTY, D2.DISCOUNT_LIMIT_WEIGHT AS T2_DISCOUNT_LIMIT_WEIGHT, D2.DISCOUNT_LIMIT_AMT AS T2_DISCOUNT_LIMIT_AMT, D2.DISCOUNT_RECEIPT_TXT AS T2_DISCOUNT_RECEIPT_TXT, D3.DISCOUNT_AMT AS T3_DISCOUNT_AMT, D3.DISCOUNT_LIMIT_QTY AS T3_DISCOUNT_LIMIT_QTY, D3.DISCOUNT_LIMIT_WEIGHT AS T3_DISCOUNT_LIMIT_WEIGHT, D3.DISCOUNT_LIMIT_AMT AS T3_DISCOUNT_LIMIT_AMT, D3.DISCOUNT_RECEIPT_TXT AS T3_DISCOUNT_RECEIPT_TXT, D4.DISCOUNT_AMT AS T4_DISCOUNT_AMT, D4.DISCOUNT_LIMIT_QTY AS T4_DISCOUNT_LIMIT_QTY, D4.DISCOUNT_LIMIT_WEIGHT AS T4_DISCOUNT_LIMIT_WEIGHT, D4.DISCOUNT_LIMIT_AMT AS T4_DISCOUNT_LIMIT_AMT, D4.DISCOUNT_RECEIPT_TXT AS T4_DISCOUNT_RECEIPT_TXT, CASE WHEN (M1.PRINTED_MSG_TYPE_ID NOTNULL) THEN M1.PRINTED_MSG_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS PRINTED_MSG_TYPE_ID, APMT.PRINTED_MSG_TYPE_NAME, M1.SORT_ID, M1.MSG_TXT, M1.DELIVERY_REQUIRED_IND, M1.UPC_ID AS PRINTED_MSG_UPC_ID, U1.PRODUCT_ID AS PRINTED_MSG_PRODUCT_ID, M2.MSG_TXT AS T2_MSG_TXT, M2.UPC_ID AS T2_PRINTED_MSG_UPC_ID, U2.PRODUCT_ID AS T2_PRINTED_MSG_PRODUCT_ID, M3.MSG_TXT AS T3_MSG_TXT, M3.UPC_ID AS T3_PRINTED_MSG_UPC_ID, U3.PRODUCT_ID AS T3_PRINTED_MSG_PRODUCT_ID, M4.MSG_TXT AS T4_MSG_TXT, M4.UPC_ID AS T4_PRINTED_MSG_UPC_ID, U4.PRODUCT_ID AS T4_PRINTED_MSG_PRODUCT_ID FROM ((((((((((((((((((((((ADMIN.AMS_OFFER_RPT A LEFT JOIN ADMIN.AMS_OFFER_LOCATION_GROUP LG ON ((((A.OFFER_ID = LG.OFFER_ID) AND (LG.LOCATION_GROUP_ID = 1)) AND (LG.DELETE_IND = 0)))) LEFT JOIN (SELECT L.OFFER_ID, MAX(CASE WHEN ((BTRIM((S.COUNTRY_CD)::"VARCHAR") = 'US'::"VARCHAR") AND (S.STATE_CD <> 'PR'::BPCHAR)) THEN 1 ELSE 0 END) AS AMS_US_OFFER_FLAG, MAX(CASE WHEN (BTRIM((S.COUNTRY_CD)::"VARCHAR") = 'CA'::"VARCHAR") THEN 1 ELSE 0 END) AS AMS_CA_OFFER_FLAG, MAX(CASE WHEN ((BTRIM((S.COUNTRY_CD)::"VARCHAR") = 'US'::"VARCHAR") AND (S.STATE_CD = 'PR'::BPCHAR)) THEN 1 ELSE 0 END) AS AMS_PR_OFFER_FLAG FROM ADMIN.AMS_OFFER_LOCATION_GROUP_STORE L, ADMIN.SITE_PROFILE S WHERE ((L.STORE_NBR = S.STORE_NBR) AND (L.DELETE_IND = 0)) GROUP BY L.OFFER_ID) OL ON ((A.OFFER_ID = OL.OFFER_ID))) LEFT JOIN (SELECT AMS_OFFER_TRIGGER.OFFER_ID, MAX(AMS_OFFER_TRIGGER.TRIGGER_CD) AS TRIGGER_CD FROM ADMIN.AMS_OFFER_TRIGGER WHERE (AMS_OFFER_TRIGGER.DELETE_IND = 0) GROUP BY AMS_OFFER_TRIGGER.OFFER_ID) OT ON ((A.OFFER_ID = OT.OFFER_ID))) LEFT JOIN (SELECT P.OFFER_ID, MAX(P.MIN_ITEM_PRICE_AMT) AS MIN_ITEM_PRICE_AMT, SUM(CASE WHEN (P.TIER_ID = 1) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T1_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 1) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T1_QTY_UNIT_TYPE_NAME, SUM(CASE WHEN (P.TIER_ID = 2) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T2_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 2) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T2_QTY_UNIT_TYPE_NAME, SUM(CASE WHEN (P.TIER_ID = 3) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T3_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 3) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T3_QTY_UNIT_TYPE_NAME, SUM(CASE WHEN (P.TIER_ID = 4) THEN P.QTY_FOR_INCENTIVE ELSE '0'::NUMERIC END) AS T4_QTY_FOR_INCENTIVE, MAX(CASE WHEN (P.TIER_ID = 4) THEN Q.QTY_UNIT_TYPE_NAME ELSE NULL::"VARCHAR" END) AS T4_QTY_UNIT_TYPE_NAME FROM ADMIN.AMS_OFFER_PRODUCT_GROUP P, ADMIN.AMS_QTY_UNIT_TYPE Q WHERE ((P.DELETE_IND = 0) AND (P.QTY_UNIT_TYPE_ID = Q.QTY_UNIT_TYPE_ID)) GROUP BY P.OFFER_ID) IP ON ((A.OFFER_ID = IP.OFFER_ID))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D1 ON (((A.OFFER_ID = D1.OFFER_ID) AND (D1.TIER_ID = 1)))) LEFT JOIN ADMIN.AMS_DISCOUNT_TYPE ADT ON ((CASE WHEN (D1.DISCOUNT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = ADT.DISCOUNT_TYPE_ID))) LEFT JOIN ADMIN.AMS_OFFER_CHARGEBACK AOC ON ((CASE WHEN (D1.OFFER_CHARGEBACK_ID NOTNULL) THEN INT4(D1.OFFER_CHARGEBACK_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = AOC.OFFER_CHARGEBACK_ID))) LEFT JOIN ADMIN.AMS_DISCOUNT_AMT_TYPE ADAT ON ((CASE WHEN (D1.DISCOUNT_AMT_TYPE_ID NOTNULL) THEN D1.DISCOUNT_AMT_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = ADAT.DISCOUNT_AMT_TYPE_ID))) LEFT JOIN ADMIN.AMS_PRODUCT_GROUP APGI ON ((CASE WHEN (D1.PRODUCT_GROUP_ID NOTNULL) THEN D1.PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END = APGI.PRODUCT_GROUP_ID))) LEFT JOIN ADMIN.AMS_PRODUCT_GROUP APGE ON ((CASE WHEN (D1.EXCLUDED_PRODUCT_GROUP_ID NOTNULL) THEN D1.EXCLUDED_PRODUCT_GROUP_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END = APGE.PRODUCT_GROUP_ID))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D2 ON (((A.OFFER_ID = D2.OFFER_ID) AND (D2.TIER_ID = 2)))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D3 ON (((A.OFFER_ID = D3.OFFER_ID) AND (D3.TIER_ID = 3)))) LEFT JOIN ADMIN.AMS_OFFER_DISCOUNT D4 ON (((A.OFFER_ID = D4.OFFER_ID) AND (D4.TIER_ID = 4)))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M1 ON (((A.OFFER_ID = M1.OFFER_ID) AND (M1.TIER_ID = 1)))) LEFT JOIN ADMIN.AMS_PRINTED_MSG_TYPE APMT ON ((CASE WHEN (M1.PRINTED_MSG_TYPE_ID NOTNULL) THEN M1.PRINTED_MSG_TYPE_ID WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END = APMT.PRINTED_MSG_TYPE_ID))) LEFT JOIN ADMIN.UPC U1 ON ((M1.UPC_ID = U1.UPC_ID))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M2 ON (((A.OFFER_ID = M2.OFFER_ID) AND (M1.TIER_ID = 2)))) LEFT JOIN ADMIN.UPC U2 ON ((M2.UPC_ID = U2.UPC_ID))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M3 ON (((A.OFFER_ID = M3.OFFER_ID) AND (M3.TIER_ID = 3)))) LEFT JOIN ADMIN.UPC U3 ON ((M3.UPC_ID = U3.UPC_ID))) LEFT JOIN ADMIN.AMS_OFFER_PRINTED_MSG M4 ON (((A.OFFER_ID = M4.OFFER_ID) AND (M4.TIER_ID = 4)))) LEFT JOIN ADMIN.UPC U4 ON ((M4.UPC_ID = U4.UPC_ID)))) AM ON ((INT8(OS.AMS_OFFER_ID) = AM.OFFER_ID)));

\echo
\echo *****  Creating view:  "SMS_COMMISSION_RPT_VW"

CREATE or replace VIEW  SMS_COMMISSION_RPT_VW
(
     LOCATION_ID,
     STORE,
     DISTRICT_ID,
     DISTRICT_DESC,
     REGION_ID,
     REGION_DESC,
     DAY_DT,
     WEEK_DT,
     INVOICE,
     APPT_ID,
     ORDER_ID,
     PRODUCT_ID,
     EMPLOYEE_ID,
     GROOMER,
     ITEM_QTY,
     FINAL_PRICE,
     GROSS_COMMISSION,
     COMMISSION_RATE,
     CUSTOMER,
     PET,
     "SERVICE",
     SAP_CATEGORY_ID,
     SAP_CATEGORY_DESC,
     TXN_TSTMP,
     TXN_REGISTER,
     TXN_NBR,
     TXN_TYPE,
     CASHIER,
     COUPON_UPC,
     COUPON_DESC,
     CPN_AMT,
     NET_COMMISSION
) AS
SELECT SMS.LOCATION_ID, SMS.STORE_NBR AS STORE, SMS.DISTRICT_ID, SMS.DISTRICT_DESC, SMS.REGION_ID, SMS.REGION_DESC, TO_CHAR("TIMESTAMP"(SMS.DAY_DT), 'MM/DD/YY'::"VARCHAR") AS DAY_DT, TO_CHAR(SMS.WEEK_DT, 'MM/DD/YY'::"VARCHAR") AS WEEK_DT, SMS.PETM_POS_INVOICE_ID AS INVOICE, SMS.SMS_APPOINTMENT_ID AS APPT_ID, SMS.SMS_ORDER_ID AS ORDER_ID, SMS.PRODUCT_ID, SMS.EMPLOYEE_ID, SMS.SMS_EMPLOYEE_NAME AS GROOMER, SMS.APPT_SERVICE_ITEM_QTY AS ITEM_QTY, SMS.SMS_FINAL_PRICE AS FINAL_PRICE, SMS.SMS_COMMISSION_AMT AS GROSS_COMMISSION, SMS.COMMISSION_RATE, ((SMS.SMS_CUST_FIRST_NAME || ' '::"VARCHAR") || SMS.SMS_CUST_LAST_NAME) AS CUSTOMER, SMS.SMS_PET_NAME AS PET, SMS.SKU_DESC AS "SERVICE", SMS.SAP_CATEGORY_ID, SMS.SAP_CATEGORY_DESC, TO_CHAR(POS.TRANS_TSTMP, 'HH24:MI'::"VARCHAR") AS TXN_TSTMP, POS.REGISTER_NBR AS TXN_REGISTER, POS.TRANSACTION_NBR AS TXN_NBR, POS.SALES_TYPE_DESC AS TXN_TYPE, POS.CASHIER_NBR AS CASHIER, POS.COUPON_UPC_ID AS COUPON_UPC, POS.COUPON_DESC, POS.POS_COUPON_ALLOC_AMT AS CPN_AMT, CASE WHEN (POS.POS_COUPON_ALLOC_AMT ISNULL) THEN SMS.SMS_COMMISSION_AMT ELSE (SMS.COMMISSION_RATE * (SMS.SMS_FINAL_PRICE - POS.POS_COUPON_ALLOC_AMT)) END AS NET_COMMISSION FROM ((SELECT S.SMS_APPOINTMENT_DT AS DAY_DT, D.WEEK_DT, A.LOCATION_ID, L.STORE_NBR, L.DISTRICT_ID, L.DISTRICT_DESC, L.REGION_ID, L.REGION_DESC, A.SMS_APPOINTMENT_ID, A.SMS_ORDER_ID, S.EMPLOYEE_ID, E.SMS_EMPLOYEE_NAME, A.PETM_POS_INVOICE_ID, S.PRODUCT_ID, SP.SKU_DESC, SP.SAP_CATEGORY_ID, SP.SAP_CATEGORY_DESC, P.SMS_PET_NAME, C.SMS_CUST_LAST_NAME, C.SMS_CUST_FIRST_NAME, S.APPT_SERVICE_ITEM_QTY, ("NUMERIC"(S.APPT_SERVICE_ITEM_QTY) * S.FINAL_PRICE_AMT) AS SMS_FINAL_PRICE, CASE WHEN (S.SMS_COMMISSION_AMT NOTNULL) THEN S.SMS_COMMISSION_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS SMS_COMMISSION_AMT, CASE WHEN (S.FINAL_PRICE_AMT = '0'::NUMERIC) THEN '0'::NUMERIC WHEN (CASE WHEN (S.SMS_COMMISSION_AMT NOTNULL) THEN S.SMS_COMMISSION_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END < ('0.02'::NUMERIC(2,2))::NUMERIC(2,2)) THEN '0'::NUMERIC ELSE (S.SMS_COMMISSION_AMT / ("NUMERIC"(S.APPT_SERVICE_ITEM_QTY) * S.FINAL_PRICE_AMT)) END AS COMMISSION_RATE FROM (((((((ADMIN.SMS_APPOINTMENT_RPT A JOIN ADMIN.DAYS D ON (("TIMESTAMP"(A.SMS_APPOINTMENT_DT) = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT L ON ((A.LOCATION_ID = L.LOCATION_ID))) JOIN ADMIN.SMS_APPOINTMENT_SERVICE_RPT S ON (((A.SMS_APPOINTMENT_ID = S.SMS_APPOINTMENT_ID) AND (A.SMS_ORDER_ID = S.SMS_ORDER_ID)))) LEFT JOIN ADMIN.SMS_EMPLOYEE E ON ((S.SMS_EMPLOYEE_ID = E.SMS_EMPLOYEE_ID))) JOIN ADMIN.SMS_PET P ON ((S.SMS_PET_ID = P.SMS_PET_ID))) JOIN ADMIN.SKU_PROFILE_RPT SP ON ((S.PRODUCT_ID = SP.PRODUCT_ID))) JOIN ADMIN.SMS_CUSTOMER C ON ((A.SMS_CUSTOMER_ID = C.SMS_CUSTOMER_ID))) WHERE (((S.SMS_APPT_STATUS_ID IN (4, 5, 8, 9)) AND (S.SERVICE_CANCEL_TSTMP ISNULL)) AND (D.WEEK_DT = (SELECT DAYS.WEEK_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 7))))))) SMS LEFT JOIN (SELECT U.DAY_DT, U.LOCATION_ID, MAX(CPN.STORE_NBR) AS STORE_NBR, U.SALES_INSTANCE_ID, MAX(K.TRANS_TSTMP) AS TRANS_TSTMP, MAX(K.REGISTER_NBR) AS REGISTER_NBR, MAX(K.TRANSACTION_NBR) AS TRANSACTION_NBR, MAX(U.CASHIER_NBR) AS CASHIER_NBR, MAX(T.SALES_TYPE_DESC) AS SALES_TYPE_DESC, U.TP_INVOICE_NBR, U.PRODUCT_ID, MAX(CPN.COUPON_UPC_ID) AS COUPON_UPC_ID, MAX(PC.SKU_DESC) AS COUPON_DESC, (MAX(CPN.POS_COUPON_ALLOC_AMT) / "NUMERIC"(COUNT(*))) AS POS_COUPON_ALLOC_AMT, COUNT(*) AS COUNT FROM ((((((SELECT C.DAY_DT, C.LOCATION_ID, R.STORE_NBR, C.SALES_INSTANCE_ID, C.PRODUCT_ID, C.TP_INVOICE_NBR, C.COUPON_PRODUCT_ID, C.COUPON_UPC_ID, SUM(C.POS_COUPON_ALLOC_AMT) AS POS_COUPON_ALLOC_AMT FROM (((ADMIN.SALES_TRANS_UPC_COUPON_ALLOC C JOIN ADMIN.DAYS D ON (("TIMESTAMP"(C.DAY_DT) = D.DAY_DT))) JOIN ADMIN.SMS_STORE_ROLLOUT R ON ((C.LOCATION_ID = R.LOCATION_ID))) JOIN ADMIN.SMS_COMMISSION_COUPON CC ON (((C.COUPON_PRODUCT_ID = CC.PRODUCT_ID) AND ((C.DAY_DT >= CC.COMMISSION_ACTIVE_FROM_DT) AND (C.DAY_DT <= CC.COMMISSION_ACTIVE_TO_DT))))) WHERE ((((D.WEEK_DT = (SELECT DAYS.WEEK_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 7))))) AND (C.SALES_TYPE_ID IN (1, 3))) AND (C.VOID_TYPE_CD = 'N'::BPCHAR)) AND (R.SMS_START_DT < DATE('now(0)'::"VARCHAR"))) GROUP BY C.DAY_DT, C.LOCATION_ID, R.STORE_NBR, C.SALES_INSTANCE_ID, C.PRODUCT_ID, C.TP_INVOICE_NBR, C.COUPON_PRODUCT_ID, C.COUPON_UPC_ID) CPN JOIN ADMIN.SALES_TRANS_UPC U ON ((((("TIMESTAMP"(CPN.DAY_DT) = U.DAY_DT) AND (CPN.SALES_INSTANCE_ID = U.SALES_INSTANCE_ID)) AND (CPN.TP_INVOICE_NBR = U.TP_INVOICE_NBR)) AND (CPN.PRODUCT_ID = U.PRODUCT_ID)))) JOIN ADMIN.SALES_INSTANCE_SKEY K ON (((U.DAY_DT = K.DAY_DT) AND (U.SALES_INSTANCE_ID = K.SALES_INSTANCE_ID)))) JOIN ADMIN.SALES_TYPE T ON ((U.SALES_TYPE_ID = T.SALES_TYPE_ID))) JOIN ADMIN.SKU_PROFILE_RPT PC ON ((CPN.COUPON_PRODUCT_ID = PC.PRODUCT_ID))) JOIN ADMIN.SKU_PROFILE_RPT PU ON ((U.PRODUCT_ID = PU.PRODUCT_ID))) WHERE (U.VOID_TYPE_CD = 'N'::BPCHAR) GROUP BY U.DAY_DT, U.LOCATION_ID, U.SALES_INSTANCE_ID, U.PRODUCT_ID, U.TP_INVOICE_NBR) POS ON ((((("TIMESTAMP"(SMS.DAY_DT) = POS.DAY_DT) AND (SMS.LOCATION_ID = POS.LOCATION_ID)) AND (SMS.PETM_POS_INVOICE_ID = POS.TP_INVOICE_NBR)) AND (SMS.PRODUCT_ID = POS.PRODUCT_ID))));

\echo
\echo *****  Creating view:  "MA_SALES_TRANS_UPC_TYLY_CRCY_VW"

CREATE or replace VIEW  MA_SALES_TRANS_UPC_TYLY_CRCY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     COMP_FLAG,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     MA_EVENT_ID,
     PRODUCT_ID,
     SALES_CUST_CAPTURE_CD,
     MA_SALES_AMT,
     MA_SALES_QTY,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DATE(T.DAY_DT) AS DAY_DT, T.TY_LY_FLAG, CASE WHEN ((T.COMP_IND = 1) AND ((T.DAY_DT >= S.COMP_EFF_DT) AND (T.DAY_DT <= S.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, M.LOCATION_ID, M.SALES_INSTANCE_ID, M.UPC_ID, M.TP_INVOICE_NBR, M.PARENT_UPC_ID, M.COMBO_TYPE_CD, M.POS_TXN_SEQ_NBR, M.MA_EVENT_ID, M.PRODUCT_ID, M.SALES_CUST_CAPTURE_CD, M.MA_SALES_AMT, M.MA_SALES_QTY, C.CURRENCY_TYPE_ID, C.CURRENCY_TYPE_DESC, CASE WHEN (C.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE M.EXCH_RATE_PCT END AS EXCH_RATE_PCT, M.UPDATE_DT, M.LOAD_DT FROM ((((ADMIN.MA_SALES_TRANS_UPC M JOIN ADMIN.DAYS_TY_LY T ON ((M.DAY_DT = T.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((T.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT S ON ((M.LOCATION_ID = S.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP C);

\echo
\echo *****  Creating view:  "EM_INV_INSTOCK_PRICE_WK_VW"

CREATE or replace VIEW  EM_INV_INSTOCK_PRICE_WK_VW
(
     EM_EVENT_ID,
     WEEK_DT,
     PRODUCT_ID,
     LOCATION_ID,
     COUNTRY_CD,
     FROM_LOCATION_ID,
     SOURCE_VENDOR_ID,
     SKU_STATUS_ID,
     STORE_OPEN_IND,
     OUT_OF_STOCK_CNT,
     POG_LISTED_IND,
     SAP_LISTED_IND,
     INLINE_CNT,
     PLANNER_IND,
     SUBS_IND,
     OOS_7_DAY_IND_AVG,
     OOS_MON_IND,
     OOS_TUE_IND,
     OOS_WED_IND,
     OOS_THU_IND,
     OOS_FRI_IND,
     OOS_SAT_IND,
     OOS_SUN_IND,
     INLINE_7_DAY_IND_AVG,
     MAP_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY,
     COMMITTED_QTY,
     XFER_IN_TRANS_QTY,
     ON_ORDER_QTY,
     SUM_COST_AMT,
     BUM_COST_AMT,
     ON_ORDER_CD,
     RETAIL_PRICE_AMT,
     SKU_FACINGS_QTY,
     SKU_CAPACITY_QTY,
     PETPERKS_AMT,
     PETPERKS_IND,
     LOCAL_PRICE_AMT,
     LOC_PETPERKS_PRICE_AMT,
     CIRCULAR_FLAG,
     EM_DISP_LOC_NAME,
     LOAD_DT,
     OOS_7_DAY_AVG,
     POG_7_DAY_AVG
) AS
SELECT EINF.EM_EVENT_ID, IIPW.WEEK_DT, IIPW.PRODUCT_ID, IIPW.LOCATION_ID, SP.COUNTRY_CD, IIPW.FROM_LOCATION_ID, IIPW.SOURCE_VENDOR_ID, IIPW.SKU_STATUS_ID, IIPW.STORE_OPEN_IND, IIPW.OUT_OF_STOCK_CNT, IIPW.POG_LISTED_IND, IIPW.SAP_LISTED_IND, IIPW.INLINE_CNT, IIPW.PLANNER_IND, IIPW.SUBS_IND, IIPW.OOS_7_DAY_IND_AVG, IIPW.OOS_MON_IND, IIPW.OOS_TUE_IND, IIPW.OOS_WED_IND, IIPW.OOS_THU_IND, IIPW.OOS_FRI_IND, IIPW.OOS_SAT_IND, IIPW.OOS_SUN_IND, IIPW.INLINE_7_DAY_IND_AVG, IIPW.MAP_AMT, IIPW.EXCH_RATE_PCT, IIPW.ON_HAND_QTY, IIPW.COMMITTED_QTY, IIPW.XFER_IN_TRANS_QTY, IIPW.ON_ORDER_QTY, IIPW.SUM_COST_AMT, IIPW.BUM_COST_AMT, IIPW.ON_ORDER_CD, IIPW.RETAIL_PRICE_AMT, IIPW.SKU_FACINGS_QTY, IIPW.SKU_CAPACITY_QTY, IIPW.PETPERKS_AMT, IIPW.PETPERKS_IND, IIPW.LOCAL_PRICE_AMT, IIPW.LOC_PETPERKS_PRICE_AMT, MAX(EINF.CIRCULAR_FLAG) AS CIRCULAR_FLAG, EINF.EM_DISP_LOC_NAME, IIPW.LOAD_DT, IIPW.OOS_7_DAY_AVG, IIPW.POG_7_DAY_AVG FROM ((ADMIN.INV_INSTOCK_PRICE_WK IIPW LEFT JOIN ADMIN.SITE_PROFILE SP ON ((IIPW.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN (SELECT E.EM_EVENT_ID, E.EVENT_START_DT, E.EVENT_END_DT, EAD.PRODUCT_ID, ESS.LOCATION_ID, ESS.EM_DISP_LOC_NAME, MAX(EAD.CIRCULAR_FLAG) AS CIRCULAR_FLAG FROM ((ADMIN.EM_EVENT E LEFT JOIN ADMIN.EM_EVENT_SKU_ADV EAD ON ((E.EM_EVENT_ID = EAD.EM_EVENT_ID))) LEFT JOIN ADMIN.EM_EVENT_SKU_STORE ESS ON (((EAD.EM_EVENT_ID = ESS.EM_EVENT_ID) AND (EAD.PRODUCT_ID = ESS.PRODUCT_ID)))) GROUP BY E.EM_EVENT_ID, E.EVENT_START_DT, E.EVENT_END_DT, EAD.PRODUCT_ID, ESS.LOCATION_ID, ESS.EM_DISP_LOC_NAME) EINF ON (((((IIPW.WEEK_DT >= EINF.EVENT_START_DT) AND (IIPW.WEEK_DT <= EINF.EVENT_END_DT)) AND (IIPW.PRODUCT_ID = EINF.PRODUCT_ID)) AND (IIPW.LOCATION_ID = EINF.LOCATION_ID)))) GROUP BY EINF.EM_EVENT_ID, IIPW.WEEK_DT, IIPW.PRODUCT_ID, IIPW.LOCATION_ID, SP.COUNTRY_CD, IIPW.FROM_LOCATION_ID, IIPW.SOURCE_VENDOR_ID, IIPW.SKU_STATUS_ID, IIPW.STORE_OPEN_IND, IIPW.OUT_OF_STOCK_CNT, IIPW.POG_LISTED_IND, IIPW.SAP_LISTED_IND, IIPW.INLINE_CNT, IIPW.PLANNER_IND, IIPW.SUBS_IND, IIPW.OOS_7_DAY_IND_AVG, IIPW.OOS_MON_IND, IIPW.OOS_TUE_IND, IIPW.OOS_WED_IND, IIPW.OOS_THU_IND, IIPW.OOS_FRI_IND, IIPW.OOS_SAT_IND, IIPW.OOS_SUN_IND, IIPW.INLINE_7_DAY_IND_AVG, IIPW.MAP_AMT, IIPW.EXCH_RATE_PCT, IIPW.ON_HAND_QTY, IIPW.COMMITTED_QTY, IIPW.XFER_IN_TRANS_QTY, IIPW.ON_ORDER_QTY, IIPW.SUM_COST_AMT, IIPW.BUM_COST_AMT, IIPW.ON_ORDER_CD, IIPW.RETAIL_PRICE_AMT, IIPW.SKU_FACINGS_QTY, IIPW.SKU_CAPACITY_QTY, IIPW.PETPERKS_AMT, IIPW.PETPERKS_IND, IIPW.LOCAL_PRICE_AMT, IIPW.LOC_PETPERKS_PRICE_AMT, EINF.EM_DISP_LOC_NAME, IIPW.LOAD_DT, IIPW.OOS_7_DAY_AVG, IIPW.POG_7_DAY_AVG;

\echo
\echo *****  Creating view:  "SALES_TRANS_CLEARANCE_CRCY_VW"

CREATE or replace VIEW  SALES_TRANS_CLEARANCE_CRCY_VW
(
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     VOID_TYPE_CD,
     SALES_TYPE_ID,
     PRODUCT_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     ORIGINAL_UNIT_PRICE_AMT,
     UNIT_PRICE_AMT,
     CLEARANCE_METHOD_ID,
     CLEARANCE_TYPE_ID,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     EXCH_RATE_PCT
) AS
SELECT TCP.DAY_DT, TCP.LOCATION_ID, TCP.SALES_INSTANCE_ID, TCP.UPC_ID, TCP.TP_INVOICE_NBR, TCP.PARENT_UPC_ID, TCP.COMBO_TYPE_CD, TCP.POS_TXN_SEQ_NBR, TCP.VOID_TYPE_CD, TCP.SALES_TYPE_ID, TCP.PRODUCT_ID, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, TCP.ORIGINAL_UNIT_PRICE_AMT, TCP.UNIT_PRICE_AMT, TCP.CLEARANCE_METHOD_ID, TCP.CLEARANCE_TYPE_ID, TCP.CLEARANCE_AMT, TCP.CLEARANCE_QTY, TCP.CLEARANCE_RETURN_AMT, TCP.CLEARANCE_RETURN_QTY, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE TCP.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM (ADMIN.SALES_TRANS_CLEARANCE TCP CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SALES_TRANS_CLEARANCE_TYLY_VW"

CREATE or replace VIEW  SALES_TRANS_CLEARANCE_TYLY_VW
(
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     VOID_TYPE_CD,
     SALES_TYPE_ID,
     PRODUCT_ID,
     TY_LY_FLAG,
     COMP_FLAG,
     ORIGINAL_UNIT_PRICE_AMT,
     UNIT_PRICE_AMT,
     CLEARANCE_METHOD_ID,
     CLEARANCE_TYPE_ID,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     EXCH_RATE_PCT
) AS
SELECT DTL.DAY_DT, TCP.LOCATION_ID, TCP.SALES_INSTANCE_ID, TCP.UPC_ID, TCP.TP_INVOICE_NBR, TCP.PARENT_UPC_ID, TCP.COMBO_TYPE_CD, TCP.POS_TXN_SEQ_NBR, TCP.VOID_TYPE_CD, TCP.SALES_TYPE_ID, TCP.PRODUCT_ID, DTL.TY_LY_FLAG, CASE WHEN ((DTL.COMP_IND = 1) AND ((DTL.DAY_DT >= SPR.COMP_EFF_DT) AND (DTL.DAY_DT <= SPR.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, TCP.ORIGINAL_UNIT_PRICE_AMT, TCP.UNIT_PRICE_AMT, TCP.CLEARANCE_METHOD_ID, TCP.CLEARANCE_TYPE_ID, TCP.CLEARANCE_AMT, TCP.CLEARANCE_QTY, TCP.CLEARANCE_RETURN_AMT, TCP.CLEARANCE_RETURN_QTY, TCP.EXCH_RATE_PCT FROM ((ADMIN.SALES_TRANS_CLEARANCE TCP JOIN ADMIN.DAYS_TY_LY DTL ON ((TCP.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((TCP.LOCATION_ID = SPR.LOCATION_ID)));

\echo
\echo *****  Creating view:  "STORE_DIRECTORY_VW"

CREATE or replace VIEW  STORE_DIRECTORY_VW
(
     DIST_MGR_NAME,
     SITE_MANAGER_ID,
     SITE_MANAGER_NAME,
     STORE_NBR,
     STORE_NAME,
     OPEN_DT,
     SITE_ADDRESS,
     SITE_CITY,
     STATE_CD,
     POSTAL_CD,
     GEO_LATITUDE_NBR,
     GEO_LONGITUDE_NBR,
     DISTRICT_ID,
     DISTRICT_DESC,
     REGION_ID,
     REGION_DESC,
     SITE_EMAIL,
     STORE_PHONE,
     STORE_GROOM_PHONE,
     POSITION_SORT,
     PS_POSITION_DESC,
     EMPLOYEE_ID,
     EMPLOYEE,
     DEPT_SORT,
     DEPT_DESC,
     PS_PAY_GRADE_TYPE_CD,
     FULLPT_FLAG,
     EMPL_SENORITY_DT,
     EMPL_BIRTH_DT,
     YOS,
     NEW_HIRE_FLAG,
     BIRTH_MONTH,
     HIRE_MONTH,
     SCHEDULED,
     START_TIME,
     END_TIME,
     SENTIMENT_FLAG
) AS
SELECT S.DIST_MGR_NAME, S.SITE_MANAGER_ID, S.SITE_MANAGER_NAME, S.STORE_NBR, S.STORE_NAME, S.OPEN_DT, INITCAP(S.SITE_ADDRESS) AS SITE_ADDRESS, INITCAP(S.SITE_CITY) AS SITE_CITY, S.STATE_CD, S.POSTAL_CD, S.GEO_LATITUDE_NBR, S.GEO_LONGITUDE_NBR, S.DISTRICT_ID, S.DISTRICT_DESC, S.REGION_ID, S.REGION_DESC, S.SITE_EMAIL_ADDRESS AS SITE_EMAIL, ((((('('::"VARCHAR" || SUBSTR(S.SITE_MAIN_TELE_NO, 1, 3)) || ') '::"VARCHAR") || "SUBSTRING"(S.SITE_MAIN_TELE_NO, 4, 3)) || '-'::"VARCHAR") || SUBSTR(S.SITE_MAIN_TELE_NO, ((LENGTH(S.SITE_MAIN_TELE_NO) - 4) + 1))) AS STORE_PHONE, ((((('('::"VARCHAR" || SUBSTR(S.SITE_GROOM_TELE_NO, 1, 3)) || ') '::"VARCHAR") || "SUBSTRING"(S.SITE_GROOM_TELE_NO, 4, 3)) || '-'::"VARCHAR") || SUBSTR(S.SITE_GROOM_TELE_NO, ((LENGTH(S.SITE_GROOM_TELE_NO) - 4) + 1))) AS STORE_GROOM_PHONE, CASE WHEN (SD.POSITION_SORT NOTNULL) THEN INT4(SD.POSITION_SORT) WHEN (10 NOTNULL) THEN 10 ELSE NULL::INT4 END AS POSITION_SORT, E.PS_POSITION_DESC, E.EMPLOYEE_ID, BTRIM(((BTRIM(CASE WHEN (E.EMPL_FIRST_NAME NOTNULL) THEN E.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (E.EMPL_LAST_NAME NOTNULL) THEN E.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END))) AS EMPLOYEE, CASE WHEN (CASE WHEN (SD.POSITION_SORT NOTNULL) THEN INT4(SD.POSITION_SORT) WHEN (10 NOTNULL) THEN 10 ELSE NULL::INT4 END <> 10) THEN 1 ELSE CASE WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Management'::"VARCHAR") THEN 1 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Core Associate'::"VARCHAR") THEN 2 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Pet Care Associate'::"VARCHAR") THEN 3 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'PetsHotel Associate'::"VARCHAR") THEN 4 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Grooming Associate'::"VARCHAR") THEN 5 WHEN (BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) /=/ 'Pet Training Associate'::"VARCHAR") THEN 6 ELSE 7 END END AS DEPT_SORT, CASE WHEN (CASE WHEN (SD.POSITION_SORT NOTNULL) THEN INT4(SD.POSITION_SORT) WHEN (10 NOTNULL) THEN 10 ELSE NULL::INT4 END <> 10) THEN 'Store Leadership'::"VARCHAR" ELSE BTRIM(TRANSLATE(E.PS_DEPT_DESC, '0123456789'::"VARCHAR", ''::"VARCHAR")) END AS DEPT_DESC, E.PS_PAY_GRADE_TYPE_CD, E.FULLPT_FLAG, E.EMPL_SENORITY_DT, E.EMPL_BIRTH_DT, CASE WHEN (AGE(DATE_TRUNC('MONTH'::"VARCHAR", "TIMESTAMP"(DATE('now'::"VARCHAR"))), DATE_TRUNC('MONTH'::"VARCHAR", E.EMPL_SENORITY_DT)) = '00:00:00'::"INTERVAL") THEN 'New'::"VARCHAR" ELSE TRANSLATE("VARCHAR"(AGE(DATE_TRUNC('MONTH'::"VARCHAR", "TIMESTAMP"(DATE('now'::"VARCHAR"))), DATE_TRUNC('MONTH'::"VARCHAR", E.EMPL_SENORITY_DT))), 'rsoean'::"VARCHAR", ''::"VARCHAR") END AS YOS, CASE WHEN (("TIMESTAMP"(DATE('now'::"VARCHAR")) - E.EMPL_SENORITY_DT) < '90 days'::"INTERVAL") THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS NEW_HIRE_FLAG, CASE WHEN ((DATE_PART('MONTH'::"VARCHAR", DATE('now'::"VARCHAR")) = DATE_PART('MONTH'::"VARCHAR", E.EMPL_BIRTH_DT)) = 't'::BOOL) THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS BIRTH_MONTH, CASE WHEN ((DATE_PART('MONTH'::"VARCHAR", DATE('now'::"VARCHAR")) = DATE_PART('MONTH'::"VARCHAR", E.EMPL_SENORITY_DT)) = 't'::BOOL) THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS HIRE_MONTH, CASE WHEN (ES.START_TIME ISNULL) THEN 'N'::"VARCHAR" ELSE 'Y'::"VARCHAR" END AS SCHEDULED, ES.START_TIME, ES.END_TIME, CASE WHEN (SC.SENTIMENT_FLAG NOTNULL) THEN SC.SENTIMENT_FLAG WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS SENTIMENT_FLAG FROM ((((ADMIN.EMPLOYEE_PROFILE_RPT E JOIN ADMIN.SITE_PROFILE_RPT S ON (((E.LOCATION_ID = S.LOCATION_ID) AND (S.LOCATION_TYPE_ID = 8)))) LEFT JOIN ADMIN.STORE_DIRECTORY_POSITION_SORT SD ON ((E.JOB_CODE = SD.JOB_CODE))) LEFT JOIN (SELECT W.EMPLOYEE_ID, W.LOCATION_ID, MIN(W.STRT_DTM) AS START_TIME, MAX(W.END_DTM) AS END_TIME FROM ADMIN.WFA_TSCHD W WHERE (W.DAY_DT = "TIMESTAMP"(DATE('now'::"VARCHAR"))) GROUP BY W.EMPLOYEE_ID, W.LOCATION_ID) ES ON ((("NUMERIC"(E.EMPLOYEE_ID) = ES.EMPLOYEE_ID) AND (S.LOCATION_ID = ES.LOCATION_ID)))) LEFT JOIN (SELECT STORE_DIRECTORY_SENTIMENT_VW.EMPLOYEE_ID, MAX(1) AS SENTIMENT_FLAG FROM ADMIN.STORE_DIRECTORY_SENTIMENT_VW GROUP BY STORE_DIRECTORY_SENTIMENT_VW.EMPLOYEE_ID) SC ON ((E.EMPLOYEE_ID = SC.EMPLOYEE_ID))) WHERE (E.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1)));

\echo
\echo *****  Creating view:  "LOST_SALES_WEEK_VW"

CREATE or replace VIEW  LOST_SALES_WEEK_VW
(
     WEEK_DT,
     "PRODUCT_ID",
     "LOCATION_ID",
     INLINE_CNT,
     POG_LISTED_IND,
     STORE_OPEN_IND,
     DEMAND_FCST_FOR_SEASONAL_FCST_PD_WK_QTY,
     OOS_7_DAY_AVG,
     NET_SALES_AMT,
     NET_SALES_QTY,
     AUR_WEEK_AMT,
     LOST_SALES_AMT,
     SKU_STATUS_ID
) AS
SELECT (DATE(DDW.WEEK_DT) + 7) AS WEEK_DT, DDW.PRODUCT_ID, DDW.LOCATION_ID, IIPW.INLINE_CNT, IIPW.POG_LISTED_IND, IIPW.STORE_OPEN_IND, DDW.DEMAND_FCST_FOR_SEASONAL_FCST_PD_QTY AS DEMAND_FCST_FOR_SEASONAL_FCST_PD_WK_QTY, IIPW.OOS_7_DAY_AVG, AUR.NET_SALES_AMT, AUR.NET_SALES_QTY, CASE WHEN (AUR.NET_SALES_QTY = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ROUND((AUR.NET_SALES_AMT / AUR.NET_SALES_QTY), 2) END AS AUR_WEEK_AMT, ((DDW.DEMAND_FCST_FOR_SEASONAL_FCST_PD_QTY * IIPW.OOS_7_DAY_AVG) * CASE WHEN (AUR.NET_SALES_QTY = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ROUND((AUR.NET_SALES_AMT / AUR.NET_SALES_QTY), 2) END) AS LOST_SALES_AMT, IIPW.SKU_STATUS_ID FROM ((ADMIN.DP_DEMAND_WEEK DDW LEFT JOIN (SELECT SDSR.WEEK_DT, SDSR.PRODUCT_ID, ROUND(SUM((SDSR.NET_SALES_AMT * SDSR.EXCH_RATE_PCT)), 2) AS NET_SALES_AMT, SUM(SDSR.NET_SALES_QTY) AS NET_SALES_QTY FROM ADMIN.SALES_DAY_SKU_RPT SDSR GROUP BY SDSR.WEEK_DT, SDSR.PRODUCT_ID) AUR ON ((("TIMESTAMP"((DATE(DDW.WEEK_DT) + 7)) = AUR.WEEK_DT) AND (DDW.PRODUCT_ID = AUR.PRODUCT_ID)))) JOIN ADMIN.INV_INSTOCK_PRICE_WK IIPW ON (((("TIMESTAMP"((DATE(DDW.WEEK_DT) + 7)) = IIPW.WEEK_DT) AND (DDW.PRODUCT_ID = IIPW.PRODUCT_ID)) AND (DDW.LOCATION_ID = IIPW.LOCATION_ID)))) WHERE (DDW.WEEK_DT > "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 730)));

\echo
\echo *****  Creating view:  "SMS_TP_HOTEL_W_GROOM_SVC_VW"

CREATE or replace VIEW  SMS_TP_HOTEL_W_GROOM_SVC_VW
(
     APPT_HISTORY_TSTMP,
     CC_AGENT_LOGIN_ID,
     CC_AGENT_NAME,
     LOCATION_ID,
     TP_INVOICE_NBR,
     SMS_APPOINTMENT_ID,
     SMS_CUST_LAST_NAME,
     SMS_PET_NAME,
     PRODUCT_ID,
     APPT_SERVICE_ITEM_QTY,
     FINAL_PRICE_AMT
) AS
SELECT H.APPT_HISTORY_TSTMP, H.CC_AGENT_LOGIN_ID, H.CC_AGENT_NAME, TS.LOCATION_ID, TS.SMS_APPOINTMENT_ID AS TP_INVOICE_NBR, SS.SMS_APPOINTMENT_ID, SS.SMS_CUST_LAST_NAME, SS.SMS_PET_NAME, SS.PRODUCT_ID, SS.APPT_SERVICE_ITEM_QTY, SS.FINAL_PRICE_AMT FROM ((((ADMIN.SMS_APPOINTMENT_SERVICE_RPT_VW TS JOIN ADMIN.SKU_PROFILE SP ON ((TS.PRODUCT_ID = SP.PRODUCT_ID))) JOIN ADMIN.SMS_APPT_HISTORY_VW H ON (((TS.LOCATION_ID = H.LOCATION_ID) AND (TS.SMS_APPOINTMENT_ID = H.SMS_APPOINTMENT_ID)))) JOIN ADMIN.SITE_PROFILE L ON ((TS.LOCATION_ID = L.LOCATION_ID))) LEFT JOIN (SELECT S.LOCATION_ID, S.SMS_APPOINTMENT_ID, S.SMS_APPT_STATUS_ID, S.SMS_APPOINTMENT_DT, S.APPT_SVC_CREATE_TSTMP, S.SMS_CUST_LAST_NAME, S.SMS_PET_NAME, S.PRODUCT_ID, S.APPT_SERVICE_ITEM_QTY, (S.FINAL_UNIT_PRICE_AMT * "NUMERIC"(S.APPT_SERVICE_ITEM_QTY)) AS FINAL_PRICE_AMT FROM ADMIN.SMS_APPOINTMENT_SERVICE_RPT_VW S WHERE ((S.DATA_SOURCE_CD = 'SMS'::"VARCHAR") AND ((DATE(S.APPT_SVC_CREATE_TSTMP) >= (DATE('now(0)'::"VARCHAR") - 30)) AND (DATE(S.APPT_SVC_CREATE_TSTMP) <= DATE('now(0)'::"VARCHAR"))))) SS ON ((((TS.LOCATION_ID = SS.LOCATION_ID) AND ((TRANSLATE(TRANSLATE(UPPER(TS.SMS_CUST_LAST_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR") || TRANSLATE(TRANSLATE(UPPER(TS.SMS_PET_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR")) = (TRANSLATE(TRANSLATE(UPPER(SS.SMS_CUST_LAST_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR") || TRANSLATE(TRANSLATE(UPPER(SS.SMS_PET_NAME), '\"|!,-&()[]{}./` '::"VARCHAR", ''::"VARCHAR"), ''''::"VARCHAR", ''::"VARCHAR")))) AND (DATE(H.APPT_HISTORY_TSTMP) = DATE(SS.APPT_SVC_CREATE_TSTMP))))) WHERE (((((TS.DATA_SOURCE_CD = 'TP'::"VARCHAR") AND ((DATE(H.APPT_HISTORY_TSTMP) >= (DATE('now(0)'::"VARCHAR") - 30)) AND (DATE(H.APPT_HISTORY_TSTMP) <= DATE('now(0)'::"VARCHAR")))) AND (H.SMS_HISTORY_ACTION_ID = 3)) AND (H.ACTION_ORIGIN_IND = 1)) AND (SP.SKU_NBR = 5246380));

\echo
\echo *****  Creating view:  "SITE_TRAFFIC_TYLY_COMP_VW"

CREATE or replace VIEW  SITE_TRAFFIC_TYLY_COMP_VW
(
     DAY_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     PERIOD_START_TSTMP,
     PERIOD_END_TSTMP,
     TY_LY_FLAG,
     COMP_FLAG,
     TRAFFIC_COMP_FLAG,
     ACCURACY_FLAG,
     ORBIT_ID,
     CUST_ENTRY_CNT,
     CUST_EXIT_CNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT DATE(DTL.DAY_DT) AS DAY_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, ST.LOCATION_ID, ST.PERIOD_START_TSTMP, ST.PERIOD_END_TSTMP, DTL.TY_LY_FLAG, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, CASE WHEN ((DTL.DAY_DT >= TRFFC_START.TRAFFIC_COMP_START_DT) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS TRAFFIC_COMP_FLAG, ST.ACCURACY_FLAG, ST.ORBIT_ID, ST.CUST_ENTRY_CNT, ST.CUST_EXIT_CNT, ST.UPDATE_TSTMP, ST.LOAD_TSTMP FROM ((((ADMIN.SITE_TRAFFIC ST JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(ST.DAY_DT) = DTL.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((ST.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN (SELECT PRE.LOCATION_ID, DTL.DAY_DT AS TRAFFIC_COMP_START_DT FROM (((SELECT ST.LOCATION_ID, MIN(CASE WHEN (ST.CUST_EXIT_CNT <> 0) THEN ST.DAY_DT ELSE NULL::DATE END) AS START_DT FROM ADMIN.SITE_TRAFFIC ST GROUP BY ST.LOCATION_ID) PRE JOIN ADMIN.DAYS D ON (("TIMESTAMP"(PRE.START_DT) = D.DAY_DT))) JOIN ADMIN.DAYS_TY_LY DTL ON ((("TIMESTAMP"(CASE WHEN (D.DAY_OF_WK_NBR = 1) THEN PRE.START_DT ELSE ((PRE.START_DT - INT4(D.DAY_OF_WK_NBR)) + 8) END) = DTL.TRANS_DAY_DT) AND (DTL.TY_LY_FLAG = 'LY'::"VARCHAR"))))) TRFFC_START ON ((ST.LOCATION_ID = TRFFC_START.LOCATION_ID)));

\echo
\echo *****  Creating view:  "INV_INSTOCK_PRICE_WK_SKU_AGE"

CREATE or replace VIEW  INV_INSTOCK_PRICE_WK_SKU_AGE
(
     WEEK_DT,
     PRODUCT_ID,
     AGE_OF_SKU
) AS
SELECT IIPW.WEEK_DT, IIPW.PRODUCT_ID, (DATE_PART('DAY'::"VARCHAR", (IIPW.WEEK_DT - SP.FIRST_SALE_DT)) + 1) AS AGE_OF_SKU FROM (ADMIN.INV_INSTOCK_PRICE_WK IIPW LEFT JOIN ADMIN.SKU_PROFILE SP ON ((IIPW.PRODUCT_ID = SP.PRODUCT_ID))) GROUP BY IIPW.WEEK_DT, IIPW.PRODUCT_ID, DATE_PART('DAY'::"VARCHAR", (IIPW.WEEK_DT - SP.FIRST_SALE_DT));

\echo
\echo *****  Creating view:  "SALES_WK_SKU_AGE_VW"

CREATE or replace VIEW  SALES_WK_SKU_AGE_VW
(
     WEEK_DT,
     PRODUCT_ID,
     AGE_OF_SKU,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     SALES_TY,
     SALES_LY,
     COMP,
     COMP_BASE,
     MARGIN,
     SALES,
     SALES_UNITS
) AS
SELECT LV_A11.WEEK_DT, LV_A11.PRODUCT_ID, LV_A13.AGE_OF_SKU, LV_A11.CURRENCY_TYPE_ID, LV_A11.CURRENCY_TYPE_DESC, SUM(CASE WHEN (LV_A11.TY_LY_FLAG = 'TY'::"VARCHAR") THEN (LV_A11.NET_SALES_AMT * LV_A11.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS SALES_TY, SUM(CASE WHEN (LV_A11.TY_LY_FLAG = 'LY'::"VARCHAR") THEN (LV_A11.NET_SALES_AMT * LV_A11.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS SALES_LY, SUM(CASE WHEN ((LV_A11.TY_LY_FLAG = 'TY'::"VARCHAR") AND (LV_A11.COMP_FLAG = 1)) THEN (LV_A11.NET_SALES_AMT * LV_A11.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS COMP, SUM(CASE WHEN ((LV_A11.TY_LY_FLAG = 'LY'::"VARCHAR") AND (LV_A11.COMP_FLAG = 1)) THEN (LV_A11.NET_SALES_AMT * LV_A11.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS COMP_BASE, SUM(CASE WHEN (LV_A11.TY_LY_FLAG = 'TY'::"VARCHAR") THEN (LV_A11.NET_MARGIN_AMT * LV_A11.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS MARGIN, SUM(CASE WHEN (LV_A11.TY_LY_FLAG = 'TY'::"VARCHAR") THEN (LV_A11.NET_SALES_AMT * LV_A11.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS SALES, SUM(CASE WHEN (LV_A11.TY_LY_FLAG = 'TY'::"VARCHAR") THEN LV_A11.NET_SALES_QTY ELSE '0'::NUMERIC END) AS SALES_UNITS FROM (ADMIN.SALES_DAY_SKU_RPT_CRCY_VW LV_A11 JOIN ADMIN.INV_INSTOCK_PRICE_WK_SKU_AGE LV_A13 ON (((LV_A11.PRODUCT_ID = LV_A13.PRODUCT_ID) AND (LV_A11.WEEK_DT = LV_A13.WEEK_DT)))) GROUP BY LV_A11.WEEK_DT, LV_A11.PRODUCT_ID, LV_A13.AGE_OF_SKU, LV_A11.CURRENCY_TYPE_ID, LV_A11.CURRENCY_TYPE_DESC;

\echo
\echo *****  Creating view:  "INV_PHYSICAL_VW"

CREATE or replace VIEW  INV_PHYSICAL_VW
(
     LOCATION_ID,
     PRODUCT_ID,
     POSTING_DT,
     START_DT,
     END_DT,
     PHYS_INV_TYPE_ID,
     PLANNED_DT,
     SITE_NBR,
     SKU_NBR,
     BOOK_QTY,
     PHYSICAL_QTY,
     OVERSTOCK_QTY,
     DIFF_AMT,
     DIFF_QTY,
     PHYS_INV_COUNT_VALUE,
     PHYS_INV_DIFF_ADJ_TYPE_ID,
     EXCH_RATE_PCT,
     RETURN_QTY,
     RETURN_TXN_CNT
) AS
WITH LOC_POSTING AS (SELECT A.LOCATION_ID, A.POSTING_DT, A.PHYS_INV_TYPE_ID, (LAG(A.POSTING_DT, 1, (A.POSTING_DT - 365)) OVER (PARTITION BY A.LOCATION_ID, A.PHYS_INV_TYPE_ID  ORDER BY A.POSTING_DT ) + 1) AS START_DT, A.POSTING_DT AS END_DT FROM (SELECT PH.POSTING_DT, PH.LOCATION_ID, PH.PHYS_INV_TYPE_ID FROM ADMIN.INV_PHYSICAL PH GROUP BY PH.POSTING_DT, PH.LOCATION_ID, PH.PHYS_INV_TYPE_ID) A) SELECT PRE.LOCATION_ID, PRE.PRODUCT_ID, PRE.POSTING_DT, P.START_DT, P.END_DT, PRE.PHYS_INV_TYPE_ID, MAX(PRE.PLANNED_DT) AS PLANNED_DT, MAX(PRE.SITE_NBR) AS SITE_NBR, MAX(PRE.SKU_NBR) AS SKU_NBR, MAX(PRE.BOOK_QTY) AS BOOK_QTY, MAX(PRE.PHYSICAL_QTY) AS PHYSICAL_QTY, MAX(PRE.OVERSTOCK_QTY) AS OVERSTOCK_QTY, MAX(PRE.DIFF_AMT) AS DIFF_AMT, MAX(PRE.DIFF_QTY) AS DIFF_QTY, MAX(PRE.PHYS_INV_COUNT_VALUE) AS PHYS_INV_COUNT_VALUE, MAX(PRE.PHYS_INV_DIFF_ADJ_TYPE_ID) AS PHYS_INV_DIFF_ADJ_TYPE_ID, MAX(PRE.EXCH_RATE_PCT) AS EXCH_RATE_PCT, SUM(CASE WHEN (R.RETURN_QTY NOTNULL) THEN INT4(R.RETURN_QTY) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END) AS RETURN_QTY, COUNT(DISTINCT R.SALES_INSTANCE_ID) AS RETURN_TXN_CNT FROM ((LOC_POSTING P JOIN ADMIN.INV_PHYSICAL PRE ON ((((P.LOCATION_ID = PRE.LOCATION_ID) AND (P.POSTING_DT = PRE.POSTING_DT)) AND (P.PHYS_INV_TYPE_ID = PRE.PHYS_INV_TYPE_ID)))) LEFT JOIN (SELECT STR.SALES_INSTANCE_ID, STR.LOCATION_ID, STR.PRODUCT_ID, STR.DAY_DT, STT.CASHIER_NBR, STR.RETURN_QTY FROM (ADMIN.SALES_TRANS_RETURN STR JOIN ADMIN.SALES_TRANS_TXN STT ON ((STR.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID))) WHERE (((STR.VOID_TYPE_CD = 'N'::BPCHAR) AND (STT.TXN_WAS_POST_VOIDED_FLAG = 0)) AND (STT.SALES_TYPE_ID <> 10))) R ON ((((PRE.LOCATION_ID = R.LOCATION_ID) AND (PRE.PRODUCT_ID = R.PRODUCT_ID)) AND ((R.DAY_DT >= "TIMESTAMP"(P.START_DT)) AND (R.DAY_DT <= "TIMESTAMP"(P.END_DT)))))) WHERE (R.RETURN_QTY <> 0) GROUP BY R.CASHIER_NBR, PRE.LOCATION_ID, PRE.PRODUCT_ID, PRE.POSTING_DT, P.START_DT, P.END_DT, PRE.PHYS_INV_TYPE_ID;

\echo
\echo *****  Creating view:  "WFA_TIME_SHEET_PUNCH_TYLY_VW"

CREATE or replace VIEW  WFA_TIME_SHEET_PUNCH_TYLY_VW
(
     DAY_DT,
     TIME_SHEET_ITEM_ID,
     STRT_DTM,
     END_DTM,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     TY_LY_FLAG,
     COMP_FLAG,
     WHOLE_HOUR,
     TIME_ID,
     LABOR_MINUTES,
     LOCATION_ID,
     EMPLOYEE_ID,
     WFA_BUSN_AREA_ID,
     WFA_BUSN_AREA_DESC,
     WFA_DEPT_ID,
     WFA_DEPT_DESC,
     WFA_TASK_ID,
     WFA_TASK_DESC,
     WEEK_DT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, WT.TIME_SHEET_ITEM_ID, WT.STRT_DTM, WT.END_DTM, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, DTL.TY_LY_FLAG, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, TP.WHOLE_HOUR, TP.TIME_ID, 1 AS LABOR_MINUTES, WT.LOCATION_ID, WT.EMPLOYEE_ID, WT.WFA_BUSN_AREA_ID, WT.WFA_BUSN_AREA_DESC, WT.WFA_DEPT_ID, WT.WFA_DEPT_DESC, WT.WFA_TASK_ID, WT.WFA_TASK_DESC, WT.WEEK_DT, WT.UPDATE_DT, WT.LOAD_DT FROM ((((ADMIN.WFA_TIME_SHEET_PUNCH WT JOIN (SELECT TO_CHAR(TIME_PROFILE.TIME_ID, 'HH24'::"VARCHAR") AS WHOLE_HOUR, INT2(("VARCHAR"(TIME_PROFILE.WHOLE_HOUR) || TO_CHAR(TIME_PROFILE.TIME_ID, 'MI'::"VARCHAR"))) AS TIME_ID FROM ADMIN.TIME_PROFILE WHERE (TO_CHAR(TIME_PROFILE.TIME_ID, 'SS'::"VARCHAR") = '00'::"VARCHAR")) TP ON (((TP.TIME_ID >= INT2((TO_CHAR(WT.STRT_DTM, 'HH24'::"VARCHAR") || TO_CHAR(WT.STRT_DTM, 'MI'::"VARCHAR")))) AND (TP.TIME_ID < INT2((TO_CHAR(WT.END_DTM, 'HH24'::"VARCHAR") || TO_CHAR(WT.END_DTM, 'MI'::"VARCHAR"))))))) JOIN ADMIN.DAYS_TY_LY DTL ON ((WT.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((WT.LOCATION_ID = SP.LOCATION_ID)));

\echo
\echo *****  Creating view:  "TXN_UPC_SCAN_PRICE_VW"

CREATE or replace VIEW  TXN_UPC_SCAN_PRICE_VW
(
     SALES_INSTANCE_ID,
     POS_TXN_SEQ_NBR,
     SALES_COMPONENT_ID,
     UPC_SCAN_PRICE_AMT
) AS
((SELECT DISTINCT STU.SALES_INSTANCE_ID, STU.POS_TXN_SEQ_NBR, 1 AS SALES_COMPONENT_ID, (CASE WHEN ((STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY)) = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ((STU.SALES_AMT - STU.RETURN_AMT) / (STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY))) END)::NUMERIC(19,10) AS UPC_SCAN_PRICE_AMT FROM ADMIN.SALES_TRANS_UPC STU WHERE (STU.DAY_DT >= "TIMESTAMP"((SELECT (DATE(DAYS.WEEK_DT) - 6) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 8))))))) UNION ALL (SELECT DISTINCT STD.SALES_INSTANCE_ID, STD.POS_TXN_SEQ_NBR, 2 AS SALES_COMPONENT_ID, (CASE WHEN (CASE WHEN ((STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY)) NOTNULL) THEN (STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY)) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ((STU.SALES_AMT - STU.RETURN_AMT) / (STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY))) END)::NUMERIC(19,10) AS UPC_SCAN_PRICE_AMT FROM (ADMIN.SALES_TRANS_DISCOUNT STD LEFT JOIN ADMIN.SALES_TRANS_UPC STU ON (((STD.SALES_INSTANCE_ID = STU.SALES_INSTANCE_ID) AND (CASE WHEN (STD.POS_TXN_SEQ_NBR > 999) THEN INT4(SUBSTR("VARCHAR"(STD.POS_TXN_SEQ_NBR), 2, 3)) ELSE INT4(STD.POS_TXN_SEQ_NBR) END = STU.POS_TXN_SEQ_NBR)))) WHERE (STD.DAY_DT >= "TIMESTAMP"((SELECT (DATE(DAYS.WEEK_DT) - 6) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 8)))))))) UNION ALL (SELECT DISTINCT STC.SALES_INSTANCE_ID, STC.POS_TXN_SEQ_NBR, 3 AS SALES_COMPONENT_ID, ('0'::NUMERIC)::NUMERIC(19,10) AS UPC_SCAN_PRICE_AMT FROM ADMIN.SALES_TRANS_COUPON STC WHERE (STC.DAY_DT >= "TIMESTAMP"((SELECT (DATE(DAYS.WEEK_DT) - 6) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 8)))))));

\echo
\echo *****  Creating view:  "MA_MOVEMENT_DAY_TYLY_CRCY_VW"

CREATE or replace VIEW  MA_MOVEMENT_DAY_TYLY_CRCY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     COMP_FLAG,
     PRODUCT_ID,
     LOCATION_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     MA_EVENT_ID,
     STO_TYPE_ID,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     SALES_ADJ_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DATE(T.DAY_DT) AS DAY_DT, T.TY_LY_FLAG, CASE WHEN ((T.COMP_IND = 1) AND ((T.DAY_DT >= S.COMP_EFF_DT) AND (T.DAY_DT <= S.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, M.PRODUCT_ID, M.LOCATION_ID, M.MOVEMENT_ID, M.PO_NBR, M.PO_LINE_NBR, M.MA_EVENT_ID, M.STO_TYPE_ID, M.MA_TRANS_AMT, M.MA_TRANS_COST, M.MA_TRANS_QTY, M.SALES_ADJ_AMT, C.CURRENCY_TYPE_ID, C.CURRENCY_TYPE_DESC, CASE WHEN (C.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE M.EXCH_RATE_PCT END AS EXCH_RATE_PCT, M.UPDATE_DT, M.LOAD_DT FROM ((((ADMIN.MA_MOVEMENT_DAY M JOIN ADMIN.DAYS_TY_LY T ON ((M.DAY_DT = T.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((T.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT S ON ((M.LOCATION_ID = S.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP C);

\echo
\echo *****  Creating view:  "MA_MOVEMENT_DAY_TYLY_VW"

CREATE or replace VIEW  MA_MOVEMENT_DAY_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     COMP_FLAG,
     PRODUCT_ID,
     LOCATION_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     MA_EVENT_ID,
     STO_TYPE_ID,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     SALES_ADJ_AMT,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DATE(T.DAY_DT) AS DAY_DT, T.TY_LY_FLAG, CASE WHEN ((T.COMP_IND = 1) AND ((T.DAY_DT >= S.COMP_EFF_DT) AND (T.DAY_DT <= S.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, M.PRODUCT_ID, M.LOCATION_ID, M.MOVEMENT_ID, M.PO_NBR, M.PO_LINE_NBR, M.MA_EVENT_ID, M.STO_TYPE_ID, M.MA_TRANS_AMT, M.MA_TRANS_COST, M.MA_TRANS_QTY, M.SALES_ADJ_AMT, M.EXCH_RATE_PCT, M.UPDATE_DT, M.LOAD_DT FROM (((ADMIN.MA_MOVEMENT_DAY M JOIN ADMIN.DAYS_TY_LY T ON ((M.DAY_DT = T.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((T.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT S ON ((M.LOCATION_ID = S.LOCATION_ID)));

\echo
\echo *****  Creating view:  "MA_SALES_TRANS_UPC_TYLY_VW"

CREATE or replace VIEW  MA_SALES_TRANS_UPC_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     COMP_FLAG,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     MA_EVENT_ID,
     PRODUCT_ID,
     SALES_CUST_CAPTURE_CD,
     MA_SALES_AMT,
     MA_SALES_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DATE(T.DAY_DT) AS DAY_DT, T.TY_LY_FLAG, CASE WHEN ((T.COMP_IND = 1) AND ((T.DAY_DT >= S.COMP_EFF_DT) AND (T.DAY_DT <= S.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, M.LOCATION_ID, M.SALES_INSTANCE_ID, M.UPC_ID, M.TP_INVOICE_NBR, M.PARENT_UPC_ID, M.COMBO_TYPE_CD, M.POS_TXN_SEQ_NBR, M.MA_EVENT_ID, M.PRODUCT_ID, M.SALES_CUST_CAPTURE_CD, M.MA_SALES_AMT, M.MA_SALES_QTY, M.EXCH_RATE_PCT, M.UPDATE_DT, M.LOAD_DT FROM (((ADMIN.MA_SALES_TRANS_UPC M JOIN ADMIN.DAYS_TY_LY T ON ((M.DAY_DT = T.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((T.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT S ON ((M.LOCATION_ID = S.LOCATION_ID)));

\echo
\echo *****  Creating view:  "SALES_TRANS_COMPONENT_TYLY_CRCY_VW"

CREATE or replace VIEW  SALES_TRANS_COMPONENT_TYLY_CRCY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     CPN_POS_TXN_SEQ_NBR,
     OFFER_ID,
     MA_EVENT_ID,
     DISCOUNT_TYPE_ID,
     COUPON_TYPE_ID,
     COUPON_ACCESS_CD,
     PRODUCT_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     PAYMENT_TYPE_ID,
     TRANS_ACCT_NBR,
     AUTH_APPROVAL_CODE,
     SALES_COMPONENT_ID,
     SALES_COMPONENT_TYPE_ID,
     ISSUANCE_ID,
     TAX_TYPE_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     TRANS_TSTMP,
     REGISTER_NBR,
     TRANSACTION_NBR,
     SALES_TYPE_ID,
     SALES_CUST_CAPTURE_CD,
     CUST_TRANS_ID,
     CASHIER_NBR,
     PETPERK_OVERRIDE_NBR,
     PETPERK_EMAIL_IND,
     KEYED_FLAG,
     NON_TAX_FLAG,
     EMPLOYEE_ID,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     TENDER_UID,
     TAX_EXEMPT_ID,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     CDC_EMAIL_ID,
     CDC_FIRST_NAME_ID,
     CDC_LAST_NAME_ID,
     CDC_PHONE_NBR_ID,
     DIGITAL_RECEIPT_ANSWER_CD,
     OFFLINE_CUST_LKP_IND,
     REV_SALES_TYPE_CTRL_ID,
     REV_SALES_TYPE_ID,
     EP_SALES_TYPE_ID,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     SALES_TRANS_AMT,
     RETURN_TRANS_AMT,
     ISSUANCE_QTY,
     OFFER_QTY,
     TAX_PCT,
     TAX_AMT,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, STC.LOCATION_ID, STC.SALES_INSTANCE_ID, STC.UPC_ID, STC.TP_INVOICE_NBR, STC.PARENT_UPC_ID, STC.COMBO_TYPE_CD, STC.POS_TXN_SEQ_NBR, STC.CPN_POS_TXN_SEQ_NBR, STC.OFFER_ID, STC.MA_EVENT_ID, STC.DISCOUNT_TYPE_ID, STC.COUPON_TYPE_ID, STC.COUPON_ACCESS_CD, STC.PRODUCT_ID, STC.MOVEMENT_ID, STC.PO_NBR, STC.PO_LINE_NBR, STC.PAYMENT_TYPE_ID, STC.TRANS_ACCT_NBR, STC.AUTH_APPROVAL_CODE, STC.SALES_COMPONENT_ID, STC.SALES_COMPONENT_TYPE_ID, STC.ISSUANCE_ID, STC.TAX_TYPE_ID, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, STC.VOID_TYPE_CD, STC.TXN_WAS_POST_VOIDED_FLAG, STC.TRANS_TSTMP, STC.REGISTER_NBR, STC.TRANSACTION_NBR, STC.SALES_TYPE_ID, STC.SALES_CUST_CAPTURE_CD, STC.CUST_TRANS_ID, STC.CASHIER_NBR, STC.PETPERK_OVERRIDE_NBR, STC.PETPERK_EMAIL_IND, STC.KEYED_FLAG, STC.NON_TAX_FLAG, STC.EMPLOYEE_ID, STC.CUST_FIRST_NAME, STC.CUST_LAST_NAME, STC.TENDER_UID, STC.TAX_EXEMPT_ID, STC.ORDER_NBR, STC.ORDER_CHANNEL, STC.ORDER_ASSIST_LOCATION_ID, STC.ORDER_FULFILLMENT_CHANNEL, STC.ORDER_CREATION_CHANNEL, STC.CDC_EMAIL_ID, STC.CDC_FIRST_NAME_ID, STC.CDC_LAST_NAME_ID, STC.CDC_PHONE_NBR_ID, STC.DIGITAL_RECEIPT_ANSWER_CD, STC.OFFLINE_CUST_LKP_IND, STC.REV_SALES_TYPE_CTRL_ID, STC.REV_SALES_TYPE_ID, STC.EP_SALES_TYPE_ID, STC.NET_SALES_AMT, STC.NET_SALES_QTY, STC.NET_MARGIN_AMT, STC.SALES_AMT, STC.SALES_COST, STC.SALES_QTY, STC.RETURN_AMT, STC.RETURN_COST, STC.RETURN_QTY, STC.CLEARANCE_AMT, STC.CLEARANCE_QTY, STC.CLEARANCE_RETURN_AMT, STC.CLEARANCE_RETURN_QTY, STC.DISCOUNT_AMT, STC.DISCOUNT_QTY, STC.DISCOUNT_RETURN_AMT, STC.DISCOUNT_RETURN_QTY, STC.POS_COUPON_AMT, STC.POS_COUPON_QTY, STC.POS_COUPON_ALLOC_AMT, STC.POS_COUPON_ALLOC_QTY, STC.SPECIAL_SALES_AMT, STC.SPECIAL_SALES_QTY, STC.SPECIAL_RETURN_AMT, STC.SPECIAL_RETURN_QTY, STC.SPECIAL_SRVC_AMT, STC.SPECIAL_SRVC_QTY, STC.MA_SALES_AMT, STC.MA_SALES_QTY, STC.MA_TRANS_AMT, STC.MA_TRANS_COST, STC.MA_TRANS_QTY, STC.SALES_TRANS_AMT, STC.RETURN_TRANS_AMT, STC.ISSUANCE_QTY, STC.OFFER_QTY, STC.TAX_PCT, STC.TAX_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE STC.EXCH_RATE_PCT END AS EXCH_RATE_PCT, STC.UPDATE_DT, STC.LOAD_DT FROM ((ADMIN.SALES_TRANS_COMPONENT STC JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(STC.DAY_DT) = DTL.TRANS_DAY_DT))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SALES_TRANS_COMPONENT_TYLY_VW"

CREATE or replace VIEW  SALES_TRANS_COMPONENT_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     CPN_POS_TXN_SEQ_NBR,
     OFFER_ID,
     MA_EVENT_ID,
     DISCOUNT_TYPE_ID,
     COUPON_TYPE_ID,
     COUPON_ACCESS_CD,
     PRODUCT_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     PAYMENT_TYPE_ID,
     TRANS_ACCT_NBR,
     AUTH_APPROVAL_CODE,
     SALES_COMPONENT_ID,
     SALES_COMPONENT_TYPE_ID,
     ISSUANCE_ID,
     TAX_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     TRANS_TSTMP,
     REGISTER_NBR,
     TRANSACTION_NBR,
     SALES_TYPE_ID,
     SALES_CUST_CAPTURE_CD,
     CUST_TRANS_ID,
     CASHIER_NBR,
     PETPERK_OVERRIDE_NBR,
     PETPERK_EMAIL_IND,
     KEYED_FLAG,
     NON_TAX_FLAG,
     EMPLOYEE_ID,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     TENDER_UID,
     TAX_EXEMPT_ID,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     CDC_EMAIL_ID,
     CDC_FIRST_NAME_ID,
     CDC_LAST_NAME_ID,
     CDC_PHONE_NBR_ID,
     DIGITAL_RECEIPT_ANSWER_CD,
     OFFLINE_CUST_LKP_IND,
     REV_SALES_TYPE_CTRL_ID,
     REV_SALES_TYPE_ID,
     EP_SALES_TYPE_ID,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     SALES_TRANS_AMT,
     RETURN_TRANS_AMT,
     ISSUANCE_QTY,
     OFFER_QTY,
     TAX_PCT,
     TAX_AMT,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, STC.LOCATION_ID, STC.SALES_INSTANCE_ID, STC.UPC_ID, STC.TP_INVOICE_NBR, STC.PARENT_UPC_ID, STC.COMBO_TYPE_CD, STC.POS_TXN_SEQ_NBR, STC.CPN_POS_TXN_SEQ_NBR, STC.OFFER_ID, STC.MA_EVENT_ID, STC.DISCOUNT_TYPE_ID, STC.COUPON_TYPE_ID, STC.COUPON_ACCESS_CD, STC.PRODUCT_ID, STC.MOVEMENT_ID, STC.PO_NBR, STC.PO_LINE_NBR, STC.PAYMENT_TYPE_ID, STC.TRANS_ACCT_NBR, STC.AUTH_APPROVAL_CODE, STC.SALES_COMPONENT_ID, STC.SALES_COMPONENT_TYPE_ID, STC.ISSUANCE_ID, STC.TAX_TYPE_ID, STC.VOID_TYPE_CD, STC.TXN_WAS_POST_VOIDED_FLAG, STC.TRANS_TSTMP, STC.REGISTER_NBR, STC.TRANSACTION_NBR, STC.SALES_TYPE_ID, STC.SALES_CUST_CAPTURE_CD, STC.CUST_TRANS_ID, STC.CASHIER_NBR, STC.PETPERK_OVERRIDE_NBR, STC.PETPERK_EMAIL_IND, STC.KEYED_FLAG, STC.NON_TAX_FLAG, STC.EMPLOYEE_ID, STC.CUST_FIRST_NAME, STC.CUST_LAST_NAME, STC.TENDER_UID, STC.TAX_EXEMPT_ID, STC.ORDER_NBR, STC.ORDER_CHANNEL, STC.ORDER_ASSIST_LOCATION_ID, STC.ORDER_FULFILLMENT_CHANNEL, STC.ORDER_CREATION_CHANNEL, STC.CDC_EMAIL_ID, STC.CDC_FIRST_NAME_ID, STC.CDC_LAST_NAME_ID, STC.CDC_PHONE_NBR_ID, STC.DIGITAL_RECEIPT_ANSWER_CD, STC.OFFLINE_CUST_LKP_IND, STC.REV_SALES_TYPE_CTRL_ID, STC.REV_SALES_TYPE_ID, STC.EP_SALES_TYPE_ID, STC.NET_SALES_AMT, STC.NET_SALES_QTY, STC.NET_MARGIN_AMT, STC.SALES_AMT, STC.SALES_COST, STC.SALES_QTY, STC.RETURN_AMT, STC.RETURN_COST, STC.RETURN_QTY, STC.CLEARANCE_AMT, STC.CLEARANCE_QTY, STC.CLEARANCE_RETURN_AMT, STC.CLEARANCE_RETURN_QTY, STC.DISCOUNT_AMT, STC.DISCOUNT_QTY, STC.DISCOUNT_RETURN_AMT, STC.DISCOUNT_RETURN_QTY, STC.POS_COUPON_AMT, STC.POS_COUPON_QTY, STC.POS_COUPON_ALLOC_AMT, STC.POS_COUPON_ALLOC_QTY, STC.SPECIAL_SALES_AMT, STC.SPECIAL_SALES_QTY, STC.SPECIAL_RETURN_AMT, STC.SPECIAL_RETURN_QTY, STC.SPECIAL_SRVC_AMT, STC.SPECIAL_SRVC_QTY, STC.MA_SALES_AMT, STC.MA_SALES_QTY, STC.MA_TRANS_AMT, STC.MA_TRANS_COST, STC.MA_TRANS_QTY, STC.SALES_TRANS_AMT, STC.RETURN_TRANS_AMT, STC.ISSUANCE_QTY, STC.OFFER_QTY, STC.TAX_PCT, STC.TAX_AMT, STC.EXCH_RATE_PCT, STC.UPDATE_DT, STC.LOAD_DT FROM (ADMIN.SALES_TRANS_COMPONENT STC JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(STC.DAY_DT) = DTL.TRANS_DAY_DT)));

\echo
\echo *****  Creating view:  "OMS_ORDER_LN_SALES_ETL_INS_VW"

CREATE or replace VIEW  OMS_ORDER_LN_SALES_ETL_INS_VW
(
     CREATED_TSTMP,
     OMS_ORDER_DT,
     OMS_ORDER_ID,
     AFTERPAY_FLG,
     OMS_ORDER_NBR,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_CREATION_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     PRODUCT_ID,
     SCHED_DELIVERY_FLG,
     ADD_ON_FLAG,
     CANCELLED_FLG,
     OMS_DO_TYPE_ID,
     SHIP_POSTAL_CD,
     SHIP_COUNTRY_CD,
     SHIP_STATE,
     BILL_POSTAL_CD,
     BILL_COUNTRY_CD,
     OMS_ORDER_STATUS_ID,
     OMS_ORDER_LN_STATUS_ID,
     FULF_LOCATION_ID,
     FULF_LOCATION_NBR,
     FULF_STORE_NAME,
     FULF_LOCATION_TYPE,
     FULF_LOCATION_TYPE_DESC,
     FULF_LOC_GROUP_ID,
     FULF_LOC_GROUP_DESC,
     CREATION_DEVICE_TYPE,
     CREATION_DEVICE_WIDTH,
     SHIPPED_DT,
     AGING_DAYS,
     ORIG_ORDER_QTY,
     ALLOCATED_QTY,
     CANCELLED_QTY,
     UNIT_MONETARY_VALUE_AMT,
     ORIG_SHIP_CHARGE_AMT,
     SHIP_CHARGE_AMT,
     HEADER_DISC_AMT,
     LN_DISC_AMT,
     UNIT_TAX_AMT,
     NET_SALES_QTY,
     NET_SALES_AMT,
     SALES_QTY,
     SALES_AMT,
     NET_SALES_TAX_AMT,
     DISCOUNT_AMT,
     RETURN_QTY,
     RETURN_AMT,
     NET_MARGIN_AMT,
     PURCH_COST_AMT,
     SALES_COST,
     EXCH_RATE_PCT,
     NET_ORDER_SALES_DISC_AMT,
     NET_ORDER_MARGIN_DISC_AMT,
     NET_SALES_SHIP_AMT,
     MARGIN_PRE_AMT,
     MA_VF_AMT,
     MA_VF_PRODUCT_AMT,
     MA_SALES_VF_AMT,
     EXCHANGE_RATE_PCNT,
     PICK_DECL_QTY,
     ORDER_AGE,
     RX_TYPE
) AS
SELECT PO.CREATED_TSTMP, PO.OMS_ORDER_DT, PO.OMS_ORDER_ID, PO.AFTERPAY_FLG, PO.OMS_ORDER_NBR, PO.ORDER_NBR, PO.ORDER_CHANNEL, PO.ORDER_CREATION_CHANNEL, PO.ORDER_FULFILLMENT_CHANNEL, PO.PRODUCT_ID, PO.SCHED_DELIVERY_FLG, PO.ADD_ON_FLAG, PO.CANCELLED_FLG, PO.OMS_DO_TYPE_ID, PO.SHIP_POSTAL_CD, PO.SHIP_COUNTRY_CD, PO.SHIP_STATE, PO.BILL_POSTAL_CD, PO.BILL_COUNTRY_CD, PO.OMS_ORDER_STATUS_ID, PO.OMS_ORDER_LN_STATUS_ID, PO.FULF_LOCATION_ID, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN '0000'::"VARCHAR" ELSE SPR.LOCATION_NBR END AS FULF_LOCATION_NBR, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 'Not Assigned'::"VARCHAR" ELSE SPR.STORE_NAME END AS FULF_STORE_NAME, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 0 ELSE INT4(SPR.LOCATION_TYPE_ID) END AS FULF_LOCATION_TYPE, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 'Not Assigned'::"VARCHAR" ELSE SPR.LOCATION_TYPE_DESC END AS FULF_LOCATION_TYPE_DESC, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 0 WHEN (PO.FULF_LOCATION_ID = 2426) THEN 2859 WHEN (PO.FULF_LOCATION_ID = 2425) THEN 2801 ELSE INT4(SPR.LOCATION_TYPE_ID) END AS FULF_LOC_GROUP_ID, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 'Not Assigned'::"VARCHAR" WHEN (PO.FULF_LOCATION_ID = 2426) THEN 'Petm.Com West'::"VARCHAR" WHEN (PO.FULF_LOCATION_ID = 2425) THEN 'Petm.Com East'::"VARCHAR" ELSE SPR.LOCATION_TYPE_DESC END AS FULF_LOC_GROUP_DESC, PO.CREATION_DEVICE_TYPE, PO.CREATION_DEVICE_WIDTH, MAX(STS.SHIPPED_DT) AS SHIPPED_DT, MAX(CASE WHEN ((STS.SHIPPED_DT - DATE(PO.CREATED_TSTMP)) NOTNULL) THEN (STS.SHIPPED_DT - DATE(PO.CREATED_TSTMP)) WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END) AS AGING_DAYS, SUM(PO.ORIG_ORDER_QTY) AS ORIG_ORDER_QTY, SUM(PO.ALLOCATED_QTY) AS ALLOCATED_QTY, SUM(PO.CANCELLED_QTY) AS CANCELLED_QTY, MAX(PO.UNIT_MONETARY_VALUE_AMT) AS UNIT_MONETARY_VALUE_AMT, MAX(PO.ORIG_SHIP_CHARGE_AMT) AS ORIG_SHIP_CHARGE_AMT, MAX(PO.SHIP_CHARGE_AMT) AS SHIP_CHARGE_AMT, MAX(CASE WHEN (PO.HEADER_DISC_AMT NOTNULL) THEN PO.HEADER_DISC_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) AS HEADER_DISC_AMT, MAX(CASE WHEN (PO.LN_DISC_AMT NOTNULL) THEN PO.LN_DISC_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) AS LN_DISC_AMT, MAX(PO.UNIT_TAX_AMT) AS UNIT_TAX_AMT, SUM(STS.NET_SALES_QTY) AS NET_SALES_QTY, SUM(STS.NET_SALES_AMT) AS NET_SALES_AMT, SUM(STS.SALES_QTY) AS SALES_QTY, SUM(STS.SALES_AMT) AS SALES_AMT, SUM(STS.NET_SALES_TAX_AMT) AS NET_SALES_TAX_AMT, SUM(STS.DISCOUNT_AMT) AS DISCOUNT_AMT, SUM(PO.RETURN_QTY) AS RETURN_QTY, SUM(PO.RETURN_AMT) AS RETURN_AMT, SUM(STS.NET_MARGIN_AMT) AS NET_MARGIN_AMT, SUM(PO.PURCH_COST_AMT) AS PURCH_COST_AMT, SUM(STS.SALES_COST) AS SALES_COST, MAX(STS.EXCH_RATE_PCT) AS EXCH_RATE_PCT, SUM(STS.NET_SALES_DISC_AMT) AS NET_ORDER_SALES_DISC_AMT, SUM(STS.NET_MARGIN_DISC_AMT) AS NET_ORDER_MARGIN_DISC_AMT, SUM(STS.NET_SALES_SHIP_AMT) AS NET_SALES_SHIP_AMT, SUM(STS.MARGIN_PRE_AMT) AS MARGIN_PRE_AMT, SUM(PO.MA_VF_AMT) AS MA_VF_AMT, SUM(PO.MA_VF_PRODUCT_AMT) AS MA_VF_PRODUCT_AMT, SUM(STS.MA_SALES_VF_AMT) AS MA_SALES_VF_AMT, SUM(PO.EXCHANGE_RATE_PCNT) AS EXCHANGE_RATE_PCNT, SUM(CASE WHEN (PO.PICK_DECL_QTY NOTNULL) THEN PO.PICK_DECL_QTY WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) AS PICK_DECL_QTY, CASE WHEN (SUM(STS.SALES_QTY) > '0'::NUMERIC) THEN MAX(PO.ORDER_AGE) ELSE -1 END AS ORDER_AGE, MAX(CASE WHEN (PO.RX_TYPE ISNULL) THEN 'Not Rx'::"VARCHAR" ELSE PO.RX_TYPE END) AS RX_TYPE FROM (((SELECT PO.CREATED_TSTMP, PO.OMS_ORDER_DT, PO.OMS_ORDER_ID, PO.AFTERPAY_FLG, PO.OMS_ORDER_NBR, PO.ORDER_NBR, POL.ORDER_CHANNEL, PO.ORDER_CREATION_CHANNEL, POL.ORDER_FULFILLMENT_CHANNEL, POL.PRODUCT_ID, POL.SCHED_DELIVERY_FLG, POL.ADD_ON_FLAG, PO.CANCELLED_FLG, DOR.OMS_DO_TYPE_ID, POL.SHIP_POSTAL_CD, POL.SHIP_COUNTRY_CD, POL.SHIP_STATE, PO.BILL_POSTAL_CD, PO.BILL_COUNTRY_CD, PO.OMS_ORDER_STATUS_ID, POL.OMS_ORDER_LN_STATUS_ID, CASE WHEN (POL.ORDER_FULFILLMENT_CHANNEL = 'ISPU'::"VARCHAR") THEN POL.ORIG_LOCATION_ID ELSE '0'::INT8 END AS LOCATION_ID, CASE WHEN (POL.ORDER_FULFILLMENT_CHANNEL = 'ISPU'::"VARCHAR") THEN POL.ORIG_LOCATION_ID WHEN (DOR.ORIG_LOCATION_ID ISNULL) THEN '0'::INT8 WHEN (DOR.LOCATION_TYPE_ID = 19) THEN '2466'::INT8 ELSE DOR.ORIG_LOCATION_ID END AS FULF_LOCATION_ID, PO.CREATION_DEVICE_TYPE, PO.CREATION_DEVICE_WIDTH, SUM(CASE WHEN (DUP.DUPL_FLG = 1) THEN DUP.ORIG_ORDER_QTY ELSE POL.ORIG_ORDER_QTY END) AS ORIG_ORDER_QTY, SUM(CASE WHEN (DUP.DUPL_FLG = 1) THEN (POL.ALLOCATED_QTY / 2) ELSE POL.ALLOCATED_QTY END) AS ALLOCATED_QTY, SUM(CASE WHEN (DUP.DUPL_FLG = 1) THEN (POL.CANCELLED_QTY / 2) ELSE POL.CANCELLED_QTY END) AS CANCELLED_QTY, MAX(POL.UNIT_MONETARY_VALUE_AMT) AS UNIT_MONETARY_VALUE_AMT, MAX(CASE WHEN (DUP.DUPL_FLG = 1) THEN (POL.ORIG_SHIP_CHARGE_AMT / ('2'::NUMERIC(1,0))::NUMERIC(1,0)) ELSE POL.ORIG_SHIP_CHARGE_AMT END) AS ORIG_SHIP_CHARGE_AMT, MAX(CASE WHEN (DUP.DUPL_FLG = 1) THEN (POL.SHIP_CHARGE_AMT / ('2'::NUMERIC(1,0))::NUMERIC(1,0)) ELSE POL.SHIP_CHARGE_AMT END) AS SHIP_CHARGE_AMT, MAX(CASE WHEN (DUP.DUPL_FLG = 1) THEN (CASE WHEN (((POL.UNIT_MONETARY_VALUE_AMT / POL2.ORDER_MONETARY_VALUE_AMT) * OHD.HEADER_DISC_AMT) NOTNULL) THEN ((POL.UNIT_MONETARY_VALUE_AMT / POL2.ORDER_MONETARY_VALUE_AMT) * OHD.HEADER_DISC_AMT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END / ('2'::NUMERIC(1,0))::NUMERIC(1,0)) ELSE CASE WHEN (((POL.UNIT_MONETARY_VALUE_AMT / POL2.ORDER_MONETARY_VALUE_AMT) * OHD.HEADER_DISC_AMT) NOTNULL) THEN ((POL.UNIT_MONETARY_VALUE_AMT / POL2.ORDER_MONETARY_VALUE_AMT) * OHD.HEADER_DISC_AMT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END END) AS HEADER_DISC_AMT, MAX(CASE WHEN (DUP.DUPL_FLG = 1) THEN (CASE WHEN (OD.LN_DISC_AMT NOTNULL) THEN OD.LN_DISC_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END / ('2'::NUMERIC(1,0))::NUMERIC(1,0)) ELSE CASE WHEN (OD.LN_DISC_AMT NOTNULL) THEN OD.LN_DISC_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END END) AS LN_DISC_AMT, MAX(CASE WHEN (SPR.PRIMARY_VENDOR_ID ISNULL) THEN NCD.COND_AMT ELSE SPR.PURCH_COST_AMT END) AS PURCH_COST_AMT, MAX(POL.UNIT_TAX_AMOUNT_AMT) AS UNIT_TAX_AMT, SUM((MA.MA_VF_AMT * "NUMERIC"(POL.ORIG_ORDER_QTY))) AS MA_VF_AMT, SUM(MA.MA_VF_AMT) AS MA_VF_PRODUCT_AMT, MAX(POL.EXCHANGE_RATE_PCNT) AS EXCHANGE_RATE_PCNT, SUM(PD.PICK_DECL_QTY) AS PICK_DECL_QTY, SUM(CASE WHEN (DUP.DUPL_FLG = 1) THEN (CASE WHEN (RET.INVOICED_QTY NOTNULL) THEN RET.INVOICED_QTY WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END / ('2'::NUMERIC(1,0))::NUMERIC(1,0)) ELSE CASE WHEN (RET.INVOICED_QTY NOTNULL) THEN RET.INVOICED_QTY WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END END) AS RETURN_QTY, SUM(CASE WHEN (DUP.DUPL_FLG = 1) THEN (CASE WHEN ((((ABS(RET.UNIT_PRICE_AMT) * RET.INVOICED_QTY) + RET.LINE_TOTAL_DISC_AMT) + RET.PRORATED_HEADER_DISCOUNT_AMT) NOTNULL) THEN (((ABS(RET.UNIT_PRICE_AMT) * RET.INVOICED_QTY) + RET.LINE_TOTAL_DISC_AMT) + RET.PRORATED_HEADER_DISCOUNT_AMT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END / ('2'::NUMERIC(1,0))::NUMERIC(1,0)) ELSE CASE WHEN ((((ABS(RET.UNIT_PRICE_AMT) * RET.INVOICED_QTY) + RET.LINE_TOTAL_DISC_AMT) + RET.PRORATED_HEADER_DISCOUNT_AMT) NOTNULL) THEN (((ABS(RET.UNIT_PRICE_AMT) * RET.INVOICED_QTY) + RET.LINE_TOTAL_DISC_AMT) + RET.PRORATED_HEADER_DISCOUNT_AMT) ELSE NULL::"NUMERIC" END END) AS RETURN_AMT, MAX(CASE WHEN (SLA.ORDER_AGE NOTNULL) THEN SLA.ORDER_AGE WHEN (-1 NOTNULL) THEN -1 ELSE NULL::INT4 END) AS ORDER_AGE, MAX(RX.RX_TYPE) AS RX_TYPE FROM (((((((((((((ADMIN.OMS_ORDER PO JOIN ADMIN.OMS_ORDER_LN POL ON ((PO.OMS_ORDER_ID = POL.OMS_ORDER_ID))) LEFT JOIN (SELECT DISTINCT OHD.OMS_ORDER_ID, OHD.CREATED_DT, SUM(CASE WHEN (OHD.DISCOUNT_AMT NOTNULL) THEN OHD.DISCOUNT_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) AS HEADER_DISC_AMT FROM ADMIN.OMS_ORDER_DISCOUNT OHD WHERE ((OHD.OMS_ORDER_LN_ID ISNULL) OR (((OHD.OMS_ORDER_LN_ID = 0) AND (OHD.OMS_DISCOUNT_TYPE_ID IN (10, 20, 30, 50, 60, 90))) AND (OHD.DELETE_FLG = 0))) GROUP BY OHD.OMS_ORDER_ID, OHD.CREATED_DT) OHD ON (((OHD.OMS_ORDER_ID = PO.OMS_ORDER_ID) AND (OHD.CREATED_DT >= DATE(PO.CREATED_TSTMP))))) JOIN (SELECT POL.OMS_ORDER_ID, CASE WHEN (SUM(POL.UNIT_MONETARY_VALUE_AMT) = '0'::NUMERIC) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SUM(POL.UNIT_MONETARY_VALUE_AMT) END AS ORDER_MONETARY_VALUE_AMT FROM ADMIN.OMS_ORDER_LN POL WHERE ((POL.OMS_ORDER_LN_NBR !~~ LIKE_ESCAPE('%:%'::"VARCHAR", '\'::"VARCHAR")) AND (POL.OMS_ORDER_LN_NBR !~~ LIKE_ESCAPE('\'::"VARCHAR", '\'::"VARCHAR"))) GROUP BY POL.OMS_ORDER_ID) POL2 ON ((POL2.OMS_ORDER_ID = PO.OMS_ORDER_ID))) LEFT JOIN (SELECT OD.OMS_ORDER_ID, OD.OMS_ORDER_LN_ID, MIN(OD.CREATED_DT) AS CREATED_DT, SUM(CASE WHEN (OD.DISCOUNT_AMT NOTNULL) THEN OD.DISCOUNT_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) AS LN_DISC_AMT FROM ADMIN.OMS_ORDER_DISCOUNT OD WHERE ((OD.OMS_DISCOUNT_TYPE_ID IN (10, 20, 30, 50, 60, 90)) AND (OD.DELETE_FLG = 0)) GROUP BY OD.OMS_ORDER_ID, OD.OMS_ORDER_LN_ID) OD ON ((((OD.OMS_ORDER_ID = POL.OMS_ORDER_ID) AND (OD.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID)) AND (OD.CREATED_DT >= DATE(PO.CREATED_TSTMP))))) LEFT JOIN (SELECT DISTINCT DOR.OMS_ORDER_ID, DOL.OMS_ORDER_LN_ID, DOR.ORIG_LOCATION_ID, S.LOCATION_TYPE_ID, DOR.OMS_DO_TYPE_ID FROM (((ADMIN.OMS_DIST_ORDER DOR JOIN ADMIN.OMS_DIST_ORDER_LN DOL ON ((DOL.OMS_DIST_ORDER_ID = DOR.OMS_DIST_ORDER_ID))) JOIN ADMIN.OMS_ORDER_LN POL ON (((POL.OMS_ORDER_ID = DOR.OMS_ORDER_ID) AND (POL.OMS_ORDER_LN_ID = DOL.OMS_ORDER_LN_ID)))) JOIN ADMIN.SITE_PROFILE_RPT S ON ((S.LOCATION_ID = DOR.ORIG_LOCATION_ID))) WHERE (POL.ORDER_FULFILLMENT_CHANNEL IN (('STH'::"VARCHAR")::VARCHAR(4), ('SFS'::"VARCHAR")::VARCHAR(4)))) DOR ON (((DOR.OMS_ORDER_ID = PO.OMS_ORDER_ID) AND (DOR.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID)))) LEFT JOIN (SELECT DOC.OMS_ORDER_LN_ID, DOL.ORIG_LOCATION_ID, DOL.ORIG_ORDER_QTY, DOL.ALLOCATED_QTY, DOL.USER_CANCELED_QTY, 1 AS DUPL_FLG FROM ((SELECT DISTINCT POL.OMS_ORDER_LN_ID, COUNT(DISTINCT DOL.OMS_DIST_ORDER_ID) AS DO_CNT FROM (ADMIN.OMS_ORDER_LN POL JOIN ADMIN.OMS_DIST_ORDER_LN DOL ON (((DOL.OMS_ORDER_ID = POL.OMS_ORDER_ID) AND (DOL.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID)))) WHERE (((DOL.OMS_DIST_ORDER_LN_STATUS_ID <> 200) AND (DOL.ORDER_FULFILLMENT_CHANNEL IN (('STH'::"VARCHAR")::VARCHAR(4), ('SFS'::"VARCHAR")::VARCHAR(4)))) AND (DOL.OMS_ORDER_NBR NOT IN (('X%'::"VARCHAR")::VARCHAR(50), ('\'::"VARCHAR")::VARCHAR(50)))) GROUP BY POL.OMS_ORDER_LN_ID) DOC JOIN ADMIN.OMS_DIST_ORDER_LN DOL ON ((DOL.OMS_ORDER_LN_ID = DOC.OMS_ORDER_LN_ID))) WHERE (DOC.DO_CNT > 1)) DUP ON (((DUP.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID) AND (DUP.ORIG_LOCATION_ID = DOR.ORIG_LOCATION_ID)))) LEFT JOIN (SELECT A.OMS_ORDER_ID, A.ORDER_FULFILLMENT_CHANNEL, A.PRODUCT_ID, MAX(A.ORDER_AGE) AS ORDER_AGE FROM (SELECT DOL.OMS_ORDER_ID, DOL.ORDER_FULFILLMENT_CHANNEL, DOL.PRODUCT_ID, DOL.OMS_DIST_ORDER_ID, CASE WHEN (DOS.OMS_DO_SLA_FLAG = 1) THEN 0 WHEN (DOS.EV_SHIPPED_ORIG_TSTMP <= DOS.OMS_DO_AGE_1_TSTMP) THEN 1 WHEN (DOS.EV_SHIPPED_ORIG_TSTMP <= DOS.OMS_DO_AGE_2_TSTMP) THEN 2 WHEN (DOS.EV_SHIPPED_ORIG_TSTMP <= DOS.OMS_DO_AGE_3_TSTMP) THEN 3 WHEN (DOS.EV_SHIPPED_ORIG_TSTMP <= DOS.OMS_DO_AGE_4_TSTMP) THEN 4 WHEN (DOS.EV_SHIPPED_ORIG_TSTMP <= DOS.OMS_DO_AGE_5_TSTMP) THEN 5 ELSE 6 END AS ORDER_AGE FROM (ADMIN.OMS_DIST_ORDER_LN DOL JOIN ADMIN.OMS_DIST_ORDER_LN_SLA DOS ON ((DOS.OMS_DIST_ORDER_LN_ID = DOL.OMS_DIST_ORDER_LN_ID))) WHERE (DOL.OMS_DIST_ORDER_LN_STATUS_ID IN (185, 190, 195))) A GROUP BY A.OMS_ORDER_ID, A.ORDER_FULFILLMENT_CHANNEL, A.PRODUCT_ID) SLA ON ((((SLA.OMS_ORDER_ID = PO.OMS_ORDER_ID) AND (SLA.ORDER_FULFILLMENT_CHANNEL = POL.ORDER_FULFILLMENT_CHANNEL)) AND (SLA.PRODUCT_ID = POL.PRODUCT_ID)))) LEFT JOIN (SELECT RX.OMS_ORDER_LN_ID, RX.RX_TYPE FROM ADMIN.OMS_ORDER_LN_PET_RX_ATTR RX) RX ON ((RX.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID))) JOIN ADMIN.SKU_PROFILE_RPT SPR ON ((SPR.PRODUCT_ID = POL.PRODUCT_ID))) JOIN (SELECT NCD.SKU_NBR, MAX(NCD.COND_AMT) AS COND_AMT FROM ADMIN.NATIONAL_COST_DAY NCD WHERE (UPPER(NCD.DELETE_IND) <> 'X'::BPCHAR) GROUP BY NCD.SKU_NBR) NCD ON ((NCD.SKU_NBR = SPR.SKU_NBR))) LEFT JOIN (SELECT POL.ORDER_NBR, POL.PRODUCT_ID, SUM(MAE.MA_AMT) AS MA_VF_AMT FROM (ADMIN.MA_EVENT MAE JOIN ADMIN.OMS_ORDER_LN POL ON (((((POL.PRODUCT_ID = MAE.PRODUCT_ID) AND (DATE(POL.CREATED_TSTMP) >= MAE.START_DT)) AND (DATE(POL.CREATED_TSTMP) <= MAE.END_DT)) AND (POL.SHIP_COUNTRY_CD = (MAE.COUNTRY_CD)::"VARCHAR")))) WHERE ((((MAE.MA_EVENT_SOURCE_ID = 1) AND (MAE.START_DT >= '2016-09-28'::DATE)) AND (MAE.EM_VENDOR_ID <> 0)) AND ((POL.OMS_ORDER_LN_NBR !~~ LIKE_ESCAPE('%:%'::"VARCHAR", '\'::"VARCHAR")) AND (POL.OMS_ORDER_LN_NBR !~~ LIKE_ESCAPE('\'::"VARCHAR", '\'::"VARCHAR")))) GROUP BY POL.ORDER_NBR, POL.PRODUCT_ID) MA ON (((MA.PRODUCT_ID = POL.PRODUCT_ID) AND (MA.ORDER_NBR = POL.ORDER_NBR)))) LEFT JOIN (SELECT DOR.OMS_ORDER_ID, DOL.OMS_ORDER_LN_ID, SUM(PD.CANCELLED_QTY) AS PICK_DECL_QTY FROM ((ADMIN.OMS_DIST_ORDER_REASON_CODE PD JOIN ADMIN.OMS_DIST_ORDER DOR ON ((DOR.OMS_DIST_ORDER_ID = PD.OMS_DIST_ORDER_ID))) JOIN ADMIN.OMS_DIST_ORDER_LN DOL ON ((DOL.OMS_DIST_ORDER_LN_ID = PD.OMS_DIST_ORDER_LN_ID))) GROUP BY DOR.OMS_ORDER_ID, DOL.OMS_ORDER_LN_ID) PD ON (((PD.OMS_ORDER_ID = POL.OMS_ORDER_ID) AND (PD.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID)))) LEFT JOIN (SELECT IL.OMS_ORDER_LN_ID, IL.INVOICED_QTY, IL.UNIT_PRICE_AMT, IL.LINE_TOTAL_DISC_AMT, (IL.INVOICE_TOTAL_AMT + I.INVOICE_DISC_AMT) AS P1, (((IL.UNIT_PRICE_AMT * IL.INVOICED_QTY) - IL.LINE_TOTAL_DISC_AMT) + IL.LINE_TOTAL_TAX_AMT) AS P2, (((((IL.UNIT_PRICE_AMT * IL.INVOICED_QTY) - IL.LINE_TOTAL_DISC_AMT) + IL.LINE_TOTAL_TAX_AMT) / CASE WHEN ((IL.INVOICE_TOTAL_AMT + I.INVOICE_DISC_AMT) = '0'::NUMERIC) THEN NULL::"NUMERIC" ELSE (IL.INVOICE_TOTAL_AMT + I.INVOICE_DISC_AMT) END) * I.INVOICE_DISC_AMT) AS PRORATED_HEADER_DISCOUNT_AMT FROM (ADMIN.OMS_INVOICE_LN IL JOIN ADMIN.OMS_INVOICE I ON ((I.OMS_INVOICE_ID = IL.OMS_INVOICE_ID))) WHERE ((I.INVOICE_STATUS_ID <> ('30'::NUMERIC(2,0))::NUMERIC(2,0)) AND (I.OMS_INVOICE_TYPE_ID = ('30'::NUMERIC(2,0))::NUMERIC(2,0)))) RET ON ((RET.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID))) WHERE (((PO.CREATED_TSTMP >= '2016-09-28 00:00:00'::"TIMESTAMP") AND (PO.OMS_ORDER_TYPE NOT IN (('R'::"VARCHAR")::VARCHAR(1), ('X'::"VARCHAR")::VARCHAR(1)))) AND ((POL.OMS_ORDER_LN_NBR !~~ LIKE_ESCAPE('%:%'::"VARCHAR", '\'::"VARCHAR")) AND (POL.OMS_ORDER_LN_NBR !~~ LIKE_ESCAPE('\'::"VARCHAR", '\'::"VARCHAR")))) GROUP BY PO.CREATED_TSTMP, PO.OMS_ORDER_DT, PO.OMS_ORDER_ID, PO.AFTERPAY_FLG, PO.OMS_ORDER_NBR, PO.ORDER_NBR, POL.ORDER_CHANNEL, PO.ORDER_CREATION_CHANNEL, POL.ORDER_FULFILLMENT_CHANNEL, POL.PRODUCT_ID, POL.SCHED_DELIVERY_FLG, POL.SUBSCRIPTION_ORDER_FLG, POL.ADD_ON_FLAG, PO.CANCELLED_FLG, DOR.OMS_DO_TYPE_ID, SPR.VP_ID, POL.DSG_SHIP_VIA, POL.SHIP_POSTAL_CD, POL.SHIP_COUNTRY_CD, POL.SHIP_STATE, PO.BILL_POSTAL_CD, PO.BILL_COUNTRY_CD, PO.OMS_ORDER_STATUS_ID, POL.OMS_ORDER_LN_STATUS_ID, CASE WHEN (POL.ORDER_FULFILLMENT_CHANNEL = 'ISPU'::"VARCHAR") THEN POL.ORIG_LOCATION_ID ELSE '0'::INT8 END, CASE WHEN (POL.ORDER_FULFILLMENT_CHANNEL = 'ISPU'::"VARCHAR") THEN POL.ORIG_LOCATION_ID WHEN (DOR.ORIG_LOCATION_ID ISNULL) THEN '0'::INT8 WHEN (DOR.LOCATION_TYPE_ID = 19) THEN '2466'::INT8 ELSE DOR.ORIG_LOCATION_ID END, PO.CREATION_DEVICE_TYPE, PO.CREATION_DEVICE_WIDTH) PO LEFT JOIN (SELECT STS.ORDER_NBR, STS.PRODUCT_ID, STS.ORDER_FULFILLMENT_CHANNEL, STS.LOCATION_ID, MAX(STS.DAY_DT) AS SHIPPED_DT, SUM(STS.NET_SALES_QTY) AS NET_SALES_QTY, SUM(STS.NET_SALES_AMT) AS NET_SALES_AMT, SUM(STS.SALES_QTY) AS SALES_QTY, SUM(STS.SALES_AMT) AS SALES_AMT, SUM(STS.NET_SALES_TAX_AMT) AS NET_SALES_TAX_AMT, SUM(STS.DISCOUNT_AMT) AS DISCOUNT_AMT, SUM(RET.RETURN_QTY) AS RETURN_QTY, SUM(RET.RETURN_AMT) AS RETURN_AMT, SUM((STS.NET_MARGIN_AMT - RET.NET_MARGIN_AMT)) AS NET_MARGIN_AMT, SUM(STS.SALES_COST) AS SALES_COST, SUM(STS.SALES_COST) AS MARGIN_PRE_AMT, MAX(STS.EXCH_RATE_PCT) AS EXCH_RATE_PCT, SUM((NSD.NET_SALES_DISC_AMT / "NUMERIC"(PC.PROD_CNT))) AS NET_SALES_DISC_AMT, SUM((NSD.NET_MARGIN_DISC_AMT / "NUMERIC"(PC.PROD_CNT))) AS NET_MARGIN_DISC_AMT, SUM((SA.NET_SALES_SHIP_AMT / "NUMERIC"(PC.PROD_CNT))) AS NET_SALES_SHIP_AMT, SUM(STS.MA_SALES_VF_AMT) AS MA_SALES_VF_AMT FROM (((((SELECT STS.ORDER_NBR, STS.DAY_DT, STS.PRODUCT_ID, STS.LOCATION_ID, STS.ORDER_FULFILLMENT_CHANNEL, SUM(STS.NET_SALES_QTY) AS NET_SALES_QTY, SUM(STS.NET_SALES_AMT) AS NET_SALES_AMT, SUM(STS.SALES_QTY) AS SALES_QTY, SUM(STS.SALES_AMT) AS SALES_AMT, SUM(SOS.SKU_TAX_AMT) AS NET_SALES_TAX_AMT, SUM(STS.DISCOUNT_AMT) AS DISCOUNT_AMT, SUM(STS.RETURN_QTY) AS RETURN_QTY, SUM(STS.RETURN_AMT) AS RETURN_AMT, SUM(STS.NET_MARGIN_AMT) AS NET_MARGIN_AMT, SUM(STS.SALES_COST) AS SALES_COST, MAX(STS.EXCH_RATE_PCT) AS EXCH_RATE_PCT, SUM(MA.MA_SALES_VF_AMT) AS MA_SALES_VF_AMT FROM ((ADMIN.SALES_TRANS_SKU STS JOIN (SELECT SOS.DAY_DT, SOS.SALES_INSTANCE_ID, SOS.PRODUCT_ID, MAX(SOS.SKU_TAX_AMT) AS SKU_TAX_AMT FROM ADMIN.SALES_TRANS_ORD_SKU SOS GROUP BY SOS.DAY_DT, SOS.SALES_INSTANCE_ID, SOS.PRODUCT_ID) SOS ON ((((SOS.DAY_DT = "TIMESTAMP"(STS.DAY_DT)) AND (SOS.SALES_INSTANCE_ID = STS.SALES_INSTANCE_ID)) AND (SOS.PRODUCT_ID = STS.PRODUCT_ID)))) LEFT JOIN (SELECT MAS.DAY_DT, MAS.LOCATION_ID, MAS.SALES_INSTANCE_ID, MAS.PRODUCT_ID, SUM((MAS.MA_SALES_AMT * MAS.EXCH_RATE_PCT)) AS MA_SALES_VF_AMT FROM (ADMIN.MA_SALES_TRANS_UPC MAS JOIN ADMIN.MA_EVENT MAE ON ((MAE.MA_EVENT_ID = MAS.MA_EVENT_ID))) WHERE ((MAE.MA_EVENT_TYPE_ID IN (2, 24, 25, 26, 27, 63)) AND (MAS.DAY_DT >= '2016-09-28 00:00:00'::"TIMESTAMP")) GROUP BY MAS.DAY_DT, MAS.LOCATION_ID, MAS.SALES_INSTANCE_ID, MAS.PRODUCT_ID) MA ON (((MA.SALES_INSTANCE_ID = STS.SALES_INSTANCE_ID) AND (MA.PRODUCT_ID = STS.PRODUCT_ID)))) WHERE ((((STS.DAY_DT >= '2016-09-28'::DATE) AND (SOS.DAY_DT >= '2016-09-28 00:00:00'::"TIMESTAMP")) AND (STS.ORDER_CREATION_CHANNEL NOT IN (('STR'::"VARCHAR")::VARCHAR(4), ('RET'::"VARCHAR")::VARCHAR(4)))) AND (STS.ORDER_NBR < '100000000000'::INT8)) GROUP BY STS.ORDER_NBR, STS.DAY_DT, STS.PRODUCT_ID, STS.LOCATION_ID, STS.ORDER_FULFILLMENT_CHANNEL) STS LEFT JOIN (SELECT STS.ORDER_NBR, STS.LOCATION_ID, SUM(STS.NET_SALES_AMT) AS NET_SALES_DISC_AMT, SUM(STS.NET_MARGIN_AMT) AS NET_MARGIN_DISC_AMT FROM ADMIN.SALES_TRANS_SKU STS WHERE ((((STS.SALES_TYPE_ID = 2) AND (STS.PRODUCT_ID = 197626)) AND (STS.DAY_DT >= '2016-09-28'::DATE)) AND (STS.ORDER_CREATION_CHANNEL NOT IN (('STR'::"VARCHAR")::VARCHAR(4)))) GROUP BY STS.ORDER_NBR, STS.LOCATION_ID) NSD ON (((NSD.ORDER_NBR = STS.ORDER_NBR) AND (NSD.LOCATION_ID = STS.LOCATION_ID)))) LEFT JOIN (SELECT STS.ORDER_NBR, STS.LOCATION_ID, COUNT(DISTINCT STS.PRODUCT_ID) AS PROD_CNT FROM (ADMIN.SALES_TRANS_SKU STS JOIN ADMIN.SKU_PROFILE_RPT SPR ON ((SPR.PRODUCT_ID = STS.PRODUCT_ID))) WHERE ((((STS.DAY_DT >= '2016-09-28'::DATE) AND (STS.SALES_TYPE_ID NOT IN (2))) AND (SPR.PRIMARY_VENDOR_ID NOTNULL)) AND (STS.ORDER_CREATION_CHANNEL NOT IN (('STR'::"VARCHAR")::VARCHAR(4), ('RET'::"VARCHAR")::VARCHAR(4)))) GROUP BY STS.ORDER_NBR, STS.LOCATION_ID) PC ON (((PC.ORDER_NBR = STS.ORDER_NBR) AND (PC.LOCATION_ID = STS.LOCATION_ID)))) LEFT JOIN (SELECT STS.ORDER_NBR, STS.PRODUCT_ID, STS.LOCATION_ID, SUM(STS.NET_SALES_AMT) AS NET_SALES_SHIP_AMT FROM ADMIN.SALES_TRANS_SKU STS WHERE ((((STS.DAY_DT >= '2016-09-28'::DATE) AND (STS.SALES_TYPE_ID NOT IN (2, 4))) AND (STS.PRODUCT_ID = 197871)) AND (STS.ORDER_CREATION_CHANNEL NOT IN (('STR'::"VARCHAR")::VARCHAR(4), ('RET'::"VARCHAR")::VARCHAR(4)))) GROUP BY STS.ORDER_NBR, STS.PRODUCT_ID, STS.LOCATION_ID) SA ON (((SA.ORDER_NBR = STS.ORDER_NBR) AND (SA.LOCATION_ID = STS.LOCATION_ID)))) LEFT JOIN (SELECT SO.DS_WEB_ORDER_NBR, STS.PRODUCT_ID, SUM((STS.RETURN_AMT - STS.DISCOUNT_AMT)) AS RETURN_AMT, SUM(STS.RETURN_QTY) AS RETURN_QTY, SUM(STS.RETURN_COST) AS RETURN_COST, SUM(STS.NET_MARGIN_AMT) AS NET_MARGIN_AMT FROM ((ADMIN.SALES_TRANS_ORDER SO JOIN ADMIN.SALES_TRANS_ORD_SKU SOS ON ((((SOS.DAY_DT = SO.DAY_DT) AND (SOS.SALES_INSTANCE_ID = SO.SALES_INSTANCE_ID)) AND (SOS.ORDER_NBR = SO.ORDER_NBR)))) JOIN ADMIN.SALES_TRANS_SKU STS ON (((("TIMESTAMP"(STS.DAY_DT) = SO.DAY_DT) AND (STS.PRODUCT_ID = SOS.PRODUCT_ID)) AND (STS.SALES_INSTANCE_ID = SO.SALES_INSTANCE_ID)))) WHERE (((((SO.DAY_DT >= '2016-10-28 00:00:00'::"TIMESTAMP") AND (STS.DAY_DT >= '2016-10-28'::DATE)) AND (STS.SALES_TYPE_ID = 4)) AND (STS.ORDER_CREATION_CHANNEL <> 'STR'::"VARCHAR")) AND (SO.SALES_TYPE_ID = 4)) GROUP BY SO.DS_WEB_ORDER_NBR, STS.PRODUCT_ID) RET ON (((RET.DS_WEB_ORDER_NBR = STS.ORDER_NBR) AND (RET.PRODUCT_ID = STS.PRODUCT_ID)))) WHERE (1 = 1) GROUP BY STS.ORDER_NBR, STS.ORDER_FULFILLMENT_CHANNEL, STS.PRODUCT_ID, STS.LOCATION_ID) STS ON (((((STS.ORDER_NBR = PO.ORDER_NBR) AND (STS.PRODUCT_ID = PO.PRODUCT_ID)) AND (STS.ORDER_FULFILLMENT_CHANNEL = PO.ORDER_FULFILLMENT_CHANNEL)) AND (PO.FULF_LOCATION_ID = STS.LOCATION_ID)))) LEFT JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SPR.LOCATION_ID = PO.FULF_LOCATION_ID))) WHERE (1 = 1) GROUP BY PO.CREATED_TSTMP, PO.OMS_ORDER_DT, PO.OMS_ORDER_ID, PO.AFTERPAY_FLG, PO.OMS_ORDER_NBR, PO.ORDER_NBR, PO.ORDER_CHANNEL, PO.ORDER_CREATION_CHANNEL, PO.ORDER_FULFILLMENT_CHANNEL, PO.PRODUCT_ID, PO.SCHED_DELIVERY_FLG, PO.ADD_ON_FLAG, PO.CANCELLED_FLG, PO.OMS_DO_TYPE_ID, PO.SHIP_POSTAL_CD, PO.SHIP_COUNTRY_CD, PO.SHIP_STATE, PO.BILL_POSTAL_CD, PO.BILL_COUNTRY_CD, PO.OMS_ORDER_STATUS_ID, PO.OMS_ORDER_LN_STATUS_ID, PO.FULF_LOCATION_ID, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN '0000'::"VARCHAR" ELSE SPR.LOCATION_NBR END, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 'Not Assigned'::"VARCHAR" ELSE SPR.STORE_NAME END, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 0 ELSE INT4(SPR.LOCATION_TYPE_ID) END, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 'Not Assigned'::"VARCHAR" ELSE SPR.LOCATION_TYPE_DESC END, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 0 WHEN (PO.FULF_LOCATION_ID = 2426) THEN 2859 WHEN (PO.FULF_LOCATION_ID = 2425) THEN 2801 ELSE INT4(SPR.LOCATION_TYPE_ID) END, CASE WHEN (PO.FULF_LOCATION_ID = 0) THEN 'Not Assigned'::"VARCHAR" WHEN (PO.FULF_LOCATION_ID = 2426) THEN 'Petm.Com West'::"VARCHAR" WHEN (PO.FULF_LOCATION_ID = 2425) THEN 'Petm.Com East'::"VARCHAR" ELSE SPR.LOCATION_TYPE_DESC END, PO.CREATION_DEVICE_TYPE, PO.CREATION_DEVICE_WIDTH;

\echo
\echo *****  Creating view:  "OMS_DIST_ORDER_LN_INVENTORY_VW"

CREATE or replace VIEW  OMS_DIST_ORDER_LN_INVENTORY_VW
(
     OMS_DIST_ORDER_ID,
     OMS_DIST_ORDER_LN_ID,
     OMS_ORDER_ID,
     OMS_DO_CANCELED_FLAG,
     PRODUCT_ID,
     ORIG_LOCATION_ID,
     OMS_ORDER_CREATED_TSTMP,
     PICK_DECLINE_DT,
     POG_LISTED_IND,
     INLINE_CNT,
     LISTING_FLAG,
     OMS_DO_REASON_CANCELLED_QTY,
     XFER_IN_TRANS_QTY,
     ON_HAND_QTY
) AS
SELECT DOL.OMS_DIST_ORDER_ID, DOL.OMS_DIST_ORDER_LN_ID, DOL.OMS_ORDER_ID, DOO.CANCELED_FLG AS OMS_DO_CANCELED_FLAG, DOL.PRODUCT_ID, DOL.ORIG_LOCATION_ID, DOL.OMS_ORDER_CREATED_TSTMP, DOR.PICK_DECLINE_DT, INV.POG_LISTED_IND, INV.INLINE_CNT, MAX(0) AS LISTING_FLAG, SUM(DOR.CANCELLED_QTY) AS OMS_DO_REASON_CANCELLED_QTY, SUM(INV.XFER_IN_TRANS_QTY) AS XFER_IN_TRANS_QTY, SUM(INV.ON_HAND_QTY) AS ON_HAND_QTY FROM (((ADMIN.OMS_DIST_ORDER_LN DOL JOIN ADMIN.OMS_DIST_ORDER DOO ON ((((DATE(DOL.OMS_ORDER_CREATED_TSTMP) = DATE(DOO.OMS_ORDER_CREATED_TSTMP)) AND (DOL.OMS_DIST_ORDER_ID = DOO.OMS_DIST_ORDER_ID)) AND (DOL.ORIG_LOCATION_ID = DOO.ORIG_LOCATION_ID)))) JOIN ADMIN.OMS_DIST_ORDER_REASON_CODE DOR ON (((DOR.OMS_DIST_ORDER_ID = DOL.OMS_DIST_ORDER_ID) AND (DOR.OMS_DIST_ORDER_LN_ID = DOL.OMS_DIST_ORDER_LN_ID)))) LEFT JOIN (SELECT INVV.LOCATION_ID, INVV.PRODUCT_ID, INVV.DAY_DT, INVV.POG_LISTED_IND, INVV.INLINE_CNT, SUM(INVV.ON_HAND_QTY) AS ON_HAND_QTY, SUM(INVV.XFER_IN_TRANS_QTY) AS XFER_IN_TRANS_QTY FROM ((ADMIN.OMS_DIST_ORDER_LN DOL JOIN ADMIN.OMS_DIST_ORDER_REASON_CODE DOR ON (((DOR.OMS_DIST_ORDER_ID = DOL.OMS_DIST_ORDER_ID) AND (DOR.OMS_DIST_ORDER_LN_ID = DOL.OMS_DIST_ORDER_LN_ID)))) JOIN ADMIN.INV_INSTOCK_PRICE_DAY INVV ON ((((DATE(INVV.DAY_DT) = DOR.PICK_DECLINE_DT) AND (INVV.LOCATION_ID = DOL.ORIG_LOCATION_ID)) AND (INVV.PRODUCT_ID = DOL.PRODUCT_ID)))) GROUP BY INVV.LOCATION_ID, INVV.PRODUCT_ID, INVV.DAY_DT, INVV.POG_LISTED_IND, INVV.INLINE_CNT) INV ON ((((DATE(INV.DAY_DT) = DOR.PICK_DECLINE_DT) AND (INV.LOCATION_ID = DOL.ORIG_LOCATION_ID)) AND (INV.PRODUCT_ID = DOL.PRODUCT_ID)))) WHERE (1 = 1) GROUP BY DOL.OMS_DIST_ORDER_ID, DOL.OMS_DIST_ORDER_LN_ID, DOL.OMS_ORDER_ID, DOO.CANCELED_FLG, DOL.PRODUCT_ID, DOL.ORIG_LOCATION_ID, DOL.OMS_ORDER_CREATED_TSTMP, DOR.CANCELLED_QTY, DOR.PICK_DECLINE_DT, INV.POG_LISTED_IND, INV.INLINE_CNT;

\echo
\echo *****  Creating view:  "PO_FACT_VW"

CREATE or replace VIEW  PO_FACT_VW
(
     PO_KEY,
     PO_GID,
     PO_NBR,
     FROM_LOCATION_ID,
     GOODS_SUPPLIER_ID,
     INCO_TERM_CD,
     ORDERING_ADDRESS_ID,
     PO_DOC_DT,
     PO_LINE_CNT,
     PO_PICKUP_DT,
     PO_REF_NBR,
     PO_REF_TXT_HDR,
     PO_TYPE_ID,
     TMS_DELV_DT,
     TMS_ORDER_CNT,
     TMS_ORDER_GID,
     TMS_PICKUP_DT,
     PO_QTY_SHORT_FLAG_HDR,
     PO_QTY_OVER_FLAG_HDR,
     PREMIUM_FLAG_HDR,
     CREATE_EXCH_RATE_PCNT,
     CURRENCY_CODE,
     LOAD_DT,
     LOCATION_ID,
     PO_ACTUAL_COST,
     PO_DELV_QTY,
     PO_FRT_COST,
     PO_GROSS_COST,
     PO_ISSUED_QTY,
     PO_MSTR_DUE_DT,
     PO_NET_COST,
     PO_ORDER_QTY,
     PO_ORIG_ORDER_QTY,
     PO_QTY_OVER_FLAG,
     PO_QTY_SHORT_FLAG,
     PO_RCPT_COST,
     PO_RCPT_QTY,
     PO_SCHED_QTY,
     RCPT_EXCH_RATE_PCNT,
     UPDATE_CNT,
     VENDOR_ID,
     MVMT_POST_DT,
     PO_ASN_CANCEL_FLAG,
     PO_ASN_ORDER_QTY,
     PO_FILL_RATE_OVERAGE_UNITS,
     PO_ASN_ORDER_QTY_PREMIUM,
     PO_ASN_ORDER_QTY_REGULAR,
     PO_DELV_COMPLETE_DT,
     PO_DELV_FLAG,
     PO_DUE_DT,
     PO_ISSUED_DT,
     PO_LINE_NBR,
     PO_ORIG_DUE_DT,
     PO_RCPT_DT,
     PRODUCT_ID,
     STATUS_ID,
     VENDOR_SUBRANGE_CD,
     PO_PREMIUM_FLG,
     PO_RCPT_QTY_VC,
     PO_RCPT_QTY_VC_PREMIUM,
     PO_RCPT_QTY_VC_REGULAR,
     PO_QTY_REVISED_FLAG,
     QUOTED_LEADTIME,
     SCM_PO_REF_NBR,
     SAP_ASN_ID,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     REASON_ID,
     EXPLANATION_ID,
     SAP_ORIGINAL_PO_DUE_DT,
     SAP_REVISED_PO_DUE_DT,
     RTS_CREATION_TSTMP,
     MUST_SHIP_BY_TSTMP,
     SCM_OCEAN_CARRIER_ID,
     PO_PICKUP_END,
     DC_APPT_LOCAL_TSTMP,
     DC_GATE_LOCAL_TSTMP,
     DC_FIRST_RCPT_LOCAL_TSTMP,
     DC_LAST_RCPT_LOCAL_TSTMP,
     DC_VERIFY_LOCAL_TSTMP,
     SAP_PO_RELEASE_DT,
     ASN_RCVD_TSTMP_LOCAL,
     SAP_PO_CREATE_DT,
     MUST_SHIP_BY_DT,
     SCM_PO_REF_TXT,
     SCM_PO_STATUS_ID,
     PO_DAYS_LATE,
     LEAD_TIME_PO_REVISED_CALC,
     LEAD_TIME_ACTUAL,
     WMS_DC_HOURS_IN_YARD,
     DC_LATE_VERIFY_FLAG,
     SCM_PO_STATUS_DESC,
     PO_FILL_RATE_PO_FAILURE_FLAG_PREMIUM,
     PO_FILL_RATE_PO_FAILURE_FLAG_REGULAR,
     PO_DAYS_EARLY,
     SUM_SHORTED_UNITS_PREIMUM,
     SUM_SHORTED_UNITS_REGULAR,
     VALUE_SKU_SHORTED_PREIMUM,
     VALUE_SKU_SHORTED_REGULAR,
     SUM_SHORTED_ORDERED_PREIMUM,
     SUM_SHORTED_ORDERED_REGULAR,
     VALUE_UNITS_SHORTED_PREIMUM,
     VALUE_UNITS_SHORTED_REGULAR,
     ALERT_ID,
     ALERT_NAME,
     ALERT_MESSAGE,
     ALERT_COMMENTS,
     INBOUND_REASON_ID,
     REASON_CD_ID,
     EXPLANATION_CD_ID,
     SHORT_DESC,
     REASON_DESC,
     EXPLANATION_DESC,
     IB_OB_CATEGORY,
     IB_OB_PRIORITY,
     IDENTIFIER,
     PO_GUID,
     DA_QTY,
     DA_QTY_1,
     EX_QTY,
     EX_QTY_1,
     OB_QTY,
     OB_QTY_1,
     RD_QTY,
     RD_QTY_1,
     IS_QTY,
     IS_QTY_1,
     RC_QTY,
     RC_QTY_1,
     DC_VERIFY_DAY_DT
) AS
SELECT ("VARCHAR"(A.PO_NBR) || "VARCHAR"(AA.PO_LINE_NBR)) AS PO_KEY, A.PO_GID, A.PO_NBR, A.FROM_LOCATION_ID, A.GOODS_SUPPLIER_ID, A.INCO_TERM_CD, A.ORDERING_ADDRESS_ID, A.PO_DOC_DT, A.PO_LINE_CNT, A.PO_PICKUP_DT, A.PO_REF_NBR, A.PO_REF_TX AS PO_REF_TXT_HDR, A.PO_TYPE_ID, A.TMS_DELV_DT, A.TMS_ORDER_CNT, A.TMS_ORDER_GID, A.TMS_PICKUP_DT, A.PO_QTY_SHORT_FLAG AS PO_QTY_SHORT_FLAG_HDR, A.PO_QTY_OVER_FLAG AS PO_QTY_OVER_FLAG_HDR, A.PO_PREMIUM_FLG AS PREMIUM_FLAG_HDR, AA.CREATE_EXCH_RATE_PCNT, AA.CURRENCY_CODE, AA.LOAD_DT, AA.LOCATION_ID, AA.PO_ACTUAL_COST, AA.PO_DELV_QTY, AA.PO_FRT_COST, AA.PO_GROSS_COST, AA.PO_ISSUED_QTY, AA.PO_MSTR_DUE_DT, AA.PO_NET_COST, AA.PO_ORDER_QTY, AA.PO_ORIG_ORDER_QTY, AA.PO_QTY_OVER_FLAG, AA.PO_QTY_SHORT_FLAG, AA.PO_RCPT_COST, AA.PO_RCPT_QTY, AA.PO_SCHED_QTY, AA.RCPT_EXCH_RATE_PCNT, AA.UPDATE_CNT, AA.VENDOR_ID, AA.MVMT_POST_DT, AA.PO_ASN_CANCEL_FLAG, AA.PO_ASN_ORDER_QTY, CASE WHEN (AA.PO_QTY_OVER_FLAG = 1) THEN (AA.PO_RCPT_QTY - "NUMERIC"(AA.PO_ASN_ORDER_QTY)) ELSE NULL::"NUMERIC" END AS PO_FILL_RATE_OVERAGE_UNITS, CASE WHEN (((((AA.STATUS_ID = '10'::"VARCHAR") OR (AA.STATUS_ID = '11'::"VARCHAR")) OR ((AA.STATUS_ID = '12'::"VARCHAR") OR (AA.STATUS_ID = '29'::"VARCHAR"))) OR (((AA.STATUS_ID = '30'::"VARCHAR") OR (AA.STATUS_ID = '31'::"VARCHAR")) OR ((AA.STATUS_ID = '32'::"VARCHAR") OR (AA.STATUS_ID = '33'::"VARCHAR")))) OR ((((AA.STATUS_ID = '35'::"VARCHAR") OR (AA.STATUS_ID = '36'::"VARCHAR")) OR ((AA.STATUS_ID = '37'::"VARCHAR") OR (AA.STATUS_ID = '38'::"VARCHAR"))) OR ((AA.STATUS_ID = '39'::"VARCHAR") OR (AA.STATUS_ID = '51'::"VARCHAR")))) THEN AA.PO_ASN_ORDER_QTY ELSE NULL::INT4 END AS PO_ASN_ORDER_QTY_PREMIUM, CASE WHEN ((AA.STATUS_ID NOTNULL) AND (((((AA.STATUS_ID <> '10'::"VARCHAR") AND (AA.STATUS_ID <> '11'::"VARCHAR")) AND ((AA.STATUS_ID <> '12'::"VARCHAR") AND (AA.STATUS_ID <> '29'::"VARCHAR"))) AND (((AA.STATUS_ID <> '30'::"VARCHAR") AND (AA.STATUS_ID <> '31'::"VARCHAR")) AND ((AA.STATUS_ID <> '32'::"VARCHAR") AND (AA.STATUS_ID <> '33'::"VARCHAR")))) AND ((((AA.STATUS_ID <> '35'::"VARCHAR") AND (AA.STATUS_ID <> '36'::"VARCHAR")) AND ((AA.STATUS_ID <> '37'::"VARCHAR") AND (AA.STATUS_ID <> '38'::"VARCHAR"))) AND ((AA.STATUS_ID <> '39'::"VARCHAR") AND (AA.STATUS_ID <> '51'::"VARCHAR"))))) THEN AA.PO_ASN_ORDER_QTY ELSE NULL::INT4 END AS PO_ASN_ORDER_QTY_REGULAR, AA.PO_DELV_COMPLETE_DT, AA.PO_DELV_FLAG, A12.LOOKUP_DATE AS PO_DUE_DT, AA.PO_ISSUED_DT, AA.PO_LINE_NBR, AA.PO_ORIG_DUE_DT, AA.PO_RCPT_DT, AA.PRODUCT_ID, CASE WHEN (AA.STATUS_ID ISNULL) THEN '00'::"VARCHAR" ELSE AA.STATUS_ID END AS STATUS_ID, AA.VENDOR_SUBRANGE_CD, CASE WHEN (((((AA.STATUS_ID = '10'::"VARCHAR") OR (AA.STATUS_ID = '11'::"VARCHAR")) OR ((AA.STATUS_ID = '12'::"VARCHAR") OR (AA.STATUS_ID = '29'::"VARCHAR"))) OR (((AA.STATUS_ID = '30'::"VARCHAR") OR (AA.STATUS_ID = '31'::"VARCHAR")) OR ((AA.STATUS_ID = '32'::"VARCHAR") OR (AA.STATUS_ID = '33'::"VARCHAR")))) OR ((((AA.STATUS_ID = '35'::"VARCHAR") OR (AA.STATUS_ID = '36'::"VARCHAR")) OR ((AA.STATUS_ID = '37'::"VARCHAR") OR (AA.STATUS_ID = '38'::"VARCHAR"))) OR ((AA.STATUS_ID = '39'::"VARCHAR") OR (AA.STATUS_ID = '51'::"VARCHAR")))) THEN 'PREMIUM'::"VARCHAR" ELSE 'REGULAR'::"VARCHAR" END AS PO_PREMIUM_FLG, CASE WHEN (AA.PO_QTY_SHORT_FLAG = 1) THEN AA.PO_RCPT_QTY ELSE "NUMERIC"(AA.PO_ASN_ORDER_QTY) END AS PO_RCPT_QTY_VC, CASE WHEN (((((AA.STATUS_ID = '10'::"VARCHAR") OR (AA.STATUS_ID = '11'::"VARCHAR")) OR ((AA.STATUS_ID = '12'::"VARCHAR") OR (AA.STATUS_ID = '29'::"VARCHAR"))) OR (((AA.STATUS_ID = '30'::"VARCHAR") OR (AA.STATUS_ID = '31'::"VARCHAR")) OR ((AA.STATUS_ID = '32'::"VARCHAR") OR (AA.STATUS_ID = '33'::"VARCHAR")))) OR ((((AA.STATUS_ID = '35'::"VARCHAR") OR (AA.STATUS_ID = '36'::"VARCHAR")) OR ((AA.STATUS_ID = '37'::"VARCHAR") OR (AA.STATUS_ID = '38'::"VARCHAR"))) OR ((AA.STATUS_ID = '39'::"VARCHAR") OR (AA.STATUS_ID = '51'::"VARCHAR")))) THEN CASE WHEN (AA.PO_QTY_SHORT_FLAG = 1) THEN AA.PO_RCPT_QTY ELSE "NUMERIC"(AA.PO_ASN_ORDER_QTY) END ELSE '0'::NUMERIC END AS PO_RCPT_QTY_VC_PREMIUM, CASE WHEN (((((AA.STATUS_ID <> '10'::"VARCHAR") AND (AA.STATUS_ID <> '11'::"VARCHAR")) AND ((AA.STATUS_ID <> '12'::"VARCHAR") AND (AA.STATUS_ID <> '29'::"VARCHAR"))) AND (((AA.STATUS_ID <> '30'::"VARCHAR") AND (AA.STATUS_ID <> '31'::"VARCHAR")) AND ((AA.STATUS_ID <> '32'::"VARCHAR") AND (AA.STATUS_ID <> '33'::"VARCHAR")))) AND ((((AA.STATUS_ID <> '35'::"VARCHAR") AND (AA.STATUS_ID <> '36'::"VARCHAR")) AND ((AA.STATUS_ID <> '37'::"VARCHAR") AND (AA.STATUS_ID <> '38'::"VARCHAR"))) AND ((AA.STATUS_ID <> '39'::"VARCHAR") AND (AA.STATUS_ID <> '51'::"VARCHAR")))) THEN CASE WHEN (AA.PO_QTY_SHORT_FLAG = 1) THEN AA.PO_RCPT_QTY ELSE "NUMERIC"(AA.PO_ASN_ORDER_QTY) END ELSE '0'::NUMERIC END AS PO_RCPT_QTY_VC_REGULAR, CASE WHEN ((AA.PO_ASN_ORDER_QTY NOTNULL) AND (AA.PO_ORIG_ORDER_QTY <> "NUMERIC"(AA.PO_ASN_ORDER_QTY))) THEN 1 ELSE 0 END AS PO_QTY_REVISED_FLAG, B.QUOTED_LEADTIME, B.SCM_PO_REF_NBR, B.SAP_ASN_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, CASE WHEN (B.REASON_ID ISNULL) THEN '0'::INT8 ELSE B.REASON_ID END AS REASON_ID, CASE WHEN (B.EXPLANATION_ID ISNULL) THEN '0'::INT8 ELSE B.EXPLANATION_ID END AS EXPLANATION_ID, B.SAP_ORIGINAL_PO_DUE_DT, B.SAP_REVISED_PO_DUE_DT, B.RTS_CREATION_TSTMP, B.MUST_SHIP_BY_TSTMP, B.SCM_OCEAN_CARRIER_ID, B.PO_PICKUP_END, B.DC_APPT_LOCAL_TSTMP, B.DC_GATE_LOCAL_TSTMP, B.DC_FIRST_RCPT_LOCAL_TSTMP, B.DC_LAST_RCPT_LOCAL_TSTMP, B.DC_VERIFY_LOCAL_TSTMP, B.SAP_PO_RELEASE_DT, B.ASN_RCVD_TSTMP_LOCAL, B.SAP_PO_CREATE_DT, B.MUST_SHIP_BY_DT, B.SCM_PO_REF_TXT, B.SCM_PO_STATUS_ID, CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END AS PO_DAYS_LATE, CASE WHEN (B.SAP_ORIGINAL_PO_DUE_DT ISNULL) THEN DATE_PART('DAY'::"VARCHAR", (AA.PO_ORIG_DUE_DT - A.PO_DOC_DT)) ELSE DATE_PART('DAY'::"VARCHAR", (B.SAP_ORIGINAL_PO_DUE_DT - B.SAP_PO_CREATE_DT)) END AS LEAD_TIME_PO_REVISED_CALC, DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_PO_CREATE_DT)) AS LEAD_TIME_ACTUAL, (DATE_PART('HOURS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) + (DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) * 24)) AS WMS_DC_HOURS_IN_YARD, CASE WHEN (DATE_PART('DAY'::"VARCHAR", (B.DC_VERIFY_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) > 0) THEN 1 ELSE 0 END AS DC_LATE_VERIFY_FLAG, ZZ.SCM_PO_STATUS_DESC, CASE WHEN (A.PO_QTY_SHORT_FLAG = 1) THEN CASE WHEN (A.PO_PREMIUM_FLG = 1) THEN 1 ELSE 0 END ELSE 0 END AS PO_FILL_RATE_PO_FAILURE_FLAG_PREMIUM, CASE WHEN (A.PO_QTY_SHORT_FLAG = 1) THEN CASE WHEN (A.PO_PREMIUM_FLG = 0) THEN 1 ELSE 0 END ELSE 0 END AS PO_FILL_RATE_PO_FAILURE_FLAG_REGULAR, CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) < B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", (B.SAP_ORIGINAL_PO_DUE_DT - "TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)))) ELSE NULL::INT8 END END AS PO_DAYS_EARLY, CASE WHEN ((AA.PO_QTY_SHORT_FLAG = 1) AND (((((AA.STATUS_ID = '10'::"VARCHAR") OR (AA.STATUS_ID = '11'::"VARCHAR")) OR ((AA.STATUS_ID = '12'::"VARCHAR") OR (AA.STATUS_ID = '29'::"VARCHAR"))) OR (((AA.STATUS_ID = '30'::"VARCHAR") OR (AA.STATUS_ID = '31'::"VARCHAR")) OR ((AA.STATUS_ID = '32'::"VARCHAR") OR (AA.STATUS_ID = '33'::"VARCHAR")))) OR ((((AA.STATUS_ID = '35'::"VARCHAR") OR (AA.STATUS_ID = '36'::"VARCHAR")) OR ((AA.STATUS_ID = '37'::"VARCHAR") OR (AA.STATUS_ID = '38'::"VARCHAR"))) OR ((AA.STATUS_ID = '39'::"VARCHAR") OR (AA.STATUS_ID = '51'::"VARCHAR"))))) THEN (AA.PO_ASN_ORDER_QTY - AA.PO_RCPT_QTY_VC) ELSE NULL::INT4 END AS SUM_SHORTED_UNITS_PREIMUM, CASE WHEN (((AA.PO_QTY_SHORT_FLAG = 1) AND (AA.STATUS_ID NOTNULL)) AND (((((AA.STATUS_ID <> '10'::"VARCHAR") AND (AA.STATUS_ID <> '11'::"VARCHAR")) AND ((AA.STATUS_ID <> '12'::"VARCHAR") AND (AA.STATUS_ID <> '29'::"VARCHAR"))) AND (((AA.STATUS_ID <> '30'::"VARCHAR") AND (AA.STATUS_ID <> '31'::"VARCHAR")) AND ((AA.STATUS_ID <> '32'::"VARCHAR") AND (AA.STATUS_ID <> '33'::"VARCHAR")))) AND ((((AA.STATUS_ID <> '35'::"VARCHAR") AND (AA.STATUS_ID <> '36'::"VARCHAR")) AND ((AA.STATUS_ID <> '37'::"VARCHAR") AND (AA.STATUS_ID <> '38'::"VARCHAR"))) AND ((AA.STATUS_ID <> '39'::"VARCHAR") AND (AA.STATUS_ID <> '51'::"VARCHAR"))))) THEN (AA.PO_ASN_ORDER_QTY - AA.PO_RCPT_QTY_VC) ELSE NULL::INT4 END AS SUM_SHORTED_UNITS_REGULAR, CASE WHEN ((AA.PO_QTY_SHORT_FLAG = 1) AND (((((AA.STATUS_ID = '10'::"VARCHAR") OR (AA.STATUS_ID = '11'::"VARCHAR")) OR ((AA.STATUS_ID = '12'::"VARCHAR") OR (AA.STATUS_ID = '29'::"VARCHAR"))) OR (((AA.STATUS_ID = '30'::"VARCHAR") OR (AA.STATUS_ID = '31'::"VARCHAR")) OR ((AA.STATUS_ID = '32'::"VARCHAR") OR (AA.STATUS_ID = '33'::"VARCHAR")))) OR ((((AA.STATUS_ID = '35'::"VARCHAR") OR (AA.STATUS_ID = '36'::"VARCHAR")) OR ((AA.STATUS_ID = '37'::"VARCHAR") OR (AA.STATUS_ID = '38'::"VARCHAR"))) OR ((AA.STATUS_ID = '39'::"VARCHAR") OR (AA.STATUS_ID = '51'::"VARCHAR"))))) THEN AA.PO_NET_COST ELSE NULL::"NUMERIC" END AS VALUE_SKU_SHORTED_PREIMUM, CASE WHEN (((AA.PO_QTY_SHORT_FLAG = 1) AND (AA.STATUS_ID NOTNULL)) AND (((((AA.STATUS_ID <> '10'::"VARCHAR") AND (AA.STATUS_ID <> '11'::"VARCHAR")) AND ((AA.STATUS_ID <> '12'::"VARCHAR") AND (AA.STATUS_ID <> '29'::"VARCHAR"))) AND (((AA.STATUS_ID <> '30'::"VARCHAR") AND (AA.STATUS_ID <> '31'::"VARCHAR")) AND ((AA.STATUS_ID <> '32'::"VARCHAR") AND (AA.STATUS_ID <> '33'::"VARCHAR")))) AND ((((AA.STATUS_ID <> '35'::"VARCHAR") AND (AA.STATUS_ID <> '36'::"VARCHAR")) AND ((AA.STATUS_ID <> '37'::"VARCHAR") AND (AA.STATUS_ID <> '38'::"VARCHAR"))) AND ((AA.STATUS_ID <> '39'::"VARCHAR") AND (AA.STATUS_ID <> '51'::"VARCHAR"))))) THEN AA.PO_NET_COST ELSE NULL::"NUMERIC" END AS VALUE_SKU_SHORTED_REGULAR, CASE WHEN ((AA.PO_QTY_SHORT_FLAG = 1) AND (((((AA.STATUS_ID = '10'::"VARCHAR") OR (AA.STATUS_ID = '11'::"VARCHAR")) OR ((AA.STATUS_ID = '12'::"VARCHAR") OR (AA.STATUS_ID = '29'::"VARCHAR"))) OR (((AA.STATUS_ID = '30'::"VARCHAR") OR (AA.STATUS_ID = '31'::"VARCHAR")) OR ((AA.STATUS_ID = '32'::"VARCHAR") OR (AA.STATUS_ID = '33'::"VARCHAR")))) OR ((((AA.STATUS_ID = '35'::"VARCHAR") OR (AA.STATUS_ID = '36'::"VARCHAR")) OR ((AA.STATUS_ID = '37'::"VARCHAR") OR (AA.STATUS_ID = '38'::"VARCHAR"))) OR ((AA.STATUS_ID = '39'::"VARCHAR") OR (AA.STATUS_ID = '51'::"VARCHAR"))))) THEN AA.PO_ASN_ORDER_QTY ELSE NULL::INT4 END AS SUM_SHORTED_ORDERED_PREIMUM, CASE WHEN (((AA.PO_QTY_SHORT_FLAG = 1) AND (AA.STATUS_ID NOTNULL)) AND (((((AA.STATUS_ID <> '10'::"VARCHAR") AND (AA.STATUS_ID <> '11'::"VARCHAR")) AND ((AA.STATUS_ID <> '12'::"VARCHAR") AND (AA.STATUS_ID <> '29'::"VARCHAR"))) AND (((AA.STATUS_ID <> '30'::"VARCHAR") AND (AA.STATUS_ID <> '31'::"VARCHAR")) AND ((AA.STATUS_ID <> '32'::"VARCHAR") AND (AA.STATUS_ID <> '33'::"VARCHAR")))) AND ((((AA.STATUS_ID <> '35'::"VARCHAR") AND (AA.STATUS_ID <> '36'::"VARCHAR")) AND ((AA.STATUS_ID <> '37'::"VARCHAR") AND (AA.STATUS_ID <> '38'::"VARCHAR"))) AND ((AA.STATUS_ID <> '39'::"VARCHAR") AND (AA.STATUS_ID <> '51'::"VARCHAR"))))) THEN AA.PO_ASN_ORDER_QTY ELSE NULL::INT4 END AS SUM_SHORTED_ORDERED_REGULAR, CASE WHEN ((AA.PO_QTY_SHORT_FLAG = 1) AND (((((AA.STATUS_ID = '10'::"VARCHAR") OR (AA.STATUS_ID = '11'::"VARCHAR")) OR ((AA.STATUS_ID = '12'::"VARCHAR") OR (AA.STATUS_ID = '29'::"VARCHAR"))) OR (((AA.STATUS_ID = '30'::"VARCHAR") OR (AA.STATUS_ID = '31'::"VARCHAR")) OR ((AA.STATUS_ID = '32'::"VARCHAR") OR (AA.STATUS_ID = '33'::"VARCHAR")))) OR ((((AA.STATUS_ID = '35'::"VARCHAR") OR (AA.STATUS_ID = '36'::"VARCHAR")) OR ((AA.STATUS_ID = '37'::"VARCHAR") OR (AA.STATUS_ID = '38'::"VARCHAR"))) OR ((AA.STATUS_ID = '39'::"VARCHAR") OR (AA.STATUS_ID = '51'::"VARCHAR"))))) THEN ((AA.PO_NET_COST / CASE WHEN (AA.PO_ORDER_QTY = '0'::NUMERIC) THEN NULL::"NUMERIC" ELSE AA.PO_ORDER_QTY END) * "NUMERIC"((AA.PO_ASN_ORDER_QTY - AA.PO_RCPT_QTY_VC))) ELSE NULL::"NUMERIC" END AS VALUE_UNITS_SHORTED_PREIMUM, CASE WHEN (((AA.PO_QTY_SHORT_FLAG = 1) AND (AA.STATUS_ID NOTNULL)) AND (((((AA.STATUS_ID <> '10'::"VARCHAR") AND (AA.STATUS_ID <> '11'::"VARCHAR")) AND ((AA.STATUS_ID <> '12'::"VARCHAR") AND (AA.STATUS_ID <> '29'::"VARCHAR"))) AND (((AA.STATUS_ID <> '30'::"VARCHAR") AND (AA.STATUS_ID <> '31'::"VARCHAR")) AND ((AA.STATUS_ID <> '32'::"VARCHAR") AND (AA.STATUS_ID <> '33'::"VARCHAR")))) AND ((((AA.STATUS_ID <> '35'::"VARCHAR") AND (AA.STATUS_ID <> '36'::"VARCHAR")) AND ((AA.STATUS_ID <> '37'::"VARCHAR") AND (AA.STATUS_ID <> '38'::"VARCHAR"))) AND ((AA.STATUS_ID <> '39'::"VARCHAR") AND (AA.STATUS_ID <> '51'::"VARCHAR"))))) THEN ((AA.PO_NET_COST / CASE WHEN (AA.PO_ORDER_QTY = '0'::NUMERIC) THEN NULL::"NUMERIC" ELSE AA.PO_ORDER_QTY END) * "NUMERIC"((AA.PO_ASN_ORDER_QTY - AA.PO_RCPT_QTY_VC))) ELSE NULL::"NUMERIC" END AS VALUE_UNITS_SHORTED_REGULAR, G.ALERT_ID, G.ALERT_NAME, G.ALERT_MESSAGE, G.ALERT_COMMENTS, J.INBOUND_REASON_ID, J.REASON_CD_ID, J.EXPLANATION_CD_ID, J.SHORT_DESC, J.REASON_DESC, J.EXPLANATION_DESC, J.IB_OB_CATEGORY, J.IB_OB_PRIORITY, P.IDENTIFIER, P.PO_GUID, A30.DA_QTY, A31.DA_QTY_1, A32.EX_QTY, A33.EX_QTY_1, A34.OB_QTY, A35.OB_QTY_1, A36.RD_QTY, A37.RD_QTY_1, A38.IS_QTY, A39.IS_QTY_1, A40.RC_QTY, A41.RC_QTY_1, DATE(B.DC_VERIFY_LOCAL_TSTMP) AS DC_VERIFY_DAY_DT FROM (((((((((((((((((((ADMIN.PO_HDR_FACT A LEFT JOIN ADMIN.PO_LN_FACT AA ON (((A.PO_GID = AA.PO_GID) AND (A.PO_NBR = AA.PO_NBR)))) LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN ADMIN.SCM_PO_ALERTS G ON ((((B.ALERT_ID = G.ALERT_ID) AND (B.SCM_PO_GID = G.SCM_PO_GID)) AND (B.SCM_SOURCE_TYPE_ID = G.SCM_SOURCE_TYPE_ID)))) LEFT JOIN ADMIN.SCM_REASON_CATEGORY J ON ((((B.EXPLANATION_ID = J.EXPLANATION_ID) AND (B.IB_OB_FLAG = J.IB_OB_FLAG)) AND (B.REASON_ID = J.REASON_ID)))) LEFT JOIN (SELECT VC_DEDUCTIONS.IDENTIFIER, VC_DEDUCTIONS.PO_GUID FROM ADMIN.VC_DEDUCTIONS GROUP BY VC_DEDUCTIONS.IDENTIFIER, VC_DEDUCTIONS.PO_GUID) P ON (((A.PO_NBR = INT8(P.IDENTIFIER)) AND (A.PO_GID = INT4(P.PO_GUID))))) LEFT JOIN ADMIN.SCM_PO_STATUS ZZ ON (("NUMERIC"(B.SCM_PO_STATUS_ID) = ZZ.SCM_PO_STATUS_ID))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS DA_QTY FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (73, 74)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A30 ON ((((AA.PRODUCT_ID = A30.PRODUCT_ID) AND (AA.LOCATION_ID = A30.LOCATION_ID)) AND ("TIMESTAMP"(DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP)) = A30.DAY_DT)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS DA_QTY_1, (DATE(T1.DAY_DT) - 1) AS DAY_DT_ADJ FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (73, 74)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A31 ON ((((AA.PRODUCT_ID = A31.PRODUCT_ID) AND (AA.LOCATION_ID = A31.LOCATION_ID)) AND (DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP) = A31.DAY_DT_ADJ)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS EX_QTY FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (104, 105)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A32 ON ((((AA.PRODUCT_ID = A32.PRODUCT_ID) AND (AA.LOCATION_ID = A32.LOCATION_ID)) AND ("TIMESTAMP"(DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP)) = A32.DAY_DT)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS EX_QTY_1, (DATE(T1.DAY_DT) - 1) AS DAY_DT_ADJ FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (104, 105)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A33 ON ((((AA.PRODUCT_ID = A33.PRODUCT_ID) AND (AA.LOCATION_ID = A33.LOCATION_ID)) AND (DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP) = A33.DAY_DT_ADJ)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS OB_QTY FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (106, 107)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A34 ON ((((AA.PRODUCT_ID = A34.PRODUCT_ID) AND (AA.LOCATION_ID = A34.LOCATION_ID)) AND ("TIMESTAMP"(DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP)) = A34.DAY_DT)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS OB_QTY_1, (DATE(T1.DAY_DT) - 1) AS DAY_DT_ADJ FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (106, 107)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A35 ON ((((AA.PRODUCT_ID = A35.PRODUCT_ID) AND (AA.LOCATION_ID = A35.LOCATION_ID)) AND (DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP) = A35.DAY_DT_ADJ)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS RD_QTY FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (110, 111)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A36 ON ((((AA.PRODUCT_ID = A36.PRODUCT_ID) AND (AA.LOCATION_ID = A36.LOCATION_ID)) AND ("TIMESTAMP"(DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP)) = A36.DAY_DT)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS RD_QTY_1, (DATE(T1.DAY_DT) - 1) AS DAY_DT_ADJ FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (110, 111)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A37 ON ((((AA.PRODUCT_ID = A37.PRODUCT_ID) AND (AA.LOCATION_ID = A37.LOCATION_ID)) AND (DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP) = A37.DAY_DT_ADJ)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS IS_QTY FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (112, 113)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A38 ON ((((AA.PRODUCT_ID = A38.PRODUCT_ID) AND (AA.LOCATION_ID = A38.LOCATION_ID)) AND ("TIMESTAMP"(DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP)) = A38.DAY_DT)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS IS_QTY_1, (DATE(T1.DAY_DT) - 1) AS DAY_DT_ADJ FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_REASON_ID IN (112, 113)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A39 ON ((((AA.PRODUCT_ID = A39.PRODUCT_ID) AND (AA.LOCATION_ID = A39.LOCATION_ID)) AND (DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP) = A39.DAY_DT_ADJ)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS RC_QTY FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_TYPE_ID IN (918)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A40 ON ((((AA.PRODUCT_ID = A40.PRODUCT_ID) AND (AA.LOCATION_ID = A40.LOCATION_ID)) AND ("TIMESTAMP"(DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP)) = A40.DAY_DT)))) LEFT JOIN (SELECT T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID, SUM(T1.TRANS_QTY) AS RC_QTY_1, (DATE(T1.DAY_DT) - 1) AS DAY_DT_ADJ FROM (ADMIN.MOVEMENT_DAY T1 JOIN ADMIN.MOVEMENT_INFO T2 ON ((T1.MOVEMENT_ID = T2.MOVEMENT_ID))) WHERE (T2.MOVE_TYPE_ID IN (918)) GROUP BY T1.DAY_DT, T1.LOCATION_ID, T1.PRODUCT_ID) A41 ON ((((AA.PRODUCT_ID = A41.PRODUCT_ID) AND (AA.LOCATION_ID = A41.LOCATION_ID)) AND (DATE(B.DC_FIRST_RCPT_LOCAL_TSTMP) = A41.DAY_DT_ADJ)))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A.PO_NBR = A12.PO_NBR) AND (A.PO_GID = A12.PO_GID))));

\echo
\echo *****  Creating view:  "PO_FACT_HDR_VW"

CREATE or replace VIEW  PO_FACT_HDR_VW
(
     PO_GID,
     PO_NBR,
     PO_DUE_DT,
     LOCATION_ID,
     VENDOR_ID,
     PO_REF_NBR,
     PO_DOC_DT,
     INCO_TERM_CD,
     PO_LINE_CNT,
     PO_QTY_SHORT_FLAG_HDR,
     PO_QTY_OVER_FLAG_HDR,
     PREMIUM_FLAG_HDR,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     SAP_PO_RELEASE_DT,
     SAP_ASN_ID,
     ASN_RCVD_TSTMP_LOCAL,
     SCM_OCEAN_CARRIER_ID,
     QUOTED_LEADTIME,
     SAP_ORIGINAL_PO_DUE_DT,
     SAP_REVISED_PO_DUE_DT,
     RTS_CREATION_TSTMP,
     DC_APPT_LOCAL_TSTMP,
     DC_GATE_LOCAL_TSTMP,
     DC_FIRST_RCPT_LOCAL_TSTMP,
     DC_LAST_RCPT_LOCAL_TSTMP,
     DC_VERIFY_LOCAL_TSTMP,
     PO_ONTIME_FAILURE_SEGMENT,
     WMS_DC_HOURS_IN_YARD,
     WMS_DC_DAYS_IN_YARD,
     PO_DAYS_EARLY,
     LEAD_TIME_ACTUAL,
     PO_REF_FLAG,
     PO_FAILURE_FLAG_ASN_MISSING,
     ASN_FAILURE_FLAG_MISSING,
     ASN_FAILURE_FLAG_LATE,
     ASN_FAILURE_FLAG_TOTAL,
     DC_LATE_VERIFY_FLAG,
     PO_DUE_DT_REVISED_FLAG,
     PO_FILL_RATE_PO_FAILURE_FLAG_PREMIUM,
     PO_FILL_RATE_PO_FAILURE_FLAG_REGULAR,
     PO_ONTIME_FAILURE_FLAG_TOTAL,
     PO_ONTIME_FAILURE_VENDOR,
     PO_FAILURE_FLAG,
     PO_ONTIME_FAILURE_FLAG_CARRIER,
     PO_ONTIME_FAILURE_FLAG_DC,
     PO_ONTIME_FAILURE_FLAG_HOME_OFF,
     PO_ONTIME_FAILURE_FLAG_OTHER,
     PO_ONTIME_FAILURE_FLAG_STORE,
     PO_ONTIME_FAILURE_FLAG_UNKNOWN,
     PO_DAYS_LATE,
     PO_DAYS_LATE_TOTAL,
     PO_DAYS_LATE_VENDOR,
     PO_DAYS_LATE_CARRIER,
     PO_DAYS_LATE_DC,
     PO_DAYS_LATE_HOME_OFF,
     PO_DAYS_LATE_OTHER,
     PO_DAYS_LATE_STORE,
     PO_DAYS_LATE_UNKNOWN,
     RTS_FAIL_FLAG,
     WMS_DC_DELIVERY_SCHEDULED_FLAG,
     PO_FAILURE_FLAG_ASN_LATE,
     WMS_DC_HOURS_TO_VERIFY,
     MUST_SHIP_BY_TSTMP,
     ALERT_ID,
     ALERT_NAME,
     ALERT_MESSAGE,
     ALERT_COMMENTS,
     CNT_WMS_DC_CASE_ID,
     EXPLANATION_ID,
     REASON_ID,
     INBOUND_REASON_ID,
     REASON_CD_ID,
     EXPLANATION_CD_ID,
     SHORT_DESC,
     REASON_DESC,
     EXPLANATION_DESC,
     IB_OB_CATEGORY,
     IB_OB_PRIORITY,
     WMS_DC_APPT_DTTM_REV,
     WMS_DC_APPT_NBR,
     WMS_DC_SHPMT_NBR,
     WMS_DC_TRLR_NBR,
     DC_VERIFY_DAY_DT,
     PO_DAYS_LATE_GROUPING,
     WMS_DC_DAYS_IN_YARD_GROUPING
) AS
SELECT A.PO_GID, A.PO_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, A.LOCATION_ID, A.VENDOR_ID, A.PO_REF_NBR, A.PO_DOC_DT, A.INCO_TERM_CD, A.PO_LINE_CNT, A.PO_QTY_SHORT_FLAG AS PO_QTY_SHORT_FLAG_HDR, A.PO_QTY_OVER_FLAG AS PO_QTY_OVER_FLAG_HDR, A.PO_PREMIUM_FLG AS PREMIUM_FLAG_HDR, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, B.SAP_PO_RELEASE_DT, B.SAP_ASN_ID, B.ASN_RCVD_TSTMP_LOCAL, B.SCM_OCEAN_CARRIER_ID, B.QUOTED_LEADTIME, B.SAP_ORIGINAL_PO_DUE_DT, B.SAP_REVISED_PO_DUE_DT, B.RTS_CREATION_TSTMP, B.DC_APPT_LOCAL_TSTMP, B.DC_GATE_LOCAL_TSTMP, B.DC_FIRST_RCPT_LOCAL_TSTMP, B.DC_LAST_RCPT_LOCAL_TSTMP, B.DC_VERIFY_LOCAL_TSTMP, CASE WHEN (((B.REASON_ID = 35) OR (B.REASON_ID = 55)) OR (B.REASON_ID = 57)) THEN 'VENDOR'::"VARCHAR" ELSE CASE WHEN ((((B.REASON_ID = 5) OR (B.REASON_ID = 70)) OR ((B.REASON_ID = 50) OR (B.REASON_ID = 45))) OR (B.REASON_ID = 40)) THEN 'CARRIER'::"VARCHAR" ELSE CASE WHEN (B.REASON_ID = 10) THEN 'DC'::"VARCHAR" ELSE CASE WHEN (((B.REASON_ID = 30) OR (B.REASON_ID = 20)) OR (B.REASON_ID = 25)) THEN 'HOME OFFICE'::"VARCHAR" ELSE CASE WHEN (B.REASON_ID = 1) THEN 'STORE'::"VARCHAR" ELSE CASE WHEN (B.REASON_ID = 15) THEN 'OTHER'::"VARCHAR" ELSE CASE WHEN (B.REASON_ID = 80) THEN 'UNKNOWN'::"VARCHAR" ELSE NULL::"VARCHAR" END END END END END END END AS PO_ONTIME_FAILURE_SEGMENT, (DATE_PART('HOURS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) + (DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) * 24)) AS WMS_DC_HOURS_IN_YARD, DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) AS WMS_DC_DAYS_IN_YARD, CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) < B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", (B.SAP_ORIGINAL_PO_DUE_DT - "TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)))) ELSE NULL::INT8 END END AS PO_DAYS_EARLY, DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_PO_CREATE_DT)) AS LEAD_TIME_ACTUAL, CASE WHEN ((A.PO_REF_NBR ISNULL) OR (A.PO_REF_NBR = 0)) THEN 0 ELSE 1 END AS PO_REF_FLAG, CASE WHEN (B.SAP_ASN_ID ISNULL) THEN 1 ELSE NULL::INT4 END AS PO_FAILURE_FLAG_ASN_MISSING, CASE WHEN (A.PO_REF_NBR > 0) THEN NULL::INT4 ELSE CASE WHEN (B.SAP_ASN_ID ISNULL) THEN 1 ELSE NULL::INT4 END END AS ASN_FAILURE_FLAG_MISSING, CASE WHEN (A.PO_REF_NBR > 0) THEN NULL::INT4 ELSE CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT4 ELSE CASE WHEN (B.ASN_RCVD_TSTMP_LOCAL > B.DC_GATE_LOCAL_TSTMP) THEN 1 ELSE NULL::INT4 END END END AS ASN_FAILURE_FLAG_LATE, CASE WHEN (A.PO_REF_NBR > 0) THEN NULL::INT4 ELSE CASE WHEN (B.SAP_ASN_ID ISNULL) THEN 1 ELSE CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT4 ELSE CASE WHEN (B.ASN_RCVD_TSTMP_LOCAL > B.DC_GATE_LOCAL_TSTMP) THEN 1 ELSE NULL::INT4 END END END END AS ASN_FAILURE_FLAG_TOTAL, CASE WHEN (DATE_PART('DAY'::"VARCHAR", (B.DC_VERIFY_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) > 0) THEN 1 ELSE 0 END AS DC_LATE_VERIFY_FLAG, CASE WHEN (B.SAP_REVISED_PO_DUE_DT ISNULL) THEN NULL::INT4 ELSE 1 END AS PO_DUE_DT_REVISED_FLAG, CASE WHEN (A.PO_QTY_SHORT_FLAG = 1) THEN CASE WHEN (A.PO_PREMIUM_FLG = 1) THEN 1 ELSE 0 END ELSE 0 END AS PO_FILL_RATE_PO_FAILURE_FLAG_PREMIUM, CASE WHEN (A.PO_QTY_SHORT_FLAG = 1) THEN CASE WHEN (A.PO_PREMIUM_FLG = 0) THEN 1 ELSE 0 END ELSE 0 END AS PO_FILL_RATE_PO_FAILURE_FLAG_REGULAR, CASE WHEN (((((B.REASON_ID = 1) OR (B.REASON_ID = 5)) OR ((B.REASON_ID = 40) OR (B.REASON_ID = 10))) OR (((B.REASON_ID = 15) OR (B.REASON_ID = 45)) OR ((B.REASON_ID = 30) OR (B.REASON_ID = 20)))) OR ((((B.REASON_ID = 25) OR (B.REASON_ID = 50)) OR ((B.REASON_ID = 55) OR (B.REASON_ID = 70))) OR (((B.REASON_ID = 80) OR (B.REASON_ID = 35)) OR (B.REASON_ID = 57)))) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_FLAG_TOTAL, CASE WHEN (((B.REASON_ID = 35) OR (B.REASON_ID = 55)) OR (B.REASON_ID = 57)) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_VENDOR, CASE WHEN (CASE WHEN (((B.REASON_ID = 35) OR (B.REASON_ID = 55)) OR (B.REASON_ID = 57)) THEN 1 ELSE NULL::INT4 END = 1) THEN 1 ELSE CASE WHEN (CASE WHEN (A.PO_QTY_SHORT_FLAG = 1) THEN CASE WHEN (A.PO_PREMIUM_FLG = 1) THEN 1 ELSE 0 END ELSE 0 END = 1) THEN 1 ELSE CASE WHEN (CASE WHEN (A.PO_QTY_SHORT_FLAG = 1) THEN CASE WHEN (A.PO_PREMIUM_FLG = 0) THEN 1 ELSE 0 END ELSE 0 END = 1) THEN 1 ELSE CASE WHEN (CASE WHEN (A.PO_REF_NBR > 0) THEN NULL::INT4 ELSE CASE WHEN (B.SAP_ASN_ID ISNULL) THEN 1 ELSE CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT4 ELSE CASE WHEN (B.ASN_RCVD_TSTMP_LOCAL > B.DC_GATE_LOCAL_TSTMP) THEN 1 ELSE NULL::INT4 END END END END = 1) THEN 1 ELSE 0 END END END END AS PO_FAILURE_FLAG, CASE WHEN ((((B.REASON_ID = 5) OR (B.REASON_ID = 70)) OR ((B.REASON_ID = 50) OR (B.REASON_ID = 45))) OR (B.REASON_ID = 40)) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_FLAG_CARRIER, CASE WHEN (B.REASON_ID = 10) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_FLAG_DC, CASE WHEN (((B.REASON_ID = 30) OR (B.REASON_ID = 20)) OR (B.REASON_ID = 25)) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_FLAG_HOME_OFF, CASE WHEN (B.REASON_ID = 15) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_FLAG_OTHER, CASE WHEN (B.REASON_ID = 1) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_FLAG_STORE, CASE WHEN (B.REASON_ID = 80) THEN 1 ELSE NULL::INT4 END AS PO_ONTIME_FAILURE_FLAG_UNKNOWN, CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END AS PO_DAYS_LATE, CASE WHEN (CASE WHEN (((((B.REASON_ID = 1) OR (B.REASON_ID = 5)) OR ((B.REASON_ID = 40) OR (B.REASON_ID = 10))) OR (((B.REASON_ID = 15) OR (B.REASON_ID = 45)) OR ((B.REASON_ID = 30) OR (B.REASON_ID = 20)))) OR ((((B.REASON_ID = 25) OR (B.REASON_ID = 50)) OR ((B.REASON_ID = 55) OR (B.REASON_ID = 70))) OR (((B.REASON_ID = 80) OR (B.REASON_ID = 35)) OR (B.REASON_ID = 57)))) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_TOTAL, CASE WHEN (CASE WHEN (((B.REASON_ID = 35) OR (B.REASON_ID = 55)) OR (B.REASON_ID = 57)) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_VENDOR, CASE WHEN (CASE WHEN ((((B.REASON_ID = 5) OR (B.REASON_ID = 70)) OR ((B.REASON_ID = 50) OR (B.REASON_ID = 45))) OR (B.REASON_ID = 40)) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_CARRIER, CASE WHEN (CASE WHEN (B.REASON_ID = 10) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_DC, CASE WHEN (CASE WHEN (((B.REASON_ID = 30) OR (B.REASON_ID = 20)) OR (B.REASON_ID = 25)) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_HOME_OFF, CASE WHEN (CASE WHEN (B.REASON_ID = 15) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_OTHER, CASE WHEN (CASE WHEN (B.REASON_ID = 1) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_STORE, CASE WHEN (CASE WHEN (B.REASON_ID = 80) THEN 1 ELSE NULL::INT4 END = 1) THEN CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END ELSE NULL::INT8 END AS PO_DAYS_LATE_UNKNOWN, CASE WHEN (B.RTS_CREATION_TSTMP > (B.MUST_SHIP_BY_TSTMP + (-2 * '1 day'::"INTERVAL"))) THEN 1 ELSE 0 END AS RTS_FAIL_FLAG, CASE WHEN (B.DC_APPT_LOCAL_TSTMP > (B.DC_GATE_LOCAL_TSTMP + (-2 * '1 day'::"INTERVAL"))) THEN 1 ELSE 0 END AS WMS_DC_DELIVERY_SCHEDULED_FLAG, CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN 0 ELSE 1 END AS PO_FAILURE_FLAG_ASN_LATE, (DATE_PART('HOURS'::"VARCHAR", (B.DC_VERIFY_LOCAL_TSTMP - B.DC_FIRST_RCPT_LOCAL_TSTMP)) + (DATE_PART('DAYS'::"VARCHAR", (B.DC_VERIFY_LOCAL_TSTMP - B.DC_FIRST_RCPT_LOCAL_TSTMP)) * 24)) AS WMS_DC_HOURS_TO_VERIFY, B.MUST_SHIP_BY_TSTMP, G.ALERT_ID, G.ALERT_NAME, G.ALERT_MESSAGE, G.ALERT_COMMENTS, ASN.CNT_WMS_DC_CASE_ID, CASE WHEN (B.EXPLANATION_ID ISNULL) THEN '0'::INT8 ELSE B.EXPLANATION_ID END AS EXPLANATION_ID, CASE WHEN (B.REASON_ID ISNULL) THEN '0'::INT8 ELSE B.REASON_ID END AS REASON_ID, J.INBOUND_REASON_ID, J.REASON_CD_ID, J.EXPLANATION_CD_ID, J.SHORT_DESC, J.REASON_DESC, J.EXPLANATION_DESC, J.IB_OB_CATEGORY, J.IB_OB_PRIORITY, APPT.WMS_DC_APPT_DTTM_REV, APPT.WMS_DC_APPT_NBR, APPT.WMS_DC_SHPMT_NBR, APPT.WMS_DC_TRLR_NBR, DATE(B.DC_VERIFY_LOCAL_TSTMP) AS DC_VERIFY_DAY_DT, CASE WHEN (CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END >= 20) THEN '20+'::"VARCHAR" WHEN (CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END <= 0) THEN '00'::"VARCHAR" WHEN ((CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END >= 10) AND (CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END <= 19)) THEN '10-19'::"VARCHAR" ELSE TRANSLATE(LPAD("VARCHAR"(CASE WHEN (B.DC_GATE_LOCAL_TSTMP ISNULL) THEN NULL::INT8 ELSE CASE WHEN ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) > B.SAP_ORIGINAL_PO_DUE_DT) THEN DATE_PART('DAY'::"VARCHAR", ("TIMESTAMP"(DATE(B.DC_GATE_LOCAL_TSTMP)) - B.SAP_ORIGINAL_PO_DUE_DT)) ELSE NULL::INT8 END END), 2), ' '::"VARCHAR", '0'::"VARCHAR") END AS PO_DAYS_LATE_GROUPING, CASE WHEN (DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) >= 20) THEN '20+'::"VARCHAR" WHEN (DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) <= 0) THEN '00'::"VARCHAR" WHEN ((DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) >= 10) AND (DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) <= 19)) THEN '10-19'::"VARCHAR" ELSE TRANSLATE(LPAD("VARCHAR"(DATE_PART('DAYS'::"VARCHAR", (B.DC_FIRST_RCPT_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP))), 2), ' '::"VARCHAR", '0'::"VARCHAR") END AS WMS_DC_DAYS_IN_YARD_GROUPING FROM ((((((ADMIN.PO_HDR_FACT A LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN ADMIN.SCM_PO_ALERTS G ON ((((B.ALERT_ID = G.ALERT_ID) AND (B.SCM_PO_GID = G.SCM_PO_GID)) AND (B.SCM_SOURCE_TYPE_ID = G.SCM_SOURCE_TYPE_ID)))) LEFT JOIN (SELECT A10.PO_NBR, COUNT(DISTINCT A10.CASE_NBR) AS CNT_WMS_DC_CASE_ID FROM ADMIN.VC_ASN_AUDIT_DAY A10 GROUP BY A10.PO_NBR) ASN ON ((A.PO_NBR = ASN.PO_NBR))) LEFT JOIN ADMIN.SCM_REASON_CATEGORY J ON ((((B.EXPLANATION_ID = J.EXPLANATION_ID) AND (B.IB_OB_FLAG = J.IB_OB_FLAG)) AND (B.REASON_ID = J.REASON_ID)))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A.PO_NBR = A12.PO_NBR) AND (A.PO_GID = A12.PO_GID)))) LEFT JOIN (SELECT SCM_PO_DC_APPT.PO_NBR, SCM_PO_DC_APPT.WMS_DC_APPT_DTTM_REV, SCM_PO_DC_APPT.WMS_DC_APPT_NBR, SCM_PO_DC_APPT.WMS_DC_SHPMT_NBR, SCM_PO_DC_APPT.WMS_DC_TRLR_NBR FROM ADMIN.SCM_PO_DC_APPT) APPT ON ((TRANSLATE(LPAD(APPT.PO_NBR, 10), ' '::"VARCHAR", '0'::"VARCHAR") = TRANSLATE(LPAD("VARCHAR"(A.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR"))));

\echo
\echo *****  Creating view:  "PO_SHIPMENT_VW"

CREATE or replace VIEW  PO_SHIPMENT_VW
(
     PO_GID,
     PO_NBR,
     PO_DUE_DT,
     LOCATION_ID,
     VENDOR_ID,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     IB_OB_FLAG,
     SHIPMENT_ID,
     SHIP_TENDER_TSTMP,
     SCM_CARRIER_ID,
     SCM_CARRIER_NAME,
     SCM_TRANS_MODE_CD,
     SCM_ORIG_FACILITY_LOC_ID,
     SHIP_ORIG_FACILITY_LOC_ID,
     SHIP_DEST_FACILITY_LOC_ID,
     STOP_NBR,
     SCM_STOP_TYPE_CD,
     CURRENT_STOP_LOCATION_ID,
     STOP_FACILITY_LOC_ID,
     STOP_APPOINTMENT_TSTMP,
     STOP_APPOINTMENT_LOCAL_TSTMP,
     STOP_ACTUAL_ARR_TSTMP,
     STOP_ACTUAL_ARR_LOCAL_TSTMP,
     STOP_ACTUAL_DEP_TSTMP,
     STOP_ACTUAL_DEP_LOCAL_TSTMP,
     PLANNED_TRANSPORTATION_FLAG,
     CARRIER_EDI_PICKUP_SCHEDULED_LATE_FLAG,
     CARRIER_EDI_PICKUP_ACTUAL_LATE_FLAG,
     WMS_DC_GATE_ARRIVAL_TIMELINESS,
     WMS_DC_GATE_ARRIVAL_TIMELINESS_FLAG,
     MSD_FLAG,
     DC_VERIFY_DAY_DT
) AS
SELECT A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, A10.LOCATION_ID, A10.VENDOR_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, E.IB_OB_FLAG, E.SHIPMENT_ID, F.SHIP_TENDER_TSTMP, F.SCM_CARRIER_ID, F.SCM_CARRIER_NAME, F.SCM_TRANS_MODE_CD, F.SCM_ORIG_FACILITY_LOC_ID, F.SHIP_ORIG_FACILITY_LOC_ID, F.SHIP_DEST_FACILITY_LOC_ID, G.STOP_NBR, G.SCM_STOP_TYPE_CD, G.CURRENT_STOP_LOCATION_ID, G.STOP_FACILITY_LOC_ID, G.STOP_APPOINTMENT_TSTMP, G.STOP_APPOINTMENT_LOCAL_TSTMP, G.STOP_ACTUAL_ARR_TSTMP, G.STOP_ACTUAL_ARR_LOCAL_TSTMP, G.STOP_ACTUAL_DEP_TSTMP, G.STOP_ACTUAL_DEP_LOCAL_TSTMP, CASE WHEN (F.SHIP_TENDER_TSTMP > (B.MUST_SHIP_BY_TSTMP + (-1 * '1 day'::"INTERVAL"))) THEN 1 ELSE 0 END AS PLANNED_TRANSPORTATION_FLAG, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'PU'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = B.PO_ORIG_LOCATION_ID)) THEN CASE WHEN (G.STOP_APPOINTMENT_LOCAL_TSTMP > B.MUST_SHIP_BY_TSTMP) THEN 1 ELSE 0 END ELSE 0 END AS CARRIER_EDI_PICKUP_SCHEDULED_LATE_FLAG, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'PU'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = B.PO_ORIG_LOCATION_ID)) THEN CASE WHEN (G.STOP_ACTUAL_DEP_TSTMP > (G.STOP_APPOINTMENT_TSTMP + (0.084 * '1 day'::"INTERVAL"))) THEN 1 ELSE 0 END ELSE 0 END AS CARRIER_EDI_PICKUP_ACTUAL_LATE_FLAG, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'DL'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = A10.LOCATION_ID)) THEN (DATE_PART('HOURS'::"VARCHAR", (G.STOP_ACTUAL_ARR_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) + (DATE_PART('DAYS'::"VARCHAR", (G.STOP_ACTUAL_ARR_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) * 24)) ELSE '0'::INT8 END AS WMS_DC_GATE_ARRIVAL_TIMELINESS, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'DL'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = A10.LOCATION_ID)) THEN CASE WHEN (ABS(DATE_PART('HOURS'::"VARCHAR", (G.STOP_ACTUAL_ARR_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP))) >= 1) THEN 1 ELSE NULL::INT4 END ELSE 0 END AS WMS_DC_GATE_ARRIVAL_TIMELINESS_FLAG, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'PU'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = B.PO_ORIG_LOCATION_ID)) THEN CASE WHEN (G.STOP_ACTUAL_DEP_LOCAL_TSTMP > B.MUST_SHIP_BY_TSTMP) THEN 1 ELSE 0 END ELSE 0 END AS MSD_FLAG, DATE(MAX(B.DC_VERIFY_LOCAL_TSTMP)) AS DC_VERIFY_DAY_DT FROM (((((ADMIN.PO_HDR_FACT A10 LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN ADMIN.SCM_PO_SHIPMENT_VW E ON ((TRANSLATE(LPAD("VARCHAR"(A10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = E.PO_NBR))) LEFT JOIN ADMIN.SCM_SHIPMENT F ON (((E.SCM_SHIPMENT_GID = F.SCM_SHIPMENT_GID) AND (E.SCM_SOURCE_TYPE_ID = F.SCM_SOURCE_TYPE_ID)))) LEFT JOIN ADMIN.SCM_SHIPMENT_STOP G ON (((((E.SCM_SHIPMENT_GID = G.SCM_SHIPMENT_GID) AND (E.SCM_SOURCE_TYPE_ID = G.SCM_SOURCE_TYPE_ID)) AND (E.SHIPMENT_ID = G.SHIPMENT_ID)) AND (E.STOP_NBR = G.STOP_NBR)))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A10.PO_NBR = A12.PO_NBR) AND (A10.PO_GID = A12.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE, A10.LOCATION_ID, A10.VENDOR_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END, B.PO_DEST_LOCATION_ID, E.IB_OB_FLAG, E.SHIPMENT_ID, F.SHIP_TENDER_TSTMP, F.SCM_CARRIER_ID, F.SCM_CARRIER_NAME, F.SCM_TRANS_MODE_CD, F.SCM_ORIG_FACILITY_LOC_ID, F.SHIP_ORIG_FACILITY_LOC_ID, F.SHIP_DEST_FACILITY_LOC_ID, G.STOP_NBR, G.SCM_STOP_TYPE_CD, G.CURRENT_STOP_LOCATION_ID, G.STOP_FACILITY_LOC_ID, G.STOP_APPOINTMENT_TSTMP, G.STOP_APPOINTMENT_LOCAL_TSTMP, G.STOP_ACTUAL_ARR_TSTMP, G.STOP_ACTUAL_ARR_LOCAL_TSTMP, G.STOP_ACTUAL_DEP_TSTMP, G.STOP_ACTUAL_DEP_LOCAL_TSTMP, CASE WHEN (F.SHIP_TENDER_TSTMP > (B.MUST_SHIP_BY_TSTMP + (-1 * '1 day'::"INTERVAL"))) THEN 1 ELSE 0 END, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'PU'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = B.PO_ORIG_LOCATION_ID)) THEN CASE WHEN (G.STOP_APPOINTMENT_LOCAL_TSTMP > B.MUST_SHIP_BY_TSTMP) THEN 1 ELSE 0 END ELSE 0 END, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'PU'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = B.PO_ORIG_LOCATION_ID)) THEN CASE WHEN (G.STOP_ACTUAL_DEP_TSTMP > (G.STOP_APPOINTMENT_TSTMP + (0.084 * '1 day'::"INTERVAL"))) THEN 1 ELSE 0 END ELSE 0 END, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'DL'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = A10.LOCATION_ID)) THEN (DATE_PART('HOURS'::"VARCHAR", (G.STOP_ACTUAL_ARR_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) + (DATE_PART('DAYS'::"VARCHAR", (G.STOP_ACTUAL_ARR_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP)) * 24)) ELSE '0'::INT8 END, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'DL'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = A10.LOCATION_ID)) THEN CASE WHEN (ABS(DATE_PART('HOURS'::"VARCHAR", (G.STOP_ACTUAL_ARR_LOCAL_TSTMP - B.DC_GATE_LOCAL_TSTMP))) >= 1) THEN 1 ELSE NULL::INT4 END ELSE 0 END, CASE WHEN ((G.SCM_STOP_TYPE_CD = 'PU'::"VARCHAR") AND (G.CURRENT_STOP_LOCATION_ID = B.PO_ORIG_LOCATION_ID)) THEN CASE WHEN (G.STOP_ACTUAL_DEP_LOCAL_TSTMP > B.MUST_SHIP_BY_TSTMP) THEN 1 ELSE 0 END ELSE 0 END;

\echo
\echo *****  Creating view:  "PO_VC_DEDUCTIONS_VW"

CREATE or replace VIEW  PO_VC_DEDUCTIONS_VW
(
     PO_GID,
     PO_NBR,
     PO_DUE_DT,
     LOCATION_ID,
     VENDOR_ID,
     IDENTIFIER,
     CATEGORY,
     DEDUCTION_ID,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     INCORRECT_DESTINATION_RECEIVED,
     NUMBER_OF_DEFECTS,
     DEDUCTION_TSTMP,
     DEDUCTION_TYPE,
     DEDUCTION_TYPE_NAME,
     ORIGINAL_DEDUCTION_AMT,
     DEDUCTION_AMOUNT,
     REVERSAL_AMOUNT,
     REVERSAL_RECENT,
     DAYS_LATE,
     MINUTES_LATE,
     DETENTION_MINUTES_HELD,
     DEMURRAGE_DAYS_HELD,
     PO_INCORRECT_DEST_APPROVED,
     HOURS_WORKED,
     ASSESSED_DT,
     DEDUCTION_STATUS,
     PETSMART_KEY_LABEL,
     PETSMART_DEDUCTION_CODE,
     ORIGINAL_DEDUCTION_AMT_APPROVED,
     ORIGINAL_DEDUCTION_AMT_EXEMPT,
     DEDUCTION_AMOUNT_APPROVED,
     REVERSAL_AMOUNT_REVERESED_FULL,
     REVERSAL_AMOUNT_REVERSED_PARTIALL,
     MISSING_LABEL,
     PO_FAILURE_FLAG_LQ,
     UNSCANNABLE_LABEL,
     IMPROPER_LABEL,
     INSUFFUCIENT_LABEL,
     INVALID_LABEL,
     PO_FAILURE_LABELING_FLAG,
     TONU_CHARGES,
     DETENTION_CHARGES,
     DEMURRAGE_CHARGES,
     OVERWEIGHT_CHARGES,
     LOADING_EFFICIENCY_CHARGES,
     INCORRECT_DESTINATION_CHARGES,
     PO_FAILURE_FLAG_TRANS_ACCESSORIAL_CHARGES,
     FAILURE_FLAG_ITEM_ACCURACY,
     SKU_MISMATCH_DC,
     SKU_MISMATCH_STORE_OPS,
     CORRUGATE_STANDARD_LOW_DC,
     VENDOR_RECALL_DC,
     VENDOR_RECALL_STORE_OPS,
     PO_FAILURE_FLAG_DISCRETIONARY,
     PO_ONTIME_DEDUCTION_AMT_ORIGINAL,
     PO_ONTIME_DEDUCTION_AMT_ASSESSED,
     PO_ONTIME_DEDUCTION_AMT_REVERSED_FULL,
     PO_ONTIME_DEDUCTION_AMT_REVERSED_PARTIAL,
     PO_ONTIME_DEDUCTION_AMT_REVERSED_TOTAL,
     PO_ONTIME_DEDUCTION_AMT_NET,
     PO_ONTIME_CATEGORY,
     PO_LABELING_DEDUCTION_AMT_ORIGINAL,
     PO_LABELING_DEDUCTION_AMT_ASSESSED,
     PO_LABELING_DEDUCTION_AMT_REVERSED_FULL,
     PO_LABELING_DEDUCTION_AMT_REVERSED_PARTIAL,
     PO_LABELING_DEDUCTION_AMT_REVERSED_TOTAL,
     PO_LABELING_DEDUCTION_AMT_NET,
     PO_LABELING_CATEGORY,
     LABELING_CODE,
     LABELING_DESC,
     LABELING_DEFECTS,
     PO_TRANSPORTATION_DEDUCTION_AMT_ORIGINAL,
     PO_TRANSPORTATION_DEDUCTION_AMT_ASSESSED,
     PO_TRANSPORTATION_DEDUCTION_AMT_REVERSED_FULL,
     PO_TRANSPORTATION_DEDUCTION_AMT_REVERSED_PARTIAL,
     PO_TRANSPORTATION_DEDUCTION_AMT_REVERSED_TOTAL,
     PO_TRANSPORTATION_DEDUCTION_AMT_NET,
     PO_TRANSPORTATION_CATEGORY,
     TRANSPORTATION_CODE,
     TRANSPORTATION_DESC,
     TRANSPORTATION_DEFECTS,
     PO_FILL_RATE_DEDUCTION_AMT_ORIGINAL,
     PO_FILL_RATE_DEDUCTION_AMT_ASSESSED,
     PO_FILL_RATE_DEDUCTION_AMT_REVERSED_FULL,
     PO_FILL_RATE_DEDUCTION_AMT_REVERSED_PARTIAL,
     PO_FILL_RATE_DEDUCTION_AMT_REVERSED_TOTAL,
     PO_FILL_RATE_DEDUCTION_AMT_NET,
     PO_FILL_RATE_CATEGORY,
     PO_ASN_DEDUCTION_AMT_ORIGINAL,
     PO_ASN_DEDUCTION_AMT_ASSESSED,
     PO_ASN_DEDUCTION_AMT_REVERSED_FULL,
     PO_ASN_DEDUCTION_AMT_REVERSED_PARTIAL,
     PO_ASN_DEDUCTION_AMT_REVERSED_TOTAL,
     PO_ASN_DEDUCTION_AMT_NET,
     ASN_COMPLIANCE_CATEGORY,
     PO_LQ_DEDUCTION_AMT_ORIGINAL,
     PO_LQ_DEDUCTION_AMT_ASSESSED,
     PO_LQ_DEDUCTION_AMT_REVERSED_FULL,
     PO_LQ_DEDUCTION_AMT_REVERSED_PARTIAL,
     PO_LQ_DEDUCTION_AMT_REVERSED_TOTAL,
     PO_LQ_DEDUCTION_AMT_NET,
     LQ_CODE,
     LQ_DESC,
     LQ_DEFECTS,
     INBOUND_LOAD_QUALITY_CATEGORY,
     PO_TOTAL_DEDUCTION_AMT_ORIGINAL,
     PO_TOTAL_DEDUCTION_AMT_ASSESSED,
     PO_TOTAL_DEDUCTION_AMT_REVERSED_FULL,
     PO_TOTAL_DEDUCTION_AMT_REVERSED_PARTIAL,
     PO_TOTAL_DEDUCTION_AMT_REVERSED_TOTAL,
     PO_TOTAL_DEDUCTION_AMT_NET,
     DC_VERIFY_DAY_DT
) AS
SELECT A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, A10.LOCATION_ID, A10.VENDOR_ID, AA.IDENTIFIER, AA."CATEGORY", AA.DEDUCTION_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, AA.INCORRECT_DESTINATION_RECEIVED, AA.NUMBER_OF_DEFECTS, AA.DEDUCTION_TSTMP, AA.DEDUCTION_TYPE, AA.DEDUCTION_TYPE_NAME, AA.ORIGINAL_DEDUCTION_AMT, AA.DEDUCTION_AMOUNT, AA.REVERSAL_AMOUNT, AA.REVERSAL_RECENT, AA.DAYS_LATE, AA.MINUTES_LATE, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA.DEDUCTION_TYPE) = 'TA-DET'::"VARCHAR")) THEN AA.MINUTES_LATE ELSE NULL::"VARCHAR" END AS DETENTION_MINUTES_HELD, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA.DEDUCTION_TYPE) = 'TA-DEM'::"VARCHAR")) THEN AA.DAYS_LATE ELSE NULL::"VARCHAR" END AS DEMURRAGE_DAYS_HELD, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA.DEDUCTION_TYPE) = 'TA-INC'::"VARCHAR")) THEN AA.INCORRECT_DESTINATION_RECEIVED ELSE NULL::"VARCHAR" END AS PO_INCORRECT_DEST_APPROVED, AA.HOURS_WORKED, AA.ASSESSED_DT, AA.DEDUCTION_STATUS, AA.PETSMART_KEY_LABEL, AA.PETSMART_DEDUCTION_CODE, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.ORIGINAL_DEDUCTION_AMT ELSE NULL::"NUMERIC" END AS ORIGINAL_DEDUCTION_AMT_APPROVED, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'EXEMPT'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.ORIGINAL_DEDUCTION_AMT ELSE NULL::"NUMERIC" END AS ORIGINAL_DEDUCTION_AMT_EXEMPT, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_AMOUNT ELSE NULL::"NUMERIC" END AS DEDUCTION_AMOUNT_APPROVED, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.REVERSAL_AMOUNT ELSE NULL::"NUMERIC" END AS REVERSAL_AMOUNT_REVERESED_FULL, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.REVERSAL_AMOUNT ELSE NULL::"NUMERIC" END AS REVERSAL_AMOUNT_REVERSED_PARTIALL, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-MS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS MISSING_LABEL, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) THEN CASE WHEN (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR") THEN 1 ELSE 0 END ELSE 0 END) AS PO_FAILURE_FLAG_LQ, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-US'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-US'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS UNSCANNABLE_LABEL, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-IM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-IM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS IMPROPER_LABEL, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-1L'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-1L'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS INSUFFUCIENT_LABEL, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-CP'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-CP'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS INVALID_LABEL, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS PO_FAILURE_LABELING_FLAG, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-TON'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-TON'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS TONU_CHARGES, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DET'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DET'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS DETENTION_CHARGES, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DEM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DEM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS DEMURRAGE_CHARGES, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-OVR'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-OVR'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS OVERWEIGHT_CHARGES, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-LEE'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-LEE'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS LOADING_EFFICIENCY_CHARGES, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-INC'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-INC'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS INCORRECT_DESTINATION_CHARGES, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS PO_FAILURE_FLAG_TRANS_ACCESSORIAL_CHARGES, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'ITEM FILE ACCURACY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'ITEM FILE ACCURACY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS FAILURE_FLAG_ITEM_ACCURACY, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS SKU_MISMATCH_DC, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS SKU_MISMATCH_STORE_OPS, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SCD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SCD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS CORRUGATE_STANDARD_LOW_DC, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS VENDOR_RECALL_DC, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS VENDOR_RECALL_STORE_OPS, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'DISCRETIONARY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'DISCRETIONARY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END) AS PO_FAILURE_FLAG_DISCRETIONARY, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END AS PO_ONTIME_DEDUCTION_AMT_ORIGINAL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END AS PO_ONTIME_DEDUCTION_AMT_ASSESSED, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_ONTIME_DEDUCTION_AMT_REVERSED_FULL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_ONTIME_DEDUCTION_AMT_REVERSED_PARTIAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_ONTIME_DEDUCTION_AMT_REVERSED_TOTAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) AS PO_ONTIME_DEDUCTION_AMT_NET, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END AS PO_ONTIME_CATEGORY, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END AS PO_LABELING_DEDUCTION_AMT_ORIGINAL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END AS PO_LABELING_DEDUCTION_AMT_ASSESSED, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_LABELING_DEDUCTION_AMT_REVERSED_FULL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_LABELING_DEDUCTION_AMT_REVERSED_PARTIAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_LABELING_DEDUCTION_AMT_REVERSED_TOTAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) AS PO_LABELING_DEDUCTION_AMT_NET, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END AS PO_LABELING_CATEGORY, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE ELSE NULL::"VARCHAR" END AS LABELING_CODE, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE_NAME ELSE NULL::"VARCHAR" END AS LABELING_DESC, CASE WHEN ((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) > '0'::NUMERIC) THEN AA.NUMBER_OF_DEFECTS ELSE NULL::INT4 END AS LABELING_DEFECTS, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END AS PO_TRANSPORTATION_DEDUCTION_AMT_ORIGINAL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END AS PO_TRANSPORTATION_DEDUCTION_AMT_ASSESSED, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_TRANSPORTATION_DEDUCTION_AMT_REVERSED_FULL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_TRANSPORTATION_DEDUCTION_AMT_REVERSED_PARTIAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_TRANSPORTATION_DEDUCTION_AMT_REVERSED_TOTAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) AS PO_TRANSPORTATION_DEDUCTION_AMT_NET, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END AS PO_TRANSPORTATION_CATEGORY, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE ELSE NULL::"VARCHAR" END AS TRANSPORTATION_CODE, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE_NAME ELSE NULL::"VARCHAR" END AS TRANSPORTATION_DESC, CASE WHEN ((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) > '0'::NUMERIC) THEN AA.NUMBER_OF_DEFECTS ELSE NULL::INT4 END AS TRANSPORTATION_DEFECTS, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END AS PO_FILL_RATE_DEDUCTION_AMT_ORIGINAL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END AS PO_FILL_RATE_DEDUCTION_AMT_ASSESSED, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_FILL_RATE_DEDUCTION_AMT_REVERSED_FULL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_FILL_RATE_DEDUCTION_AMT_REVERSED_PARTIAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_FILL_RATE_DEDUCTION_AMT_REVERSED_TOTAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) AS PO_FILL_RATE_DEDUCTION_AMT_NET, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END AS PO_FILL_RATE_CATEGORY, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END AS PO_ASN_DEDUCTION_AMT_ORIGINAL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END AS PO_ASN_DEDUCTION_AMT_ASSESSED, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_ASN_DEDUCTION_AMT_REVERSED_FULL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_ASN_DEDUCTION_AMT_REVERSED_PARTIAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_ASN_DEDUCTION_AMT_REVERSED_TOTAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) AS PO_ASN_DEDUCTION_AMT_NET, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END AS ASN_COMPLIANCE_CATEGORY, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END AS PO_LQ_DEDUCTION_AMT_ORIGINAL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END AS PO_LQ_DEDUCTION_AMT_ASSESSED, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_LQ_DEDUCTION_AMT_REVERSED_FULL, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END AS PO_LQ_DEDUCTION_AMT_REVERSED_PARTIAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_LQ_DEDUCTION_AMT_REVERSED_TOTAL, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) AS PO_LQ_DEDUCTION_AMT_NET, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE ELSE NULL::"VARCHAR" END AS LQ_CODE, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE_NAME ELSE NULL::"VARCHAR" END AS LQ_DESC, CASE WHEN ((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) > '0'::NUMERIC) THEN AA.NUMBER_OF_DEFECTS ELSE NULL::INT4 END AS LQ_DEFECTS, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END AS INBOUND_LOAD_QUALITY_CATEGORY, (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) AS PO_TOTAL_DEDUCTION_AMT_ORIGINAL, (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) AS PO_TOTAL_DEDUCTION_AMT_ASSESSED, (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_TOTAL_DEDUCTION_AMT_REVERSED_FULL, (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) AS PO_TOTAL_DEDUCTION_AMT_REVERSED_PARTIAL, ((((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) AS PO_TOTAL_DEDUCTION_AMT_REVERSED_TOTAL, ((((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END))) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END))) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END))) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END))) + (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END))) AS PO_TOTAL_DEDUCTION_AMT_NET, DATE(MAX(B.DC_VERIFY_LOCAL_TSTMP)) AS DC_VERIFY_DAY_DT FROM ((((ADMIN.PO_HDR_FACT A10 LEFT JOIN ADMIN.PO_LN_FACT A11 ON (((A10.PO_NBR = A11.PO_NBR) AND (A10.PO_GID = A11.PO_GID)))) LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN ADMIN.VC_DEDUCTIONS AA ON ((A10.PO_NBR = INT8(AA.IDENTIFIER)))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A10.PO_NBR = A12.PO_NBR) AND (A10.PO_GID = A12.PO_GID)))) WHERE ((UPPER(AA.REVERSAL_RECENT))::VARCHAR(10) IN (('TRUE'::"VARCHAR")::VARCHAR(10))) GROUP BY A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE, A10.LOCATION_ID, A10.VENDOR_ID, AA.IDENTIFIER, AA."CATEGORY", AA.DEDUCTION_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END, B.PO_DEST_LOCATION_ID, AA.INCORRECT_DESTINATION_RECEIVED, AA.NUMBER_OF_DEFECTS, AA.DEDUCTION_TSTMP, AA.DEDUCTION_TYPE, AA.DEDUCTION_TYPE_NAME, AA.ORIGINAL_DEDUCTION_AMT, AA.DEDUCTION_AMOUNT, AA.REVERSAL_AMOUNT, AA.REVERSAL_RECENT, AA.DAYS_LATE, AA.MINUTES_LATE, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA.DEDUCTION_TYPE) = 'TA-DET'::"VARCHAR")) THEN AA.MINUTES_LATE ELSE NULL::"VARCHAR" END, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA.DEDUCTION_TYPE) = 'TA-DEM'::"VARCHAR")) THEN AA.DAYS_LATE ELSE NULL::"VARCHAR" END, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA.DEDUCTION_TYPE) = 'TA-INC'::"VARCHAR")) THEN AA.INCORRECT_DESTINATION_RECEIVED ELSE NULL::"VARCHAR" END, AA.HOURS_WORKED, AA.ASSESSED_DT, AA.DEDUCTION_STATUS, AA.PETSMART_KEY_LABEL, AA.PETSMART_DEDUCTION_CODE, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.ORIGINAL_DEDUCTION_AMT ELSE NULL::"NUMERIC" END, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'EXEMPT'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.ORIGINAL_DEDUCTION_AMT ELSE NULL::"NUMERIC" END, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_AMOUNT ELSE NULL::"NUMERIC" END, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.REVERSAL_AMOUNT ELSE NULL::"NUMERIC" END, CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.REVERSAL_AMOUNT ELSE NULL::"NUMERIC" END, (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-MS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) THEN CASE WHEN (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR") THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-US'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-US'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-IM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-IM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-1L'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-1L'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-CP'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'LBL-CP'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-TON'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-TON'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DET'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DET'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DEM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-DEM'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-OVR'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-OVR'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-LEE'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-LEE'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-INC'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'TA-INC'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'ITEM FILE ACCURACY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'ITEM FILE ACCURACY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SCD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-SCD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSD'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((AA.DEDUCTION_TYPE = 'DS-CSS'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), (CASE WHEN ((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'DISCRETIONARY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END - CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN ((UPPER(AA."CATEGORY") = 'DISCRETIONARY'::"VARCHAR") AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN 1 ELSE 0 END ELSE 0 END), CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END), (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)), CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END), (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)), CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE ELSE NULL::"VARCHAR" END, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE_NAME ELSE NULL::"VARCHAR" END, CASE WHEN ((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) > '0'::NUMERIC) THEN AA.NUMBER_OF_DEFECTS ELSE NULL::INT4 END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END), (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)), CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE ELSE NULL::"VARCHAR" END, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE_NAME ELSE NULL::"VARCHAR" END, CASE WHEN ((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) > '0'::NUMERIC) THEN AA.NUMBER_OF_DEFECTS ELSE NULL::INT4 END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END), (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)), CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END), (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)), CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END, (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END), (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)), CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE ELSE NULL::"VARCHAR" END, CASE WHEN (((((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") OR (UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR")) OR (UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR")) AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA.DEDUCTION_TYPE_NAME ELSE NULL::"VARCHAR" END, CASE WHEN ((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END - (CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END)) > '0'::NUMERIC) THEN AA.NUMBER_OF_DEFECTS ELSE NULL::INT4 END, CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN AA."CATEGORY" ELSE NULL::"VARCHAR" END, (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.ORIGINAL_DEDUCTION_AMT ISNULL) THEN '0'::NUMERIC ELSE AA.ORIGINAL_DEDUCTION_AMT END ELSE '0'::NUMERIC END), (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'APPROVED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.DEDUCTION_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.DEDUCTION_AMOUNT END ELSE '0'::NUMERIC END), (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'REVERSED'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END), (((((CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO ON TIME'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'PO FILL RATE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'ASN COMPLIANCE'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'INBOUND LOAD QUALITY'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'LABELING'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END) + CASE WHEN (((UPPER(AA.DEDUCTION_STATUS) = 'USER-DEFINED 1'::"VARCHAR") AND (UPPER(AA."CATEGORY") = 'TRANSPORTATION'::"VARCHAR")) AND (AA.PETSMART_KEY_LABEL = 'PO#'::"VARCHAR")) THEN CASE WHEN (AA.REVERSAL_AMOUNT ISNULL) THEN '0'::NUMERIC ELSE AA.REVERSAL_AMOUNT END ELSE '0'::NUMERIC END);

\echo
\echo *****  Creating view:  "PO_VC_EVENT_VW"

CREATE or replace VIEW  PO_VC_EVENT_VW
(
     PO_GID,
     PO_NBR,
     PO_DUE_DT,
     LOCATION_ID,
     VENDOR_ID,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     CREATED_SOURCE,
     FIELD_NAME,
     OLD_VALUE,
     NEW_VALUE,
     CREATED_SOURCE_TYPE,
     SRC_CREATED_DTTM,
     DC_VERIFY_DAY_DT
) AS
SELECT A.PO_GID, A.PO_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, A.LOCATION_ID, A.VENDOR_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, Z.CREATED_SOURCE, Z.FIELD_NAME, Z.OLD_VALUE, Z.NEW_VALUE, Z.CREATED_SOURCE_TYPE, Z.SRC_CREATED_DTTM, DATE(MAX(B.DC_VERIFY_LOCAL_TSTMP)) AS DC_VERIFY_DAY_DT FROM ((((ADMIN.PO_HDR_FACT A LEFT JOIN ADMIN.PO_LN_FACT AA ON (((A.PO_GID = AA.PO_GID) AND (A.PO_NBR = AA.PO_NBR)))) LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN (SELECT A.PO_NBR, A.CREATED_SOURCE, A.FIELD_NAME, A.OLD_VALUE, A.NEW_VALUE, A.CREATED_SOURCE_TYPE, A.SRC_CREATED_DTTM, A.LOAD_DT FROM ADMIN.PO_EVNT A WHERE ((A.FIELD_NAME = 'DUE DATE'::"VARCHAR") AND ((A.PO_NBR, A.SRC_CREATED_DTTM) = ANY (SELECT A.PO_NBR, MIN(A.SRC_CREATED_DTTM) AS MIN FROM (ADMIN.PO_EVNT A LEFT JOIN ADMIN.SCM_PO B ON ((TRANSLATE(LPAD("VARCHAR"(A.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR))) WHERE ((A.FIELD_NAME = 'DUE DATE'::"VARCHAR") AND (B.SAP_REVISED_PO_DUE_DT = "TIMESTAMP"(DATE(A.NEW_VALUE)))) GROUP BY A.PO_NBR)))) Z ON ((A.PO_NBR = Z.PO_NBR))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A.PO_NBR = A12.PO_NBR) AND (A.PO_GID = A12.PO_GID)))) GROUP BY A.PO_GID, A.PO_NBR, A12.LOOKUP_DATE, A.LOCATION_ID, A.VENDOR_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END, B.PO_DEST_LOCATION_ID, Z.CREATED_SOURCE, Z.FIELD_NAME, Z.OLD_VALUE, Z.NEW_VALUE, Z.CREATED_SOURCE_TYPE, Z.SRC_CREATED_DTTM;

\echo
\echo *****  Creating view:  "PO_USR_VENDOR_SEGMENT_VW"

CREATE or replace VIEW  PO_USR_VENDOR_SEGMENT_VW
(
     VENDOR_SEGMENT_ID,
     SOURCE_VENDOR_ID,
     VENDOR_SEGMENT_NAME,
     START_DT,
     END_DT,
     DAY_DT
) AS
SELECT USR_VENDOR_SEGMENT.VENDOR_SEGMENT_ID, USR_VENDOR_SEGMENT.SOURCE_VENDOR_ID, USR_VENDOR_SEGMENT.VENDOR_SEGMENT_NAME, USR_VENDOR_SEGMENT.START_DT, USR_VENDOR_SEGMENT.END_DT, DAYS.DAY_DT FROM (ADMIN.USR_VENDOR_SEGMENT CROSS JOIN ADMIN.DAYS) WHERE (((DAYS.DAY_DT >= "TIMESTAMP"(USR_VENDOR_SEGMENT.START_DT)) AND (DAYS.DAY_DT <= "TIMESTAMP"(USR_VENDOR_SEGMENT.END_DT))) AND (DAYS.DAY_DT <= "TIMESTAMP"(DATE('now(0)'::"VARCHAR")))) GROUP BY USR_VENDOR_SEGMENT.VENDOR_SEGMENT_ID, USR_VENDOR_SEGMENT.SOURCE_VENDOR_ID, USR_VENDOR_SEGMENT.VENDOR_SEGMENT_NAME, USR_VENDOR_SEGMENT.START_DT, USR_VENDOR_SEGMENT.END_DT, DAYS.DAY_DT;

\echo
\echo *****  Creating view:  "PO_WMS_TRAILER_APPT_ARRIVALS_VW"

CREATE or replace VIEW  PO_WMS_TRAILER_APPT_ARRIVALS_VW
(
     PO_GID,
     PO_NBR,
     PO_DUE_DT,
     LOCATION_ID,
     VENDOR_ID,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     WHSE,
     SHPMT_NBR,
     APPT_NBR,
     SHPMT_TYPE,
     APPT_CREATE_DATE_TIME,
     APPT_MOD_DATE_TIME,
     XPECT_START_DATE_TIME,
     SCHED_DATE_TIME,
     SCHED_DOCK,
     SCHED_DOOR,
     TRLR_SIZE,
     TRLR_TYPE,
     TRLR_NBR,
     ACTL_DOCK,
     ACTL_DOOR,
     APPT_USER_ID,
     ASNHDR_MOD_DATE_TIME,
     ARRIVAL_DATE_TIME,
     FIRST_RCPT_DATE_TIME,
     LAST_RCPT_DATE_TIME,
     VERF_DATE_TIME,
     ASNHDR_USER_ID
) AS
SELECT A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, A10.LOCATION_ID, A10.VENDOR_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, WMS.WHSE, WMS.SHPMT_NBR, WMS.APPT_NBR, WMS.SHPMT_TYPE, WMS.APPT_CREATE_DATE_TIME, WMS.APPT_MOD_DATE_TIME, WMS.XPECT_START_DATE_TIME, WMS.SCHED_DATE_TIME, WMS.SCHED_DOCK, WMS.SCHED_DOOR, WMS.TRLR_SIZE, WMS.TRLR_TYPE, WMS.TRLR_NBR, WMS.ACTL_DOCK, WMS.ACTL_DOOR, WMS.APPT_USER_ID, WMS.ASNHDR_MOD_DATE_TIME, WMS.ARRIVAL_DATE_TIME, WMS.FIRST_RCPT_DATE_TIME, WMS.LAST_RCPT_DATE_TIME, WMS.VERF_DATE_TIME, WMS.ASNHDR_USER_ID FROM ((((ADMIN.PO_HDR_FACT A10 LEFT JOIN ADMIN.PO_LN_FACT A11 ON (((A10.PO_NBR = A11.PO_NBR) AND (A10.PO_GID = A11.PO_GID)))) LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN ADMIN.WMS_TRAILER_APPT_AND_ARRIVALS WMS ON ((A10.PO_NBR = WMS.PO_NBR))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM (ADMIN.PO_LN_FACT B1 LEFT JOIN ADMIN.DAYS B2 ON ((B1.PO_DUE_DT = B2.DAY_DT))) WHERE ((B2.DAY_DT = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) AND ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL))) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM (ADMIN.PO_LN_FACT B1 LEFT JOIN ADMIN.DAYS B2 ON ((B1.PO_DUE_DT = B2.DAY_DT))) WHERE ((B2.DAY_DT = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) AND ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL))) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A10.PO_NBR = A12.PO_NBR) AND (A10.PO_GID = A12.PO_GID)))) WHERE (A12.LOOKUP_DATE = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) GROUP BY A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE, A10.LOCATION_ID, A10.VENDOR_ID, WMS.WHSE, WMS.SHPMT_NBR, WMS.PO_NBR, WMS.APPT_NBR, WMS.SHPMT_TYPE, WMS.APPT_CREATE_DATE_TIME, WMS.APPT_MOD_DATE_TIME, WMS.XPECT_START_DATE_TIME, WMS.SCHED_DATE_TIME, WMS.SCHED_DOCK, WMS.SCHED_DOOR, WMS.TRLR_SIZE, WMS.TRLR_TYPE, WMS.TRLR_NBR, WMS.ACTL_DOCK, WMS.ACTL_DOOR, WMS.APPT_USER_ID, WMS.ASNHDR_MOD_DATE_TIME, WMS.ARRIVAL_DATE_TIME, WMS.FIRST_RCPT_DATE_TIME, WMS.LAST_RCPT_DATE_TIME, WMS.VERF_DATE_TIME, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END, B.PO_DEST_LOCATION_ID, WMS.ASNHDR_USER_ID;

\echo
\echo *****  Creating view:  "PO_VC_ASN_SUCCESSFUL_DAY_VW"

CREATE or replace VIEW  PO_VC_ASN_SUCCESSFUL_DAY_VW
(
     PO_GID,
     PO_NBR,
     PO_DUE_DT,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     LOCATION_ID,
     VENDOR_ID,
     PRODUCT_ID,
     ASN_ARTICLE,
     ASN_CASE_ID,
     ASN_CODE_DATE,
     ASN_NBR_SAP,
     ASN_PO_RCVD_TSTMP,
     ASN_SHIPPED_QUANTITY,
     LOAD_TSTMP,
     PO_LINE_NBR,
     SITE_NBR,
     ASN_NBR,
     DC_VERIFY_DAY_DT
) AS
SELECT A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, A10.LOCATION_ID, A10.VENDOR_ID, A11.PRODUCT_ID, ASN.ASN_ARTICLE, ASN.ASN_CASE_ID, ASN.ASN_CODE_DATE, ASN.ASN_NBR_SAP, ASN.ASN_PO_RCVD_TSTMP, ASN.ASN_SHIPPED_QUANTITY, ASN.LOAD_TSTMP, A11.PO_LINE_NBR, ASN.SITE_NBR, ASN.ASN_NBR_VENDOR AS ASN_NBR, DATE(MAX(B.DC_VERIFY_LOCAL_TSTMP)) AS DC_VERIFY_DAY_DT FROM ((((ADMIN.PO_HDR_FACT A10 LEFT JOIN ADMIN.PO_LN_FACT A11 ON (((A10.PO_NBR = A11.PO_NBR) AND (A10.PO_GID = A11.PO_GID)))) LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN ADMIN.VC_ASN_SUCCESSFUL_DAY ASN ON (((A10.PO_NBR = ASN.ASN_PO_NBR) AND (A11.PO_LINE_NBR = ASN.PO_LINE_NBR)))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM (ADMIN.PO_LN_FACT B1 LEFT JOIN ADMIN.DAYS B2 ON ((B1.PO_DUE_DT = B2.DAY_DT))) WHERE ((B2.DAY_DT = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) AND ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL))) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM (ADMIN.PO_LN_FACT B1 LEFT JOIN ADMIN.DAYS B2 ON ((B1.PO_DUE_DT = B2.DAY_DT))) WHERE ((B2.DAY_DT = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) AND ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL))) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A10.PO_NBR = A12.PO_NBR) AND (A10.PO_GID = A12.PO_GID)))) WHERE (A12.LOOKUP_DATE = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) GROUP BY A10.PO_GID, A10.PO_NBR, A12.LOOKUP_DATE, A10.LOCATION_ID, A10.VENDOR_ID, A11.PRODUCT_ID, ASN.ASN_ARTICLE, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END, B.PO_DEST_LOCATION_ID, ASN.ASN_CASE_ID, ASN.ASN_CODE_DATE, ASN.ASN_NBR_SAP, ASN.ASN_PO_RCVD_TSTMP, ASN.ASN_SHIPPED_QUANTITY, ASN.LOAD_TSTMP, A11.PO_LINE_NBR, ASN.SITE_NBR, ASN.ASN_NBR_VENDOR;

\echo
\echo *****  Creating view:  "PO_ASN_REJECT_RSN_VW"

CREATE or replace VIEW  PO_ASN_REJECT_RSN_VW
(
     PO_GID,
     PO_NBR,
     PO_DUE_DT,
     LOCATION_ID,
     VENDOR_ID,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     MESSAGE_ID,
     MESSAGE_NO,
     MESSAGE_TEXT,
     ASN_BD87_SUBMIT_TSTMP,
     IDOC_NUMBER,
     ERROR_RECEIVED_FLAG,
     REJECT_PO_NBR,
     MATERIAL_DESC,
     BOLNR,
     PO_DELIVERY_DATE,
     GR_CREATE_DATE,
     GR_CREATE_TIME,
     DC_VERIFY_DAY_DT
) AS
SELECT A.PO_GID, A.PO_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, A.LOCATION_ID, A.VENDOR_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, Z.MESSAGE_ID, Z.MESSAGE_NO, Z.MESSAGE_TEXT, (("VARCHAR"(Z.ASN_CREATE_DATE) || ' '::"VARCHAR") || "VARCHAR"(Z.ASN_CREATE_TIME)) AS ASN_BD87_SUBMIT_TSTMP, Z.IDOC_NUMBER, CASE WHEN (Z.PO_NBR ISNULL) THEN 0 ELSE 1 END AS ERROR_RECEIVED_FLAG, Z.PO_NBR AS REJECT_PO_NBR, Z.MATERIAL_DESC, Z.BOLNR, Z.PO_DELIVERY_DATE, Z.GR_CREATE_DATE, Z.GR_CREATE_TIME, DATE(MAX(B.DC_VERIFY_LOCAL_TSTMP)) AS DC_VERIFY_DAY_DT FROM (((ADMIN.PO_HDR_FACT A LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN (SELECT A10.MESSAGE_ID, A10.MESSAGE_NO, A10.MESSAGE_TEXT, A10.ASN_CREATE_DATE, A10.ASN_CREATE_TIME, A10.IDOC_NUMBER, A10.PO_NBR, A10.VENDOR_ID, A10.VENDOR_NAME, A10.UPC_ID, A10.MATERIAL_DESC, A10.SKU_NBR, A10.BOLNR, A10.PO_DELIVERY_DATE, A10.STORE_NBR, A10.GR_CREATE_DATE, A10.GR_CREATE_TIME, A10.PRODUCT_ID, A10.LOCATION_ID, A10.LOAD_TS FROM ADMIN.ASN_REJECT_RSN A10 WHERE ((((((((((((((((((((((((((((((A10.PO_NBR !~~ LIKE_ESCAPE('%A%'::"VARCHAR", '\'::"VARCHAR")) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%B%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%C%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%D%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%E%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%F%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%G%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%H%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%I%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%J%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%K%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%L%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%M%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%N%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%O%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%P%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%Q%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%R%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%S%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%T%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%U%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%V%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%W%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%X%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%Y%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%Z%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR NOTNULL)) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%-%'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('% %'::"VARCHAR", '\'::"VARCHAR"))) AND (A10.PO_NBR !~~ LIKE_ESCAPE('%/%'::"VARCHAR", '\'::"VARCHAR")))) Z ON ((A.PO_NBR = INT8((Z.PO_NBR)::"VARCHAR")))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM ADMIN.PO_LN_FACT B1 WHERE ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL)) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A.PO_NBR = A12.PO_NBR) AND (A.PO_GID = A12.PO_GID)))) GROUP BY A.PO_GID, A.PO_NBR, A12.LOOKUP_DATE, A.LOCATION_ID, A.VENDOR_ID, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END, B.PO_DEST_LOCATION_ID, Z.MESSAGE_ID, Z.MESSAGE_NO, Z.MESSAGE_TEXT, (("VARCHAR"(Z.ASN_CREATE_DATE) || ' '::"VARCHAR") || "VARCHAR"(Z.ASN_CREATE_TIME)), Z.IDOC_NUMBER, CASE WHEN (Z.PO_NBR ISNULL) THEN 0 ELSE 1 END, Z.PO_NBR, Z.MATERIAL_DESC, Z.BOLNR, Z.PO_DELIVERY_DATE, Z.GR_CREATE_DATE, Z.GR_CREATE_TIME;

\echo
\echo *****  Creating view:  "PO_VC_ASN_AUDIT_DAY_VW"

CREATE or replace VIEW  PO_VC_ASN_AUDIT_DAY_VW
(
     PO_GID,
     PO_NBR,
     PO_LINE_NBR,
     PO_DUE_DT,
     LOCATION_ID,
     VENDOR_ID,
     PRODUCT_ID,
     WMS_SHPMT_NBR,
     AUDIT_STAT_CODE,
     AUDIT_STAT_CODE_DESC,
     AUDIT_UNITS_RCVD,
     AUDIT_USER_NAME,
     CASE_NBR,
     USER_ID,
     CODE_XPIRE_DATE,
     PO_ORIG_LOCATION_ID,
     PO_DEST_LOCATION_ID,
     SKU_NBR,
     DC_VERIFY_DAY_DT
) AS
SELECT A10.PO_GID, A10.PO_NBR, A11.PO_LINE_NBR, A12.LOOKUP_DATE AS PO_DUE_DT, A10.LOCATION_ID, A10.VENDOR_ID, A11.PRODUCT_ID, ASN.WMS_SHPMT_NBR, ASN.AUDIT_STAT_CODE, ASN.AUDIT_STAT_CODE_DESC, ASN.AUDIT_UNITS_RCVD, ASN.AUDIT_USER_NAME, ASN.CASE_NBR, ASN.USER_ID, ASN.CODE_XPIRE_DATE, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END AS PO_ORIG_LOCATION_ID, B.PO_DEST_LOCATION_ID, ASN.SKU_NBR, DATE(MAX(B.DC_VERIFY_LOCAL_TSTMP)) AS DC_VERIFY_DAY_DT FROM ((((ADMIN.PO_HDR_FACT A10 LEFT JOIN ADMIN.PO_LN_FACT A11 ON (((A10.PO_NBR = A11.PO_NBR) AND (A10.PO_GID = A11.PO_GID)))) LEFT JOIN ADMIN.SCM_PO B ON (((TRANSLATE(LPAD("VARCHAR"(A10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B.PO_NBR) AND (B.SCM_SOURCE_TYPE_ID = '3'::INT8)))) LEFT JOIN ADMIN.VC_ASN_AUDIT_DAY ASN ON (((A10.PO_NBR = ASN.PO_NBR) AND (A11.PO_LINE_NBR = ASN.PO_LINE_NBR)))) LEFT JOIN (SELECT A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END AS LOOKUP_DATE, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE FROM ((ADMIN.PO_HDR_FACT A10 LEFT JOIN (SELECT B10.PO_GID, B10.PO_NBR, CASE WHEN (B11.SAP_REVISED_PO_DUE_DT ISNULL) THEN B11.SAP_ORIGINAL_PO_DUE_DT ELSE B11.SAP_REVISED_PO_DUE_DT END AS SCM_PO_DUE_DATE FROM (ADMIN.PO_HDR_FACT B10 LEFT JOIN ADMIN.SCM_PO B11 ON ((TRANSLATE(LPAD("VARCHAR"(B10.PO_NBR), 10), ' '::"VARCHAR", '0'::"VARCHAR") = B11.PO_NBR)))) OPT1 ON (((A10.PO_NBR = OPT1.PO_NBR) AND (A10.PO_GID = OPT1.PO_GID)))) LEFT JOIN (SELECT D1.PO_GID, D1.PO_NBR, MAX(D2.PO_DUE_DT) AS MAXDATE FROM ((SELECT C1.PO_GID, C1.PO_NBR, MAX(C1."RECORDS") AS RECORD_MATCH FROM (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS" FROM (ADMIN.PO_LN_FACT B1 LEFT JOIN ADMIN.DAYS B2 ON ((B1.PO_DUE_DT = B2.DAY_DT))) WHERE ((B2.DAY_DT = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) AND ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL))) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) C1 GROUP BY C1.PO_GID, C1.PO_NBR) D1 LEFT JOIN (SELECT B1.PO_GID, B1.PO_NBR, COUNT(B1.PO_LINE_NBR) AS "RECORDS", B1.PO_DUE_DT FROM (ADMIN.PO_LN_FACT B1 LEFT JOIN ADMIN.DAYS B2 ON ((B1.PO_DUE_DT = B2.DAY_DT))) WHERE ((B2.DAY_DT = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) AND ((B1.PO_ASN_CANCEL_FLAG = '0'::INT1) OR (B1.PO_ASN_CANCEL_FLAG ISNULL))) GROUP BY B1.PO_GID, B1.PO_NBR, B1.PO_DUE_DT) D2 ON ((((D1.PO_GID = D2.PO_GID) AND (D1.PO_NBR = D2.PO_NBR)) AND (D1.RECORD_MATCH = D2."RECORDS")))) GROUP BY D1.PO_GID, D1.PO_NBR) OPT2 ON (((A10.PO_NBR = OPT2.PO_NBR) AND (A10.PO_GID = OPT2.PO_GID)))) GROUP BY A10.PO_GID, A10.PO_NBR, CASE WHEN (OPT1.SCM_PO_DUE_DATE ISNULL) THEN OPT2.MAXDATE ELSE OPT1.SCM_PO_DUE_DATE END, OPT1.SCM_PO_DUE_DATE, OPT2.MAXDATE) A12 ON (((A10.PO_NBR = A12.PO_NBR) AND (A10.PO_GID = A12.PO_GID)))) WHERE (A12.LOOKUP_DATE = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = ANY (SELECT A.FISCAL_YR FROM (SELECT DAYS.DAY_DT, DAYS.BUSINESS_DAY_FLAG, DAYS.HOLIDAY_FLAG, DAYS.DAY_OF_WK_NAME, DAYS.DAY_OF_WK_NAME_ABBR, DAYS.DAY_OF_WK_NBR, DAYS.CAL_DAY_OF_MO_NBR, DAYS.CAL_DAY_OF_YR_NBR, DAYS.CAL_WK, DAYS.CAL_WK_NBR, DAYS.CAL_MO, DAYS.CAL_MO_NBR, DAYS.CAL_MO_NAME, DAYS.CAL_MO_NAME_ABBR, DAYS.CAL_QTR, DAYS.CAL_QTR_NBR, DAYS.CAL_HALF, DAYS.CAL_YR, DAYS.FISCAL_DAY_OF_MO_NBR, DAYS.FISCAL_DAY_OF_YR_NBR, DAYS.FISCAL_WK, DAYS.FISCAL_WK_NBR, DAYS.FISCAL_MO, DAYS.FISCAL_MO_NBR, DAYS.FISCAL_MO_NAME, DAYS.FISCAL_MO_NAME_ABBR, DAYS.FISCAL_QTR, DAYS.FISCAL_QTR_NBR, DAYS.FISCAL_HALF, DAYS.FISCAL_YR, DAYS.LYR_WEEK_DT, DAYS.LWK_WEEK_DT, DAYS.WEEK_DT, DAYS.EST_TIME_CONV_AMT, DAYS.EST_TIME_CONV_HRS, DAYS.ES0_TIME_CONV_AMT, DAYS.ES0_TIME_CONV_HRS, DAYS.CST_TIME_CONV_AMT, DAYS.CST_TIME_CONV_HRS, DAYS.CS0_TIME_CONV_AMT, DAYS.CS0_TIME_CONV_HRS, DAYS.MST_TIME_CONV_AMT, DAYS.MST_TIME_CONV_HRS, DAYS.MS0_TIME_CONV_AMT, DAYS.MS0_TIME_CONV_HRS, DAYS.PST_TIME_CONV_AMT, DAYS.PST_TIME_CONV_HRS FROM ADMIN.DAYS WHERE ((DAYS.DAY_DT >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1098))) AND (DAYS.DAY_DT <= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) A)))) GROUP BY A10.PO_GID, A10.PO_NBR, A11.PO_LINE_NBR, A12.LOOKUP_DATE, A10.LOCATION_ID, A10.VENDOR_ID, A11.PRODUCT_ID, ASN.WMS_SHPMT_NBR, ASN.AUDIT_STAT_CODE, ASN.AUDIT_STAT_CODE_DESC, ASN.AUDIT_UNITS_RCVD, ASN.AUDIT_USER_NAME, ASN.CASE_NBR, ASN.USER_ID, ASN.CODE_XPIRE_DATE, CASE WHEN (B.PO_ORIG_LOCATION_ID ISNULL) THEN 99990 ELSE B.PO_ORIG_LOCATION_ID END, B.PO_DEST_LOCATION_ID, ASN.SKU_NBR;

\echo
\echo *****  Creating view:  "CMA_CUSTOMER_XREF_MOBILE_VW"

CREATE or replace VIEW  CMA_CUSTOMER_XREF_MOBILE_VW
(
     CUSTOMER_EID,
     MOBILE_FLAG,
     MOBILE_FIRST_TIME_LOGIN
) AS
SELECT PRE.CUSTOMER_EID, MAX(CASE WHEN ('t'::BOOL /=/ (CASE WHEN (A.CMA_ADOBE_JR_UUID NOTNULL) THEN A.CMA_ADOBE_JR_UUID WHEN ('-1' NOTNULL) THEN '-1'::"VARCHAR" ELSE NULL::"VARCHAR" END <> '-1'::"VARCHAR")) THEN 1 ELSE 0 END) AS MOBILE_FLAG, MIN(A.FIRST_TIME_LOGIN_DT) AS MOBILE_FIRST_TIME_LOGIN FROM ((ADMIN.CMA_CUST_CUST_PRE PRE LEFT JOIN ADMIN.CUSTOMER_XREF X ON ((PRE.CUSTOMER_EID = X.CUSTOMER_EID))) LEFT JOIN ADMIN.CMA_ADOBE_CUSTOMER A ON (((X.CUSTOMER_SRC_ID = 100001) AND (X.CUSTOMER_SRC_VALUE = A.CMA_ADOBE_JR_UUID)))) GROUP BY PRE.CUSTOMER_EID;

\echo
\echo *****  Creating view:  "CMA_APP_DOWNLOAD_USR_REG_VW"

CREATE or replace VIEW  CMA_APP_DOWNLOAD_USR_REG_VW
(
     DAY_DT,
     ANDROID_DOWNLOAD_CNT,
     IOS_DOWNLOAD_CNT,
     TOTAL_DOWNLOAD_COUNT,
     REGISTERED_USER_CNT,
     UNREGISTED_CUSTOMER
) AS
SELECT CASE WHEN (DOWN.DAY_DT NOTNULL) THEN DOWN.DAY_DT WHEN (REG.FIRST_TIME_LOGIN_DT NOTNULL) THEN REG.FIRST_TIME_LOGIN_DT ELSE NULL::"TIMESTAMP" END AS DAY_DT, DOWN.ANDROID_DOWNLOAD_CNT, DOWN.IOS_DOWNLOAD_CNT, (DOWN.ANDROID_DOWNLOAD_CNT + DOWN.IOS_DOWNLOAD_CNT) AS TOTAL_DOWNLOAD_COUNT, REG.REGISTERED_USER_CNT, CASE WHEN ((DOWN.ANDROID_DOWNLOAD_CNT + DOWN.IOS_DOWNLOAD_CNT) NOTNULL) THEN ((CASE WHEN (DOWN.ANDROID_DOWNLOAD_CNT NOTNULL) THEN DOWN.ANDROID_DOWNLOAD_CNT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END + CASE WHEN (DOWN.IOS_DOWNLOAD_CNT NOTNULL) THEN DOWN.IOS_DOWNLOAD_CNT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) - "NUMERIC"(CASE WHEN (REG.REGISTERED_USER_CNT NOTNULL) THEN REG.REGISTERED_USER_CNT WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END)) ELSE '0'::NUMERIC END AS UNREGISTED_CUSTOMER FROM ((SELECT CMA_ADOBE_APP_DOWNLOAD.DAY_DT, SUM(CASE WHEN (CMA_ADOBE_APP_DOWNLOAD.CMA_APP_STORE_ID = 1) THEN CMA_ADOBE_APP_DOWNLOAD.DOWNLOAD_COUNT ELSE 0 END) AS ANDROID_DOWNLOAD_CNT, SUM(CASE WHEN (CMA_ADOBE_APP_DOWNLOAD.CMA_APP_STORE_ID = 2) THEN CMA_ADOBE_APP_DOWNLOAD.DOWNLOAD_COUNT ELSE 0 END) AS IOS_DOWNLOAD_CNT FROM ADMIN.CMA_ADOBE_APP_DOWNLOAD GROUP BY CMA_ADOBE_APP_DOWNLOAD.DAY_DT) DOWN FULL JOIN (SELECT CAC.FIRST_TIME_LOGIN_DT, COUNT(CAC.CMA_ADOBE_JR_UUID) AS REGISTERED_USER_CNT FROM ADMIN.CMA_ADOBE_CUSTOMER CAC GROUP BY CAC.FIRST_TIME_LOGIN_DT) REG ON ((DOWN.DAY_DT = REG.FIRST_TIME_LOGIN_DT))) WHERE (CASE WHEN (DOWN.DAY_DT NOTNULL) THEN DOWN.DAY_DT WHEN (REG.FIRST_TIME_LOGIN_DT NOTNULL) THEN REG.FIRST_TIME_LOGIN_DT ELSE NULL::"TIMESTAMP" END > '2016-11-17 00:00:00'::"TIMESTAMP");

\echo
\echo *****  Creating view:  "SALES_TRANS_DISCOUNT_TYLY_CRCY_VW"

CREATE or replace VIEW  SALES_TRANS_DISCOUNT_TYLY_CRCY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     TRANS_DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     DISCOUNT_TYPE_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     OFFER_ID,
     VOID_TYPE_CD,
     SALES_TYPE_ID,
     TRANS_TSTMP,
     PRODUCT_ID,
     DISC_CPN_UPC_ID,
     EMPLOYEE_ID,
     CUST_TRANS_ID,
     CASHIER_NBR,
     UPC_SEQ_NBR,
     OFFER_CHARGEBACK_ID,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     EXCH_RATE_PCT,
     DATE_LOADED,
     ORDER_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     COMP_FLAG,
     CUSTOMER_EID,
     CUSTOMER_GID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, DTL.TRANS_DAY_DT, STRD.LOCATION_ID, STRD.SALES_INSTANCE_ID, STRD.UPC_ID, STRD.DISCOUNT_TYPE_ID, STRD.TP_INVOICE_NBR, STRD.PARENT_UPC_ID, STRD.COMBO_TYPE_CD, STRD.POS_TXN_SEQ_NBR, STRD.OFFER_ID, STRD.VOID_TYPE_CD, STRD.SALES_TYPE_ID, STRD.TRANS_TSTMP, STRD.PRODUCT_ID, STRD.DISC_CPN_UPC_ID, STRD.EMPLOYEE_ID, STRD.CUST_TRANS_ID, STRD.CASHIER_NBR, STRD.UPC_SEQ_NBR, STRD.OFFER_CHARGEBACK_ID, STRD.DISCOUNT_AMT, STRD.DISCOUNT_QTY, STRD.DISCOUNT_RETURN_AMT, STRD.DISCOUNT_RETURN_QTY, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE STRD.EXCH_RATE_PCT END AS EXCH_RATE_PCT, STRD.DATE_LOADED, STT.ORDER_CHANNEL, STT.ORDER_FULFILLMENT_CHANNEL, CASE WHEN (STS.ORDER_CREATION_CHANNEL NOTNULL) THEN STS.ORDER_CREATION_CHANNEL WHEN (STT.ORDER_CREATION_CHANNEL NOTNULL) THEN STT.ORDER_CREATION_CHANNEL ELSE NULL::"VARCHAR" END AS ORDER_CREATION_CHANNEL, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, CASE WHEN (STS.CUSTOMER_EID NOTNULL) THEN STS.CUSTOMER_EID WHEN (-1 NOTNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE NULL::"NUMERIC" END AS CUSTOMER_EID, CASE WHEN (STS.CUSTOMER_GID NOTNULL) THEN STS.CUSTOMER_GID WHEN (-1 NOTNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE NULL::"NUMERIC" END AS CUSTOMER_GID, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC FROM (((((ADMIN.SALES_TRANS_DISCOUNT STRD JOIN ADMIN.DAYS_TY_LY DTL ON ((STRD.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SALES_TRANS_TXN STT ON (((STRD.DAY_DT = STT.DAY_DT) AND (STRD.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((STT.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN ADMIN.SALES_TRANS_SKU STS ON ((((STRD.DAY_DT = "TIMESTAMP"(STS.DAY_DT)) AND (STRD.SALES_INSTANCE_ID = STS.SALES_INSTANCE_ID)) AND (STRD.PRODUCT_ID = STS.PRODUCT_ID)))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SALES_TRANS_DISCOUNT_TYLY_VW"

CREATE or replace VIEW  SALES_TRANS_DISCOUNT_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     TRANS_DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     DISCOUNT_TYPE_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     OFFER_ID,
     VOID_TYPE_CD,
     SALES_TYPE_ID,
     TRANS_TSTMP,
     PRODUCT_ID,
     DISC_CPN_UPC_ID,
     EMPLOYEE_ID,
     CUST_TRANS_ID,
     CASHIER_NBR,
     UPC_SEQ_NBR,
     OFFER_CHARGEBACK_ID,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     EXCH_RATE_PCT,
     DATE_LOADED,
     ORDER_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     COMP_FLAG,
     CUSTOMER_EID,
     CUSTOMER_GID
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, DTL.TRANS_DAY_DT, STRD.LOCATION_ID, STRD.SALES_INSTANCE_ID, STRD.UPC_ID, STRD.DISCOUNT_TYPE_ID, STRD.TP_INVOICE_NBR, STRD.PARENT_UPC_ID, STRD.COMBO_TYPE_CD, STRD.POS_TXN_SEQ_NBR, STRD.OFFER_ID, STRD.VOID_TYPE_CD, STRD.SALES_TYPE_ID, STRD.TRANS_TSTMP, STRD.PRODUCT_ID, STRD.DISC_CPN_UPC_ID, STRD.EMPLOYEE_ID, STRD.CUST_TRANS_ID, STRD.CASHIER_NBR, STRD.UPC_SEQ_NBR, STRD.OFFER_CHARGEBACK_ID, STRD.DISCOUNT_AMT, STRD.DISCOUNT_QTY, STRD.DISCOUNT_RETURN_AMT, STRD.DISCOUNT_RETURN_QTY, STRD.EXCH_RATE_PCT, STRD.DATE_LOADED, STT.ORDER_CHANNEL, STT.ORDER_FULFILLMENT_CHANNEL, CASE WHEN (STS.ORDER_CREATION_CHANNEL NOTNULL) THEN STS.ORDER_CREATION_CHANNEL WHEN (STT.ORDER_CREATION_CHANNEL NOTNULL) THEN STT.ORDER_CREATION_CHANNEL ELSE NULL::"VARCHAR" END AS ORDER_CREATION_CHANNEL, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, CASE WHEN (STS.CUSTOMER_EID NOTNULL) THEN STS.CUSTOMER_EID WHEN (-1 NOTNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE NULL::"NUMERIC" END AS CUSTOMER_EID, CASE WHEN (STS.CUSTOMER_GID NOTNULL) THEN STS.CUSTOMER_GID WHEN (-1 NOTNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE NULL::"NUMERIC" END AS CUSTOMER_GID FROM ((((ADMIN.SALES_TRANS_DISCOUNT STRD JOIN ADMIN.DAYS_TY_LY DTL ON ((STRD.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SALES_TRANS_TXN STT ON (((STRD.DAY_DT = STT.DAY_DT) AND (STRD.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((STT.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN ADMIN.SALES_TRANS_SKU STS ON ((((STRD.DAY_DT = "TIMESTAMP"(STS.DAY_DT)) AND (STRD.SALES_INSTANCE_ID = STS.SALES_INSTANCE_ID)) AND (STRD.PRODUCT_ID = STS.PRODUCT_ID))));

\echo
\echo *****  Creating view:  "SALES_TRANS_COMP_ETL_INS_VW"

CREATE or replace VIEW  SALES_TRANS_COMP_ETL_INS_VW
(
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_DIST_KEY,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     CPN_POS_TXN_SEQ_NBR,
     OFFER_ID,
     MA_EVENT_ID,
     DISCOUNT_TYPE_ID,
     COUPON_TYPE_ID,
     COUPON_ACCESS_CD,
     PRODUCT_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     PAYMENT_TYPE_ID,
     TRANS_ACCT_NBR,
     AUTH_APPROVAL_CODE,
     SALES_COMPONENT_ID,
     SALES_COMPONENT_TYPE_ID,
     ISSUANCE_ID,
     TAX_TYPE_ID,
     SALES_INSTANCE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     TRANS_TSTMP,
     REGISTER_NBR,
     TRANSACTION_NBR,
     SALES_TYPE_ID,
     SALES_CUST_CAPTURE_CD,
     CUST_TRANS_ID,
     CASHIER_NBR,
     PETPERK_OVERRIDE_NBR,
     PETPERK_EMAIL_IND,
     KEYED_FLAG,
     NON_TAX_FLAG,
     EMPLOYEE_ID,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     TENDER_UID,
     TAX_EXEMPT_ID,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     CDC_EMAIL_ID,
     CDC_FIRST_NAME_ID,
     CDC_LAST_NAME_ID,
     CDC_PHONE_NBR_ID,
     DIGITAL_RECEIPT_ANSWER_CD,
     OFFLINE_CUST_LKP_IND,
     REV_SALES_TYPE_CTRL_ID,
     REV_SALES_TYPE_ID,
     EP_SALES_TYPE_ID,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     SALES_TRANS_AMT,
     RETURN_TRANS_AMT,
     ISSUANCE_CNT,
     OFFER_QTY,
     TAX_PCT,
     TAX_AMT,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
((((((((((SELECT STU.DAY_DT, STU.LOCATION_ID, STU.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, STU.UPC_ID, STU.TP_INVOICE_NBR, STU.PARENT_UPC_ID, STU.COMBO_TYPE_CD, INT4(STU.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, '0'::INT8 AS OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, STU.PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 1 AS SALES_COMPONENT_ID, 100 AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STU.SALES_INSTANCE_ID, STU.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STU.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STU.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STU.CUST_TRANS_ID, STU.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, STU.KEYED_FLAG, INT4(STU.NON_TAX_FLAG) AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, CASE WHEN (STCRP.REV_SALES_TYPE_CTRL_ID NOTNULL) THEN STCRP.REV_SALES_TYPE_CTRL_ID WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_CTRL_ID, CASE WHEN (RSTC.REV_SALES_TYPE_ID NOTNULL) THEN INT4(RSTC.REV_SALES_TYPE_ID) WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_ID, CASE WHEN (STCEP.EP_SALES_TYPE_ID NOTNULL) THEN INT4(STCEP.EP_SALES_TYPE_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS EP_SALES_TYPE_ID, (((CASE WHEN (STU.SALES_AMT NOTNULL) THEN STU.SALES_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END - CASE WHEN (STU.RETURN_AMT NOTNULL) THEN STU.RETURN_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) + CASE WHEN (STU.SPECIAL_SRVC_AMT NOTNULL) THEN STU.SPECIAL_SRVC_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(15,4) AS NET_SALES_AMT, ((CASE WHEN (STU.SALES_QTY NOTNULL) THEN STU.SALES_QTY WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END - "NUMERIC"(CASE WHEN (STU.RETURN_QTY NOTNULL) THEN INT4(STU.RETURN_QTY) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END)))::NUMERIC(10,0) AS NET_SALES_QTY, ((((CASE WHEN (STU.SALES_AMT NOTNULL) THEN STU.SALES_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END - CASE WHEN (STU.RETURN_AMT NOTNULL) THEN STU.RETURN_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) + CASE WHEN (STU.SPECIAL_SRVC_AMT NOTNULL) THEN STU.SPECIAL_SRVC_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) - (CASE WHEN (STU.SALES_COST NOTNULL) THEN STU.SALES_COST WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END - CASE WHEN (STU.RETURN_COST NOTNULL) THEN STU.RETURN_COST WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END)))::NUMERIC(15,4) AS NET_MARGIN_AMT, STU.SALES_AMT, STU.SALES_COST, STU.SALES_QTY, STU.RETURN_AMT, STU.RETURN_COST, INT4(STU.RETURN_QTY) AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, STU.SPECIAL_SRVC_AMT, (CASE WHEN (STU.SPECIAL_SRVC_AMT <> '0'::NUMERIC) THEN (STU.SALES_QTY - "NUMERIC"(STU.RETURN_QTY)) ELSE '0'::NUMERIC END)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, STU.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM ((((ADMIN.SALES_TRANS_UPC STU JOIN ADMIN.SALES_TRANS_TXN STT ON ((((STU.DAY_DT = STT.DAY_DT) AND (STU.LOCATION_ID = STT.LOCATION_ID)) AND (STU.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_REV_PRE STCRP ON (((STU.SALES_INSTANCE_ID = STCRP.SALES_INSTANCE_ID) AND (STU.POS_TXN_SEQ_NBR = STCRP.POS_TXN_SEQ_NBR)))) LEFT JOIN ADMIN.REV_SALES_TYPE_CTRL RSTC ON ((STCRP.REV_SALES_TYPE_CTRL_ID = RSTC.REV_SALES_TYPE_CTRL_ID))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_EP_PRE STCEP ON (((STU.SALES_INSTANCE_ID = STCEP.SALES_INSTANCE_ID) AND (MOD(STU.POS_TXN_SEQ_NBR, 1000) = STCEP.POS_TXN_SEQ_NBR)))) WHERE (STU.DATE_LOADED = DATE('now(0)'::"VARCHAR"))) UNION ALL (SELECT STC.DAY_DT, STC.LOCATION_ID, STC.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, STC.UPC_ID, STC.TP_INVOICE_NBR, STC.PARENT_UPC_ID, STC.COMBO_TYPE_CD, INT4(STC.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, '0'::INT8 AS OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, STC.PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 1 AS SALES_COMPONENT_ID, (100 + STC.CLEARANCE_TYPE_ID) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STC.SALES_INSTANCE_ID, STC.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STT.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STC.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STT.CUST_TRANS_ID, STT.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, '0'::CHAR(1) AS KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, CASE WHEN (STCRP.REV_SALES_TYPE_CTRL_ID NOTNULL) THEN STCRP.REV_SALES_TYPE_CTRL_ID WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_CTRL_ID, CASE WHEN (RSTC.REV_SALES_TYPE_ID NOTNULL) THEN INT4(RSTC.REV_SALES_TYPE_ID) WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_ID, CASE WHEN (STCEP.EP_SALES_TYPE_ID NOTNULL) THEN INT4(STCEP.EP_SALES_TYPE_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS EP_SALES_TYPE_ID, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, STC.CLEARANCE_AMT, STC.CLEARANCE_QTY, STC.CLEARANCE_RETURN_AMT, INT4(STC.CLEARANCE_RETURN_QTY) AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, STC.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM ((((ADMIN.SALES_TRANS_CLEARANCE STC JOIN ADMIN.SALES_TRANS_TXN STT ON ((((STC.DAY_DT = STT.DAY_DT) AND (STC.LOCATION_ID = STT.LOCATION_ID)) AND (STC.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_REV_PRE STCRP ON (((STC.SALES_INSTANCE_ID = STCRP.SALES_INSTANCE_ID) AND (STC.POS_TXN_SEQ_NBR = STCRP.POS_TXN_SEQ_NBR)))) LEFT JOIN ADMIN.REV_SALES_TYPE_CTRL RSTC ON ((STCRP.REV_SALES_TYPE_CTRL_ID = RSTC.REV_SALES_TYPE_CTRL_ID))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_EP_PRE STCEP ON (((STC.SALES_INSTANCE_ID = STCEP.SALES_INSTANCE_ID) AND (MOD(STC.POS_TXN_SEQ_NBR, 1000) = STCEP.POS_TXN_SEQ_NBR)))) WHERE (STT.DATE_LOADED = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) UNION ALL (SELECT STD.DAY_DT, STD.LOCATION_ID, STD.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, STD.UPC_ID, STD.TP_INVOICE_NBR, STD.PARENT_UPC_ID, STD.COMBO_TYPE_CD, INT4(STD.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, STD.OFFER_ID, 0 AS MA_EVENT_ID, INT4(STD.DISCOUNT_TYPE_ID) AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, STD.PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 2 AS SALES_COMPONENT_ID, INT4((('2'::"VARCHAR" || CASE WHEN (LENGTH("VARCHAR"(STD.DISCOUNT_TYPE_ID)) = 1) THEN '0'::"VARCHAR" ELSE ''::"VARCHAR" END) || "VARCHAR"(STD.DISCOUNT_TYPE_ID))) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STD.SALES_INSTANCE_ID, STD.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STD.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STD.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STD.CUST_TRANS_ID, STD.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, '0'::CHAR(1) AS KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, CASE WHEN (STCRP.REV_SALES_TYPE_CTRL_ID NOTNULL) THEN STCRP.REV_SALES_TYPE_CTRL_ID WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_CTRL_ID, CASE WHEN (RSTC.REV_SALES_TYPE_ID NOTNULL) THEN INT4(RSTC.REV_SALES_TYPE_ID) WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_ID, CASE WHEN (STCEP.EP_SALES_TYPE_ID NOTNULL) THEN INT4(STCEP.EP_SALES_TYPE_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS EP_SALES_TYPE_ID, (((- CASE WHEN (STD.DISCOUNT_AMT NOTNULL) THEN STD.DISCOUNT_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) + CASE WHEN (STD.DISCOUNT_RETURN_AMT NOTNULL) THEN STD.DISCOUNT_RETURN_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, (((- CASE WHEN (STD.DISCOUNT_AMT NOTNULL) THEN STD.DISCOUNT_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) + CASE WHEN (STD.DISCOUNT_RETURN_AMT NOTNULL) THEN STD.DISCOUNT_RETURN_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, STD.DISCOUNT_AMT, STD.DISCOUNT_QTY, STD.DISCOUNT_RETURN_AMT, STD.DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, STD.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM ((((ADMIN.SALES_TRANS_DISCOUNT STD JOIN ADMIN.SALES_TRANS_TXN STT ON ((((STD.DAY_DT = STT.DAY_DT) AND (STD.LOCATION_ID = STT.LOCATION_ID)) AND (STD.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_REV_PRE STCRP ON (((STD.SALES_INSTANCE_ID = STCRP.SALES_INSTANCE_ID) AND (CASE WHEN (LENGTH("VARCHAR"(STD.POS_TXN_SEQ_NBR)) = 4) THEN (STD.POS_TXN_SEQ_NBR - (INT4(SUBSTR("VARCHAR"(STD.POS_TXN_SEQ_NBR), 1, 1)) * 1000)) ELSE INT4(STD.POS_TXN_SEQ_NBR) END = STCRP.POS_TXN_SEQ_NBR)))) LEFT JOIN ADMIN.REV_SALES_TYPE_CTRL RSTC ON ((STCRP.REV_SALES_TYPE_CTRL_ID = RSTC.REV_SALES_TYPE_CTRL_ID))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_EP_PRE STCEP ON (((STD.SALES_INSTANCE_ID = STCEP.SALES_INSTANCE_ID) AND (MOD(STD.POS_TXN_SEQ_NBR, 1000) = STCEP.POS_TXN_SEQ_NBR)))) WHERE (STD.DATE_LOADED = DATE('now(0)'::"VARCHAR")))) UNION ALL (SELECT STC.DAY_DT, STC.LOCATION_ID, STC.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, STC.UPC_ID, '0'::INT8 AS TP_INVOICE_NBR, '0'::INT8 AS PARENT_UPC_ID, 'N'::CHAR(1) AS COMBO_TYPE_CD, INT4(STC.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, STC.OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, INT4(STC.COUPON_TYPE_ID) AS COUPON_TYPE_ID, STC.COUPON_ACCESS_CD, STC.PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 3 AS SALES_COMPONENT_ID, INT4((('3'::"VARCHAR" || CASE WHEN (LENGTH("VARCHAR"(STC.COUPON_TYPE_ID)) = 1) THEN '0'::"VARCHAR" ELSE ''::"VARCHAR" END) || "VARCHAR"(STC.COUPON_TYPE_ID))) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STC.SALES_INSTANCE_ID, STC.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STC.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STC.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STC.CUST_TRANS_ID, STC.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, STC.KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, 99 AS REV_SALES_TYPE_CTRL_ID, 99 AS REV_SALES_TYPE_ID, 0 AS EP_SALES_TYPE_ID, ((- CASE WHEN (STC.POS_COUPON_AMT NOTNULL) THEN STC.POS_COUPON_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, ((- CASE WHEN (STC.POS_COUPON_AMT NOTNULL) THEN STC.POS_COUPON_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, STC.POS_COUPON_AMT, INT4(STC.POS_COUPON_QTY) AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, STC.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM (ADMIN.SALES_TRANS_COUPON STC JOIN ADMIN.SALES_TRANS_TXN STT ON ((((STC.DAY_DT = STT.DAY_DT) AND (STC.LOCATION_ID = STT.LOCATION_ID)) AND (STC.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) WHERE (STC.DATE_LOADED = DATE('now(0)'::"VARCHAR")))) UNION ALL (SELECT "TIMESTAMP"(STUCA.DAY_DT) AS DAY_DT, STUCA.LOCATION_ID, STUCA.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, STUCA.UPC_ID, STUCA.TP_INVOICE_NBR, STUCA.PARENT_UPC_ID, STUCA.COMBO_TYPE_CD, INT4(STUCA.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, INT4(STUCA.CPN_POS_TXN_SEQ_NBR) AS CPN_POS_TXN_SEQ_NBR, STUCA.OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, INT4(STUCA.COUPON_TYPE_ID) AS COUPON_TYPE_ID, STUCA.COUPON_ACCESS_CD, STUCA.PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 4 AS SALES_COMPONENT_ID, INT4((('4'::"VARCHAR" || CASE WHEN (LENGTH("VARCHAR"(STUCA.COUPON_TYPE_ID)) = 1) THEN '0'::"VARCHAR" ELSE ''::"VARCHAR" END) || "VARCHAR"(STUCA.COUPON_TYPE_ID))) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STUCA.SALES_INSTANCE_ID, STUCA.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STUCA.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STUCA.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STUCA.CUST_TRANS_ID, STUCA.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, STUCA.KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, CASE WHEN (STCRP.REV_SALES_TYPE_CTRL_ID NOTNULL) THEN STCRP.REV_SALES_TYPE_CTRL_ID WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_CTRL_ID, CASE WHEN (RSTC.REV_SALES_TYPE_ID NOTNULL) THEN INT4(RSTC.REV_SALES_TYPE_ID) WHEN (99 NOTNULL) THEN 99 ELSE NULL::INT4 END AS REV_SALES_TYPE_ID, CASE WHEN (STCEP.EP_SALES_TYPE_ID NOTNULL) THEN INT4(STCEP.EP_SALES_TYPE_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS EP_SALES_TYPE_ID, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, STUCA.POS_COUPON_ALLOC_AMT, INT4(STUCA.POS_COUPON_ALLOC_QTY) AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, STUCA.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM ((((ADMIN.SALES_TRANS_UPC_COUPON_ALLOC STUCA JOIN ADMIN.SALES_TRANS_TXN STT ON (((("TIMESTAMP"(STUCA.DAY_DT) = STT.DAY_DT) AND (STUCA.LOCATION_ID = STT.LOCATION_ID)) AND (STUCA.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_REV_PRE STCRP ON (((STUCA.SALES_INSTANCE_ID = STCRP.SALES_INSTANCE_ID) AND (STUCA.POS_TXN_SEQ_NBR = STCRP.POS_TXN_SEQ_NBR)))) LEFT JOIN ADMIN.REV_SALES_TYPE_CTRL RSTC ON ((STCRP.REV_SALES_TYPE_CTRL_ID = RSTC.REV_SALES_TYPE_CTRL_ID))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_EP_PRE STCEP ON (((STUCA.SALES_INSTANCE_ID = STCEP.SALES_INSTANCE_ID) AND (MOD(STUCA.POS_TXN_SEQ_NBR, 1000) = STCEP.POS_TXN_SEQ_NBR)))) WHERE (STUCA.DATE_LOADED = DATE('now(0)'::"VARCHAR")))) UNION ALL (SELECT STS.DAY_DT, STS.LOCATION_ID, STS.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, STS.UPC_ID, '0'::INT8 AS TP_INVOICE_NBR, '0'::INT8 AS PARENT_UPC_ID, 'N'::CHAR(1) AS COMBO_TYPE_CD, INT4(STS.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, '0'::INT8 AS OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, STS.PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 5 AS SALES_COMPONENT_ID, 500 AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STS.SALES_INSTANCE_ID, STS.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STT.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STS.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STS.CUST_TRANS_ID, STT.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, '0'::CHAR(1) AS KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, 99 AS REV_SALES_TYPE_CTRL_ID, 99 AS REV_SALES_TYPE_ID, CASE WHEN (STCEP.EP_SALES_TYPE_ID NOTNULL) THEN INT4(STCEP.EP_SALES_TYPE_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS EP_SALES_TYPE_ID, (((- CASE WHEN (STS.SPECIAL_SALES_AMT NOTNULL) THEN STS.SPECIAL_SALES_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) + CASE WHEN (STS.SPECIAL_RETURN_AMT NOTNULL) THEN STS.SPECIAL_RETURN_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(15,4) AS NET_SALES_AMT, (((- CASE WHEN (STS.SPECIAL_SALES_QTY NOTNULL) THEN STS.SPECIAL_SALES_QTY WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) + CASE WHEN (STS.SPECIAL_RETURN_QTY NOTNULL) THEN STS.SPECIAL_RETURN_QTY WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(10,0) AS NET_SALES_QTY, (((- CASE WHEN (STS.SPECIAL_SALES_AMT NOTNULL) THEN STS.SPECIAL_SALES_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) + CASE WHEN (STS.SPECIAL_RETURN_AMT NOTNULL) THEN STS.SPECIAL_RETURN_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END))::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, STS.SPECIAL_SALES_AMT, STS.SPECIAL_SALES_QTY, STS.SPECIAL_RETURN_AMT, STS.SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, STS.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM ((ADMIN.SALES_TRANS_SPECIAL STS JOIN ADMIN.SALES_TRANS_TXN STT ON ((((STS.DAY_DT = STT.DAY_DT) AND (STS.LOCATION_ID = STT.LOCATION_ID)) AND (STS.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_EP_PRE STCEP ON (((STS.SALES_INSTANCE_ID = STCEP.SALES_INSTANCE_ID) AND (MOD(STS.POS_TXN_SEQ_NBR, 1000) = STCEP.POS_TXN_SEQ_NBR)))) WHERE (STS.DATE_LOADED = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) UNION ALL (SELECT MSP.DAY_DT, MSP.LOCATION_ID, MSP.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, MSP.UPC_ID, MSP.TP_INVOICE_NBR, MSP.PARENT_UPC_ID, MSP.COMBO_TYPE_CD, INT4(MSP.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, CASE WHEN (ME.OFFER_ID NOTNULL) THEN ME.OFFER_ID WHEN (0 NOTNULL) THEN '0'::INT8 ELSE NULL::INT8 END AS OFFER_ID, MSP.MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, MSP.PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 6 AS SALES_COMPONENT_ID, INT4((('6'::"VARCHAR" || CASE WHEN (LENGTH("VARCHAR"(ME.MA_EVENT_SOURCE_ID)) = 1) THEN '0'::"VARCHAR" ELSE ''::"VARCHAR" END) || "VARCHAR"(ME.MA_EVENT_SOURCE_ID))) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, MSP.SALES_INSTANCE_ID, STT.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STT.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STT.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STT.CUST_TRANS_ID, STT.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, '0'::CHAR(1) AS KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, 99 AS REV_SALES_TYPE_CTRL_ID, 99 AS REV_SALES_TYPE_ID, CASE WHEN (STCEP.EP_SALES_TYPE_ID NOTNULL) THEN INT4(STCEP.EP_SALES_TYPE_ID) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS EP_SALES_TYPE_ID, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, (CASE WHEN (MSP.MA_SALES_AMT NOTNULL) THEN MSP.MA_SALES_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END)::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, MSP.MA_SALES_AMT, MSP.MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, MSP.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM (((ADMIN.MA_SALES_PRE MSP JOIN ADMIN.SALES_TRANS_TXN STT ON ((((MSP.DAY_DT = STT.DAY_DT) AND (MSP.LOCATION_ID = STT.LOCATION_ID)) AND (MSP.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) JOIN ADMIN.MA_EVENT ME ON ((MSP.MA_EVENT_ID = ME.MA_EVENT_ID))) LEFT JOIN ADMIN.SALES_TRANS_COMPONENT_EP_PRE STCEP ON (((MSP.SALES_INSTANCE_ID = STCEP.SALES_INSTANCE_ID) AND (MOD(MSP.POS_TXN_SEQ_NBR, 1000) = STCEP.POS_TXN_SEQ_NBR)))))) UNION ALL (SELECT MMP.DAY_DT, MMP.LOCATION_ID, (('900000000000'::INT8 + (INT8(SKU.SKU_NBR) * 10000)) + SITE.STORE_NBR) AS SALES_INSTANCE_DIST_KEY, '0'::INT8 AS UPC_ID, '0'::INT8 AS TP_INVOICE_NBR, '0'::INT8 AS PARENT_UPC_ID, 'N'::CHAR(1) AS COMBO_TYPE_CD, 0 AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, '0'::INT8 AS OFFER_ID, MMP.MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, MMP.PRODUCT_ID, MMP.MOVEMENT_ID, MMP.PO_NBR, MMP.PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 7 AS SALES_COMPONENT_ID, INT4((('7'::"VARCHAR" || CASE WHEN (LENGTH("VARCHAR"(ME.MA_EVENT_SOURCE_ID)) = 1) THEN '0'::"VARCHAR" ELSE ''::"VARCHAR" END) || "VARCHAR"(ME.MA_EVENT_SOURCE_ID))) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, NULL::INT8 AS SALES_INSTANCE_ID, 'N'::CHAR(1) AS VOID_TYPE_CD, 0 AS TXN_WAS_POST_VOIDED_FLAG, '9999-12-31 00:00:00'::"TIMESTAMP" AS TRANS_TSTMP, NULL::INT2 AS REGISTER_NBR, NULL::INT8 AS TRANSACTION_NBR, 1 AS SALES_TYPE_ID, 'X'::CHAR(1) AS SALES_CUST_CAPTURE_CD, '0'::INT8 AS CUST_TRANS_ID, 0 AS CASHIER_NBR, ('0'::NUMERIC)::NUMERIC(20,0) AS PETPERK_OVERRIDE_NBR, 0 AS PETPERK_EMAIL_IND, '0'::CHAR(1) AS KEYED_FLAG, 0 AS NON_TAX_FLAG, 0 AS EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, ('                '::"VARCHAR")::VARCHAR(16) AS TAX_EXEMPT_ID, '0'::INT8 AS ORDER_NBR, ('STR'::"VARCHAR")::VARCHAR(4) AS ORDER_CHANNEL, MMP.LOCATION_ID AS ORDER_ASSIST_LOCATION_ID, ('STR'::"VARCHAR")::VARCHAR(4) AS ORDER_FULFILLMENT_CHANNEL, ('STR'::"VARCHAR")::VARCHAR(4) AS ORDER_CREATION_CHANNEL, 99 AS CDC_EMAIL_ID, 99 AS CDC_FIRST_NAME_ID, 99 AS CDC_LAST_NAME_ID, 99 AS CDC_PHONE_NBR_ID, ('N'::"VARCHAR")::VARCHAR(1) AS DIGITAL_RECEIPT_ANSWER_CD, 0 AS OFFLINE_CUST_LKP_IND, 99 AS REV_SALES_TYPE_CTRL_ID, 99 AS REV_SALES_TYPE_ID, 0 AS EP_SALES_TYPE_ID, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, (CASE WHEN (MMP.MA_TRANS_COST NOTNULL) THEN MMP.MA_TRANS_COST WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END)::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, MMP.MA_TRANS_AMT, MMP.MA_TRANS_COST, MMP.MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, MMP.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM (((ADMIN.MA_MOVEMENT_PRE MMP JOIN ADMIN.MA_EVENT ME ON ((MMP.MA_EVENT_ID = ME.MA_EVENT_ID))) JOIN ADMIN.SKU_PROFILE SKU ON ((MMP.PRODUCT_ID = SKU.PRODUCT_ID))) JOIN ADMIN.SITE_PROFILE SITE ON ((MMP.LOCATION_ID = SITE.LOCATION_ID))))) UNION ALL (SELECT STP.DAY_DT, STP.LOCATION_ID, STP.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, CASE WHEN ((STP.PAYMENT_TYPE_ID = 7) AND (STP.TRANS_ACCT_NBR <> 'X'::"VARCHAR")) THEN INT8(STP.TRANS_ACCT_NBR) ELSE '0'::INT8 END AS UPC_ID, '0'::INT8 AS TP_INVOICE_NBR, '0'::INT8 AS PARENT_UPC_ID, 'N'::CHAR(1) AS COMBO_TYPE_CD, INT4(STP.POS_TXN_SEQ_NBR) AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, '0'::INT8 AS OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, CASE WHEN (UPC.PRODUCT_ID NOTNULL) THEN UPC.PRODUCT_ID WHEN (82528 NOTNULL) THEN 82528 ELSE NULL::INT4 END AS PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, INT4(STP.PAYMENT_TYPE_ID) AS PAYMENT_TYPE_ID, STP.TRANS_ACCT_NBR, STP.AUTH_APPROVAL_CODE, 8 AS SALES_COMPONENT_ID, INT4((('8'::"VARCHAR" || CASE WHEN (LENGTH("VARCHAR"(STP.PAYMENT_TYPE_ID)) = 1) THEN '0'::"VARCHAR" ELSE ''::"VARCHAR" END) || "VARCHAR"(STP.PAYMENT_TYPE_ID))) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STP.SALES_INSTANCE_ID, STP.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STT.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STP.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STP.CUST_TRANS_ID, STP.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, STP.KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, STP.CUST_FIRST_NAME, STP.CUST_LAST_NAME, STP.TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, 99 AS REV_SALES_TYPE_CTRL_ID, 99 AS REV_SALES_TYPE_ID, 0 AS EP_SALES_TYPE_ID, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, STP.SALES_TRANS_AMT, STP.RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, STP.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM ((ADMIN.SALES_TRANS_PAYMENT STP JOIN ADMIN.SALES_TRANS_TXN STT ON ((((STP.DAY_DT = STT.DAY_DT) AND (STP.LOCATION_ID = STT.LOCATION_ID)) AND (STP.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) LEFT JOIN ADMIN.UPC ON ((CASE WHEN ((STP.PAYMENT_TYPE_ID = 7) AND (STP.TRANS_ACCT_NBR <> 'X'::"VARCHAR")) THEN INT8(STP.TRANS_ACCT_NBR) ELSE '0'::INT8 END = UPC.UPC_ID))) WHERE (STP.DATE_LOADED = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) UNION ALL (SELECT PTT.DAY_DT, PTT.LOCATION_ID, PTT.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, '0'::INT8 AS UPC_ID, '0'::INT8 AS TP_INVOICE_NBR, '0'::INT8 AS PARENT_UPC_ID, 'N'::CHAR(1) AS COMBO_TYPE_CD, 0 AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, '0'::INT8 AS OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, 82528 AS PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 10 AS SALES_COMPONENT_ID, INT4((('10'::"VARCHAR" || CASE WHEN (LENGTH("VARCHAR"(PTT.TAX_TYPE_ID)) = 1) THEN '0'::"VARCHAR" ELSE ''::"VARCHAR" END) || "VARCHAR"(PTT.TAX_TYPE_ID))) AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, INT4(PTT.TAX_TYPE_ID) AS TAX_TYPE_ID, PTT.SALES_INSTANCE_ID, PTT.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STT.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STT.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STT.CUST_TRANS_ID, STT.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, '0'::CHAR(1) AS KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, 99 AS REV_SALES_TYPE_CTRL_ID, 99 AS REV_SALES_TYPE_ID, 0 AS EP_SALES_TYPE_ID, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, '0'::INT8 AS OFFER_QTY, PTT.TAX_PCT, PTT.TAX_AMT, PTT.EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM (ADMIN.POS_TXN_TAX PTT JOIN ADMIN.SALES_TRANS_TXN STT ON ((((PTT.DAY_DT = STT.DAY_DT) AND (PTT.LOCATION_ID = STT.LOCATION_ID)) AND (PTT.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))) WHERE (PTT.LOAD_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) UNION ALL (SELECT STT.DAY_DT, STT.LOCATION_ID, STT.SALES_INSTANCE_ID AS SALES_INSTANCE_DIST_KEY, '0'::INT8 AS UPC_ID, '0'::INT8 AS TP_INVOICE_NBR, '0'::INT8 AS PARENT_UPC_ID, 'N'::CHAR(1) AS COMBO_TYPE_CD, 0 AS POS_TXN_SEQ_NBR, 0 AS CPN_POS_TXN_SEQ_NBR, SUO.OFFER_ID, 0 AS MA_EVENT_ID, 0 AS DISCOUNT_TYPE_ID, 0 AS COUPON_TYPE_ID, ('N/A'::"VARCHAR")::VARCHAR(6) AS COUPON_ACCESS_CD, 82528 AS PRODUCT_ID, 0 AS MOVEMENT_ID, '0'::INT8 AS PO_NBR, 0 AS PO_LINE_NBR, 0 AS PAYMENT_TYPE_ID, ('X'::"VARCHAR")::VARCHAR(20) AS TRANS_ACCT_NBR, 'N/A     '::CHAR(8) AS AUTH_APPROVAL_CODE, 9 AS SALES_COMPONENT_ID, 901 AS SALES_COMPONENT_TYPE_ID, 0 AS ISSUANCE_ID, 0 AS TAX_TYPE_ID, STT.SALES_INSTANCE_ID, STT.VOID_TYPE_CD, INT4(STT.TXN_WAS_POST_VOIDED_FLAG) AS TXN_WAS_POST_VOIDED_FLAG, STT.TRANS_TSTMP, STT.REGISTER_NBR, STT.TRANSACTION_NBR, INT4(STT.SALES_TYPE_ID) AS SALES_TYPE_ID, STT.SALES_CUST_CAPTURE_CD, STT.CUST_TRANS_ID, STT.CASHIER_NBR, STT.PETPERK_OVERRIDE_NBR, INT4(STT.PETPERK_EMAIL_IND) AS PETPERK_EMAIL_IND, '0'::CHAR(1) AS KEYED_FLAG, 0 AS NON_TAX_FLAG, STT.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(30) AS CUST_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(24) AS TENDER_UID, STT.TAX_EXEMPT_ID, STT.ORDER_NBR, STT.ORDER_CHANNEL, STT.ORDER_ASSIST_LOCATION_ID, STT.ORDER_FULFILLMENT_CHANNEL, STT.ORDER_CREATION_CHANNEL, INT4(STT.CDC_EMAIL_ID) AS CDC_EMAIL_ID, INT4(STT.CDC_FIRST_NAME_ID) AS CDC_FIRST_NAME_ID, INT4(STT.CDC_LAST_NAME_ID) AS CDC_LAST_NAME_ID, INT4(STT.CDC_PHONE_NBR_ID) AS CDC_PHONE_NBR_ID, STT.DIGITAL_RECEIPT_ANSWER_CD, INT4(STT.OFFLINE_CUST_LKP_IND) AS OFFLINE_CUST_LKP_IND, 99 AS REV_SALES_TYPE_CTRL_ID, 99 AS REV_SALES_TYPE_ID, 0 AS EP_SALES_TYPE_ID, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,0) AS NET_SALES_QTY, ('0'::NUMERIC)::NUMERIC(15,4) AS NET_MARGIN_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_AMT, ('0'::NUMERIC)::NUMERIC(10,2) AS SALES_COST, ('0'::NUMERIC)::NUMERIC(6,0) AS SALES_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_COST, 0 AS RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS CLEARANCE_QTY, ('0'::NUMERIC)::NUMERIC(10,2) AS CLEARANCE_RETURN_AMT, 0 AS CLEARANCE_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_QTY, ('0'::NUMERIC)::NUMERIC(10,4) AS DISCOUNT_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(8,0) AS DISCOUNT_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_AMT, 0 AS POS_COUPON_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS POS_COUPON_ALLOC_AMT, 0 AS POS_COUPON_ALLOC_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_SALES_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,2) AS SPECIAL_RETURN_AMT, ('0'::NUMERIC)::NUMERIC(6,0) AS SPECIAL_RETURN_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SPECIAL_SRVC_AMT, ('0'::NUMERIC)::NUMERIC(7,0) AS SPECIAL_SRVC_QTY, ('0'::NUMERIC)::NUMERIC(9,3) AS MA_SALES_AMT, '0'::INT8 AS MA_SALES_QTY, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(12,3) AS MA_TRANS_COST, '0'::INT8 AS MA_TRANS_QTY, ('0'::NUMERIC)::NUMERIC(8,2) AS SALES_TRANS_AMT, ('0'::NUMERIC)::NUMERIC(8,2) AS RETURN_TRANS_AMT, 0 AS ISSUANCE_CNT, CASE WHEN (STT.SALES_TYPE_ID = 10) THEN (SUO.OFFER_QTY * -1) ELSE SUO.OFFER_QTY END AS OFFER_QTY, ('0'::NUMERIC)::NUMERIC(6,4) AS TAX_PCT, ('0'::NUMERIC)::NUMERIC(8,2) AS TAX_AMT, ('0'::NUMERIC)::NUMERIC(9,6) AS EXCH_RATE_PCT, DATE('now(0)'::"VARCHAR") AS UPDATE_DT, DATE('now(0)'::"VARCHAR") AS LOAD_DT FROM ((SELECT DISTINCT SALES_TRANS_UPC_OFFER.DAY_DT, SALES_TRANS_UPC_OFFER.LOCATION_ID, SALES_TRANS_UPC_OFFER.SALES_INSTANCE_ID, SALES_TRANS_UPC_OFFER.OFFER_ID, COUNT(DISTINCT SALES_TRANS_UPC_OFFER.SCAN_SEQ_NBR) OVER (PARTITION BY SALES_TRANS_UPC_OFFER.SALES_INSTANCE_ID, SALES_TRANS_UPC_OFFER.OFFER_ID ) AS OFFER_QTY FROM ADMIN.SALES_TRANS_UPC_OFFER WHERE (DATE_TRUNC('DAY'::"VARCHAR", SALES_TRANS_UPC_OFFER.LOAD_TSTMP) = "TIMESTAMP"(DATE('now(0)'::"VARCHAR")))) SUO JOIN ADMIN.SALES_TRANS_TXN STT ON (((("TIMESTAMP"(SUO.DAY_DT) = STT.DAY_DT) AND (SUO.LOCATION_ID = STT.LOCATION_ID)) AND (SUO.SALES_INSTANCE_ID = STT.SALES_INSTANCE_ID)))));

\echo
\echo *****  Creating view:  "OMS_DIST_ORDER_LN_VW"

CREATE or replace VIEW  OMS_DIST_ORDER_LN_VW
(
     OMS_DIST_ORDER_ID,
     OMS_DIST_ORDER_LN_ID,
     TOTAL_MONETARY_VALUE_AMT,
     UNIT_MONETARY_VALUE_AMT,
     UNIT_TAX_AMT,
     MV_CURRENCY_CD,
     SHIPPED_QTY,
     RECEIVED_QTY,
     CREATED_SOURCE,
     CREATED_TSTMP,
     CREATED_ORIG_TSTMP,
     LAST_UPDATED_TSTMP,
     OMS_DIST_ORDER_LN_STATUS_ID,
     ALLOCATED_QTY,
     UNIT_COST_AMT,
     UNIT_PRICE_AMT,
     USER_CANCELED_QTY,
     DELIVERY_END_DT,
     DELIVERY_START_DT,
     EVENT_CD,
     REASON_CODE,
     PARTL_FILL_FLG,
     ORDER_QTY,
     ORIG_ORDER_QTY,
     RETAIL_PRICE,
     OMS_DIST_ORDER_LN_NBR,
     PICKUP_END_DTTM,
     OMS_ORDER_LN_NBR,
     PICKUP_START_DTTM,
     CANCELLED_FLG,
     PRODUCT_ID,
     OMS_ORDER_NBR,
     FREIGHT_REVENUE_CURRENCY_CD,
     FREIGHT_REVENUE,
     ADJUSTED_ORDER_QTY,
     EV_RELEASED_TSTMP,
     EV_RELEASED_ORIG_TSTMP,
     EV_ALLOCATED_TSTMP,
     EV_ALLOCATED_ORIG_TSTMP,
     EV_SHIPPED_TSTMP,
     EV_SHIPPED_ORIG_TSTMP,
     EV_PICKEDUP_TSTMP,
     EV_PICKEDUP_ORIG_TSTMP,
     OMS_ORDER_ID,
     OMS_ORDER_LN_ID,
     OMS_DO_CREATED_TSTMP,
     OMS_DO_CREATED_ORIG_TSTMP,
     ORDER_NBR,
     OMS_ORDER_CREATED_TSTMP,
     OMS_ORDER_CREATED_ORIG_TSTMP,
     ORIG_LOCATION_ID,
     ORDER_CREATION_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CHANNEL,
     SCHED_DELIVERY_FLG,
     SUBSCRIPTION_ORDER_FLG,
     ADD_ON_FLAG,
     ISPU_PXY_FIRST_NAME,
     ISPU_PXY_LAST_NAME,
     ISPU_PXY_ADD_LINE1,
     ISPU_PXY_ADD_LINE2,
     ISPU_PXY_ADD_LINE3,
     ISPU_PXY_CITY,
     ISPU_PXY_STATE,
     ISPU_PXY_POSTAL_CD,
     ISPU_PXY_COUNTRY,
     ISPU_PXY_EMAIL,
     ISUP_PXY_PHONE,
     OMS_COMPANY_ID,
     EXCHANGE_RATE_PCNT,
     CANCEL_TSTMP,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT LNE.OMS_DIST_ORDER_ID, LNE.OMS_DIST_ORDER_LN_ID, LNE.TOTAL_MONETARY_VALUE_AMT, LNE.UNIT_MONETARY_VALUE_AMT, LNE.UNIT_TAX_AMT, LNE.MV_CURRENCY_CD, LNE.SHIPPED_QTY, LNE.RECEIVED_QTY, LNE.CREATED_SOURCE, LNE.CREATED_TSTMP, CASE WHEN (RPT.LOCATION_TYPE_ID = 19) THEN LNE.CREATED_TSTMP WHEN ((RPT.TIME_ZONE NOTNULL) AND (LNE.CREATED_TSTMP NOTNULL)) THEN ("TIMESTAMP"(TIMEZONE(LNE.CREATED_TSTMP, 'MST'::"VARCHAR", CASE WHEN (NZT.TIME_ZONE_SUBS NOTNULL) THEN NZT.TIME_ZONE_SUBS WHEN (CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END NOTNULL) THEN CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END ELSE NULL::"VARCHAR" END)) + "INTERVAL"((("VARCHAR"(CASE WHEN (NZT.TIME_ZONE_ADJ_HOUR NOTNULL) THEN NZT.TIME_ZONE_ADJ_HOUR WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) || ' '::"VARCHAR") || 'hour'::"VARCHAR"))) ELSE NULL::"TIMESTAMP" END AS CREATED_ORIG_TSTMP, LNE.LAST_UPDATED_TSTMP, LNE.OMS_DIST_ORDER_LN_STATUS_ID, LNE.ALLOCATED_QTY, LNE.UNIT_COST_AMT, LNE.UNIT_PRICE_AMT, LNE.USER_CANCELED_QTY, LNE.DELIVERY_END_DT, LNE.DELIVERY_START_DT, LNE.EVENT_CD, LNE.REASON_CODE, LNE.PARTL_FILL_FLG, LNE.ORDER_QTY, LNE.ORIG_ORDER_QTY, LNE.RETAIL_PRICE, LNE.OMS_DIST_ORDER_LN_NBR, LNE.PICKUP_END_DTTM, LNE.OMS_ORDER_LN_NBR, LNE.PICKUP_START_DTTM, LNE.CANCELLED_FLG, LNE.PRODUCT_ID, LNE.OMS_ORDER_NBR, LNE.FREIGHT_REVENUE_CURRENCY_CD, LNE.FREIGHT_REVENUE, LNE.ADJUSTED_ORDER_QTY, LNE.EV_RELEASED_TSTMP, CASE WHEN (RPT.LOCATION_TYPE_ID = 19) THEN LNE.EV_RELEASED_TSTMP WHEN ((RPT.TIME_ZONE NOTNULL) AND (LNE.EV_RELEASED_TSTMP NOTNULL)) THEN ("TIMESTAMP"(TIMEZONE(LNE.EV_RELEASED_TSTMP, 'MST'::"VARCHAR", CASE WHEN (NZT.TIME_ZONE_SUBS NOTNULL) THEN NZT.TIME_ZONE_SUBS WHEN (CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END NOTNULL) THEN CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END ELSE NULL::"VARCHAR" END)) + "INTERVAL"((("VARCHAR"(CASE WHEN (NZT.TIME_ZONE_ADJ_HOUR NOTNULL) THEN NZT.TIME_ZONE_ADJ_HOUR WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) || ' '::"VARCHAR") || 'hour'::"VARCHAR"))) ELSE NULL::"TIMESTAMP" END AS EV_RELEASED_ORIG_TSTMP, LNE.EV_ALLOCATED_TSTMP, CASE WHEN (RPT.LOCATION_TYPE_ID = 19) THEN LNE.EV_ALLOCATED_TSTMP WHEN ((RPT.TIME_ZONE NOTNULL) AND (LNE.EV_ALLOCATED_TSTMP NOTNULL)) THEN ("TIMESTAMP"(TIMEZONE(LNE.EV_ALLOCATED_TSTMP, 'MST'::"VARCHAR", CASE WHEN (NZT.TIME_ZONE_SUBS NOTNULL) THEN NZT.TIME_ZONE_SUBS WHEN (CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END NOTNULL) THEN CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END ELSE NULL::"VARCHAR" END)) + "INTERVAL"((("VARCHAR"(CASE WHEN (NZT.TIME_ZONE_ADJ_HOUR NOTNULL) THEN NZT.TIME_ZONE_ADJ_HOUR WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) || ' '::"VARCHAR") || 'hour'::"VARCHAR"))) ELSE NULL::"TIMESTAMP" END AS EV_ALLOCATED_ORIG_TSTMP, LNE.EV_SHIPPED_TSTMP, CASE WHEN (RPT.LOCATION_TYPE_ID = 19) THEN LNE.EV_SHIPPED_TSTMP WHEN ((RPT.TIME_ZONE NOTNULL) AND (LNE.EV_SHIPPED_TSTMP NOTNULL)) THEN ("TIMESTAMP"(TIMEZONE(LNE.EV_SHIPPED_TSTMP, 'MST'::"VARCHAR", CASE WHEN (NZT.TIME_ZONE_SUBS NOTNULL) THEN NZT.TIME_ZONE_SUBS WHEN (CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END NOTNULL) THEN CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END ELSE NULL::"VARCHAR" END)) + "INTERVAL"((("VARCHAR"(CASE WHEN (NZT.TIME_ZONE_ADJ_HOUR NOTNULL) THEN NZT.TIME_ZONE_ADJ_HOUR WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) || ' '::"VARCHAR") || 'hour'::"VARCHAR"))) ELSE NULL::"TIMESTAMP" END AS EV_SHIPPED_ORIG_TSTMP, LNE.EV_PICKEDUP_TSTMP, CASE WHEN (RPT.LOCATION_TYPE_ID = 19) THEN LNE.EV_PICKEDUP_TSTMP WHEN ((RPT.TIME_ZONE NOTNULL) AND (LNE.EV_PICKEDUP_TSTMP NOTNULL)) THEN ("TIMESTAMP"(TIMEZONE(LNE.EV_PICKEDUP_TSTMP, 'MST'::"VARCHAR", CASE WHEN (NZT.TIME_ZONE_SUBS NOTNULL) THEN NZT.TIME_ZONE_SUBS WHEN (CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END NOTNULL) THEN CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END ELSE NULL::"VARCHAR" END)) + "INTERVAL"((("VARCHAR"(CASE WHEN (NZT.TIME_ZONE_ADJ_HOUR NOTNULL) THEN NZT.TIME_ZONE_ADJ_HOUR WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) || ' '::"VARCHAR") || 'hour'::"VARCHAR"))) ELSE NULL::"TIMESTAMP" END AS EV_PICKEDUP_ORIG_TSTMP, LNE.OMS_ORDER_ID, LNE.OMS_ORDER_LN_ID, LNE.OMS_DO_CREATED_TSTMP, CASE WHEN (RPT.LOCATION_TYPE_ID = 19) THEN LNE.OMS_DO_CREATED_TSTMP WHEN ((RPT.TIME_ZONE NOTNULL) AND (LNE.OMS_DO_CREATED_TSTMP NOTNULL)) THEN ("TIMESTAMP"(TIMEZONE(LNE.OMS_DO_CREATED_TSTMP, 'MST'::"VARCHAR", CASE WHEN (NZT.TIME_ZONE_SUBS NOTNULL) THEN NZT.TIME_ZONE_SUBS WHEN (CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END NOTNULL) THEN CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END ELSE NULL::"VARCHAR" END)) + "INTERVAL"((("VARCHAR"(CASE WHEN (NZT.TIME_ZONE_ADJ_HOUR NOTNULL) THEN NZT.TIME_ZONE_ADJ_HOUR WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) || ' '::"VARCHAR") || 'hour'::"VARCHAR"))) ELSE NULL::"TIMESTAMP" END AS OMS_DO_CREATED_ORIG_TSTMP, LNE.ORDER_NBR, LNE.OMS_ORDER_CREATED_TSTMP, CASE WHEN (RPT.LOCATION_TYPE_ID = 19) THEN LNE.OMS_ORDER_CREATED_TSTMP WHEN ((RPT.TIME_ZONE NOTNULL) AND (LNE.OMS_ORDER_CREATED_TSTMP NOTNULL)) THEN ("TIMESTAMP"(TIMEZONE(LNE.OMS_ORDER_CREATED_TSTMP, 'MST'::"VARCHAR", CASE WHEN (NZT.TIME_ZONE_SUBS NOTNULL) THEN NZT.TIME_ZONE_SUBS WHEN (CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END NOTNULL) THEN CASE WHEN (LENGTH(RPT.TIME_ZONE) = 4) THEN SUBSTR(RPT.TIME_ZONE, 1, 3) ELSE CASE WHEN (RPT.TIME_ZONE NOTNULL) THEN RPT.TIME_ZONE WHEN ('MST' NOTNULL) THEN 'MST'::"VARCHAR" ELSE NULL::"VARCHAR" END END ELSE NULL::"VARCHAR" END)) + "INTERVAL"((("VARCHAR"(CASE WHEN (NZT.TIME_ZONE_ADJ_HOUR NOTNULL) THEN NZT.TIME_ZONE_ADJ_HOUR WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END) || ' '::"VARCHAR") || 'hour'::"VARCHAR"))) ELSE NULL::"TIMESTAMP" END AS OMS_ORDER_CREATED_ORIG_TSTMP, INT4(LNE.ORIG_LOCATION_ID) AS ORIG_LOCATION_ID, LNE.ORDER_CREATION_CHANNEL, LNE.ORDER_FULFILLMENT_CHANNEL, LNE.ORDER_CHANNEL, LNE.SCHED_DELIVERY_FLG, LNE.SUBSCRIPTION_ORDER_FLG, LNE.ADD_ON_FLAG, LNE.ISPU_PXY_FIRST_NAME, LNE.ISPU_PXY_LAST_NAME, LNE.ISPU_PXY_ADD_LINE1, LNE.ISPU_PXY_ADD_LINE2, LNE.ISPU_PXY_ADD_LINE3, LNE.ISPU_PXY_CITY, LNE.ISPU_PXY_STATE, LNE.ISPU_PXY_POSTAL_CD, LNE.ISPU_PXY_COUNTRY, LNE.ISPU_PXY_EMAIL, LNE.ISUP_PXY_PHONE, LNE.OMS_COMPANY_ID, LNE.EXCHANGE_RATE_PCNT, LNE.CANCEL_TSTMP, LNE.UPDATE_TSTMP, LNE.LOAD_TSTMP FROM ((ADMIN.OMS_DIST_ORDER_LN LNE LEFT JOIN ADMIN.SITE_PROFILE_RPT RPT ON ((LNE.ORIG_LOCATION_ID = RPT.LOCATION_ID))) LEFT JOIN ADMIN.NZ_TIME_ZONE_SUBS NZT ON ((NZT.TIME_ZONE = RPT.TIME_ZONE))) LIMIT ALL;

\echo
\echo *****  Creating view:  "SALES_TRANS_CLEARANCE_TYLY_CRCY_VW"

CREATE or replace VIEW  SALES_TRANS_CLEARANCE_TYLY_CRCY_VW
(
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     VOID_TYPE_CD,
     SALES_TYPE_ID,
     PRODUCT_ID,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     COMP_FLAG,
     ORIGINAL_UNIT_PRICE_AMT,
     UNIT_PRICE_AMT,
     CLEARANCE_METHOD_ID,
     CLEARANCE_TYPE_ID,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     EXCH_RATE_PCT
) AS
SELECT DTL.DAY_DT, TCP.LOCATION_ID, TCP.SALES_INSTANCE_ID, TCP.UPC_ID, TCP.TP_INVOICE_NBR, TCP.PARENT_UPC_ID, TCP.COMBO_TYPE_CD, TCP.POS_TXN_SEQ_NBR, TCP.VOID_TYPE_CD, TCP.SALES_TYPE_ID, TCP.PRODUCT_ID, DTL.TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN ((DTL.COMP_IND = 1) AND ((DTL.DAY_DT >= SPR.COMP_EFF_DT) AND (DTL.DAY_DT <= SPR.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, TCP.ORIGINAL_UNIT_PRICE_AMT, TCP.UNIT_PRICE_AMT, TCP.CLEARANCE_METHOD_ID, TCP.CLEARANCE_TYPE_ID, TCP.CLEARANCE_AMT, TCP.CLEARANCE_QTY, TCP.CLEARANCE_RETURN_AMT, TCP.CLEARANCE_RETURN_QTY, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE TCP.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM (((ADMIN.SALES_TRANS_CLEARANCE TCP JOIN ADMIN.DAYS_TY_LY DTL ON ((TCP.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((TCP.LOCATION_ID = SPR.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "FP_SKU_STORE_SCS_WEEK_VW"

CREATE or replace VIEW  FP_SKU_STORE_SCS_WEEK_VW
(
     FISCAL_WK,
     WEEK_DT,
     LOCATION_ID,
     STORE_NBR,
     PRODUCT_ID,
     SKU_NBR,
     POG_DBKEY,
     FLOORPLAN_DBKEY,
     SKU_CHANGE_STATUS_CD,
     TRAFFIC_FLOW,
     PRESENTATION,
     CONFIGURATION
) AS
SELECT F.FISCAL_WK, F.WEEK_DT, A.LOCATION_ID, A.STORE_NBR, A.PRODUCT_ID, A.SKU_NBR, A.POG_DBKEY, A.FLOORPLAN_DBKEY, A.SKU_CHANGE_STATUS_CD, C.TRAFFIC_FLOW, C.PRESENTATION, C."CONFIGURATION" FROM ((ADMIN.FP_SKU_CHANGE_STATUS_WEEK A JOIN ADMIN.CKB_SPC_PLANOGRAM C ON ((A.POG_DBKEY = C.CKB_DB_PLANOGRAM_KEY))) JOIN ADMIN.WEEKS F ON ((F.WEEK_DT = "TIMESTAMP"(A.DAY_DT))));

\echo
\echo *****  Creating view:  "CKB_LISTING_CHANGE_DTL_VW"

CREATE or replace VIEW  CKB_LISTING_CHANGE_DTL_VW
(
     FISCAL_WK,
     WEEK_DT,
     LOCATION_ID,
     STORE_NBR,
     PRODUCT_ID,
     SKU_NBR,
     POG_DBKEY,
     FLOORPLAN_DBKEY,
     SKU_CHANGE_STATUS_CD,
     LOAD_DT,
     SKU_FACINGS_QTY,
     POG_CNT,
     TRAFFIC_FLOW,
     PRESENTATION,
     CONFIGURATION,
     POG_TYPE_CD,
     MANUAL_MINIMUM_QTY,
     DEACTIVATE_ON_DT,
     DEACTIVATE_UNTIL_DT,
     "DEMAND_FCST_FOR_FCST_PD_QTY",
     LAST_SKU_CHANGE_STATUS_CD,
     LAST_CHANGE_DT
) AS
SELECT F.FISCAL_WK, F.WEEK_DT, A.LOCATION_ID, A.STORE_NBR, A.PRODUCT_ID, A.SKU_NBR, A.POG_DBKEY, A.FLOORPLAN_DBKEY, A.SKU_CHANGE_STATUS_CD, A.LOAD_DT, A.SKU_FACINGS_QTY, A.POG_CNT, C.TRAFFIC_FLOW, C.PRESENTATION, C."CONFIGURATION", C.POG_TYPE_CD, E.MANUAL_MINIMUM_QTY, E.DEACTIVATE_ON_DT, E.DEACTIVATE_UNTIL_DT, G.DEMAND_FCST_FOR_FCST_PD_QTY, H.LAST_SKU_CHANGE_STATUS_CD, H.LAST_CHANGE_DT FROM (((((ADMIN.FP_SKU_CHANGE_STATUS_WEEK A JOIN ADMIN.CKB_SPC_PLANOGRAM C ON ((A.POG_DBKEY = C.CKB_DB_PLANOGRAM_KEY))) LEFT JOIN ADMIN.DP_DEMAND_PRO E ON (((A.LOCATION_ID = E.LOCATION_ID) AND (A.PRODUCT_ID = E.PRODUCT_ID)))) LEFT JOIN (SELECT AA.DAY_DT, AA.LOCATION_ID, AA.PRODUCT_ID, AA.POG_TYPE_CD, AA.LAST_SKU_CHANGE_STATUS_CD, AA.LAST_CHANGE_DT FROM ADMIN.FP_SKU_CURRENT_LAST_STATUS AA) H ON (((((A.LOCATION_ID = H.LOCATION_ID) AND (A.PRODUCT_ID = H.PRODUCT_ID)) AND (A.DAY_DT = H.DAY_DT)) AND ((C.POG_TYPE_CD)::"VARCHAR" = H.POG_TYPE_CD)))) LEFT JOIN (SELECT DP_DEMAND_WEEK.LOCATION_ID, DP_DEMAND_WEEK.PRODUCT_ID, DP_DEMAND_WEEK.DEMAND_FCST_FOR_FCST_PD_QTY FROM ADMIN.DP_DEMAND_WEEK WHERE (DP_DEMAND_WEEK.WEEK_DT >= (SELECT MAX(DP_DEMAND_WEEK.WEEK_DT) AS MAX FROM ADMIN.DP_DEMAND_WEEK WHERE (DP_DEMAND_WEEK.WEEK_DT > "TIMESTAMP"((DATE(NOW(0)) - 16)))))) G ON (((A.LOCATION_ID = G.LOCATION_ID) AND (A.PRODUCT_ID = G.PRODUCT_ID)))) JOIN ADMIN.WEEKS F ON ((((F.WEEK_DT = "TIMESTAMP"(A.DAY_DT)) AND (A.DAY_DT >= (DATE('now(0)'::"VARCHAR") - 28))) AND (A.DAY_DT <= (DATE('now(0)'::"VARCHAR") + 133)))));

\echo
\echo *****  Creating view:  "VC_ASN_ACCURACY_UTILIZATION_VW"

CREATE or replace VIEW  VC_ASN_ACCURACY_UTILIZATION_VW
(
     VENDOR_ID,
     PO_NBR,
     PO_GID,
     CASE_ID,
     DC_ASN_CASE_UTILIZATION,
     ASN_NBR_VENDOR,
     ASN_NBR_SAP,
     ASN_PO_RCVD_TSTMP,
     ASN_ARTICLE,
     ASN_SHIPPED_QUANTITY,
     ASN_CODE_DATE,
     WMS_AUDIT_FLAG,
     WMS_ARTICLE,
     PRODUCT_ID,
     WMS_UNITS_RCVD,
     WMS_CODE_DATE,
     SKU_NBR_FAILURE,
     QTY_FAILURE,
     QTY_FAILURE_DIF,
     CODE_DATE_FAILURE,
     CODE_DATE_FAILURE_DAYS_DIF,
     CODE_DATE_FAILURE_VENDOR_MISSING,
     TOTAL_FAILURE_ERRORS,
     PALLET_ERROR,
     SAP_CATEGORY_DESC,
     SAP_CLASS_DESC,
     SAP_DEPT_DESC,
     SAP_DIVISION_DESC,
     VENDOR_NAME,
     PARENT_VENDOR_NAME,
     DVL_DESC,
     DC_VERIFY_DAY_DT,
     FISCAL_YR,
     FISCAL_QTR,
     FISCAL_MO,
     FISCAL_WK,
     DC,
     LOCATION_ID,
     LOAD_TSTMP
) AS
SELECT A10.VENDOR_ID, A10.ASN_PO_NBR AS PO_NBR, A10.PO_GID, A10.ASN_CASE_ID AS CASE_ID, CASE WHEN (A11.ASN_CASE_ID = A12.CASE_NBR) THEN 1 ELSE 0 END AS DC_ASN_CASE_UTILIZATION, A11.ASN_NBR_VENDOR, A11.ASN_NBR_SAP, A11.ASN_PO_RCVD_TSTMP, A11.ASN_ARTICLE, A11.ASN_SHIPPED_QUANTITY, A11.ASN_CODE_DATE, A12.AUDIT_STAT_CODE_DESC AS WMS_AUDIT_FLAG, A12.SKU_NBR AS WMS_ARTICLE, A13.PRODUCT_ID, A12.AUDIT_UNITS_RCVD AS WMS_UNITS_RCVD, A12.CODE_XPIRE_DATE AS WMS_CODE_DATE, CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_ARTICLE <> A12.SKU_NBR) THEN 1 ELSE 0 END AS SKU_NBR_FAILURE, CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_SHIPPED_QUANTITY <> A12.AUDIT_UNITS_RCVD) THEN 1 ELSE 0 END AS QTY_FAILURE, CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::"NUMERIC" WHEN (A11.ASN_SHIPPED_QUANTITY <> A12.AUDIT_UNITS_RCVD) THEN (A12.AUDIT_UNITS_RCVD - A11.ASN_SHIPPED_QUANTITY) ELSE '0'::NUMERIC END AS QTY_FAILURE_DIF, CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_CODE_DATE ISNULL) THEN CASE WHEN (A12.CODE_XPIRE_DATE ISNULL) THEN 0 ELSE 1 END WHEN (A11.ASN_CODE_DATE = A12.CODE_XPIRE_DATE) THEN 0 ELSE 1 END AS CODE_DATE_FAILURE, CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_CODE_DATE ISNULL) THEN NULL::INT4 WHEN (A11.ASN_CODE_DATE <> A12.CODE_XPIRE_DATE) THEN (A12.CODE_XPIRE_DATE - A11.ASN_CODE_DATE) ELSE 0 END AS CODE_DATE_FAILURE_DAYS_DIF, CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_CODE_DATE ISNULL) THEN CASE WHEN (A12.CODE_XPIRE_DATE ISNULL) THEN 0 ELSE 1 END ELSE 0 END AS CODE_DATE_FAILURE_VENDOR_MISSING, ((CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_ARTICLE <> A12.SKU_NBR) THEN 1 ELSE 0 END + CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_SHIPPED_QUANTITY <> A12.AUDIT_UNITS_RCVD) THEN 1 ELSE 0 END) + CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_CODE_DATE ISNULL) THEN CASE WHEN (A12.CODE_XPIRE_DATE ISNULL) THEN 0 ELSE 1 END WHEN (A11.ASN_CODE_DATE = A12.CODE_XPIRE_DATE) THEN 0 ELSE 1 END) AS TOTAL_FAILURE_ERRORS, CASE WHEN (((CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_ARTICLE <> A12.SKU_NBR) THEN 1 ELSE 0 END + CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_SHIPPED_QUANTITY <> A12.AUDIT_UNITS_RCVD) THEN 1 ELSE 0 END) + CASE WHEN (A11.ASN_PO_RCVD_TSTMP ISNULL) THEN NULL::INT4 WHEN (A11.ASN_CODE_DATE ISNULL) THEN CASE WHEN (A12.CODE_XPIRE_DATE ISNULL) THEN 0 ELSE 1 END WHEN (A11.ASN_CODE_DATE = A12.CODE_XPIRE_DATE) THEN 0 ELSE 1 END) > 0) THEN 1 ELSE 0 END AS PALLET_ERROR, A13.SAP_CATEGORY_DESC, A13.SAP_CLASS_DESC, A13.SAP_DEPT_DESC, A13.SAP_DIVISION_DESC, A14.VENDOR_NAME, A15.PARENT_VENDOR_NAME, A16.DVL_DESC, DATE(A17.DC_VERIFY_LOCAL_TSTMP) AS DC_VERIFY_DAY_DT, A18.FISCAL_YR, A18.FISCAL_QTR, A18.FISCAL_MO, A18.FISCAL_WK, A19.STORE_NBR AS DC, A10.LOCATION_ID, A10.LOAD_TSTMP FROM (((((((((((SELECT T10.VENDOR_ID, T10.ASN_PO_NBR, T10.PO_GID, T10.LOCATION_ID, T10.ASN_CASE_ID, T10.LOAD_TSTMP FROM (SELECT S10.VENDOR_ID, S10.ASN_PO_NBR, S10.PO_GID, S10.LOCATION_ID, S10.ASN_CASE_ID, MAX(S10.LOAD_TSTMP) AS LOAD_TSTMP FROM ADMIN.VC_ASN_SUCCESSFUL_DAY S10 GROUP BY S10.VENDOR_ID, S10.ASN_PO_NBR, S10.PO_GID, S10.LOCATION_ID, S10.ASN_CASE_ID HAVING (COUNT(DISTINCT S10.ASN_ARTICLE) = '1'::INT8)) T10) UNION (SELECT N10.VENDOR_ID, N10.PO_NBR, N10.PO_GID, N10.LOCATION_ID, (N10.CASE_NBR)::VARCHAR(50) AS CASE_NBR, N10.LOAD_TSTMP FROM (SELECT M10.VENDOR_ID, M10.PO_NBR, M10.PO_GID, M10.LOCATION_ID, M10.CASE_NBR, MAX(M10.LOAD_TSTMP) AS LOAD_TSTMP FROM ADMIN.VC_ASN_AUDIT_DAY M10 GROUP BY M10.VENDOR_ID, M10.PO_NBR, M10.PO_GID, M10.LOCATION_ID, M10.CASE_NBR HAVING (COUNT(DISTINCT M10.SKU_NBR) = '1'::INT8)) N10)) A10 LEFT JOIN ADMIN.VC_ASN_SUCCESSFUL_DAY A11 ON (((((A10.VENDOR_ID = INT8(A11.VENDOR_ID)) AND (A10.ASN_PO_NBR = A11.ASN_PO_NBR)) AND (A10.LOCATION_ID = A11.LOCATION_ID)) AND (A10.ASN_CASE_ID = A11.ASN_CASE_ID)))) LEFT JOIN ADMIN.VC_ASN_AUDIT_DAY A12 ON (((((A10.VENDOR_ID = A12.VENDOR_ID) AND (A10.ASN_PO_NBR = A12.PO_NBR)) AND (A10.LOCATION_ID = A12.LOCATION_ID)) AND (A10.ASN_CASE_ID = A12.CASE_NBR)))) LEFT JOIN ADMIN.SKU_PROFILE_RPT A13 ON ((A12.PRODUCT_ID = A13.PRODUCT_ID))) LEFT JOIN ADMIN.VENDOR_PROFILE_RPT A14 ON ((A10.VENDOR_ID = A14.VENDOR_ID))) LEFT JOIN ADMIN.DM_PG_VENDOR A15 ON ((A10.VENDOR_ID = A15.VENDOR_ID))) LEFT JOIN ADMIN.DM_PG_MGR_DVL A16 ON ((A15.PURCH_GROUP_ID = A16.PURCH_GROUP_ID))) LEFT JOIN ADMIN.SCM_PO A17 ON (((A10.ASN_PO_NBR = INT8(LTRIM(A17.PO_NBR, '0'::"VARCHAR"))) AND (A10.LOCATION_ID = A17.PO_DEST_LOCATION_ID)))) LEFT JOIN ADMIN.DAYS A18 ON (("TIMESTAMP"(DATE(A17.DC_VERIFY_LOCAL_TSTMP)) = A18.DAY_DT))) LEFT JOIN ADMIN.SITE_PROFILE_RPT A19 ON ((A10.LOCATION_ID = A19.LOCATION_ID))) WHERE (A19.STORE_NBR IN (10, 12, 14, 22, 36, 38, 41));

\echo
\echo *****  Creating view:  "SALES_TRANS_PET_INV_VW"

CREATE or replace VIEW  SALES_TRANS_PET_INV_VW
(
     DAY_DT,
     SALES_INSTANCE_ID,
     ORDER_DT,
     LOCATION_ID,
     PRODUCT_ID,
     ORDER_NBR,
     ORDER_CHANNEL,
     SUBSCRIPTION_FLG,
     AFTERPAY_FLG,
     CUSTOMER_EID,
     CUSTOMER_GID,
     CLINIC_NAME,
     CLINIC_ADDR_1,
     CLINIC_PHONE,
     VET_NAME,
     PET_NAME,
     NET_SALES_QTY,
     NET_SALES_AMT,
     EXCH_RATE_PCT,
     ON_HAND_QTY
) AS
SELECT PET.DAY_DT, PET.SALES_INSTANCE_ID, PET.ORDER_DT, PET.LOCATION_ID, PET.PRODUCT_ID, PET.ORDER_NBR, SS.ORDER_CHANNEL, CASE WHEN (FLG.SUBSCRIPTION_FLG ISNULL) THEN 0 ELSE FLG.SUBSCRIPTION_FLG END AS SUBSCRIPTION_FLG, CASE WHEN (FLG.AFTERPAY_FLG ISNULL) THEN 0 ELSE INT4(FLG.AFTERPAY_FLG) END AS AFTERPAY_FLG, CASE WHEN (SS.CUSTOMER_EID ISNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SS.CUSTOMER_EID END AS CUSTOMER_EID, CASE WHEN (SS.CUSTOMER_GID ISNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SS.CUSTOMER_GID END AS CUSTOMER_GID, CASE WHEN (PET.CLINIC_NAME ISNULL) THEN ''::"VARCHAR" ELSE PET.CLINIC_NAME END AS CLINIC_NAME, PET.CLINIC_ADDR_1, PET.CLINIC_PHONE, CASE WHEN (PET.VET_NAME ISNULL) THEN ''::"VARCHAR" ELSE PET.VET_NAME END AS VET_NAME, CASE WHEN (PET.PET_NAME ISNULL) THEN ''::"VARCHAR" ELSE PET.PET_NAME END AS PET_NAME, SUM(SS.NET_SALES_QTY) AS NET_SALES_QTY, SUM(SS.NET_SALES_AMT) AS NET_SALES_AMT, MAX(SS.EXCH_RATE_PCT) AS EXCH_RATE_PCT, SUM(INV.ON_HAND_QTY) AS ON_HAND_QTY FROM ((((SELECT SO.ORDER_DT, VET.DAY_DT, VET.SALES_INSTANCE_ID, SO.ORDER_NBR, SO.LOCATION_ID, SU.PRODUCT_ID, VET.CLINIC_NAME, VET.CLINIC_ADDR_1, VET.CLINIC_PHONE, VET.VET_NAME, PET.PET_NAME FROM ((((ADMIN.SALES_TRANS_PET_VET_CLINIC VET JOIN ADMIN.SALES_TRANS_UPC SU ON (((((SU.DAY_DT = VET.DAY_DT) AND (SU.SALES_INSTANCE_ID = VET.SALES_INSTANCE_ID)) AND (SU.LOCATION_ID = VET.LOCATION_ID)) AND (SU.POS_TXN_SEQ_NBR = VET.SEQ_NBR)))) JOIN ADMIN.SKU_PROFILE_RPT SKU ON ((SKU.PRODUCT_ID = SU.PRODUCT_ID))) JOIN ADMIN.SALES_TRANS_ORDER SO ON ((((SO.DAY_DT = VET.DAY_DT) AND (SO.LOCATION_ID = VET.LOCATION_ID)) AND (SO.SALES_INSTANCE_ID = VET.SALES_INSTANCE_ID)))) JOIN ADMIN.SALES_TRANS_PET PET ON (((((PET.DAY_DT = VET.DAY_DT) AND (PET.LOCATION_ID = VET.LOCATION_ID)) AND (PET.SALES_INSTANCE_ID = VET.SALES_INSTANCE_ID)) AND (PET.SEQ_NBR = VET.SEQ_NBR)))) WHERE ((SU.DAY_DT >= '2017-06-01 00:00:00'::"TIMESTAMP") AND (SO.DAY_DT >= '2017-06-01 00:00:00'::"TIMESTAMP"))) PET LEFT JOIN (SELECT INV.DAY_DT, INV.PRODUCT_ID, INV.LOCATION_ID, SUM(INV.ON_HAND_QTY) AS ON_HAND_QTY FROM ADMIN.INV_INSTOCK_PRICE_DAY INV WHERE (INV.DAY_DT >= '2017-06-01 00:00:00'::"TIMESTAMP") GROUP BY INV.DAY_DT, INV.PRODUCT_ID, INV.LOCATION_ID) INV ON ((((INV.DAY_DT = "TIMESTAMP"(DATE(PET.ORDER_DT))) AND (INV.PRODUCT_ID = PET.PRODUCT_ID)) AND (INV.LOCATION_ID = PET.LOCATION_ID)))) LEFT JOIN (SELECT SS.DAY_DT, SS.SALES_INSTANCE_ID, SS.LOCATION_ID, SS.PRODUCT_ID, SS.ORDER_CHANNEL, SS.CUSTOMER_EID, SS.CUSTOMER_GID, SUM(SS.NET_SALES_QTY) AS NET_SALES_QTY, SUM(SS.NET_SALES_AMT) AS NET_SALES_AMT, MAX(SS.EXCH_RATE_PCT) AS EXCH_RATE_PCT FROM ADMIN.SALES_TRANS_SKU SS WHERE (SS.DAY_DT >= '2017-06-01'::DATE) GROUP BY SS.DAY_DT, SS.SALES_INSTANCE_ID, SS.LOCATION_ID, SS.PRODUCT_ID, SS.ORDER_CHANNEL, SS.CUSTOMER_EID, SS.CUSTOMER_GID) SS ON ((((("TIMESTAMP"(SS.DAY_DT) = PET.DAY_DT) AND (SS.SALES_INSTANCE_ID = PET.SALES_INSTANCE_ID)) AND (SS.LOCATION_ID = PET.LOCATION_ID)) AND (SS.PRODUCT_ID = PET.PRODUCT_ID)))) LEFT JOIN (SELECT PO.ORDER_NBR, DOR.ORIG_LOCATION_ID AS LOCATION_ID, DOL.PRODUCT_ID, 1 AS SUBSCRIPTION_FLG, PO.AFTERPAY_FLG FROM (((ADMIN.OMS_ORDER PO JOIN ADMIN.OMS_ORDER_LN POL ON ((POL.OMS_ORDER_ID = PO.OMS_ORDER_ID))) JOIN ADMIN.OMS_DIST_ORDER DOR ON ((DOR.OMS_ORDER_ID = PO.OMS_ORDER_ID))) JOIN ADMIN.OMS_DIST_ORDER_LN DOL ON (((DOL.OMS_DIST_ORDER_ID = DOR.OMS_DIST_ORDER_ID) AND (DOL.OMS_ORDER_LN_ID = POL.OMS_ORDER_LN_ID)))) WHERE ((DOR.OMS_DO_TYPE_ID = 'Subscription'::"VARCHAR") AND (PO.CREATED_TSTMP >= '2017-06-01 00:00:00'::"TIMESTAMP"))) FLG ON ((((FLG.ORDER_NBR = PET.ORDER_NBR) AND (FLG.LOCATION_ID = PET.LOCATION_ID)) AND (FLG.PRODUCT_ID = PET.PRODUCT_ID)))) GROUP BY PET.DAY_DT, PET.SALES_INSTANCE_ID, PET.ORDER_DT, PET.LOCATION_ID, PET.PRODUCT_ID, PET.ORDER_NBR, SS.ORDER_CHANNEL, CASE WHEN (FLG.SUBSCRIPTION_FLG ISNULL) THEN 0 ELSE FLG.SUBSCRIPTION_FLG END, CASE WHEN (FLG.AFTERPAY_FLG ISNULL) THEN 0 ELSE INT4(FLG.AFTERPAY_FLG) END, CASE WHEN (SS.CUSTOMER_EID ISNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SS.CUSTOMER_EID END, CASE WHEN (SS.CUSTOMER_GID ISNULL) THEN ('-1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SS.CUSTOMER_GID END, CASE WHEN (PET.CLINIC_NAME ISNULL) THEN ''::"VARCHAR" ELSE PET.CLINIC_NAME END, PET.CLINIC_ADDR_1, PET.CLINIC_PHONE, CASE WHEN (PET.VET_NAME ISNULL) THEN ''::"VARCHAR" ELSE PET.VET_NAME END, CASE WHEN (PET.PET_NAME ISNULL) THEN ''::"VARCHAR" ELSE PET.PET_NAME END;

\echo
\echo *****  Creating view:  "SALES_DAY_SKU_STORE_SALES_CAPTAIN_TYLY_CRCY_VW"

CREATE or replace VIEW  SALES_DAY_SKU_STORE_SALES_CAPTAIN_TYLY_CRCY_VW
(
     TRAINING_FLAG,
     RECORD_TRACKER_ID,
     EMPLOYEE_ID,
     JOB_CD,
     START_DATE_TIME,
     END_DATE_TIME,
     DAY_DT,
     SALES_INSTANCE_ID_DIST_KEY,
     PRODUCT_ID,
     SALES_INSTANCE_ID,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     CUSTOMER_EID,
     CUSTOMER_GID,
     SALES_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     COMP_FLAG,
     SALES_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     TRANS_TSTMP,
     CUST_TRANS_ID,
     SPECIAL_SALES_FLAG,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     NET_SALES_AMT,
     NET_SALES_COST,
     NET_SALES_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     NET_MARGIN_AMT,
     EXCH_RATE_PCT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT SC.TRAINING_FLAG, SC.RECORD_TRACKER_ID, SC.EMPLOYEE_ID, SC.JOB_CD, SC.START_DATE_TIME, SC.END_DATE_TIME, DATE(DTL.DAY_DT) AS DAY_DT, U.SALES_INSTANCE_ID_DIST_KEY, U.PRODUCT_ID, U.SALES_INSTANCE_ID, DTL.TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, U.CUSTOMER_EID, U.CUSTOMER_GID, U.DAY_DT AS SALES_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, U.LOCATION_ID, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, U.SALES_TYPE_ID, U.VOID_TYPE_CD, U.TXN_WAS_POST_VOIDED_FLAG, U.ORDER_NBR, U.ORDER_SEQ_NBR, U.ORDER_CHANNEL, U.ORDER_ASSIST_LOCATION_ID, U.TRANS_TSTMP, U.CUST_TRANS_ID, U.SPECIAL_SALES_FLAG, U.SALES_AMT, U.SALES_COST, U.SALES_QTY, U.SPECIAL_SALES_AMT, U.SPECIAL_SALES_QTY, U.RETURN_AMT, U.RETURN_COST, U.RETURN_QTY, U.SPECIAL_RETURN_AMT, U.SPECIAL_RETURN_QTY, U.SPECIAL_SRVC_AMT, U.CLEARANCE_AMT, U.CLEARANCE_QTY, U.CLEARANCE_RETURN_AMT, U.CLEARANCE_RETURN_QTY, U.DISCOUNT_AMT, U.DISCOUNT_QTY, U.DISCOUNT_RETURN_AMT, U.DISCOUNT_RETURN_QTY, U.POS_COUPON_AMT, U.POS_COUPON_QTY, U.POS_COUPON_ALLOC_AMT, U.POS_COUPON_ALLOC_QTY, U.NET_SALES_AMT, U.NET_SALES_COST, U.NET_SALES_QTY, U.MA_SALES_AMT, U.MA_SALES_QTY, U.MA_TRANS_AMT, U.MA_TRANS_COST, U.MA_TRANS_QTY, U.NET_MARGIN_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE U.EXCH_RATE_PCT END AS EXCH_RATE_PCT, U.UPDATE_TSTMP, U.LOAD_TSTMP FROM (((((ADMIN.SALES_TRANS_SKU U JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(U.DAY_DT) = DTL.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((U.LOCATION_ID = SP.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) JOIN ADMIN.STORE_DAY_SALES_CAPTAIN SC ON ((((DTL.DAY_DT = "TIMESTAMP"(SC.DAY_DT)) AND (U.LOCATION_ID = SC.LOCATION_ID)) AND (("TIMESTAMP"(((((TO_CHAR(DTL.DAY_DT, 'YYYY-MM-DD'::"VARCHAR") || ' '::"VARCHAR") || TO_CHAR(U.TRANS_TSTMP, 'HH24:'::"VARCHAR")) || ':'::"VARCHAR") || TO_CHAR(U.TRANS_TSTMP, 'MI'::"VARCHAR"))) >= SC.START_DATE_TIME) AND ("TIMESTAMP"(((((TO_CHAR(DTL.DAY_DT, 'YYYY-MM-DD'::"VARCHAR") || ' '::"VARCHAR") || TO_CHAR(U.TRANS_TSTMP, 'HH24:'::"VARCHAR")) || ':'::"VARCHAR") || TO_CHAR(U.TRANS_TSTMP, 'MI'::"VARCHAR"))) <= SC.END_DATE_TIME)))));

\echo
\echo *****  Creating view:  "STORE_DAY_SCHEDULE_VW_OLD"

CREATE or replace VIEW  STORE_DAY_SCHEDULE_VW_OLD
(
     DAY_DATE,
     LOCATION_ID,
     STORENBR,
     EMPLOYEE_ID,
     EMPLOYEE_NAME,
     EMPLOYEE_ID0,
     JOB_CODE,
     JOB_CODE_DESC,
     JOB_CODE_RANK,
     CORE_HRS,
     MIN_START_TM,
     MAX_END_TM,
     BIRTH_DT,
     STORE_DEPT_NBR,
     STORE_DEPT_DESC
) AS
((SELECT A11.DAY_DT AS DAY_DATE, A12.LOCATION_ID, A14.STORE_NBR AS STORENBR, INT8(A14.EMPLOYEE_ID) AS EMPLOYEE_ID, (MAX(BTRIM(((BTRIM(CASE WHEN (A15.EMPL_FIRST_NAME NOTNULL) THEN A15.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (A15.EMPL_LAST_NAME NOTNULL) THEN A15.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END)))))::VARCHAR(101) AS EMPLOYEE_NAME, (MAX(CASE WHEN (LENGTH("VARCHAR"(A15.EMPLOYEE_ID)) < 6) THEN LPAD("VARCHAR"(A15.EMPLOYEE_ID), 6, '0'::"VARCHAR") ELSE "VARCHAR"(A15.EMPLOYEE_ID) END))::VARCHAR(22) AS EMPLOYEE_ID0, A14.JOB_CODE, (MAX(RTRIM(A16.JOB_CODE_DESC)))::VARCHAR(40) AS JOB_CODE_DESC, CASE WHEN (A14.JOB_CODE = 2009) THEN 0 WHEN (A14.JOB_CODE = 3001) THEN 1 WHEN (A14.JOB_CODE = 3002) THEN 2 WHEN (A14.JOB_CODE = 3005) THEN 4 WHEN (A14.JOB_CODE = 3006) THEN 5 WHEN (A14.JOB_CODE = 3010) THEN 7 WHEN (A14.JOB_CODE = 3021) THEN 8 WHEN (A14.JOB_CODE = 3011) THEN 10 WHEN (A14.JOB_CODE = 1647) THEN 11 WHEN (A14.JOB_CODE = 1620) THEN 14 WHEN (A14.JOB_CODE = 1623) THEN 15 WHEN (A14.JOB_CODE = 1617) THEN 17 WHEN (A14.JOB_CODE = 1615) THEN 18 WHEN (A14.JOB_CODE = 1606) THEN 20 WHEN (A14.JOB_CODE = 2641) THEN 21 WHEN (A14.JOB_CODE = 1642) THEN 23 WHEN (A14.JOB_CODE = 1645) THEN 24 WHEN (A14.JOB_CODE = 1649) THEN 26 WHEN (A14.JOB_CODE = 2028) THEN 27 WHEN (A14.JOB_CODE = 2018) THEN 29 WHEN (A14.JOB_CODE = 3007) THEN 30 WHEN (A14.JOB_CODE = 3009) THEN 32 WHEN (A14.JOB_CODE = 2640) THEN 33 WHEN (A14.JOB_CODE = 2620) THEN 35 WHEN (A14.JOB_CODE = 1651) THEN 38 WHEN (A14.JOB_CODE = 1627) THEN 42 WHEN (A14.JOB_CODE = 2650) THEN 46 WHEN (A14.JOB_CODE = 2711) THEN 54 WHEN (A14.JOB_CODE = 1619) THEN 58 WHEN (A14.JOB_CODE = 2022) THEN 62 WHEN (A14.JOB_CODE = 2048) THEN 74 WHEN (A14.JOB_CODE = 1658) THEN 82 WHEN (A14.JOB_CODE = 2710) THEN 86 WHEN (A14.JOB_CODE = 2040) THEN 90 WHEN (A14.JOB_CODE = 2016) THEN 94 WHEN (A14.JOB_CODE = 2660) THEN 95 WHEN (A14.JOB_CODE = 2651) THEN 97 WHEN (A14.JOB_CODE = 1680) THEN 98 ELSE A14.JOB_CODE END AS JOB_CODE_RANK, (SUM(A11.CORE_HRS))::NUMERIC(38,6) AS CORE_HRS, MIN(A11.STRT_DTM) AS MIN_START_TM, MAX(A11.END_DTM) AS MAX_END_TM, MAX(A14.EMPL_BIRTH_DT) AS BIRTH_DT, (MAX(A14.STORE_DEPT_NBR))::VARCHAR(8) AS STORE_DEPT_NBR, (MAX(RTRIM(A18.STORE_DEPT_DESC)))::VARCHAR(40) AS STORE_DEPT_DESC FROM ((((((ADMIN.WFA_TSCHD A11 JOIN ADMIN.SITE_PROFILE_RPT A12 ON ((A11.LOCATION_ID = A12.LOCATION_ID))) JOIN ADMIN.EMPLOYEE_PROFILE_RPT A14 ON (((A11.EMPLOYEE_ID = "NUMERIC"(A14.EMPLOYEE_ID)) AND (A12.LOCATION_ID = A14.LOCATION_ID)))) JOIN ADMIN.EMPLOYEE_NAME_VIEW A15 ON (((A14.EMPLOYEE_ID = A15.EMPLOYEE_ID) AND (A14.EMPLOYEE_ID = A15.EMPLOYEE_ID)))) JOIN ADMIN.JOB_CODE A16 ON ((A14.JOB_CODE = A16.JOB_CODE))) JOIN ADMIN.SITE_PROFILE_RPT A17 ON (((A14.STORE_NBR = A17.STORE_NBR) AND (A12.LOCATION_ID = A17.LOCATION_ID)))) JOIN ADMIN.STORE_DEPT A18 ON ((A14.STORE_DEPT_NBR = A18.STORE_DEPT_NBR))) WHERE (((A12.LOCATION_TYPE_ID IN (8)) AND (A12.SITE_SALES_FLAG IN ('1'::BPCHAR))) AND (A11.DAY_DT = "TIMESTAMP"((DATE("TIMESTAMP"(TO_DATE("VARCHAR"(DATE('now(0)'::"VARCHAR")), 'yyyy-mm-dd'::"VARCHAR"))) - 6)))) GROUP BY A11.DAY_DT, A12.LOCATION_ID, A14.STORE_NBR, A14.EMPLOYEE_ID, A14.JOB_CODE, CASE WHEN (A14.JOB_CODE = 2009) THEN 0 WHEN (A14.JOB_CODE = 3001) THEN 1 WHEN (A14.JOB_CODE = 3002) THEN 2 WHEN (A14.JOB_CODE = 3005) THEN 4 WHEN (A14.JOB_CODE = 3006) THEN 5 WHEN (A14.JOB_CODE = 3010) THEN 7 WHEN (A14.JOB_CODE = 3021) THEN 8 WHEN (A14.JOB_CODE = 3011) THEN 10 WHEN (A14.JOB_CODE = 1647) THEN 11 WHEN (A14.JOB_CODE = 1620) THEN 14 WHEN (A14.JOB_CODE = 1623) THEN 15 WHEN (A14.JOB_CODE = 1617) THEN 17 WHEN (A14.JOB_CODE = 1615) THEN 18 WHEN (A14.JOB_CODE = 1606) THEN 20 WHEN (A14.JOB_CODE = 2641) THEN 21 WHEN (A14.JOB_CODE = 1642) THEN 23 WHEN (A14.JOB_CODE = 1645) THEN 24 WHEN (A14.JOB_CODE = 1649) THEN 26 WHEN (A14.JOB_CODE = 2028) THEN 27 WHEN (A14.JOB_CODE = 2018) THEN 29 WHEN (A14.JOB_CODE = 3007) THEN 30 WHEN (A14.JOB_CODE = 3009) THEN 32 WHEN (A14.JOB_CODE = 2640) THEN 33 WHEN (A14.JOB_CODE = 2620) THEN 35 WHEN (A14.JOB_CODE = 1651) THEN 38 WHEN (A14.JOB_CODE = 1627) THEN 42 WHEN (A14.JOB_CODE = 2650) THEN 46 WHEN (A14.JOB_CODE = 2711) THEN 54 WHEN (A14.JOB_CODE = 1619) THEN 58 WHEN (A14.JOB_CODE = 2022) THEN 62 WHEN (A14.JOB_CODE = 2048) THEN 74 WHEN (A14.JOB_CODE = 1658) THEN 82 WHEN (A14.JOB_CODE = 2710) THEN 86 WHEN (A14.JOB_CODE = 2040) THEN 90 WHEN (A14.JOB_CODE = 2016) THEN 94 WHEN (A14.JOB_CODE = 2660) THEN 95 WHEN (A14.JOB_CODE = 2651) THEN 97 WHEN (A14.JOB_CODE = 1680) THEN 98 ELSE A14.JOB_CODE END) UNION (SELECT "TIMESTAMP"((DATE("TIMESTAMP"(DATE('now(0)'::"VARCHAR"))) - 6)) AS DAY_DATE, A14.LOCATION_ID, A14.STORE_NBR AS STORENBR, A11.EMPLOYEE_ID, (MAX(BTRIM(((BTRIM(CASE WHEN (A11.EMPL_FIRST_NAME NOTNULL) THEN A11.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (A11.EMPL_LAST_NAME NOTNULL) THEN A11.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END)))))::VARCHAR(101) AS EMPLOYEE_NAME, (MAX(CASE WHEN (LENGTH("VARCHAR"(A11.EMPLOYEE_ID)) < 6) THEN LPAD("VARCHAR"(A11.EMPLOYEE_ID), 6, '0'::"VARCHAR") ELSE "VARCHAR"(A11.EMPLOYEE_ID) END))::VARCHAR(22) AS EMPLOYEE_ID0, A12.JOB_CODE, (MAX(RTRIM(A13.JOB_CODE_DESC)))::VARCHAR(40) AS JOB_CODE_DESC, 99 AS JOB_CODE_RANK, ('0'::NUMERIC)::NUMERIC(38,6) AS CORE_HRS, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '09:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MIN_START_TM, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '21:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MAX_END_TM, MAX(A12.EMPL_BIRTH_DT) AS BIRTH_DT, 2 AS STORE_DEPT_NBR, ('Core Associate'::"VARCHAR")::VARCHAR(40) AS STORE_DEPT_DESC FROM (((ADMIN.EMPLOYEE_NAME_VIEW A11 JOIN ADMIN.EMPLOYEE_PROFILE_RPT A12 ON ((A11.EMPLOYEE_ID = A12.EMPLOYEE_ID))) JOIN ADMIN.JOB_CODE A13 ON ((A12.JOB_CODE = A13.JOB_CODE))) JOIN ADMIN.SITE_PROFILE_RPT A14 ON ((INT4("SUBSTRING"(A12.PS_PERSONNEL_SUBAREA_ID, 2)) = A14.DISTRICT_ID))) WHERE (((A12.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1), ('L'::"VARCHAR")::VARCHAR(1))) AND (INT4((A14.SITE_SALES_FLAG)::"VARCHAR") = 1)) AND (A12.PS_PERSONNEL_SUBAREA_ID ~~ LIKE_ESCAPE('D%'::"VARCHAR", '\'::"VARCHAR"))) GROUP BY (DATE('now(0)'::"VARCHAR") - 6), A14.LOCATION_ID, A14.STORE_NBR, A11.EMPLOYEE_ID, A12.JOB_CODE)) UNION (SELECT "TIMESTAMP"((DATE("TIMESTAMP"(DATE('now(0)'::"VARCHAR"))) - 6)) AS DAY_DATE, A14.LOCATION_ID, A14.STORE_NBR AS STORENBR, A11.EMPLOYEE_ID, (MAX(BTRIM(((BTRIM(CASE WHEN (A11.EMPL_FIRST_NAME NOTNULL) THEN A11.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (A11.EMPL_LAST_NAME NOTNULL) THEN A11.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END)))))::VARCHAR(101) AS EMPLOYEE_NAME, (MAX(CASE WHEN (LENGTH("VARCHAR"(A11.EMPLOYEE_ID)) < 6) THEN LPAD("VARCHAR"(A11.EMPLOYEE_ID), 6, '0'::"VARCHAR") ELSE "VARCHAR"(A11.EMPLOYEE_ID) END))::VARCHAR(22) AS EMPLOYEE_ID0, A12.JOB_CODE, (MAX(RTRIM(A13.JOB_CODE_DESC)))::VARCHAR(40) AS JOB_CODE_DESC, 99 AS JOB_CODE_RANK, ('0'::NUMERIC)::NUMERIC(38,6) AS CORE_HRS, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '09:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MIN_START_TM, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '21:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MAX_END_TM, MAX(A12.EMPL_BIRTH_DT) AS BIRTH_DT, 2 AS STORE_DEPT_NBR, ('Core Associate'::"VARCHAR")::VARCHAR(40) AS STORE_DEPT_DESC FROM (((ADMIN.EMPLOYEE_NAME_VIEW A11 JOIN ADMIN.EMPLOYEE_PROFILE_RPT A12 ON ((A11.EMPLOYEE_ID = A12.EMPLOYEE_ID))) JOIN ADMIN.JOB_CODE A13 ON (((A12.JOB_CODE = A13.JOB_CODE) AND (A12.JOB_CODE IN (3021, 3010, 3011, 3005, 3006, 3001, 3002))))) JOIN ADMIN.SITE_PROFILE_RPT A14 ON (((A12.STORE_NBR = A14.STORE_NBR) AND (A12.LOCATION_ID = A14.LOCATION_ID)))) WHERE (((A12.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1), ('L'::"VARCHAR")::VARCHAR(1))) AND (INT4((A14.SITE_SALES_FLAG)::"VARCHAR") = 1)) AND (A11.EMPLOYEE_ID <> ALL (SELECT WFA_TSCHD.EMPLOYEE_ID FROM ADMIN.WFA_TSCHD WHERE (WFA_TSCHD.DAY_DT = "TIMESTAMP"((DATE("TIMESTAMP"(TO_DATE("VARCHAR"(DATE('now(0)'::"VARCHAR")), 'yyyy-mm-dd'::"VARCHAR"))) - 6)))))) GROUP BY (DATE('now(0)'::"VARCHAR") - 6), A14.LOCATION_ID, A14.STORE_NBR, A11.EMPLOYEE_ID, A12.JOB_CODE);

\echo
\echo *****  Creating view:  "TRAFFIC_DAY_STORE_SALES_CAPTAIN_VW"

CREATE or replace VIEW  TRAFFIC_DAY_STORE_SALES_CAPTAIN_VW
(
     TRAINING_FLAG,
     EMPLOYEE_ID,
     JOB_CD,
     START_DATE_TIME,
     END_DATE_TIME,
     DAY_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     PERIOD_START_TSTMP,
     PERIOD_END_TSTMP,
     TY_LY_FLAG,
     COMP_FLAG,
     TRAFFIC_COMP_FLAG,
     ACCURACY_FLAG,
     ORBIT_ID,
     CUST_ENTRY_CNT,
     CUST_EXIT_CNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT SC.TRAINING_FLAG, SC.EMPLOYEE_ID, SC.JOB_CD, SC.START_DATE_TIME, SC.END_DATE_TIME, DATE(DTL.DAY_DT) AS DAY_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, ST.LOCATION_ID, ST.PERIOD_START_TSTMP, ST.PERIOD_END_TSTMP, DTL.TY_LY_FLAG, CASE WHEN (((DTL.COMP_IND = 1) AND (DTL.DAY_DT >= SP.COMP_EFF_DT)) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, CASE WHEN (DTL.DAY_DT >= TRFFC_START.TRAFFIC_COMP_START_DT) THEN 1 ELSE 0 END AS TRAFFIC_COMP_FLAG, ST.ACCURACY_FLAG, ST.ORBIT_ID, ST.CUST_ENTRY_CNT, ST.CUST_EXIT_CNT, ST.UPDATE_TSTMP, ST.LOAD_TSTMP FROM (((((ADMIN.SITE_TRAFFIC ST JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(ST.DAY_DT) = DTL.TRANS_DAY_DT))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((ST.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN (SELECT PRE.LOCATION_ID, DTL.DAY_DT AS TRAFFIC_COMP_START_DT FROM (((SELECT ST.LOCATION_ID, MIN(CASE WHEN (ST.CUST_EXIT_CNT <> 0) THEN ST.DAY_DT ELSE NULL::DATE END) AS START_DT FROM ADMIN.SITE_TRAFFIC ST GROUP BY ST.LOCATION_ID) PRE JOIN ADMIN.DAYS D ON (("TIMESTAMP"(PRE.START_DT) = D.DAY_DT))) JOIN ADMIN.DAYS_TY_LY DTL ON ((("TIMESTAMP"(CASE WHEN (D.DAY_OF_WK_NBR = 1) THEN PRE.START_DT ELSE ((PRE.START_DT - INT4(D.DAY_OF_WK_NBR)) + 8) END) = DTL.TRANS_DAY_DT) AND (DTL.TY_LY_FLAG = 'LY'::"VARCHAR"))))) TRFFC_START ON ((ST.LOCATION_ID = TRFFC_START.LOCATION_ID))) JOIN ADMIN.STORE_DAY_SALES_CAPTAIN SC ON ((((DTL.DAY_DT = "TIMESTAMP"(SC.DAY_DT)) AND (SC.LOCATION_ID = ST.LOCATION_ID)) AND ((((DTL.TY_LY_FLAG = 'TY'::"VARCHAR") AND (ST.PERIOD_END_TSTMP >= SC.START_DATE_TIME)) AND (ST.PERIOD_END_TSTMP <= SC.END_DATE_TIME)) OR (((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND (ST.PERIOD_END_TSTMP >= (SC.START_DATE_TIME - (D.DAY_DT - DTL.TRANS_DAY_DT)))) AND (ST.PERIOD_END_TSTMP <= (SC.END_DATE_TIME - (D.DAY_DT - DTL.TRANS_DAY_DT))))))));

\echo
\echo *****  Creating view:  "FP_FIXTURE_SITE_VW"

CREATE or replace VIEW  FP_FIXTURE_SITE_VW
(
     CKB_DB_FLR_FIXTURE_KEY,
     CKB_DB_FLOOR_PLAN_KEY,
     FIXTURE_NAME,
     COLOR,
     AISLE_NUMBER,
     WIDTH,
     HEIGHT,
     DEPTH,
     LOAD_DT,
     UPDATE_DT,
     TICKWIDTH,
     NBR_SECTIONS,
     LOCATION_ID
) AS
SELECT FF.CKB_DB_FLR_FIXTURE_KEY, FF.CKB_DB_FLOOR_PLAN_KEY, FF.FIXTURE_NAME, FF.COLOR, FF.AISLE_NUMBER, FF.WIDTH, FF.HEIGHT, FF."DEPTH", FF.LOAD_DT, FF.UPDATE_DT, FF.TICKWIDTH, FF.NBR_SECTIONS, S.LOCATION_ID FROM ((ADMIN.SITE_PROFILE_RPT S JOIN ADMIN.CKB_FLR_FLOORPLAN F ON ((S.LOCATION_ID = F.LOCATION_ID))) JOIN ADMIN.CKB_FLR_FIXTURE FF ON ((F.CKB_DB_FLOOR_PLAN_KEY = FF.CKB_DB_FLOOR_PLAN_KEY)));

\echo
\echo *****  Creating view:  "POG_SITE_PERFORMANCE_VW"

CREATE or replace VIEW  POG_SITE_PERFORMANCE_VW
(
     CKB_DB_PLANOGRAM_KEY,
     LOCATION_ID,
     CKB_DB_FLOOR_PLAN_KEY,
     NXT_IMMEDIATE_POG_LIVE_DT,
     FLR_PERF_DEL_FLAG
) AS
SELECT DISTINCT A.CKB_DB_PLANOGRAM_KEY, F.LOCATION_ID, A.CKB_DB_FLOOR_PLAN_KEY, MIN(CASE WHEN (A.NXT_IMMEDIATE_POG_LV_DT ISNULL) THEN NULL::"TIMESTAMP" ELSE A.NXT_IMMEDIATE_POG_LV_DT END) AS NXT_IMMEDIATE_POG_LIVE_DT, A.DEL_FLAG AS FLR_PERF_DEL_FLAG FROM (((SELECT S.CKB_DB_PLANOGRAM_KEY, C.CKB_DB_FLOOR_PLAN_KEY, MIN(D.NXT_IMMEDIATE_POG_DT) AS NXT_IMMEDIATE_POG_LV_DT, C.DEL_FLAG FROM ((ADMIN.CKB_SPC_PLANOGRAM S LEFT JOIN ADMIN.CKB_FLR_PERFORMANCE C ON ((S.CKB_DB_PLANOGRAM_KEY = C.CKB_DB_PLANOGRAM_KEY))) LEFT JOIN (SELECT C.CKB_DB_PLANOGRAM_KEY, MIN(CC.DB_DATE_EFFECTIVE_FROM) AS NXT_IMMEDIATE_POG_DT FROM (ADMIN.CKB_SPC_PLANOGRAM C JOIN ADMIN.CKB_SPC_PLANOGRAM CC ON ((C.CKB_DB_PLANOGRAM_KEY = CC.DB_VERSION_KEY))) WHERE (((CC.DB_DATE_EFFECTIVE_FROM NOTNULL) AND (C.CKB_DB_PLANOGRAM_KEY <> CC.CKB_DB_PLANOGRAM_KEY)) AND (CC.DB_STATUS NOT IN (4, 200))) GROUP BY C.CKB_DB_PLANOGRAM_KEY) D ON ((S.CKB_DB_PLANOGRAM_KEY = D.CKB_DB_PLANOGRAM_KEY))) WHERE (C.CKB_DB_FLOOR_PLAN_KEY NOTNULL) GROUP BY S.CKB_DB_PLANOGRAM_KEY, C.CKB_DB_FLOOR_PLAN_KEY, C.DEL_FLAG) UNION (SELECT S.CKB_DB_PLANOGRAM_KEY, CC.CKB_DB_FLOOR_PLAN_KEY, NULL::"TIMESTAMP" AS NXT_IMMEDIATE_POG_LV_DT, CC.DEL_FLAG FROM (ADMIN.CKB_SPC_PLANOGRAM S LEFT JOIN ADMIN.CKB_FLR_PERFORMANCE CC ON ((S.DB_VERSION_KEY = CC.CKB_DB_PLANOGRAM_KEY))) WHERE (CC.CKB_DB_FLOOR_PLAN_KEY NOTNULL) GROUP BY S.CKB_DB_PLANOGRAM_KEY, CC.CKB_DB_FLOOR_PLAN_KEY, CC.DEL_FLAG)) A LEFT JOIN ADMIN.IKB_FLR_FLOORPLAN F ON ((A.CKB_DB_FLOOR_PLAN_KEY = F.DBKEY))) GROUP BY A.CKB_DB_PLANOGRAM_KEY, F.LOCATION_ID, A.CKB_DB_FLOOR_PLAN_KEY, A.DEL_FLAG;

\echo
\echo *****  Creating view:  "P4P_EMPL_VW"

CREATE or replace VIEW  P4P_EMPL_VW
(
     LOCATION_ID,
     WHSE,
     EMPLOYEE_ID,
     LOGIN_USER_ID,
     PSWD,
     TAX_ID_NBR,
     LAST_NAME,
     FIRST_NAME,
     MID_NAME,
     NICK_NAME,
     ADDR_LINE_1,
     ADDR_LINE_2,
     ADDR_LINE_3,
     TEL_NBR,
     PSTL_CODE,
     EMP_START_DATE,
     LANG,
     CMNT,
     CREATE_DATE_TIME,
     MOD_DATE_TIME,
     USER_ID,
     SOURCE,
     IS_SUPER,
     PRIM_WHSE,
     CITY,
     STATE,
     COUNTRY,
     EMAIL,
     FAX,
     MISC_TXT_1,
     MISC_TXT_2,
     MISC_NUM_1,
     MISC_NUM_2,
     DEL_FLG,
     ODS_UPDATE_TSTMP,
     ODS_LOAD_TSTMP,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT SP.LOCATION_ID, EE.WHSE, EE.EMP_ID AS EMPLOYEE_ID, EE.LOGIN_USER_ID, EE.PSWD, EE.TAX_ID_NBR, EE.LAST_NAME, EE.FIRST_NAME, EE.MID_NAME, EE.NICK_NAME, EE.ADDR_LINE_1, EE.ADDR_LINE_2, EE.ADDR_LINE_3, EE.TEL_NBR, EE.PSTL_CODE, EE.EMP_START_DATE, EE.LANG, EE.CMNT, EE.CREATE_DATE_TIME, EE.MOD_DATE_TIME, EE.USER_ID, EE.SOURCE, EE.IS_SUPER, EE.PRIM_WHSE, EE.CITY, EE."STATE", EE.COUNTRY, EE.EMAIL, EE.FAX, EE.MISC_TXT_1, EE.MISC_TXT_2, EE.MISC_NUM_1, EE.MISC_NUM_2, EE.DEL_FLG, EE.ODS_UPDATE_TSTMP, EE.ODS_LOAD_TSTMP, EE.UPDATE_TSTMP, EE.LOAD_TSTMP FROM (ADMIN.E_EMP EE JOIN ADMIN.SITE_PROFILE SP ON ((INT4(EE.WHSE) = SP.STORE_NBR)));

\echo
\echo *****  Creating view:  "SV_CHANGE_REQUEST_VW"

CREATE or replace VIEW  SV_CHANGE_REQUEST_VW
(
     ACTIVE,
     ACTIVITY_DUE,
     ADDITIONAL_ASSIGNEE_LIST,
     APPROVAL,
     DV_APPROVAL,
     APPROVAL_HISTORY,
     APPROVAL_SET,
     ASSIGNED_TO,
     DV_ASSIGNED_TO,
     ASSIGNMENT_GROUP,
     DV_ASSIGNMENT_GROUP,
     BACKOUT_PLAN,
     BUSINESS_DURATION,
     DV_BUSINESS_DURATION,
     BUSINESS_SERVICE,
     DV_BUSINESS_SERVICE,
     CAB_DATE,
     CAB_RECOMMENDATION,
     CALENDAR_DURATION,
     DV_CALENDAR_DURATION,
     CATEGORY,
     DV_CATEGORY,
     CHANGE_PLAN,
     CLOSE_NOTES,
     CLOSED_AT_DATE,
     CLOSED_AT,
     CLOSED_BY,
     DV_CLOSED_BY,
     CMDB_CI,
     DV_CMDB_CI,
     COMMENTS,
     COMMENTS_AND_WORK_NOTES,
     COMPANY,
     DV_COMPANY,
     CONFLICT_LAST_RUN,
     CONFLICT_STATUS,
     DV_CONFLICT_STATUS,
     CONTACT_TYPE,
     DV_CONTACT_TYPE,
     CORRELATION_DISPLAY,
     CORRELATION_ID,
     DELIVERY_PLAN,
     DV_DELIVERY_PLAN,
     DELIVERY_TASK,
     DV_DELIVERY_TASK,
     DESCRIPTION,
     DUE_DATE,
     END_DATE,
     ESCALATION,
     DV_ESCALATION,
     EXPECTED_START,
     FOLLOW_UP,
     GROUP_LIST,
     IMPACT,
     DV_IMPACT,
     IMPLEMENTATION_PLAN,
     JUSTIFICATION,
     KNOWLEDGE,
     LOCATION,
     DV_LOCATION,
     MADE_SLA,
     NUMBER,
     OPENED_AT_DATE,
     OPENED_AT,
     OPENED_BY,
     DV_OPENED_BY,
     ORDERR,
     OUTSIDE_MAINTENANCE_SCHEDULE,
     PARENT,
     DV_PARENT,
     PHASE,
     DV_PHASE,
     PHASE_STATE,
     DV_PHASE_STATE,
     PRIORITY,
     DV_PRIORITY,
     PRODUCTION_SYSTEM,
     REASON,
     DV_REASON,
     REASSIGNMENT_COUNT,
     REJECTION_GOTO,
     DV_REJECTION_GOTO,
     REQUESTED_BY,
     DV_REQUESTED_BY,
     REQUESTED_BY_DATE,
     REVIEW_COMMENTS,
     REVIEW_DATE,
     REVIEW_STATUS,
     DV_REVIEW_STATUS,
     RISK,
     DV_RISK,
     SCOPE,
     DV_SCOPE,
     SHORT_DESCRIPTION,
     SLA_DUE,
     START_DATE,
     STATE,
     DV_STATE,
     SYS_CLASS_NAME,
     DV_SYS_CLASS_NAME,
     SYS_CREATED_BY,
     SYS_CREATED_ON,
     SYS_DOMAIN,
     SYS_ID,
     SYS_MOD_COUNT,
     SYS_TAGS,
     SYS_UPDATED_BY,
     SYS_UPDATED_ON,
     TEST_PLAN,
     TIME_WORKED,
     DV_TIME_WORKED,
     TYPEE,
     DV_TYPE,
     U_APPROVAL_ADDITIONAL_GROUPS,
     U_APPROVAL_ADDITIONAL_USERS,
     U_APPROVAL_CUSTOMER,
     DV_U_APPROVAL_CUSTOMER,
     U_APPROVAL_DIRECTOR,
     DV_U_APPROVAL_DIRECTOR,
     U_APPROVAL_GROUP_ARCHITECTS,
     DV_U_APPROVAL_GROUP_ARCHITECTS,
     U_APPROVAL_MANAGER,
     DV_U_APPROVAL_MANAGER,
     U_CHANGE_DURATION,
     DV_U_CHANGE_DURATION,
     U_CHANGE_STATE,
     DV_U_CHANGE_STATE,
     U_CHANGE_STATUS,
     DV_U_CHANGE_STATUS,
     U_CI_BLACK_OUT,
     U_CURRENT_DATE_TIME,
     U_CUSTOMER,
     DV_U_CUSTOMER,
     U_DIRECTOR,
     DV_U_DIRECTOR,
     U_IS_COMPLEXITY,
     DV_U_IS_COMPLEXITY,
     U_LATE_GROUP_APPROVALS,
     U_MANAGER,
     DV_U_MANAGER,
     U_NOTES,
     U_NOTIFICATION_FLAG,
     DV_U_NOTIFICATION_FLAG,
     U_NOTIFICATIONS_SENT,
     DV_U_NOTIFICATIONS_SENT,
     U_OUTAGE_DURATION,
     DV_U_OUTAGE_DURATION,
     U_OUTAGE_REQUIRED,
     U_OUTAGE_START,
     U_RESET_FLAG,
     U_SECOND_APPROVALS,
     U_SECOND_CHANCE_APPROVALS,
     U_VP,
     DV_U_VP,
     U_VP_APPROVAL_REQUIRED,
     UPON_APPROVAL,
     DV_UPON_APPROVAL,
     UPON_REJECT,
     DV_UPON_REJECT,
     URGENCY,
     DV_URGENCY,
     USER_INPUT,
     VARIABLES,
     WATCH_LIST,
     WF_ACTIVITY,
     DV_WF_ACTIVITY,
     WORK_END,
     WORK_NOTES,
     WORK_NOTES_LIST,
     WORK_START
) AS
SELECT SV_CHANGE_REQUEST."ACTIVE", SV_CHANGE_REQUEST.ACTIVITY_DUE, SV_CHANGE_REQUEST.ADDITIONAL_ASSIGNEE_LIST, SV_CHANGE_REQUEST.APPROVAL, SV_CHANGE_REQUEST.DV_APPROVAL, SV_CHANGE_REQUEST.APPROVAL_HISTORY, SV_CHANGE_REQUEST.APPROVAL_SET, SV_CHANGE_REQUEST.ASSIGNED_TO, SV_CHANGE_REQUEST.DV_ASSIGNED_TO, SV_CHANGE_REQUEST.ASSIGNMENT_GROUP, SV_CHANGE_REQUEST.DV_ASSIGNMENT_GROUP, SV_CHANGE_REQUEST.BACKOUT_PLAN, SV_CHANGE_REQUEST.BUSINESS_DURATION, SV_CHANGE_REQUEST.DV_BUSINESS_DURATION, SV_CHANGE_REQUEST.BUSINESS_SERVICE, SV_CHANGE_REQUEST.DV_BUSINESS_SERVICE, SV_CHANGE_REQUEST.CAB_DATE, SV_CHANGE_REQUEST.CAB_RECOMMENDATION, SV_CHANGE_REQUEST.CALENDAR_DURATION, SV_CHANGE_REQUEST.DV_CALENDAR_DURATION, SV_CHANGE_REQUEST."CATEGORY", SV_CHANGE_REQUEST.DV_CATEGORY, SV_CHANGE_REQUEST.CHANGE_PLAN, SV_CHANGE_REQUEST.CLOSE_NOTES, DATE_TRUNC('day'::"VARCHAR", "TIMESTAMP"(SV_CHANGE_REQUEST.CLOSED_AT)) AS CLOSED_AT_DATE, SV_CHANGE_REQUEST.CLOSED_AT, SV_CHANGE_REQUEST.CLOSED_BY, SV_CHANGE_REQUEST.DV_CLOSED_BY, SV_CHANGE_REQUEST.CMDB_CI, SV_CHANGE_REQUEST.DV_CMDB_CI, SV_CHANGE_REQUEST.COMMENTS, SV_CHANGE_REQUEST.COMMENTS_AND_WORK_NOTES, SV_CHANGE_REQUEST.COMPANY, SV_CHANGE_REQUEST.DV_COMPANY, SV_CHANGE_REQUEST.CONFLICT_LAST_RUN, SV_CHANGE_REQUEST.CONFLICT_STATUS, SV_CHANGE_REQUEST.DV_CONFLICT_STATUS, SV_CHANGE_REQUEST.CONTACT_TYPE, SV_CHANGE_REQUEST.DV_CONTACT_TYPE, SV_CHANGE_REQUEST.CORRELATION_DISPLAY, SV_CHANGE_REQUEST.CORRELATION_ID, SV_CHANGE_REQUEST.DELIVERY_PLAN, SV_CHANGE_REQUEST.DV_DELIVERY_PLAN, SV_CHANGE_REQUEST.DELIVERY_TASK, SV_CHANGE_REQUEST.DV_DELIVERY_TASK, SV_CHANGE_REQUEST."DESCRIPTION", SV_CHANGE_REQUEST.DUE_DATE, SV_CHANGE_REQUEST.END_DATE, SV_CHANGE_REQUEST.ESCALATION, SV_CHANGE_REQUEST.DV_ESCALATION, SV_CHANGE_REQUEST.EXPECTED_START, SV_CHANGE_REQUEST.FOLLOW_UP, SV_CHANGE_REQUEST.GROUP_LIST, SV_CHANGE_REQUEST.IMPACT, SV_CHANGE_REQUEST.DV_IMPACT, SV_CHANGE_REQUEST.IMPLEMENTATION_PLAN, SV_CHANGE_REQUEST.JUSTIFICATION, SV_CHANGE_REQUEST.KNOWLEDGE, SV_CHANGE_REQUEST."LOCATION", SV_CHANGE_REQUEST.DV_LOCATION, SV_CHANGE_REQUEST.MADE_SLA, SV_CHANGE_REQUEST.NUMBER, DATE_TRUNC('day'::"VARCHAR", "TIMESTAMP"(SV_CHANGE_REQUEST.OPENED_AT)) AS OPENED_AT_DATE, SV_CHANGE_REQUEST.OPENED_AT, SV_CHANGE_REQUEST.OPENED_BY, SV_CHANGE_REQUEST.DV_OPENED_BY, SV_CHANGE_REQUEST.ORDERR, SV_CHANGE_REQUEST.OUTSIDE_MAINTENANCE_SCHEDULE, SV_CHANGE_REQUEST."PARENT", SV_CHANGE_REQUEST.DV_PARENT, SV_CHANGE_REQUEST.PHASE, SV_CHANGE_REQUEST.DV_PHASE, SV_CHANGE_REQUEST.PHASE_STATE, SV_CHANGE_REQUEST.DV_PHASE_STATE, SV_CHANGE_REQUEST."PRIORITY", SV_CHANGE_REQUEST.DV_PRIORITY, SV_CHANGE_REQUEST.PRODUCTION_SYSTEM, SV_CHANGE_REQUEST.REASON, SV_CHANGE_REQUEST.DV_REASON, SV_CHANGE_REQUEST.REASSIGNMENT_COUNT, SV_CHANGE_REQUEST.REJECTION_GOTO, SV_CHANGE_REQUEST.DV_REJECTION_GOTO, SV_CHANGE_REQUEST.REQUESTED_BY, SV_CHANGE_REQUEST.DV_REQUESTED_BY, SV_CHANGE_REQUEST.REQUESTED_BY_DATE, SV_CHANGE_REQUEST.REVIEW_COMMENTS, SV_CHANGE_REQUEST.REVIEW_DATE, SV_CHANGE_REQUEST.REVIEW_STATUS, SV_CHANGE_REQUEST.DV_REVIEW_STATUS, SV_CHANGE_REQUEST.RISK, SV_CHANGE_REQUEST.DV_RISK, SV_CHANGE_REQUEST.SCOPE, SV_CHANGE_REQUEST.DV_SCOPE, SV_CHANGE_REQUEST.SHORT_DESCRIPTION, SV_CHANGE_REQUEST.SLA_DUE, SV_CHANGE_REQUEST.START_DATE, SV_CHANGE_REQUEST."STATE", SV_CHANGE_REQUEST.DV_STATE, SV_CHANGE_REQUEST.SYS_CLASS_NAME, SV_CHANGE_REQUEST.DV_SYS_CLASS_NAME, SV_CHANGE_REQUEST.SYS_CREATED_BY, SV_CHANGE_REQUEST.SYS_CREATED_ON, SV_CHANGE_REQUEST.SYS_DOMAIN, SV_CHANGE_REQUEST.SYS_ID, SV_CHANGE_REQUEST.SYS_MOD_COUNT, SV_CHANGE_REQUEST.SYS_TAGS, SV_CHANGE_REQUEST.SYS_UPDATED_BY, SV_CHANGE_REQUEST.SYS_UPDATED_ON, SV_CHANGE_REQUEST.TEST_PLAN, SV_CHANGE_REQUEST.TIME_WORKED, SV_CHANGE_REQUEST.DV_TIME_WORKED, SV_CHANGE_REQUEST.TYPEE, SV_CHANGE_REQUEST.DV_TYPE, SV_CHANGE_REQUEST.U_APPROVAL_ADDITIONAL_GROUPS, SV_CHANGE_REQUEST.U_APPROVAL_ADDITIONAL_USERS, SV_CHANGE_REQUEST.U_APPROVAL_CUSTOMER, SV_CHANGE_REQUEST.DV_U_APPROVAL_CUSTOMER, SV_CHANGE_REQUEST.U_APPROVAL_DIRECTOR, SV_CHANGE_REQUEST.DV_U_APPROVAL_DIRECTOR, SV_CHANGE_REQUEST.U_APPROVAL_GROUP_ARCHITECTS, SV_CHANGE_REQUEST.DV_U_APPROVAL_GROUP_ARCHITECTS, SV_CHANGE_REQUEST.U_APPROVAL_MANAGER, SV_CHANGE_REQUEST.DV_U_APPROVAL_MANAGER, SV_CHANGE_REQUEST.U_CHANGE_DURATION, SV_CHANGE_REQUEST.DV_U_CHANGE_DURATION, SV_CHANGE_REQUEST.U_CHANGE_STATE, SV_CHANGE_REQUEST.DV_U_CHANGE_STATE, SV_CHANGE_REQUEST.U_CHANGE_STATUS, SV_CHANGE_REQUEST.DV_U_CHANGE_STATUS, SV_CHANGE_REQUEST.U_CI_BLACK_OUT, SV_CHANGE_REQUEST.U_CURRENT_DATE_TIME, SV_CHANGE_REQUEST.U_CUSTOMER, SV_CHANGE_REQUEST.DV_U_CUSTOMER, SV_CHANGE_REQUEST.U_DIRECTOR, SV_CHANGE_REQUEST.DV_U_DIRECTOR, SV_CHANGE_REQUEST.U_IS_COMPLEXITY, SV_CHANGE_REQUEST.DV_U_IS_COMPLEXITY, SV_CHANGE_REQUEST.U_LATE_GROUP_APPROVALS, SV_CHANGE_REQUEST.U_MANAGER, SV_CHANGE_REQUEST.DV_U_MANAGER, SV_CHANGE_REQUEST.U_NOTES, SV_CHANGE_REQUEST.U_NOTIFICATION_FLAG, SV_CHANGE_REQUEST.DV_U_NOTIFICATION_FLAG, SV_CHANGE_REQUEST.U_NOTIFICATIONS_SENT, SV_CHANGE_REQUEST.DV_U_NOTIFICATIONS_SENT, SV_CHANGE_REQUEST.U_OUTAGE_DURATION, SV_CHANGE_REQUEST.DV_U_OUTAGE_DURATION, SV_CHANGE_REQUEST.U_OUTAGE_REQUIRED, SV_CHANGE_REQUEST.U_OUTAGE_START, SV_CHANGE_REQUEST.U_RESET_FLAG, SV_CHANGE_REQUEST.U_SECOND_APPROVALS, SV_CHANGE_REQUEST.U_SECOND_CHANCE_APPROVALS, SV_CHANGE_REQUEST.U_VP, SV_CHANGE_REQUEST.DV_U_VP, SV_CHANGE_REQUEST.U_VP_APPROVAL_REQUIRED, SV_CHANGE_REQUEST.UPON_APPROVAL, SV_CHANGE_REQUEST.DV_UPON_APPROVAL, SV_CHANGE_REQUEST.UPON_REJECT, SV_CHANGE_REQUEST.DV_UPON_REJECT, SV_CHANGE_REQUEST.URGENCY, SV_CHANGE_REQUEST.DV_URGENCY, SV_CHANGE_REQUEST.USER_INPUT, SV_CHANGE_REQUEST.VARIABLES, SV_CHANGE_REQUEST.WATCH_LIST, SV_CHANGE_REQUEST.WF_ACTIVITY, SV_CHANGE_REQUEST.DV_WF_ACTIVITY, SV_CHANGE_REQUEST.WORK_END, SV_CHANGE_REQUEST.WORK_NOTES, SV_CHANGE_REQUEST.WORK_NOTES_LIST, SV_CHANGE_REQUEST.WORK_START FROM ADMIN.SV_CHANGE_REQUEST;

\echo
\echo *****  Creating view:  "SV_INCIDENT_VW"

CREATE or replace VIEW  SV_INCIDENT_VW
(
     ACTIVE,
     ACTIVITY_DUE,
     ADDITIONAL_ASSIGNEE_LIST,
     APPROVAL,
     APPROVAL_HISTORY,
     APPROVAL_SET,
     ASSIGNED_TO,
     ASSIGNMENT_GROUP,
     BUSINESS_DURATION,
     BUSINESS_SERVICE,
     BUSINESS_STC,
     CALENDAR_DURATION,
     CALENDAR_STC,
     CALLER_ID,
     CATEGORY_S,
     CAUSED_BY,
     CHILD_INCIDENTS,
     CLOSED_AT_DATE,
     CLOSED_AT,
     CLOSED_BY,
     CLOSE_CODE,
     CLOSE_NOTES,
     CMDB_CI,
     COMMENTS,
     COMMENTS_AND_WORK_NOTES,
     COMPANY,
     CONTACT_TYPE,
     CORRELATION_DISPLAY,
     CORRELATION_ID,
     DELIVERY_PLAN,
     DELIVERY_TASK,
     DESCRIPTION,
     DUE_DATE,
     ESCALATION,
     EXPECTED_START,
     FOLLOW_UP,
     GROUP_LIST,
     IMPACT,
     INCIDENT_STATE,
     KNOWLEDGE,
     LOCATION,
     MADE_SLA,
     NOTIFY,
     NUMBER,
     OPENED_AT_DATE,
     OPENED_AT,
     OPENED_BY,
     ORDER_S,
     PARENT,
     PARENT_INCIDENT,
     PRIORITY,
     PROBLEM_ID,
     REASSIGNMENT_COUNT,
     REJECTION_GOTO,
     REOPEN_COUNT,
     RESOLVED_AT_DATE,
     RESOLVED_AT,
     RESOLVED_BY,
     RFC,
     SEVERITY,
     SHORT_DESCRIPTION,
     SLA_DUE,
     STATE,
     SUBCATEGORY,
     SYS_CLASS_NAME,
     SYS_CREATED_BY,
     SYS_CREATED_ON,
     SYS_DOMAIN,
     SYS_ID,
     SYS_MOD_COUNT,
     SYS_UPDATED_BY,
     SYS_UPDATED_ON,
     TIME_WORKED,
     UPON_APPROVAL,
     UPON_REJECT,
     URGENCY,
     USER_INPUT,
     U_AGGREGATE_RISK,
     U_CAUSE_CODE,
     U_CLONED_FROM,
     U_CURRENT_PHONE_CONTACT,
     U_CUSTOMER_NAME,
     U_DC,
     U_FOLLOW_UP_FLAG,
     U_INC_ASSIGNMENT_GROUP,
     U_IR_BUSINESS_IMPACT,
     U_IR_END_TIME,
     U_IR_INCIDENT_COMMANDER,
     U_IR_NEXT_STEPS,
     U_IR_RECOVERY_STEPS,
     U_IR_ROOT_CAUSE,
     U_IR_SLA_IMPACT,
     U_IR_START_TIME,
     U_IR_TECHNICAL_IMPACT,
     U_NETWORK_CAUSE_CODES,
     U_PLANNED_REMEDIATION,
     U_REPAIR_ITEMS,
     U_SECURITY_VULNERABILITY,
     U_STEPS_TO_RESOLVE,
     U_SUB_CI,
     U_SYSTEMS_AFFECTED,
     U_TOTAL_VULNERABILITIES,
     WATCH_LIST,
     WF_ACTIVITY,
     WORK_END,
     WORK_NOTES,
     WORK_NOTES_LIST,
     WORK_START,
     X_PD_INTEGRATION_INCIDENT,
     X_PD_INTEGRATION_INCIDENT_KEY,
     X_PD_INTEGRATION_NOTES_IDS,
     X_SPLU2_SPLUNK_SER_SPLUNK_URL,
     DV_APPROVAL,
     DV_ASSIGNED_TO,
     DV_ASSIGNMENT_GROUP,
     DV_BUSINESS_DURATION,
     DV_BUSINESS_SERVICE,
     DV_CALENDAR_DURATION,
     DV_CALLER_ID,
     DV_CATEGORY,
     DV_CAUSED_BY,
     DV_CLOSE_CODE,
     DV_CLOSED_BY,
     DV_CMDB_CI,
     DV_COMPANY,
     DV_CONTACT_TYPE,
     DV_DELIVERY_PLAN,
     DV_DELIVERY_TASK,
     DV_ESCALATION,
     DV_IMPACT,
     DV_INCIDENT_STATE,
     DV_LOCATION,
     DV_NOTIFY,
     DV_OPENED_BY,
     DV_PARENT,
     DV_PARENT_INCIDENT,
     DV_PRIORITY,
     DV_PROBLEM_ID,
     DV_REJECTION_GOTO,
     DV_RESOLVED_BY,
     DV_RFC,
     DV_SEVERITY,
     DV_STATE,
     DV_SUBCATEGORY,
     DV_SYS_CLASS_NAME,
     DV_TIME_WORKED,
     DV_U_CAUSE_CODE,
     DV_U_DC,
     DV_U_INC_ASSIGNMENT_GROUP,
     DV_U_IR_INCIDENT_COMMANDER,
     DV_U_NETWORK_CAUSE_CODES,
     DV_U_SUB_CI,
     DV_UPON_APPROVAL,
     DV_UPON_REJECT,
     DV_URGENCY,
     DV_WF_ACTIVITY,
     EDW_INSERT_DT,
     EDW_PDATE_DT,
     VARIABLES,
     U_REL_KNOWLEDGE,
     DV_U_REL_KNOWLEDGE
) AS
SELECT SV_INCIDENT."ACTIVE", SV_INCIDENT.ACTIVITY_DUE, SV_INCIDENT.ADDITIONAL_ASSIGNEE_LIST, SV_INCIDENT.APPROVAL, SV_INCIDENT.APPROVAL_HISTORY, SV_INCIDENT.APPROVAL_SET, SV_INCIDENT.ASSIGNED_TO, SV_INCIDENT.ASSIGNMENT_GROUP, SV_INCIDENT.BUSINESS_DURATION, SV_INCIDENT.BUSINESS_SERVICE, SV_INCIDENT.BUSINESS_STC, SV_INCIDENT.CALENDAR_DURATION, SV_INCIDENT.CALENDAR_STC, SV_INCIDENT.CALLER_ID, SV_INCIDENT.CATEGORY_S, SV_INCIDENT.CAUSED_BY, SV_INCIDENT.CHILD_INCIDENTS, DATE_TRUNC('day'::"VARCHAR", SV_INCIDENT.CLOSED_AT) AS CLOSED_AT_DATE, SV_INCIDENT.CLOSED_AT, SV_INCIDENT.CLOSED_BY, SV_INCIDENT.CLOSE_CODE, SV_INCIDENT.CLOSE_NOTES, SV_INCIDENT.CMDB_CI, SV_INCIDENT.COMMENTS, SV_INCIDENT.COMMENTS_AND_WORK_NOTES, SV_INCIDENT.COMPANY, SV_INCIDENT.CONTACT_TYPE, SV_INCIDENT.CORRELATION_DISPLAY, SV_INCIDENT.CORRELATION_ID, SV_INCIDENT.DELIVERY_PLAN, SV_INCIDENT.DELIVERY_TASK, SV_INCIDENT."DESCRIPTION", DATE_TRUNC('day'::"VARCHAR", SV_INCIDENT.DUE_DATE) AS DUE_DATE, SV_INCIDENT.ESCALATION, SV_INCIDENT.EXPECTED_START, SV_INCIDENT.FOLLOW_UP, SV_INCIDENT.GROUP_LIST, SV_INCIDENT.IMPACT, SV_INCIDENT.INCIDENT_STATE, SV_INCIDENT.KNOWLEDGE, SV_INCIDENT."LOCATION", SV_INCIDENT.MADE_SLA, SV_INCIDENT."NOTIFY", SV_INCIDENT.NUMBER, DATE_TRUNC('day'::"VARCHAR", SV_INCIDENT.OPENED_AT) AS OPENED_AT_DATE, SV_INCIDENT.OPENED_AT, SV_INCIDENT.OPENED_BY, SV_INCIDENT.ORDER_S, SV_INCIDENT."PARENT", SV_INCIDENT.PARENT_INCIDENT, SV_INCIDENT."PRIORITY", SV_INCIDENT.PROBLEM_ID, SV_INCIDENT.REASSIGNMENT_COUNT, SV_INCIDENT.REJECTION_GOTO, SV_INCIDENT.REOPEN_COUNT, DATE_TRUNC('day'::"VARCHAR", SV_INCIDENT.RESOLVED_AT) AS RESOLVED_AT_DATE, SV_INCIDENT.RESOLVED_AT, SV_INCIDENT.RESOLVED_BY, SV_INCIDENT.RFC, SV_INCIDENT.SEVERITY, SV_INCIDENT.SHORT_DESCRIPTION, SV_INCIDENT.SLA_DUE, SV_INCIDENT."STATE", SV_INCIDENT.SUBCATEGORY, SV_INCIDENT.SYS_CLASS_NAME, SV_INCIDENT.SYS_CREATED_BY, SV_INCIDENT.SYS_CREATED_ON, SV_INCIDENT.SYS_DOMAIN, SV_INCIDENT.SYS_ID, SV_INCIDENT.SYS_MOD_COUNT, SV_INCIDENT.SYS_UPDATED_BY, SV_INCIDENT.SYS_UPDATED_ON, SV_INCIDENT.TIME_WORKED, SV_INCIDENT.UPON_APPROVAL, SV_INCIDENT.UPON_REJECT, SV_INCIDENT.URGENCY, SV_INCIDENT.USER_INPUT, SV_INCIDENT.U_AGGREGATE_RISK, SV_INCIDENT.U_CAUSE_CODE, SV_INCIDENT.U_CLONED_FROM, SV_INCIDENT.U_CURRENT_PHONE_CONTACT, SV_INCIDENT.U_CUSTOMER_NAME, SV_INCIDENT.U_DC, SV_INCIDENT.U_FOLLOW_UP_FLAG, SV_INCIDENT.U_INC_ASSIGNMENT_GROUP, SV_INCIDENT.U_IR_BUSINESS_IMPACT, SV_INCIDENT.U_IR_END_TIME, SV_INCIDENT.U_IR_INCIDENT_COMMANDER, SV_INCIDENT.U_IR_NEXT_STEPS, SV_INCIDENT.U_IR_RECOVERY_STEPS, SV_INCIDENT.U_IR_ROOT_CAUSE, SV_INCIDENT.U_IR_SLA_IMPACT, SV_INCIDENT.U_IR_START_TIME, SV_INCIDENT.U_IR_TECHNICAL_IMPACT, SV_INCIDENT.U_NETWORK_CAUSE_CODES, SV_INCIDENT.U_PLANNED_REMEDIATION, SV_INCIDENT.U_REPAIR_ITEMS, SV_INCIDENT.U_SECURITY_VULNERABILITY, SV_INCIDENT.U_STEPS_TO_RESOLVE, SV_INCIDENT.U_SUB_CI, SV_INCIDENT.U_SYSTEMS_AFFECTED, SV_INCIDENT.U_TOTAL_VULNERABILITIES, SV_INCIDENT.WATCH_LIST, SV_INCIDENT.WF_ACTIVITY, SV_INCIDENT.WORK_END, SV_INCIDENT.WORK_NOTES, SV_INCIDENT.WORK_NOTES_LIST, SV_INCIDENT.WORK_START, SV_INCIDENT.X_PD_INTEGRATION_INCIDENT, SV_INCIDENT.X_PD_INTEGRATION_INCIDENT_KEY, SV_INCIDENT.X_PD_INTEGRATION_NOTES_IDS, SV_INCIDENT.X_SPLU2_SPLUNK_SER_SPLUNK_URL, SV_INCIDENT.DV_APPROVAL, SV_INCIDENT.DV_ASSIGNED_TO, SV_INCIDENT.DV_ASSIGNMENT_GROUP, SV_INCIDENT.DV_BUSINESS_DURATION, SV_INCIDENT.DV_BUSINESS_SERVICE, SV_INCIDENT.DV_CALENDAR_DURATION, SV_INCIDENT.DV_CALLER_ID, SV_INCIDENT.DV_CATEGORY, SV_INCIDENT.DV_CAUSED_BY, SV_INCIDENT.DV_CLOSE_CODE, SV_INCIDENT.DV_CLOSED_BY, SV_INCIDENT.DV_CMDB_CI, SV_INCIDENT.DV_COMPANY, SV_INCIDENT.DV_CONTACT_TYPE, SV_INCIDENT.DV_DELIVERY_PLAN, SV_INCIDENT.DV_DELIVERY_TASK, SV_INCIDENT.DV_ESCALATION, SV_INCIDENT.DV_IMPACT, SV_INCIDENT.DV_INCIDENT_STATE, SV_INCIDENT.DV_LOCATION, SV_INCIDENT.DV_NOTIFY, SV_INCIDENT.DV_OPENED_BY, SV_INCIDENT.DV_PARENT, SV_INCIDENT.DV_PARENT_INCIDENT, SV_INCIDENT.DV_PRIORITY, SV_INCIDENT.DV_PROBLEM_ID, SV_INCIDENT.DV_REJECTION_GOTO, SV_INCIDENT.DV_RESOLVED_BY, SV_INCIDENT.DV_RFC, SV_INCIDENT.DV_SEVERITY, SV_INCIDENT.DV_STATE, SV_INCIDENT.DV_SUBCATEGORY, SV_INCIDENT.DV_SYS_CLASS_NAME, SV_INCIDENT.DV_TIME_WORKED, SV_INCIDENT.DV_U_CAUSE_CODE, SV_INCIDENT.DV_U_DC, SV_INCIDENT.DV_U_INC_ASSIGNMENT_GROUP, SV_INCIDENT.DV_U_IR_INCIDENT_COMMANDER, SV_INCIDENT.DV_U_NETWORK_CAUSE_CODES, SV_INCIDENT.DV_U_SUB_CI, SV_INCIDENT.DV_UPON_APPROVAL, SV_INCIDENT.DV_UPON_REJECT, SV_INCIDENT.DV_URGENCY, SV_INCIDENT.DV_WF_ACTIVITY, SV_INCIDENT.EDW_INSERT_DT, SV_INCIDENT.EDW_PDATE_DT, SV_INCIDENT.VARIABLES, SV_INCIDENT.U_REL_KNOWLEDGE, SV_INCIDENT.DV_U_REL_KNOWLEDGE FROM ADMIN.SV_INCIDENT;

\echo
\echo *****  Creating view:  "SV_PROBLEM_VW"

CREATE or replace VIEW  SV_PROBLEM_VW
(
     ACTIVE,
     ACTIVITY_DUE,
     ADDITIONAL_ASSIGNEE_LIST,
     APPROVAL,
     DV_APPROVAL,
     APPROVAL_HISTORY,
     APPROVAL_SET,
     ASSIGNED_TO,
     DV_ASSIGNED_TO,
     ASSIGNMENT_GROUP,
     DV_ASSIGNMENT_GROUP,
     BUSINESS_DURATION,
     DV_BUSINESS_DURATION,
     BUSINESS_SERVICE,
     DV_BUSINESS_SERVICE,
     CALENDAR_DURATION,
     DV_CALENDAR_DURATION,
     CLOSE_NOTES,
     CLOSED_AT_DATE,
     CLOSED_AT,
     CLOSED_BY,
     DV_CLOSED_BY,
     CMDB_CI,
     DV_CMDB_CI,
     COMMENTS,
     COMMENTS_AND_WORK_NOTES,
     COMPANY,
     DV_COMPANY,
     CONTACT_TYPE,
     DV_CONTACT_TYPE,
     CORRELATION_DISPLAY,
     CORRELATION_ID,
     DELIVERY_PLAN,
     DV_DELIVERY_PLAN,
     DELIVERY_TASK,
     DV_DELIVERY_TASK,
     DESCRIPTION,
     DUE_DATE,
     ESCALATION,
     DV_ESCALATION,
     EXPECTED_START,
     FOLLOW_UP,
     GROUP_LIST,
     IMPACT,
     DV_IMPACT,
     KNOWLEDGE,
     KNOWN_ERROR,
     LOCATION,
     DV_LOCATION,
     MADE_SLA,
     NUMBER,
     OPENED_AT_DATE,
     OPENED_AT,
     OPENED_BY,
     DV_OPENED_BY,
     ORDERR,
     PARENT,
     DV_PARENT,
     PRIORITY,
     DV_PRIORITY,
     PROBLEM_STATE,
     DV_PROBLEM_STATE,
     REASSIGNMENT_COUNT,
     REJECTION_GOTO,
     DV_REJECTION_GOTO,
     RELATED_INCIDENTS,
     RFC,
     DV_RFC,
     SHORT_DESCRIPTION,
     SLA_DUE,
     STATE,
     DV_STATE,
     SYS_CLASS_NAME,
     DV_SYS_CLASS_NAME,
     SYS_CREATED_BY,
     SYS_CREATED_ON,
     SYS_DOMAIN,
     SYS_ID,
     SYS_MOD_COUNT,
     SYS_TAGS,
     SYS_UPDATED_BY,
     SYS_UPDATED_ON,
     TIME_WORKED,
     DV_TIME_WORKED,
     U_DEFAULT_TRACKING_NUMBER,
     U_ROOT_CAUSE,
     UPON_APPROVAL,
     DV_UPON_APPROVAL,
     UPON_REJECT,
     DV_UPON_REJECT,
     URGENCY,
     DV_URGENCY,
     USER_INPUT,
     VARIABLES,
     WATCH_LIST,
     WF_ACTIVITY,
     DV_WF_ACTIVITY,
     WORK_AROUND,
     WORK_END,
     WORK_NOTES,
     WORK_NOTES_LIST,
     WORK_START,
     U_AVE_COST_PER_INC,
     U_BUSINESS_IMPACT,
     U_DATE_OF_FIRST_OCCURRENCE,
     U_INC_PRIORITY,
     DV_U_INC_PRIORITY,
     U_PROBABILITY_OF_RECURRENCE,
     DV_U_PROBABILITY_OF_RECURRENCE,
     U_TOTAL_COST
) AS
SELECT SV_PROBLEM."ACTIVE", SV_PROBLEM.ACTIVITY_DUE, SV_PROBLEM.ADDITIONAL_ASSIGNEE_LIST, SV_PROBLEM.APPROVAL, SV_PROBLEM.DV_APPROVAL, SV_PROBLEM.APPROVAL_HISTORY, SV_PROBLEM.APPROVAL_SET, SV_PROBLEM.ASSIGNED_TO, SV_PROBLEM.DV_ASSIGNED_TO, SV_PROBLEM.ASSIGNMENT_GROUP, SV_PROBLEM.DV_ASSIGNMENT_GROUP, SV_PROBLEM.BUSINESS_DURATION, SV_PROBLEM.DV_BUSINESS_DURATION, SV_PROBLEM.BUSINESS_SERVICE, SV_PROBLEM.DV_BUSINESS_SERVICE, SV_PROBLEM.CALENDAR_DURATION, SV_PROBLEM.DV_CALENDAR_DURATION, SV_PROBLEM.CLOSE_NOTES, DATE_TRUNC('day'::"VARCHAR", "TIMESTAMP"(SV_PROBLEM.CLOSED_AT)) AS CLOSED_AT_DATE, SV_PROBLEM.CLOSED_AT, SV_PROBLEM.CLOSED_BY, SV_PROBLEM.DV_CLOSED_BY, SV_PROBLEM.CMDB_CI, SV_PROBLEM.DV_CMDB_CI, SV_PROBLEM.COMMENTS, SV_PROBLEM.COMMENTS_AND_WORK_NOTES, SV_PROBLEM.COMPANY, SV_PROBLEM.DV_COMPANY, SV_PROBLEM.CONTACT_TYPE, SV_PROBLEM.DV_CONTACT_TYPE, SV_PROBLEM.CORRELATION_DISPLAY, SV_PROBLEM.CORRELATION_ID, SV_PROBLEM.DELIVERY_PLAN, SV_PROBLEM.DV_DELIVERY_PLAN, SV_PROBLEM.DELIVERY_TASK, SV_PROBLEM.DV_DELIVERY_TASK, SV_PROBLEM."DESCRIPTION", SV_PROBLEM.DUE_DATE, SV_PROBLEM.ESCALATION, SV_PROBLEM.DV_ESCALATION, SV_PROBLEM.EXPECTED_START, SV_PROBLEM.FOLLOW_UP, SV_PROBLEM.GROUP_LIST, SV_PROBLEM.IMPACT, SV_PROBLEM.DV_IMPACT, SV_PROBLEM.KNOWLEDGE, SV_PROBLEM.KNOWN_ERROR, SV_PROBLEM."LOCATION", SV_PROBLEM.DV_LOCATION, SV_PROBLEM.MADE_SLA, SV_PROBLEM.NUMBER, DATE_TRUNC('day'::"VARCHAR", "TIMESTAMP"(SV_PROBLEM.OPENED_AT)) AS OPENED_AT_DATE, SV_PROBLEM.OPENED_AT, SV_PROBLEM.OPENED_BY, SV_PROBLEM.DV_OPENED_BY, SV_PROBLEM.ORDERR, SV_PROBLEM."PARENT", SV_PROBLEM.DV_PARENT, SV_PROBLEM."PRIORITY", SV_PROBLEM.DV_PRIORITY, SV_PROBLEM.PROBLEM_STATE, SV_PROBLEM.DV_PROBLEM_STATE, SV_PROBLEM.REASSIGNMENT_COUNT, SV_PROBLEM.REJECTION_GOTO, SV_PROBLEM.DV_REJECTION_GOTO, SV_PROBLEM.RELATED_INCIDENTS, SV_PROBLEM.RFC, SV_PROBLEM.DV_RFC, SV_PROBLEM.SHORT_DESCRIPTION, SV_PROBLEM.SLA_DUE, SV_PROBLEM."STATE", SV_PROBLEM.DV_STATE, SV_PROBLEM.SYS_CLASS_NAME, SV_PROBLEM.DV_SYS_CLASS_NAME, SV_PROBLEM.SYS_CREATED_BY, SV_PROBLEM.SYS_CREATED_ON, SV_PROBLEM.SYS_DOMAIN, SV_PROBLEM.SYS_ID, SV_PROBLEM.SYS_MOD_COUNT, SV_PROBLEM.SYS_TAGS, SV_PROBLEM.SYS_UPDATED_BY, SV_PROBLEM.SYS_UPDATED_ON, SV_PROBLEM.TIME_WORKED, SV_PROBLEM.DV_TIME_WORKED, SV_PROBLEM.U_DEFAULT_TRACKING_NUMBER, SV_PROBLEM.U_ROOT_CAUSE, SV_PROBLEM.UPON_APPROVAL, SV_PROBLEM.DV_UPON_APPROVAL, SV_PROBLEM.UPON_REJECT, SV_PROBLEM.DV_UPON_REJECT, SV_PROBLEM.URGENCY, SV_PROBLEM.DV_URGENCY, SV_PROBLEM.USER_INPUT, SV_PROBLEM.VARIABLES, SV_PROBLEM.WATCH_LIST, SV_PROBLEM.WF_ACTIVITY, SV_PROBLEM.DV_WF_ACTIVITY, SV_PROBLEM.WORK_AROUND, SV_PROBLEM.WORK_END, SV_PROBLEM.WORK_NOTES, SV_PROBLEM.WORK_NOTES_LIST, SV_PROBLEM.WORK_START, SV_PROBLEM.U_AVE_COST_PER_INC, SV_PROBLEM.U_BUSINESS_IMPACT, SV_PROBLEM.U_DATE_OF_FIRST_OCCURRENCE, SV_PROBLEM.U_INC_PRIORITY, SV_PROBLEM.DV_U_INC_PRIORITY, SV_PROBLEM.U_PROBABILITY_OF_RECURRENCE, SV_PROBLEM.DV_U_PROBABILITY_OF_RECURRENCE, SV_PROBLEM.U_TOTAL_COST FROM ADMIN.SV_PROBLEM;

\echo
\echo *****  Creating view:  "SALES_TRANS_COMPONENT_VF_CRCY_TYLY_VW"

CREATE or replace VIEW  SALES_TRANS_COMPONENT_VF_CRCY_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     UPC_ID,
     TP_INVOICE_NBR,
     PARENT_UPC_ID,
     COMBO_TYPE_CD,
     POS_TXN_SEQ_NBR,
     CPN_POS_TXN_SEQ_NBR,
     OFFER_ID,
     MA_EVENT_ID,
     DISCOUNT_TYPE_ID,
     COUPON_TYPE_ID,
     COUPON_ACCESS_CD,
     PRODUCT_ID,
     MOVEMENT_ID,
     PO_NBR,
     PO_LINE_NBR,
     PAYMENT_TYPE_ID,
     TRANS_ACCT_NBR,
     AUTH_APPROVAL_CODE,
     SALES_COMPONENT_ID,
     SALES_COMPONENT_TYPE_ID,
     ISSUANCE_ID,
     TAX_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     TRANS_TSTMP,
     REGISTER_NBR,
     TRANSACTION_NBR,
     SALES_TYPE_ID,
     SALES_CUST_CAPTURE_CD,
     CUST_TRANS_ID,
     CASHIER_NBR,
     PETPERK_OVERRIDE_NBR,
     PETPERK_EMAIL_IND,
     KEYED_FLAG,
     NON_TAX_FLAG,
     EMPLOYEE_ID,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     TENDER_UID,
     TAX_EXEMPT_ID,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     CDC_EMAIL_ID,
     CDC_FIRST_NAME_ID,
     CDC_LAST_NAME_ID,
     CDC_PHONE_NBR_ID,
     DIGITAL_RECEIPT_ANSWER_CD,
     OFFLINE_CUST_LKP_IND,
     REV_SALES_TYPE_CTRL_ID,
     REV_SALES_TYPE_ID,
     EP_SALES_TYPE_ID,
     MA_TRANS_COST_REDUC_PCT,
     MA_TRANS_COST_REDUC,
     SALES_COST_REDUC_PCT,
     SALES_COST_REDUC,
     NET_SALES_AMT,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     SALES_TRANS_AMT,
     RETURN_TRANS_AMT,
     ISSUANCE_QTY,
     OFFER_QTY,
     TAX_PCT,
     TAX_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, STC.LOCATION_ID, STC.SALES_INSTANCE_ID, STC.UPC_ID, STC.TP_INVOICE_NBR, STC.PARENT_UPC_ID, STC.COMBO_TYPE_CD, STC.POS_TXN_SEQ_NBR, STC.CPN_POS_TXN_SEQ_NBR, STC.OFFER_ID, STC.MA_EVENT_ID, STC.DISCOUNT_TYPE_ID, STC.COUPON_TYPE_ID, STC.COUPON_ACCESS_CD, STC.PRODUCT_ID, STC.MOVEMENT_ID, STC.PO_NBR, STC.PO_LINE_NBR, STC.PAYMENT_TYPE_ID, STC.TRANS_ACCT_NBR, STC.AUTH_APPROVAL_CODE, STC.SALES_COMPONENT_ID, STC.SALES_COMPONENT_TYPE_ID, STC.ISSUANCE_ID, STC.TAX_TYPE_ID, STC.VOID_TYPE_CD, STC.TXN_WAS_POST_VOIDED_FLAG, STC.TRANS_TSTMP, STC.REGISTER_NBR, STC.TRANSACTION_NBR, STC.SALES_TYPE_ID, STC.SALES_CUST_CAPTURE_CD, STC.CUST_TRANS_ID, STC.CASHIER_NBR, STC.PETPERK_OVERRIDE_NBR, STC.PETPERK_EMAIL_IND, STC.KEYED_FLAG, STC.NON_TAX_FLAG, STC.EMPLOYEE_ID, STC.CUST_FIRST_NAME, STC.CUST_LAST_NAME, STC.TENDER_UID, STC.TAX_EXEMPT_ID, STC.ORDER_NBR, STC.ORDER_CHANNEL, STC.ORDER_ASSIST_LOCATION_ID, STC.ORDER_FULFILLMENT_CHANNEL, STC.ORDER_CREATION_CHANNEL, STC.CDC_EMAIL_ID, STC.CDC_FIRST_NAME_ID, STC.CDC_LAST_NAME_ID, STC.CDC_PHONE_NBR_ID, STC.DIGITAL_RECEIPT_ANSWER_CD, STC.OFFLINE_CUST_LKP_IND, STC.REV_SALES_TYPE_CTRL_ID, STC.REV_SALES_TYPE_ID, STC.EP_SALES_TYPE_ID, CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND (STC.SALES_COMPONENT_TYPE_ID = 708)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END AS MA_TRANS_COST_REDUC_PCT, (STC.MA_TRANS_COST * CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND (STC.SALES_COMPONENT_TYPE_ID = 708)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END) AS MA_TRANS_COST_REDUC, CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND ((STC.SALES_COST - STC.RETURN_COST) <> '0'::NUMERIC)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END AS SALES_COST_REDUC_PCT, ((STC.SALES_COST - STC.RETURN_COST) * CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND ((STC.SALES_COST - STC.RETURN_COST) <> '0'::NUMERIC)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END) AS SALES_COST_REDUC, STC.NET_SALES_AMT, STC.NET_SALES_QTY, ((STC.NET_MARGIN_AMT - (STC.MA_TRANS_COST * CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND (STC.SALES_COMPONENT_TYPE_ID = 708)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END)) + ((STC.SALES_COST - STC.RETURN_COST) * CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND ((STC.SALES_COST - STC.RETURN_COST) <> '0'::NUMERIC)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END)) AS NET_MARGIN_AMT, STC.SALES_AMT, (STC.SALES_COST * (('1'::NUMERIC(1,0))::NUMERIC(1,0) - CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND ((STC.SALES_COST - STC.RETURN_COST) <> '0'::NUMERIC)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END)) AS SALES_COST, STC.SALES_QTY, STC.RETURN_AMT, (STC.RETURN_COST * (('1'::NUMERIC(1,0))::NUMERIC(1,0) - CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND ((STC.SALES_COST - STC.RETURN_COST) <> '0'::NUMERIC)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END)) AS RETURN_COST, STC.RETURN_QTY, STC.CLEARANCE_AMT, STC.CLEARANCE_QTY, STC.CLEARANCE_RETURN_AMT, STC.CLEARANCE_RETURN_QTY, STC.DISCOUNT_AMT, STC.DISCOUNT_QTY, STC.DISCOUNT_RETURN_AMT, STC.DISCOUNT_RETURN_QTY, STC.POS_COUPON_AMT, STC.POS_COUPON_QTY, STC.POS_COUPON_ALLOC_AMT, STC.POS_COUPON_ALLOC_QTY, STC.SPECIAL_SALES_AMT, STC.SPECIAL_SALES_QTY, STC.SPECIAL_RETURN_AMT, STC.SPECIAL_RETURN_QTY, STC.SPECIAL_SRVC_AMT, STC.SPECIAL_SRVC_QTY, STC.MA_SALES_AMT, STC.MA_SALES_QTY, STC.MA_TRANS_AMT, (STC.MA_TRANS_COST * (('1'::NUMERIC(1,0))::NUMERIC(1,0) - CASE WHEN ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND (STC.SALES_COMPONENT_TYPE_ID = 708)) THEN CASE WHEN (USCR.COST_REDUCTION NOTNULL) THEN USCR.COST_REDUCTION WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END ELSE '0'::NUMERIC END)) AS MA_TRANS_COST, STC.MA_TRANS_QTY, STC.SALES_TRANS_AMT, STC.RETURN_TRANS_AMT, STC.ISSUANCE_QTY, STC.OFFER_QTY, STC.TAX_PCT, STC.TAX_AMT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE STC.EXCH_RATE_PCT END AS EXCH_RATE_PCT, STC.UPDATE_DT, STC.LOAD_DT FROM ((((ADMIN.SALES_TRANS_COMPONENT STC JOIN ADMIN.SKU_PROFILE SP ON ((STC.PRODUCT_ID = SP.PRODUCT_ID))) LEFT JOIN ADMIN.USR_SALES_COST_REDUCTION USCR ON ((SP.SAP_CLASS_ID = USCR.SAP_CLASS_ID))) JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(STC.DAY_DT) = DTL.TRANS_DAY_DT))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) WHERE ((DTL.FISCAL_YR = 2018) AND (NOT ((DTL.TY_LY_FLAG = 'LY'::"VARCHAR") AND (STC.SALES_COMPONENT_TYPE_ID IN (601, 606)))));

\echo
\echo *****  Creating view:  "LOST_SALES_WEEK_CRCY_VW"

CREATE or replace VIEW  LOST_SALES_WEEK_CRCY_VW
(
     WEEK_DT,
     "PRODUCT_ID",
     "LOCATION_ID",
     INLINE_CNT,
     POG_LISTED_IND,
     STORE_OPEN_IND,
     DEMAND_FCST_FOR_SEASONAL_FCST_PD_WK_QTY,
     OOS_7_DAY_AVG,
     NET_SALES_AMT,
     NET_SALES_QTY,
     AUR_WEEK_AMT,
     LOST_SALES_AMT,
     SKU_STATUS_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC
) AS
SELECT (DATE(DDW.WEEK_DT) + 7) AS WEEK_DT, DDW.PRODUCT_ID, DDW.LOCATION_ID, IIPW.INLINE_CNT, IIPW.POG_LISTED_IND, IIPW.STORE_OPEN_IND, DDW.DEMAND_FCST_FOR_SEASONAL_FCST_PD_QTY AS DEMAND_FCST_FOR_SEASONAL_FCST_PD_WK_QTY, IIPW.OOS_7_DAY_AVG, CASE WHEN (CTL.CURRENCY_TYPE_ID = 1) THEN AUR.NET_SALES_AMT_USD ELSE AUR.NET_SALES_AMT_LOC END AS NET_SALES_AMT, AUR.NET_SALES_QTY, CASE WHEN (AUR.NET_SALES_QTY = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ROUND((CASE WHEN (CTL.CURRENCY_TYPE_ID = 1) THEN AUR.NET_SALES_AMT_USD ELSE AUR.NET_SALES_AMT_LOC END / AUR.NET_SALES_QTY), 2) END AS AUR_WEEK_AMT, ((DDW.DEMAND_FCST_FOR_SEASONAL_FCST_PD_QTY * IIPW.OOS_7_DAY_AVG) * CASE WHEN (AUR.NET_SALES_QTY = '0'::NUMERIC) THEN '0'::NUMERIC ELSE ROUND((CASE WHEN (CTL.CURRENCY_TYPE_ID = 1) THEN AUR.NET_SALES_AMT_USD ELSE AUR.NET_SALES_AMT_LOC END / AUR.NET_SALES_QTY), 2) END) AS LOST_SALES_AMT, IIPW.SKU_STATUS_ID, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC FROM ((((ADMIN.DP_DEMAND_WEEK DDW JOIN ADMIN.INV_INSTOCK_PRICE_WK IIPW ON (((("TIMESTAMP"((DATE(DDW.WEEK_DT) + 7)) = IIPW.WEEK_DT) AND (DDW.PRODUCT_ID = IIPW.PRODUCT_ID)) AND (DDW.LOCATION_ID = IIPW.LOCATION_ID)))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((DDW.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN (SELECT SDSR.WEEK_DT, SDSR.PRODUCT_ID, SDSR.COUNTRY_CD, ROUND(SUM((SDSR.NET_SALES_AMT * SDSR.EXCH_RATE_PCT)), 2) AS NET_SALES_AMT_USD, ROUND(SUM(SDSR.NET_SALES_AMT), 2) AS NET_SALES_AMT_LOC, SUM(SDSR.NET_SALES_QTY) AS NET_SALES_QTY FROM ADMIN.SALES_DAY_SKU_RPT SDSR GROUP BY SDSR.WEEK_DT, SDSR.PRODUCT_ID, SDSR.COUNTRY_CD) AUR ON (((("TIMESTAMP"((DATE(DDW.WEEK_DT) + 7)) = AUR.WEEK_DT) AND (DDW.PRODUCT_ID = AUR.PRODUCT_ID)) AND ((SP.COUNTRY_CD)::"VARCHAR" = AUR.COUNTRY_CD)))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL) WHERE (DDW.WEEK_DT > "TIMESTAMP"((DATE("TIMESTAMP"('now(0)'::"VARCHAR")) - 730)));

\echo
\echo *****  Creating view:  "SKILLSOFT_VW"

CREATE or replace VIEW  SKILLSOFT_VW
(
     EMPLOYEE_ID,
     LAST_NAME,
     FIRST_NAME,
     EMAIL,
     JOB_TITLE,
     STORE_NUMBER,
     LOCATION_ID_COURSE,
     DISTRICT,
     REGION,
     STATE,
     ZIP,
     COUNTRY,
     BIRTH_DATE,
     PHONE,
     CC_NUMBER,
     CC_TYPE,
     CC_EXPR,
     FREE1,
     REG_DATE,
     GROUP_NAME,
     COURSE_TITLE,
     FIRST_ACCESS_DATE,
     TIMES_ACCESSED,
     DURATION,
     OVERALL_PREASSESS,
     OVERALL_HIGH,
     OVERALL_CURRENT,
     COURSE_STATUS,
     COMPLETION_DATE,
     GROUP_TITLE,
     TIMES_DOWNLOADED,
     SCO_ID,
     DUE_DATE,
     DELETE_FLAG,
     LOAD_DT,
     UPDATE_DT,
     COURSE_ID,
     LAST_ACCESS_DATE,
     ORG_CODE,
     ACTIVATED,
     LP_TITLE,
     LP_PERCENT_COMPLETE,
     LP_FIRST_ACCESS_DATE,
     LP_LAST_ACCESS_DATE,
     LP_COMPLETION_DATE,
     LP_STATUS,
     COURSE_CATEGORY,
     USER_ROLE,
     LP_ID,
     CONTAINER_TITLE,
     LOCATION_ID,
     ABSOLUTE_FIRST_ACCESS_DATE,
     ABSOLUTE_LAST_ACCESS_DATE,
     ABSOLUTE_TIMES_ACCESSED,
     ABSOLUTE_HIGH_SCORE,
     ABSOLUTE_LAST_SCORE,
     ABSOLUTE_ACTUAL_DURATION,
     SOURCE_SYSTEM,
     COMPLIANCE_FLAG
) AS
(SELECT SM.EMPLOYEE_ID, EP.EMPL_LAST_NAME AS LAST_NAME, EP.EMPL_FIRST_NAME AS FIRST_NAME, EP.EMPL_EMAIL_ADDR AS EMAIL, EP.JOB_CODE_DESC AS JOB_TITLE, SP.STORE_NBR AS STORE_NUMBER, SM.LOCATION_ID_COURSE, SM.DISTRICT, SM.REGION, SM."STATE", SM.ZIP, SM.COUNTRY, SM.BIRTH_DATE, SM.PHONE, SM.CC_NUMBER, SM.CC_TYPE, SM.CC_EXPR, SM.FREE1, SM.REG_DATE, SM.GROUP_NAME, CM.COURSE_TITLE, SM.FIRST_ACCESS_DATE, SM.TIMES_ACCESSED, SM.DURATION, SM.OVERALL_PREASSESS, SM.OVERALL_HIGH, SM.OVERALL_CURRENT, SM.COURSE_STATUS, SM.COMPLETION_DATE, SM.GROUP_TITLE, SM.TIMES_DOWNLOADED, SM.SCO_ID, SM.DUE_DATE, ('0'::NUMERIC)::NUMERIC(9,0) AS DELETE_FLAG, SM.LOAD_DT, SM.UPDATE_DT, SM.COURSE_ID, SM.LAST_ACCESS_DATE, SM.ORG_CODE, SM.ACTIVATED, LPM.LP_TITLE, (LLP.LP_PERCENT_COMPLETE)::NUMERIC(38,6) AS LP_PERCENT_COMPLETE, LLP.LP_FIRST_ACCESS_DATE, LLP.LP_LAST_ACCESS_DATE, LLP.LP_COMPLETION_DATE, LLP.LP_STATUS, SM.COURSE_CATEGORY, SM.USER_ROLE, (SM.LP_ID)::VARCHAR(255) AS LP_ID, SM.CONTAINER_TITLE, EP.LOCATION_ID, SM.ABSOLUTE_FIRST_ACCESS_DATE, SM.ABSOLUTE_LAST_ACCESS_DATE, SM.ABSOLUTE_TIMES_ACCESSED, SM.ABSOLUTE_HIGH_SCORE, SM.ABSOLUTE_LAST_SCORE, SM.ABSOLUTE_ACTUAL_DURATION, ('SkillPort'::"VARCHAR")::VARCHAR(9) AS SOURCE_SYSTEM, CASE WHEN (CM.COURSE_TITLE ~~ LIKE_ESCAPE(LIKE_ESCAPE('%[Compliance]%'::"VARCHAR", '\'::"VARCHAR"), '\'::"VARCHAR")) THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS COMPLIANCE_FLAG FROM (((((ADMIN.SKILLSOFT_MASTER SM LEFT JOIN (SELECT SKILLSOFT_MASTER.EMPLOYEE_ID, SKILLSOFT_MASTER.LP_ID, MAX(SKILLSOFT_MASTER.LP_TITLE) AS LP_TITLE, MAX(SKILLSOFT_MASTER.LP_PERCENT_COMPLETE) AS LP_PERCENT_COMPLETE, MIN(SKILLSOFT_MASTER.LP_FIRST_ACCESS_DATE) AS LP_FIRST_ACCESS_DATE, MAX(SKILLSOFT_MASTER.LP_LAST_ACCESS_DATE) AS LP_LAST_ACCESS_DATE, MIN(SKILLSOFT_MASTER.LP_COMPLETION_DATE) AS LP_COMPLETION_DATE, MIN(SKILLSOFT_MASTER.LP_STATUS) AS LP_STATUS FROM ADMIN.SKILLSOFT_MASTER GROUP BY SKILLSOFT_MASTER.EMPLOYEE_ID, SKILLSOFT_MASTER.LP_ID) LLP ON (((LLP.LP_ID = SM.LP_ID) AND (LLP.EMPLOYEE_ID = SM.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW EP ON ((SM.EMPLOYEE_ID = EP.EMPLOYEE_ID))) LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.LOCATION_ID = EP.LOCATION_ID))) LEFT JOIN ADMIN.SKILLSOFT_COURSE_MASTER CM ON ((CM.COURSE_ID = SM.COURSE_ID))) LEFT JOIN ADMIN.SKILLSOFT_LEARNING_PROGRAM_MASTER LPM ON ((LPM.LP_ID = SM.LP_ID))) WHERE ((SM.COURSE_ID <> ALL (SELECT SKILLSOFT_COURSE_EXCEPTION.COURSE_ID FROM ADMIN.SKILLSOFT_COURSE_EXCEPTION)) AND (LLP.LP_ID <> ALL (SELECT SKILLSOFT_LP_EXCEPTION.LP_ID FROM ADMIN.SKILLSOFT_LP_EXCEPTION)))) UNION ALL (SELECT SM.USERID AS EMPLOYEE_ID, EP.EMPL_LAST_NAME AS LAST_NAME, EP.EMPL_FIRST_NAME AS FIRST_NAME, EP.EMPL_EMAIL_ADDR AS EMAIL, EP.JOB_CODE_DESC AS JOB_TITLE, SP.STORE_NBR AS STORE_NUMBER, NULL::INT4 AS LOCATION_ID_COURSE, (NULL::"VARCHAR")::VARCHAR(50) AS DISTRICT, (NULL::"VARCHAR")::VARCHAR(50) AS REGION, (NULL::"VARCHAR")::VARCHAR(8) AS "STATE", (NULL::"VARCHAR")::VARCHAR(10) AS ZIP, (NULL::"VARCHAR")::VARCHAR(8) AS COUNTRY, NULL::"TIMESTAMP" AS BIRTH_DATE, (NULL::"VARCHAR")::VARCHAR(20) AS PHONE, (NULL::"VARCHAR")::VARCHAR(10) AS CC_NUMBER, (NULL::"VARCHAR")::VARCHAR(10) AS CC_TYPE, (NULL::"VARCHAR")::VARCHAR(10) AS CC_EXPR, (NULL::"VARCHAR")::VARCHAR(10) AS FREE1, NULL::"TIMESTAMP" AS REG_DATE, (NULL::"VARCHAR")::VARCHAR(255) AS GROUP_NAME, SM.COURSE AS COURSE_TITLE, SM.BEGIN_DATE AS FIRST_ACCESS_DATE, (NULL::"NUMERIC")::NUMERIC(4,0) AS TIMES_ACCESSED, ("NUMERIC"((CASE WHEN (LENGTH(TRANSLATE(SM.TOTAL_TIME_IN_COURSE, '0123456789:'::"VARCHAR", ''::"VARCHAR")) = 0) THEN ((CASE WHEN (INT4(SUBSTR(SM.TOTAL_TIME_IN_COURSE, 1, (INSTR(SM.TOTAL_TIME_IN_COURSE, ':'::"VARCHAR", 1, 1) - 1))) < 100) THEN (INT4(SUBSTR(SM.TOTAL_TIME_IN_COURSE, 1, (INSTR(SM.TOTAL_TIME_IN_COURSE, ':'::"VARCHAR", 1, 1) - 1))) * 3600) ELSE NULL::INT4 END + CASE WHEN (INT4(SUBSTR(SM.TOTAL_TIME_IN_COURSE, (INSTR(SM.TOTAL_TIME_IN_COURSE, ':'::"VARCHAR", 1, 1) + 1), 2)) < 100) THEN (INT4(SUBSTR(SM.TOTAL_TIME_IN_COURSE, (INSTR(SM.TOTAL_TIME_IN_COURSE, ':'::"VARCHAR", 1, 1) + 1), 2)) * 60) ELSE NULL::INT4 END) + CASE WHEN (INT4(SUBSTR(SM.TOTAL_TIME_IN_COURSE, (INSTR(SM.TOTAL_TIME_IN_COURSE, ':'::"VARCHAR", 1, 2) + 1), LENGTH(SM.TOTAL_TIME_IN_COURSE))) < 100) THEN INT4(SUBSTR(SM.TOTAL_TIME_IN_COURSE, (INSTR(SM.TOTAL_TIME_IN_COURSE, ':'::"VARCHAR", 1, 2) + 1), LENGTH(SM.TOTAL_TIME_IN_COURSE))) ELSE NULL::INT4 END) ELSE NULL::INT4 END / 60)))::NUMERIC(10,0) AS DURATION, (NULL::"NUMERIC")::NUMERIC(10,0) AS OVERALL_PREASSESS, (NULL::"NUMERIC")::NUMERIC(10,0) AS OVERALL_HIGH, (NULL::"NUMERIC")::NUMERIC(10,0) AS OVERALL_CURRENT, (CASE WHEN (SM.STATUS = 'C'::"VARCHAR") THEN 'Completed'::"VARCHAR" WHEN (SM.STATUS = 'EQ'::"VARCHAR") THEN 'Completed'::"VARCHAR" WHEN (SM.STATUS = 'I'::"VARCHAR") THEN 'In Progress'::"VARCHAR" WHEN (SM.STATUS = 'NS'::"VARCHAR") THEN 'Not Started'::"VARCHAR" WHEN (SM.STATUS = 'OD'::"VARCHAR") THEN 'Overdue'::"VARCHAR" ELSE SM.STATUS END)::VARCHAR(20) AS COURSE_STATUS, SM.DATE_COMPLETED AS COMPLETION_DATE, (NULL::"VARCHAR")::VARCHAR(30) AS GROUP_TITLE, (NULL::"NUMERIC")::NUMERIC(10,0) AS TIMES_DOWNLOADED, (NULL::"VARCHAR")::VARCHAR(50) AS SCO_ID, SM.DUE_DATE, ("NUMERIC"(SM.DELETE_FLAG))::NUMERIC(9,0) AS DELETE_FLAG, SM.LOAD_DT, SM.UPDATE_DT, SM.COURSEID AS COURSE_ID, SM.LAST_VISIT_DATE AS LAST_ACCESS_DATE, (NULL::"VARCHAR")::VARCHAR(255) AS ORG_CODE, (NULL::"VARCHAR")::VARCHAR(24) AS ACTIVATED, LLP.LP_TITLE, ("NUMERIC"(FLOAT8((LLP.LP_PERCENT_COMPLETE)::"VARCHAR")))::NUMERIC(38,6) AS LP_PERCENT_COMPLETE, LLP.LP_FIRST_ACCESS_DATE, LLP.LP_LAST_ACCESS_DATE, LLP.LP_COMPLETION_DATE, (LLP.LP_STATUS)::VARCHAR(24) AS LP_STATUS, (NULL::"VARCHAR")::VARCHAR(32) AS COURSE_CATEGORY, (NULL::"VARCHAR")::VARCHAR(32) AS USER_ROLE, SM.LP_LEARNING_PROGRAM_ID AS LP_ID, (NULL::"VARCHAR")::VARCHAR(64) AS CONTAINER_TITLE, EP.LOCATION_ID, (NULL::"VARCHAR")::VARCHAR(29) AS ABSOLUTE_FIRST_ACCESS_DATE, (NULL::"VARCHAR")::VARCHAR(29) AS ABSOLUTE_LAST_ACCESS_DATE, (NULL::"NUMERIC")::NUMERIC(5,0) AS ABSOLUTE_TIMES_ACCESSED, (NULL::"VARCHAR")::VARCHAR(7) AS ABSOLUTE_HIGH_SCORE, (NULL::"VARCHAR")::VARCHAR(7) AS ABSOLUTE_LAST_SCORE, (NULL::"NUMERIC")::NUMERIC(5,0) AS ABSOLUTE_ACTUAL_DURATION, ('ACM'::"VARCHAR")::VARCHAR(9) AS SOURCE_SYSTEM, CASE WHEN (SM.COURSE ~~ LIKE_ESCAPE(LIKE_ESCAPE('%[Compliance]%'::"VARCHAR", '\'::"VARCHAR"), '\'::"VARCHAR")) THEN 'Y'::"VARCHAR" ELSE 'N'::"VARCHAR" END AS COMPLIANCE_FLAG FROM ((((SELECT A.USERID, A.USER_NAME, A.REHIRE_DATE, A.ACCOUNT_NUMBER, A.COURSEID, A.COURSE, A.SKILLSOFT_COURSE_NUMBER, A.METHOD, A.ESTIMATED_COST, A.ESTIMATED_DURATION, A.CEU, A.STATUS, A.REQOPT, A.DUE_DATE, A.VALIDITYINDAYS, A.BEGIN_DATE, A.LAST_VISIT_DATE, A.DATE_COMPLETED, A.SCORE, A.TIME_IN_COURSE_TO_COMPLETION, A.TOTAL_TIME_IN_COURSE, A.DATE_OPEN_FOR_TRAINING, A.EXEMPTION_EXPIRATION_DATE, A.USER_STATUS, A.USER_EMAIL, A.SUPERVISOR_EMAIL, A.SUPERVISOR_LEVEL_2_EMAIL, A.PRIORCOURSECOMPLETED, A.PRIORCOURSETITLE, A.COMMENTS, A.MAXIMUM_ASSESSMENT_ATTEMPTS, A.ACTUAL_ASSESSMENT_ATTEMPTS, A.GROUP_FROM, A.DELETE_FLAG, A.LOAD_DT, A.UPDATE_DT, B.USERID AS LP_USERID, B.USER_NAME AS LP_USER_NAME, B.REHIRE_DATE AS LP_REHIRE_DATE, B.ACCOUNT_NUMBER AS LP_ACCOUNT_NUMBER, B.COURSEID AS LP_COURSEID, B.COURSE_TITLE AS LP_COURSE_TITLE, B.SKILLSOFT_COURSE_NUMBER AS LP_SKILLSOFT_COURSE_NUMBER, CASE WHEN (B.COURSE_STATUS = 'C'::"VARCHAR") THEN 'Completed'::"VARCHAR" WHEN (B.COURSE_STATUS = 'EQ'::"VARCHAR") THEN 'Completed'::"VARCHAR" WHEN (B.COURSE_STATUS = 'I'::"VARCHAR") THEN 'In Progress'::"VARCHAR" WHEN (B.COURSE_STATUS = 'NS'::"VARCHAR") THEN 'Not Started'::"VARCHAR" WHEN (B.COURSE_STATUS = 'OD'::"VARCHAR") THEN 'Overdue'::"VARCHAR" ELSE B.COURSE_STATUS END AS LP_COURSE_STATUS, B.SCORE AS LP_SCORE, B.TOTAL_TIME_IN_COURSE AS LP_TOTAL_TIME_IN_COURSE, B.TOTAL_TIME_IN_COURSE_TO_COMPLETION AS LP_TOTAL_TIME_IN_COURSE_TO_COMPLETION, B.COURSE_ORDER AS LP_COURSE_ORDER, B.COURSE_BEGIN_DATE AS LP_COURSE_BEGIN_DATE, B.COURSE_LAST_VISIT_DATE AS LP_COURSE_LAST_VISIT_DATE, B.COURSE_REQOPT AS LP_COURSE_REQOPT, B.COURSE_DATE_COMPLETED AS LP_COURSE_DATE_COMPLETED, B.DELIVERY_METHOD AS LP_DELIVERY_METHOD, B.LEARNING_PROGRAM_ID AS LP_LEARNING_PROGRAM_ID, B.LEARNING_PROGRAM AS LP_LEARNING_PROGRAM, B.LEARNING_PROGRAM_STATUS AS LP_LEARNING_PROGRAM_STATUS, B.REQOPT AS LP_REQOPT, B.DUE_DATE AS LP_DUE_DATE, B.VALIDITY_IN_DAYS AS LP_VALIDITY_IN_DAYS, B.LEARNING_PROGRAM_DATE_COMPLETED AS LP_LEARNING_PROGRAM_DATE_COMPLETED, B.TOTAL_TIME_IN_LEARNING_PROGRAM AS LP_TOTAL_TIME_IN_LEARNING_PROGRAM, B.TOTAL_TIME_IN_LEARNING_PROGRAM_TO_COMPLETION AS LP_TOTAL_TIME_IN_LEARNING_PROGRAM_TO_COMPLETION, B.REQUIRED_TIME_IN_LEARNING_PROGRAM AS LP_REQUIRED_TIME_IN_LEARNING_PROGRAM, B.EXEMPTION_EXPIRATION_DATE AS LP_EXEMPTION_EXPIRATION_DATE, B.USER_STATUS AS LP_USER_STATUS, B.USER_EMAIL AS LP_USER_EMAIL, B.SUPERVISOR_EMAIL AS LP_SUPERVISOR_EMAIL, B.COURSE_COMMENTS AS LP_COURSE_COMMENTS, B.LEARNING_PROGRAM_COMMENTS AS LP_LEARNING_PROGRAM_COMMENTS, B.SUPERVISOR_LEVEL_2_EMAIL AS LP_SUPERVISOR_LEVEL_2_EMAIL, B.LOAD_DT AS LP_LOAD_DT, B.UPDATE_DT AS LP_UPDATE_DT FROM (ADMIN.SKILLSOFT_ACM_ASSET_ACTIVITY A LEFT JOIN ADMIN.SKILLSOFT_ACM_LEARNING_PROGRAM B ON (((A.USERID = B.USERID) AND (A.COURSEID = B.COURSEID))))) SM LEFT JOIN (SELECT A.USERID AS EMPLOYEE_ID, CASE WHEN (B.LEARNING_PROGRAM_ID NOTNULL) THEN B.LEARNING_PROGRAM_ID WHEN ('Undefined' NOTNULL) THEN 'Undefined'::"VARCHAR" ELSE NULL::"VARCHAR" END AS LP_ID, MAX(B.COURSE_TITLE) AS LP_TITLE, NULL::UNKNOWN AS LP_PERCENT_COMPLETE, MIN(B.COURSE_BEGIN_DATE) AS LP_FIRST_ACCESS_DATE, MAX(B.COURSE_LAST_VISIT_DATE) AS LP_LAST_ACCESS_DATE, MIN(B.COURSE_DATE_COMPLETED) AS LP_COMPLETION_DATE, MIN(B.COURSE_STATUS) AS LP_STATUS FROM (ADMIN.SKILLSOFT_ACM_ASSET_ACTIVITY A LEFT JOIN ADMIN.SKILLSOFT_ACM_LEARNING_PROGRAM B ON (((A.USERID = B.USERID) AND (A.COURSEID = B.COURSEID)))) GROUP BY A.USERID, B.LEARNING_PROGRAM_ID) LLP ON (((LLP.LP_ID = SM.LP_LEARNING_PROGRAM_ID) AND (LLP.EMPLOYEE_ID = SM.USERID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW EP ON ((SM.USERID = EP.EMPLOYEE_ID))) LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.LOCATION_ID = EP.LOCATION_ID))) WHERE ((SM.COURSEID <> ALL (SELECT SKILLSOFT_COURSE_EXCEPTION.COURSE_ID FROM ADMIN.SKILLSOFT_COURSE_EXCEPTION)) AND (LLP.LP_ID <> ALL (SELECT SKILLSOFT_LP_EXCEPTION.LP_ID FROM ADMIN.SKILLSOFT_LP_EXCEPTION))));

\echo
\echo *****  Creating view:  "SMS_COMMISSION_RPT_EXCEPTION_VW"

CREATE or replace VIEW  SMS_COMMISSION_RPT_EXCEPTION_VW
(
     LOCATION_ID,
     STORE,
     DISTRICT_ID,
     DISTRICT_DESC,
     REGION_ID,
     REION_DESC,
     DAY_DT,
     WEEK_DT,
     TXN_TSTMP,
     TXN_REGISTER,
     TXN_NBR,
     CASHIER,
     INVOICE,
     COUPON_UPC,
     COUPON_DESC,
     COUPON_QTY,
     COUPON_AMT
) AS
SELECT POS.LOCATION_ID, POS.STORE_NBR AS STORE, POS.DISTRICT_ID, POS.DISTRICT_DESC, POS.REGION_ID, POS.REGION_DESC AS REION_DESC, TO_CHAR("TIMESTAMP"(POS.DAY_DT), 'MM/DD/YY'::"VARCHAR") AS DAY_DT, TO_CHAR(POS.WEEK_DT, 'MM/DD/YY'::"VARCHAR") AS WEEK_DT, TO_CHAR(POS.TRANS_TSTMP, 'HH:MI:SS'::"VARCHAR") AS TXN_TSTMP, POS.REGISTER_NBR AS TXN_REGISTER, POS.TRANSACTION_NBR AS TXN_NBR, POS.CASHIER_NAME AS CASHIER, POS.TP_INVOICE_NBR AS INVOICE, POS.COUPON_UPC_ID AS COUPON_UPC, POS.SKU_DESC AS COUPON_DESC, POS.POS_COUPON_ALLOC_QTY AS COUPON_QTY, POS.POS_COUPON_ALLOC_AMT AS COUPON_AMT FROM ((SELECT C.DAY_DT, D.WEEK_DT, C.LOCATION_ID, R.STORE_NBR, L.DISTRICT_ID, L.DISTRICT_DESC, L.REGION_ID, L.REGION_DESC, K.TRANS_TSTMP, K.REGISTER_NBR, K.TRANSACTION_NBR, C.CASHIER_NBR, ((E.EMPL_FIRST_NAME || ' '::"VARCHAR") || E.EMPL_LAST_NAME) AS CASHIER_NAME, C.PRODUCT_ID, C.TP_INVOICE_NBR, C.COUPON_UPC_ID, C.OFFER_ID, P.SKU_DESC, C.POS_COUPON_ALLOC_QTY, C.POS_COUPON_ALLOC_AMT FROM (((((((ADMIN.SALES_TRANS_UPC_COUPON_ALLOC C JOIN ADMIN.DAYS D ON (("TIMESTAMP"(C.DAY_DT) = D.DAY_DT))) JOIN ADMIN.SMS_STORE_ROLLOUT R ON ((C.LOCATION_ID = R.LOCATION_ID))) JOIN ADMIN.SITE_PROFILE_RPT L ON ((C.LOCATION_ID = L.LOCATION_ID))) JOIN ADMIN.SALES_INSTANCE_SKEY K ON ((("TIMESTAMP"(C.DAY_DT) = K.DAY_DT) AND (C.SALES_INSTANCE_ID = K.SALES_INSTANCE_ID)))) JOIN ADMIN.SKU_PROFILE P ON ((C.COUPON_PRODUCT_ID = P.PRODUCT_ID))) JOIN ADMIN.SMS_COMMISSION_COUPON CC ON (((C.COUPON_PRODUCT_ID = CC.PRODUCT_ID) AND ((C.DAY_DT >= CC.COMMISSION_ACTIVE_FROM_DT) AND (C.DAY_DT <= CC.COMMISSION_ACTIVE_TO_DT))))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_SDVW E ON ((C.CASHIER_NBR = E.EMPLOYEE_ID))) WHERE ((((D.WEEK_DT = (SELECT DAYS.WEEK_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 7))))) AND (C.SALES_TYPE_ID IN (1, 3))) AND (C.VOID_TYPE_CD = 'N'::BPCHAR)) AND (R.SMS_START_DT < DATE('now(0)'::"VARCHAR")))) POS LEFT JOIN (SELECT S.SMS_APPOINTMENT_DT AS DAY_DT, A.LOCATION_ID, R.STORE_NBR, A.PETM_POS_INVOICE_ID, S.PRODUCT_ID FROM (((ADMIN.SMS_APPOINTMENT_RPT A JOIN ADMIN.DAYS D ON (("TIMESTAMP"(A.SMS_APPOINTMENT_DT) = D.DAY_DT))) JOIN ADMIN.SMS_STORE_ROLLOUT R ON ((A.LOCATION_ID = R.LOCATION_ID))) JOIN ADMIN.SMS_APPOINTMENT_SERVICE_RPT S ON (((A.SMS_APPOINTMENT_ID = S.SMS_APPOINTMENT_ID) AND (A.SMS_ORDER_ID = S.SMS_ORDER_ID)))) WHERE (((S.SMS_APPT_STATUS_ID IN (4, 5, 8, 9)) AND (S.SERVICE_CANCEL_TSTMP ISNULL)) AND (D.WEEK_DT = (SELECT DAYS.WEEK_DT FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 7))))))) SMS ON (((((POS.DAY_DT = SMS.DAY_DT) AND (POS.LOCATION_ID = SMS.LOCATION_ID)) AND (POS.TP_INVOICE_NBR = SMS.PETM_POS_INVOICE_ID)) AND (POS.PRODUCT_ID = SMS.PRODUCT_ID)))) WHERE (SMS.PRODUCT_ID ISNULL);

\echo
\echo *****  Creating view:  "PS2_EMPL_EMPL_LOC_WK_PRE_SDVW"

CREATE or replace VIEW  PS2_EMPL_EMPL_LOC_WK_PRE_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     PAY_FREQ_CD,
     CURRENCY_NBR
) AS
SELECT PS2_EMPL_EMPL_LOC_WK_PRE.WEEK_DT, PS2_EMPL_EMPL_LOC_WK_PRE.LOCATION_ID, PS2_EMPL_EMPL_LOC_WK_PRE.EMPLOYEE_ID, PS2_EMPL_EMPL_LOC_WK_PRE.EARN_ID, PS2_EMPL_EMPL_LOC_WK_PRE.STORE_DEPT_NBR, PS2_EMPL_EMPL_LOC_WK_PRE.JOB_CODE, PS2_EMPL_EMPL_LOC_WK_PRE.FULLPT_FLAG, PS2_EMPL_EMPL_LOC_WK_PRE.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, PS2_EMPL_EMPL_LOC_WK_PRE.PAY_FREQ_CD, PS2_EMPL_EMPL_LOC_WK_PRE.CURRENCY_NBR FROM ADMIN.PS2_EMPL_EMPL_LOC_WK_PRE;

\echo
\echo *****  Creating view:  "EMPL_PAYCHECK_RPT_SDVW"

CREATE or replace VIEW  EMPL_PAYCHECK_RPT_SDVW
(
     PAYCHECK_DT,
     PROCESS_PAY_PERIOD,
     FOR_PAY_PERIOD,
     PAY_STATUS,
     PAY_START_DT,
     PAY_END_DT,
     EMPLOYEE_ID,
     GL_WORK_COST_CENTER_GID,
     PS_WAGE_TYPE_GID,
     CHECK_NBR,
     GL_COMPANY_CD,
     PS_TAX_COMPANY_CD,
     STATE_CD,
     EMPL_GROUP_CD,
     GL_HOME_COST_CENTER_GID,
     HOURS_WORKED,
     WAGE_LOC_AMT,
     CURRENCY_ID,
     VOID_FLAG,
     COUNTRY_CD,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_QTR,
     FISCAL_YR,
     WEEK_DT,
     CAL_WK,
     CAL_MO,
     CAL_QTR,
     CAL_YR,
     LOAD_TSTMP
) AS
SELECT EMPL_PAYCHECK_RPT.PAYCHECK_DT, EMPL_PAYCHECK_RPT.PROCESS_PAY_PERIOD, EMPL_PAYCHECK_RPT.FOR_PAY_PERIOD, EMPL_PAYCHECK_RPT.PAY_STATUS, EMPL_PAYCHECK_RPT.PAY_START_DT, EMPL_PAYCHECK_RPT.PAY_END_DT, EMPL_PAYCHECK_RPT.EMPLOYEE_ID, EMPL_PAYCHECK_RPT.GL_WORK_COST_CENTER_GID, EMPL_PAYCHECK_RPT.PS_WAGE_TYPE_GID, EMPL_PAYCHECK_RPT.CHECK_NBR, EMPL_PAYCHECK_RPT.GL_COMPANY_CD, EMPL_PAYCHECK_RPT.PS_TAX_COMPANY_CD, EMPL_PAYCHECK_RPT.STATE_CD, EMPL_PAYCHECK_RPT.EMPL_GROUP_CD, EMPL_PAYCHECK_RPT.GL_HOME_COST_CENTER_GID, EMPL_PAYCHECK_RPT.HOURS_WORKED, '********' AS WAGE_LOC_AMT, EMPL_PAYCHECK_RPT.CURRENCY_ID, EMPL_PAYCHECK_RPT.VOID_FLAG, EMPL_PAYCHECK_RPT.COUNTRY_CD, EMPL_PAYCHECK_RPT.FISCAL_WK, EMPL_PAYCHECK_RPT.FISCAL_MO, EMPL_PAYCHECK_RPT.FISCAL_QTR, EMPL_PAYCHECK_RPT.FISCAL_YR, EMPL_PAYCHECK_RPT.WEEK_DT, EMPL_PAYCHECK_RPT.CAL_WK, EMPL_PAYCHECK_RPT.CAL_MO, EMPL_PAYCHECK_RPT.CAL_QTR, EMPL_PAYCHECK_RPT.CAL_YR, EMPL_PAYCHECK_RPT.LOAD_TSTMP FROM ADMIN.EMPL_PAYCHECK_RPT;

\echo
\echo *****  Creating view:  "CASE_EMPL_PROFILE_HIST_SDVW"

CREATE or replace VIEW  CASE_EMPL_PROFILE_HIST_SDVW
(
     EMPLOYEE_ID,
     EMPL_LOGIN_ID,
     EMPL_PREV_LOGIN_ID,
     LAST_EMPL_LOGIN_ID_CHND_DT,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_STATUS_CD,
     LAST_EMPL_STATUS_CD_CHNG_DT,
     EMPL_EMAIL_ADDR,
     EMPL_HOME_PHONE,
     PS_PERSONNEL_SUBAREA_ID,
     PS_PERSONNEL_AREA_ID,
     PS_DEPT_CD,
     JOB_CODE,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT CASE_EMPL_PROFILE_HIST.EMPLOYEE_ID, CASE_EMPL_PROFILE_HIST.EMPL_LOGIN_ID, CASE_EMPL_PROFILE_HIST.EMPL_PREV_LOGIN_ID, CASE_EMPL_PROFILE_HIST.LAST_EMPL_LOGIN_ID_CHND_DT, CASE_EMPL_PROFILE_HIST.EMPL_FIRST_NAME, CASE_EMPL_PROFILE_HIST.EMPL_MIDDLE_NAME, CASE_EMPL_PROFILE_HIST.EMPL_LAST_NAME, CASE_EMPL_PROFILE_HIST.EMPL_STATUS_CD, CASE_EMPL_PROFILE_HIST.LAST_EMPL_STATUS_CD_CHNG_DT, CASE_EMPL_PROFILE_HIST.EMPL_EMAIL_ADDR, '********' AS EMPL_HOME_PHONE, CASE_EMPL_PROFILE_HIST.PS_PERSONNEL_SUBAREA_ID, CASE_EMPL_PROFILE_HIST.PS_PERSONNEL_AREA_ID, CASE_EMPL_PROFILE_HIST.PS_DEPT_CD, CASE_EMPL_PROFILE_HIST.JOB_CODE, CASE_EMPL_PROFILE_HIST.UPDATE_DT, CASE_EMPL_PROFILE_HIST.LOAD_DT FROM ADMIN.CASE_EMPL_PROFILE_HIST;

\echo
\echo *****  Creating view:  "EMPL_PAY_RATE_HIST_SDVW"

CREATE or replace VIEW  EMPL_PAY_RATE_HIST_SDVW
(
     EMPLOYEE_ID,
     EMPL_PAY_RATE_EFF_DT,
     FROM_ANNUAL_RATE_LOC_AMT,
     FROM_HOURLY_RATE_LOC_AMT,
     FROM_CURRENCY_ID,
     TO_ANNUAL_RATE_LOC_AMT,
     TO_HOURLY_RATE_LOC_AMT,
     TO_CURRENCY_ID,
     PS_COMP_FREQ_CD,
     LOAD_TSTMP
) AS
SELECT EMPL_PAY_RATE_HIST.EMPLOYEE_ID, EMPL_PAY_RATE_HIST.EMPL_PAY_RATE_EFF_DT, '********' AS FROM_ANNUAL_RATE_LOC_AMT, '********' AS FROM_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST.FROM_CURRENCY_ID, '********' AS TO_ANNUAL_RATE_LOC_AMT, '********' AS TO_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST.TO_CURRENCY_ID, EMPL_PAY_RATE_HIST.PS_COMP_FREQ_CD, EMPL_PAY_RATE_HIST.LOAD_TSTMP FROM ADMIN.EMPL_PAY_RATE_HIST;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_DAY_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_DAY_SDVW
(
     DAY_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_DAY.DAY_DT, EMPLOYEE_PROFILE_DAY.EMPLOYEE_ID, EMPLOYEE_PROFILE_DAY.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_DAY.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_DAY.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_DAY.GENDER_CD, EMPLOYEE_PROFILE_DAY.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_DAY.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_DAY.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_DAY.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_DAY.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_DAY.BADGE_NBR, EMPLOYEE_PROFILE_DAY.EMPL_STATUS_CD, EMPLOYEE_PROFILE_DAY.STATUS_CHG_DT, EMPLOYEE_PROFILE_DAY.FULLPT_FLAG, EMPLOYEE_PROFILE_DAY.FULLPT_CHG_DT, EMPLOYEE_PROFILE_DAY.EMPL_TYPE_CD, EMPLOYEE_PROFILE_DAY.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_DAY.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_DAY.EMPL_GROUP_CD, EMPLOYEE_PROFILE_DAY.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_DAY.EMPL_HIRE_DT, EMPLOYEE_PROFILE_DAY.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_DAY.EMPL_TERM_DT, EMPLOYEE_PROFILE_DAY.TERM_REASON_CD, EMPLOYEE_PROFILE_DAY.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_DAY.PS_ACTION_DT, EMPLOYEE_PROFILE_DAY.PS_ACTION_CD, EMPLOYEE_PROFILE_DAY.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_DAY.LOCATION_ID, EMPLOYEE_PROFILE_DAY.LOCATION_CHG_DT, EMPLOYEE_PROFILE_DAY.STORE_NBR, EMPLOYEE_PROFILE_DAY.STORE_DEPT_NBR, EMPLOYEE_PROFILE_DAY.COMPANY_ID, EMPLOYEE_PROFILE_DAY.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_DAY.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_DAY.PS_DEPT_CD, EMPLOYEE_PROFILE_DAY.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_DAY.PS_POSITION_ID, EMPLOYEE_PROFILE_DAY.POSITION_CHG_DT, EMPLOYEE_PROFILE_DAY.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_DAY.JOB_CODE, EMPLOYEE_PROFILE_DAY.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_DAY.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_DAY.PS_GRADE_ID, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE_DAY.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_DAY.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_DAY.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_DAY.PS_COMP_FREQ_CD, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_DAY.CURRENCY_ID, EMPLOYEE_PROFILE_DAY.EXCH_RATE_PCT, EMPLOYEE_PROFILE_DAY.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_DAY;

\echo
\echo *****  Creating view:  "EMPL_STD_BONUS_HIST_PRE_SDVW"

CREATE or replace VIEW  EMPL_STD_BONUS_HIST_PRE_SDVW
(
     EMPLOYEE_ID,
     EMPL_STD_BONUS_START_DT,
     EMPL_STD_BONUS_END_DT,
     EMPL_STD_BONUS_PCT
) AS
SELECT EMPL_STD_BONUS_HIST_PRE.EMPLOYEE_ID, EMPL_STD_BONUS_HIST_PRE.EMPL_STD_BONUS_START_DT, EMPL_STD_BONUS_HIST_PRE.EMPL_STD_BONUS_END_DT, '********' AS EMPL_STD_BONUS_PCT FROM ADMIN.EMPL_STD_BONUS_HIST_PRE;

\echo
\echo *****  Creating view:  "CDH_EMPL_PROFILE_PRE_SDVW"

CREATE or replace VIEW  CDH_EMPL_PROFILE_PRE_SDVW
(
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_STATUS_CD,
     EMPL_HIRE_DT,
     EMPL_TERM_DT,
     EMPL_REHIRE_DT,
     LOAD_TSTMP
) AS
SELECT CDH_EMPL_PROFILE_PRE.EMPLOYEE_ID, CDH_EMPL_PROFILE_PRE.EMPL_FIRST_NAME, CDH_EMPL_PROFILE_PRE.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, CDH_EMPL_PROFILE_PRE.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, CDH_EMPL_PROFILE_PRE.EMPL_STATUS_CD, CDH_EMPL_PROFILE_PRE.EMPL_HIRE_DT, CDH_EMPL_PROFILE_PRE.EMPL_TERM_DT, CDH_EMPL_PROFILE_PRE.EMPL_REHIRE_DT, CDH_EMPL_PROFILE_PRE.LOAD_TSTMP FROM ADMIN.CDH_EMPL_PROFILE_PRE;

\echo
\echo *****  Creating view:  "HS_EMPLOYEE_SDVW"

CREATE or replace VIEW  HS_EMPLOYEE_SDVW
(
     FIRSTNAME,
     MIDDLENAME,
     LASTNAME,
     USERNAME,
     EMPLOYEEID,
     EMAIL,
     ADDRESS_1,
     ADDRESS_2,
     CITY,
     COUNTRY,
     "STATE",
     POSTALCODE,
     HOMEPHONE,
     CELLPHONE,
     WORKPHONE,
     PERSONIDENTIFIER,
     STORENUMBER,
     ROLENAMES,
     ISACTIVE,
     LOCALE,
     "PASSWORD",
     FORCEPWDCHANGE,
     PUBLISHED_FL,
     UPDATE_DT
) AS
SELECT HS_EMPLOYEE.FIRSTNAME, HS_EMPLOYEE.MIDDLENAME, HS_EMPLOYEE.LASTNAME, HS_EMPLOYEE.USERNAME, HS_EMPLOYEE.EMPLOYEEID, HS_EMPLOYEE.EMAIL, '********' AS ADDRESS_1, '********' AS ADDRESS_2, '********' AS CITY, HS_EMPLOYEE.COUNTRY, '********' AS "STATE", '********' AS POSTALCODE, '********' AS HOMEPHONE, '********' AS CELLPHONE, '********' AS WORKPHONE, HS_EMPLOYEE.PERSONIDENTIFIER, HS_EMPLOYEE.STORENUMBER, HS_EMPLOYEE.ROLENAMES, HS_EMPLOYEE.ISACTIVE, HS_EMPLOYEE.LOCALE, '********' AS "PASSWORD", HS_EMPLOYEE.FORCEPWDCHANGE, HS_EMPLOYEE.PUBLISHED_FL, HS_EMPLOYEE.UPDATE_DT FROM ADMIN.HS_EMPLOYEE;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_WK_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_WK_SDVW
(
     WEEK_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_WK.WEEK_DT, EMPLOYEE_PROFILE_WK.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_WK.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_WK.GENDER_CD, EMPLOYEE_PROFILE_WK.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_WK.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_WK.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_WK.BADGE_NBR, EMPLOYEE_PROFILE_WK.EMPL_STATUS_CD, EMPLOYEE_PROFILE_WK.STATUS_CHG_DT, EMPLOYEE_PROFILE_WK.FULLPT_FLAG, EMPLOYEE_PROFILE_WK.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_WK.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_WK.EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK.TERM_REASON_CD, EMPLOYEE_PROFILE_WK.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_WK.PS_ACTION_DT, EMPLOYEE_PROFILE_WK.PS_ACTION_CD, EMPLOYEE_PROFILE_WK.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK.LOCATION_ID, EMPLOYEE_PROFILE_WK.LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK.STORE_NBR, EMPLOYEE_PROFILE_WK.STORE_DEPT_NBR, EMPLOYEE_PROFILE_WK.COMPANY_ID, EMPLOYEE_PROFILE_WK.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_WK.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK.PS_DEPT_CD, EMPLOYEE_PROFILE_WK.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_WK.PS_POSITION_ID, EMPLOYEE_PROFILE_WK.POSITION_CHG_DT, EMPLOYEE_PROFILE_WK.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK.JOB_CODE, EMPLOYEE_PROFILE_WK.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK.PS_GRADE_ID, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE_WK.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_WK.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_WK.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_WK.PS_COMP_FREQ_CD, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK.CURRENCY_ID, EMPLOYEE_PROFILE_WK.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK;

\echo
\echo *****  Creating view:  "EMPL_WAGE_HIST_PRE_SDVW"

CREATE or replace VIEW  EMPL_WAGE_HIST_PRE_SDVW
(
     EMPLOYEE_ID,
     EMPL_WAGE_EFF_DT,
     PS_WAGE_TYPE_CD,
     EMPL_WAGE_END_DT,
     CURRENCY_ID,
     PS_WAGE_TYPE_AMT
) AS
SELECT EMPL_WAGE_HIST_PRE.EMPLOYEE_ID, EMPL_WAGE_HIST_PRE.EMPL_WAGE_EFF_DT, EMPL_WAGE_HIST_PRE.PS_WAGE_TYPE_CD, EMPL_WAGE_HIST_PRE.EMPL_WAGE_END_DT, EMPL_WAGE_HIST_PRE.CURRENCY_ID, '********' AS PS_WAGE_TYPE_AMT FROM ADMIN.EMPL_WAGE_HIST_PRE;

\echo
\echo *****  Creating view:  "EMPL_EMPL_LOC_WK_VW_SDVW"

CREATE or replace VIEW  EMPL_EMPL_LOC_WK_VW_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     PAY_FREQ_CD,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
SELECT EMPL_EMPL_LOC_WK_VW.WEEK_DT, EMPL_EMPL_LOC_WK_VW.LOCATION_ID, EMPL_EMPL_LOC_WK_VW.EMPLOYEE_ID, EMPL_EMPL_LOC_WK_VW.EARN_ID, EMPL_EMPL_LOC_WK_VW.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK_VW.JOB_CODE, EMPL_EMPL_LOC_WK_VW.FULLPT_FLAG, EMPL_EMPL_LOC_WK_VW.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK_VW.PAY_FREQ_CD, EMPL_EMPL_LOC_WK_VW.CURRENCY_NBR, EMPL_EMPL_LOC_WK_VW.LOAD_TSTMP FROM ADMIN.EMPL_EMPL_LOC_WK_VW;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_RPT_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_RPT_SDVW
(
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     GENDER_DESC,
     PS_MARITAL_STATUS_CD,
     PS_MARITAL_STATUS_DESC,
     ETHNIC_GROUP_ID,
     ETHNIC_GROUP_DESC,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     EMPL_STATUS_DESC,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     EMPL_TYPE_DESC,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_CATEGORY_DESC,
     EMPL_GROUP_CD,
     EMPL_GROUP_DESC,
     EMPL_SUBGROUP_CD,
     EMPL_SUBGROUP_DESC,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     TERM_REASON_DESC,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_DESC,
     PS_ACTION_REASON_CD,
     PS_ACTION_REASON_DESC,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     COMPANY_DESC,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_AREA_DESC,
     PS_PERSONNEL_SUBAREA_ID,
     PS_PERSONNEL_SUBAREA_DESC,
     PS_DEPT_CD,
     PS_DEPT_DESC,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     PS_POSITION_DESC,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_DESC,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     PS_COUNTRY_GROUP_CD,
     PS_PAY_GRADE_TYPE_CD,
     PS_PAY_GRADE_TYPE_DESC,
     PS_PAY_GRADE_AREA_CD,
     PS_PAY_GRADE_LEVEL_CD,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_PAYROLL_AREA_DESC,
     PS_TAX_COMPANY_CD,
     PS_TAX_COMPANY_DESC,
     PS_COMP_FREQ_CD,
     PS_COMP_FREQ_DESC,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_RPT.EMPLOYEE_ID, EMPLOYEE_PROFILE_RPT.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_RPT.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_RPT.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_RPT.GENDER_CD, EMPLOYEE_PROFILE_RPT.GENDER_DESC, EMPLOYEE_PROFILE_RPT.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_RPT.PS_MARITAL_STATUS_DESC, EMPLOYEE_PROFILE_RPT.ETHNIC_GROUP_ID, EMPLOYEE_PROFILE_RPT.ETHNIC_GROUP_DESC, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_RPT.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_RPT.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_RPT.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_RPT.BADGE_NBR, EMPLOYEE_PROFILE_RPT.EMPL_STATUS_CD, EMPLOYEE_PROFILE_RPT.EMPL_STATUS_DESC, EMPLOYEE_PROFILE_RPT.STATUS_CHG_DT, EMPLOYEE_PROFILE_RPT.FULLPT_FLAG, EMPLOYEE_PROFILE_RPT.FULLPT_CHG_DT, EMPLOYEE_PROFILE_RPT.EMPL_TYPE_CD, EMPLOYEE_PROFILE_RPT.EMPL_TYPE_DESC, EMPLOYEE_PROFILE_RPT.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_RPT.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_RPT.EMPL_CATEGORY_DESC, EMPLOYEE_PROFILE_RPT.EMPL_GROUP_CD, EMPLOYEE_PROFILE_RPT.EMPL_GROUP_DESC, EMPLOYEE_PROFILE_RPT.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_RPT.EMPL_SUBGROUP_DESC, EMPLOYEE_PROFILE_RPT.EMPL_HIRE_DT, EMPLOYEE_PROFILE_RPT.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_RPT.EMPL_TERM_DT, EMPLOYEE_PROFILE_RPT.TERM_REASON_CD, EMPLOYEE_PROFILE_RPT.TERM_REASON_DESC, EMPLOYEE_PROFILE_RPT.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_RPT.PS_ACTION_DT, EMPLOYEE_PROFILE_RPT.PS_ACTION_CD, EMPLOYEE_PROFILE_RPT.PS_ACTION_DESC, EMPLOYEE_PROFILE_RPT.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_RPT.PS_ACTION_REASON_DESC, EMPLOYEE_PROFILE_RPT.LOCATION_ID, EMPLOYEE_PROFILE_RPT.LOCATION_CHG_DT, EMPLOYEE_PROFILE_RPT.STORE_NBR, EMPLOYEE_PROFILE_RPT.STORE_DEPT_NBR, EMPLOYEE_PROFILE_RPT.COMPANY_ID, EMPLOYEE_PROFILE_RPT.COMPANY_DESC, EMPLOYEE_PROFILE_RPT.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_RPT.PS_PERSONNEL_AREA_DESC, EMPLOYEE_PROFILE_RPT.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_RPT.PS_PERSONNEL_SUBAREA_DESC, EMPLOYEE_PROFILE_RPT.PS_DEPT_CD, EMPLOYEE_PROFILE_RPT.PS_DEPT_DESC, EMPLOYEE_PROFILE_RPT.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_RPT.PS_POSITION_ID, EMPLOYEE_PROFILE_RPT.PS_POSITION_DESC, EMPLOYEE_PROFILE_RPT.POSITION_CHG_DT, EMPLOYEE_PROFILE_RPT.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_RPT.JOB_CODE, EMPLOYEE_PROFILE_RPT.JOB_CODE_DESC, EMPLOYEE_PROFILE_RPT.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_RPT.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_RPT.PS_GRADE_ID, EMPLOYEE_PROFILE_RPT.PS_COUNTRY_GROUP_CD, EMPLOYEE_PROFILE_RPT.PS_PAY_GRADE_TYPE_CD, EMPLOYEE_PROFILE_RPT.PS_PAY_GRADE_TYPE_DESC, EMPLOYEE_PROFILE_RPT.PS_PAY_GRADE_AREA_CD, EMPLOYEE_PROFILE_RPT.PS_PAY_GRADE_LEVEL_CD, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE_RPT.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_RPT.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_RPT.PS_PAYROLL_AREA_DESC, EMPLOYEE_PROFILE_RPT.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_RPT.PS_TAX_COMPANY_DESC, EMPLOYEE_PROFILE_RPT.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_RPT.PS_COMP_FREQ_DESC, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_RPT.CURRENCY_ID, EMPLOYEE_PROFILE_RPT.EXCH_RATE_PCT, EMPLOYEE_PROFILE_RPT.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_RPT;

\echo
\echo *****  Creating view:  "EMPL_RATING_HIST_PSOFT_SDVW"

CREATE or replace VIEW  EMPL_RATING_HIST_PSOFT_SDVW
(
     CAL_YR,
     EMPLOYEE_ID,
     EMPL_RATING_EFF_DT,
     EMPL_RATING,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT EMPL_RATING_HIST_PSOFT.CAL_YR, EMPL_RATING_HIST_PSOFT.EMPLOYEE_ID, EMPL_RATING_HIST_PSOFT.EMPL_RATING_EFF_DT, '********' AS EMPL_RATING, EMPL_RATING_HIST_PSOFT.UPDATE_TSTMP, EMPL_RATING_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_RATING_HIST_PSOFT;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_DAY_VW_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_DAY_VW_SDVW
(
     DAY_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_DAY_VW.DAY_DT, EMPLOYEE_PROFILE_DAY_VW.EMPLOYEE_ID, EMPLOYEE_PROFILE_DAY_VW.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_DAY_VW.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_DAY_VW.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_DAY_VW.GENDER_CD, EMPLOYEE_PROFILE_DAY_VW.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_DAY_VW.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_DAY_VW.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_DAY_VW.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_DAY_VW.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_DAY_VW.BADGE_NBR, EMPLOYEE_PROFILE_DAY_VW.EMPL_STATUS_CD, EMPLOYEE_PROFILE_DAY_VW.STATUS_CHG_DT, EMPLOYEE_PROFILE_DAY_VW.FULLPT_FLAG, EMPLOYEE_PROFILE_DAY_VW.FULLPT_CHG_DT, EMPLOYEE_PROFILE_DAY_VW.EMPL_TYPE_CD, EMPLOYEE_PROFILE_DAY_VW.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_DAY_VW.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_DAY_VW.EMPL_GROUP_CD, EMPLOYEE_PROFILE_DAY_VW.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_DAY_VW.EMPL_HIRE_DT, EMPLOYEE_PROFILE_DAY_VW.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_DAY_VW.EMPL_TERM_DT, EMPLOYEE_PROFILE_DAY_VW.TERM_REASON_CD, EMPLOYEE_PROFILE_DAY_VW.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_DAY_VW.PS_ACTION_DT, EMPLOYEE_PROFILE_DAY_VW.PS_ACTION_CD, EMPLOYEE_PROFILE_DAY_VW.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_DAY_VW.LOCATION_ID, EMPLOYEE_PROFILE_DAY_VW.LOCATION_CHG_DT, EMPLOYEE_PROFILE_DAY_VW.STORE_NBR, EMPLOYEE_PROFILE_DAY_VW.STORE_DEPT_NBR, EMPLOYEE_PROFILE_DAY_VW.COMPANY_ID, EMPLOYEE_PROFILE_DAY_VW.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_DAY_VW.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_DAY_VW.PS_DEPT_CD, EMPLOYEE_PROFILE_DAY_VW.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_DAY_VW.PS_POSITION_ID, EMPLOYEE_PROFILE_DAY_VW.POSITION_CHG_DT, EMPLOYEE_PROFILE_DAY_VW.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_DAY_VW.JOB_CODE, EMPLOYEE_PROFILE_DAY_VW.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_DAY_VW.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_DAY_VW.PS_GRADE_ID, EMPLOYEE_PROFILE_DAY_VW.EMPL_STD_BONUS_PCT, EMPLOYEE_PROFILE_DAY_VW.EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_DAY_VW.EMPL_RATING, EMPLOYEE_PROFILE_DAY_VW.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_DAY_VW.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_DAY_VW.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_DAY_VW.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_DAY_VW.COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_DAY_VW.CURRENCY_ID, EMPLOYEE_PROFILE_DAY_VW.EXCH_RATE_PCT, EMPLOYEE_PROFILE_DAY_VW.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_DAY_VW;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_WK_VW_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_WK_VW_SDVW
(
     WEEK_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_WK_VW.WEEK_DT, EMPLOYEE_PROFILE_WK_VW.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK_VW.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_WK_VW.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK_VW.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_WK_VW.GENDER_CD, EMPLOYEE_PROFILE_WK_VW.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_WK_VW.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK_VW.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK_VW.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_WK_VW.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_WK_VW.BADGE_NBR, EMPLOYEE_PROFILE_WK_VW.EMPL_STATUS_CD, EMPLOYEE_PROFILE_WK_VW.STATUS_CHG_DT, EMPLOYEE_PROFILE_WK_VW.FULLPT_FLAG, EMPLOYEE_PROFILE_WK_VW.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK_VW.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK_VW.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_WK_VW.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_WK_VW.EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK_VW.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK_VW.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK_VW.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK_VW.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK_VW.TERM_REASON_CD, EMPLOYEE_PROFILE_WK_VW.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_WK_VW.PS_ACTION_DT, EMPLOYEE_PROFILE_WK_VW.PS_ACTION_CD, EMPLOYEE_PROFILE_WK_VW.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK_VW.LOCATION_ID, EMPLOYEE_PROFILE_WK_VW.LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK_VW.STORE_NBR, EMPLOYEE_PROFILE_WK_VW.STORE_DEPT_NBR, EMPLOYEE_PROFILE_WK_VW.COMPANY_ID, EMPLOYEE_PROFILE_WK_VW.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_WK_VW.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK_VW.PS_DEPT_CD, EMPLOYEE_PROFILE_WK_VW.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_WK_VW.PS_POSITION_ID, EMPLOYEE_PROFILE_WK_VW.POSITION_CHG_DT, EMPLOYEE_PROFILE_WK_VW.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK_VW.JOB_CODE, EMPLOYEE_PROFILE_WK_VW.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK_VW.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK_VW.PS_GRADE_ID, EMPLOYEE_PROFILE_WK_VW.EMPL_STD_BONUS_PCT, EMPLOYEE_PROFILE_WK_VW.EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_WK_VW.EMPL_RATING, EMPLOYEE_PROFILE_WK_VW.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_WK_VW.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_WK_VW.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_WK_VW.PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_WK_VW.COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK_VW.CURRENCY_ID, EMPLOYEE_PROFILE_WK_VW.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK_VW.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK_VW;

\echo
\echo *****  Creating view:  "PS_PAYCHECK_PRE_SDVW"

CREATE or replace VIEW  PS_PAYCHECK_PRE_SDVW
(
     IPPAY_DATE,
     BEG_INPER,
     END_INPER,
     ZCHECKNR,
     COMP_CODE,
     ZTAXCO,
     REGION,
     EMPLOYEE,
     EMPLGROUP,
     ZINCCTR,
     MAST_CCTR,
     WAGETYPE,
     QUANTITY,
     AMOUNT,
     CURRENCY,
     ZVOID,
     ZRATE,
     COUNTRY,
     CO_MST_AR,
     COUNTRY_ID,
     UNIT,
     FPPER,
     INPER,
     PY_SRTZA,
     LOAD_TSTMP
) AS
SELECT PS_PAYCHECK_PRE.IPPAY_DATE, PS_PAYCHECK_PRE.BEG_INPER, PS_PAYCHECK_PRE.END_INPER, PS_PAYCHECK_PRE.ZCHECKNR, PS_PAYCHECK_PRE.COMP_CODE, PS_PAYCHECK_PRE.ZTAXCO, PS_PAYCHECK_PRE.REGION, PS_PAYCHECK_PRE.EMPLOYEE, PS_PAYCHECK_PRE.EMPLGROUP, PS_PAYCHECK_PRE.ZINCCTR, PS_PAYCHECK_PRE.MAST_CCTR, PS_PAYCHECK_PRE.WAGETYPE, PS_PAYCHECK_PRE.QUANTITY, '********' AS AMOUNT, PS_PAYCHECK_PRE.CURRENCY, PS_PAYCHECK_PRE.ZVOID, PS_PAYCHECK_PRE.ZRATE, PS_PAYCHECK_PRE.COUNTRY, PS_PAYCHECK_PRE.CO_MST_AR, PS_PAYCHECK_PRE.COUNTRY_ID, PS_PAYCHECK_PRE.UNIT, PS_PAYCHECK_PRE.FPPER, PS_PAYCHECK_PRE.INPER, PS_PAYCHECK_PRE.PY_SRTZA, PS_PAYCHECK_PRE.LOAD_TSTMP FROM ADMIN.PS_PAYCHECK_PRE;

\echo
\echo *****  Creating view:  "EMPL_RATE3_WAGE_HIST_SDVW"

CREATE or replace VIEW  EMPL_RATE3_WAGE_HIST_SDVW
(
     WEEK_DT,
     EMPLOYEE_ID,
     RATE3_WAGE_AMT,
     LOAD_TSTMP
) AS
SELECT EMPL_RATE3_WAGE_HIST.WEEK_DT, EMPL_RATE3_WAGE_HIST.EMPLOYEE_ID, '********' AS RATE3_WAGE_AMT, EMPL_RATE3_WAGE_HIST.LOAD_TSTMP FROM ADMIN.EMPL_RATE3_WAGE_HIST;

\echo
\echo *****  Creating view:  "IC_CA_CLAIMS_SDVW"

CREATE or replace VIEW  IC_CA_CLAIMS_SDVW
(
     LOAD_DT,
     CLAIM_NBR,
     STORE_NBR,
     GEO_LOCATION_NAME,
     JURISDICTION,
     LOCATION_NAME,
     CLASSIFICATION,
     EMPLOYEE_NAME,
     INJURED_DT,
     REPORTED_DT,
     OPENED_DT,
     "DESCRIPTION",
     BODY_PART,
     NATYRE_OF_INJURY_DESC,
     CLAIM_STATUS,
     CASE_MANAGER,
     CURRENT_STATUS,
     ACCIDENTACTIVITY
) AS
SELECT IC_CA_CLAIMS.LOAD_DT, IC_CA_CLAIMS.CLAIM_NBR, IC_CA_CLAIMS.STORE_NBR, IC_CA_CLAIMS.GEO_LOCATION_NAME, IC_CA_CLAIMS.JURISDICTION, IC_CA_CLAIMS.LOCATION_NAME, '********' AS CLASSIFICATION, '********' AS EMPLOYEE_NAME, IC_CA_CLAIMS.INJURED_DT, IC_CA_CLAIMS.REPORTED_DT, IC_CA_CLAIMS.OPENED_DT, '********' AS "DESCRIPTION", '********' AS BODY_PART, '********' AS NATYRE_OF_INJURY_DESC, '********' AS CLAIM_STATUS, IC_CA_CLAIMS.CASE_MANAGER, IC_CA_CLAIMS.CURRENT_STATUS, IC_CA_CLAIMS.ACCIDENTACTIVITY FROM ADMIN.IC_CA_CLAIMS;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_SDVW
(
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE.EMPLOYEE_ID, EMPLOYEE_PROFILE.EMPL_FIRST_NAME, EMPLOYEE_PROFILE.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE.GENDER_CD, EMPLOYEE_PROFILE.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE.EMPL_LOGIN_ID, EMPLOYEE_PROFILE.BADGE_NBR, EMPLOYEE_PROFILE.EMPL_STATUS_CD, EMPLOYEE_PROFILE.STATUS_CHG_DT, EMPLOYEE_PROFILE.FULLPT_FLAG, EMPLOYEE_PROFILE.FULLPT_CHG_DT, EMPLOYEE_PROFILE.EMPL_TYPE_CD, EMPLOYEE_PROFILE.PS_REG_TEMP_CD, EMPLOYEE_PROFILE.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE.EMPL_GROUP_CD, EMPLOYEE_PROFILE.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE.EMPL_HIRE_DT, EMPLOYEE_PROFILE.EMPL_REHIRE_DT, EMPLOYEE_PROFILE.EMPL_TERM_DT, EMPLOYEE_PROFILE.TERM_REASON_CD, EMPLOYEE_PROFILE.EMPL_SENORITY_DT, EMPLOYEE_PROFILE.PS_ACTION_DT, EMPLOYEE_PROFILE.PS_ACTION_CD, EMPLOYEE_PROFILE.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE.LOCATION_ID, EMPLOYEE_PROFILE.LOCATION_CHG_DT, EMPLOYEE_PROFILE.STORE_NBR, EMPLOYEE_PROFILE.STORE_DEPT_NBR, EMPLOYEE_PROFILE.COMPANY_ID, EMPLOYEE_PROFILE.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE.PS_DEPT_CD, EMPLOYEE_PROFILE.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE.PS_POSITION_ID, EMPLOYEE_PROFILE.POSITION_CHG_DT, EMPLOYEE_PROFILE.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE.JOB_CODE, EMPLOYEE_PROFILE.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE.PS_GRADE_ID, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE.PS_COMP_FREQ_CD, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE.CURRENCY_ID, EMPLOYEE_PROFILE.EXCH_RATE_PCT, EMPLOYEE_PROFILE.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE;

\echo
\echo *****  Creating view:  "EMPL_PAY_RATE_HIST_VW_SDVW"

CREATE or replace VIEW  EMPL_PAY_RATE_HIST_VW_SDVW
(
     EMPLOYEE_ID,
     EMPL_PAY_RATE_EFF_DT,
     FROM_ANNUAL_RATE_LOC_AMT,
     FROM_HOURLY_RATE_LOC_AMT,
     FROM_CURRENCY_ID,
     TO_ANNUAL_RATE_LOC_AMT,
     TO_HOURLY_RATE_LOC_AMT,
     TO_CURRENCY_ID,
     PS_COMP_FREQ_CD,
     LOAD_TSTMP
) AS
SELECT EMPL_PAY_RATE_HIST_VW.EMPLOYEE_ID, EMPL_PAY_RATE_HIST_VW.EMPL_PAY_RATE_EFF_DT, '********' AS FROM_ANNUAL_RATE_LOC_AMT, '********' AS FROM_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_VW.FROM_CURRENCY_ID, '********' AS TO_ANNUAL_RATE_LOC_AMT, '********' AS TO_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_VW.TO_CURRENCY_ID, EMPL_PAY_RATE_HIST_VW.PS_COMP_FREQ_CD, EMPL_PAY_RATE_HIST_VW.LOAD_TSTMP FROM ADMIN.EMPL_PAY_RATE_HIST_VW;

\echo
\echo *****  Creating view:  "DC_DIRECTORY_VW_SDVW"

CREATE or replace VIEW  DC_DIRECTORY_VW_SDVW
(
     DIST_MGR_NAME,
     DC_GENERAL_MANAGER_NAME,
     DC_GM_EMAIL,
     STORE_NBR,
     STORE_NAME,
     OPEN_DT,
     SITE_ADDRESS,
     SITE_CITY,
     STATE_CD,
     POSTAL_CD,
     GEO_LATITUDE_NBR,
     GEO_LONGITUDE_NBR,
     DISTRICT_ID,
     DISTRICT_DESC,
     STORE_PHONE,
     POSITION_SORT,
     PS_POSITION_DESC,
     EMPLOYEE_ID,
     EMPLOYEE,
     SUPERVISOR_ID,
     SUPERVISOR_NAME,
     SUPERVISOR_PHONE,
     SUPERVISOR_EMAIL,
     DEPT_SECTION_ID,
     DEPT_SECTION,
     DEPT_SORT,
     DEPT_DESC,
     FULLPT_FLAG,
     EMPL_SENORITY_DT,
     EMPL_BIRTH_DT,
     YOS,
     NEW_HIRE_FLAG,
     BIRTH_MONTH,
     HIRE_MONTH,
     SCHEDULED,
     START_TIME,
     END_TIME,
     SHIFT,
     DEPT_SECTION_ABBR,
     PS_POSITION_ABBR
) AS
SELECT DC_DIRECTORY_VW.DIST_MGR_NAME, DC_DIRECTORY_VW.DC_GENERAL_MANAGER_NAME, DC_DIRECTORY_VW.DC_GM_EMAIL, DC_DIRECTORY_VW.STORE_NBR, DC_DIRECTORY_VW.STORE_NAME, DC_DIRECTORY_VW.OPEN_DT, DC_DIRECTORY_VW.SITE_ADDRESS, DC_DIRECTORY_VW.SITE_CITY, DC_DIRECTORY_VW.STATE_CD, DC_DIRECTORY_VW.POSTAL_CD, DC_DIRECTORY_VW.GEO_LATITUDE_NBR, DC_DIRECTORY_VW.GEO_LONGITUDE_NBR, DC_DIRECTORY_VW.DISTRICT_ID, DC_DIRECTORY_VW.DISTRICT_DESC, DC_DIRECTORY_VW.STORE_PHONE, DC_DIRECTORY_VW.POSITION_SORT, DC_DIRECTORY_VW.PS_POSITION_DESC, DC_DIRECTORY_VW.EMPLOYEE_ID, DC_DIRECTORY_VW.EMPLOYEE, DC_DIRECTORY_VW.SUPERVISOR_ID, DC_DIRECTORY_VW.SUPERVISOR_NAME, DC_DIRECTORY_VW.SUPERVISOR_PHONE, DC_DIRECTORY_VW.SUPERVISOR_EMAIL, DC_DIRECTORY_VW.DEPT_SECTION_ID, DC_DIRECTORY_VW.DEPT_SECTION, DC_DIRECTORY_VW.DEPT_SORT, DC_DIRECTORY_VW.DEPT_DESC, DC_DIRECTORY_VW.FULLPT_FLAG, DC_DIRECTORY_VW.EMPL_SENORITY_DT, '********' AS EMPL_BIRTH_DT, DC_DIRECTORY_VW.YOS, DC_DIRECTORY_VW.NEW_HIRE_FLAG, DC_DIRECTORY_VW.BIRTH_MONTH, DC_DIRECTORY_VW.HIRE_MONTH, DC_DIRECTORY_VW.SCHEDULED, DC_DIRECTORY_VW.START_TIME, DC_DIRECTORY_VW.END_TIME, DC_DIRECTORY_VW.SHIFT, DC_DIRECTORY_VW.DEPT_SECTION_ABBR, DC_DIRECTORY_VW.PS_POSITION_ABBR FROM ADMIN.DC_DIRECTORY_VW;

\echo
\echo *****  Creating view:  "IC_WC_CLAIMS_SDVW"

CREATE or replace VIEW  IC_WC_CLAIMS_SDVW
(
     CLAIM_NBR,
     DAY_DT,
     LOCATION_ID,
     SOURCE_TYPE_ID,
     LINE_TYPE_CD,
     ANIMAL_IND,
     CLAIM_SUB_STATUS_CD,
     INCURRED_EXP_AMT,
     INCURRED_MEDICAL_AMT,
     INCURRED_INDEM_LOSS_AMT,
     INCURRED_OTHER_EXP_AMT,
     INCURRED_TOTAL_AMT,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT IC_WC_CLAIMS.CLAIM_NBR, IC_WC_CLAIMS.DAY_DT, IC_WC_CLAIMS.LOCATION_ID, IC_WC_CLAIMS.SOURCE_TYPE_ID, IC_WC_CLAIMS.LINE_TYPE_CD, IC_WC_CLAIMS.ANIMAL_IND, IC_WC_CLAIMS.CLAIM_SUB_STATUS_CD, '********' AS INCURRED_EXP_AMT, '********' AS INCURRED_MEDICAL_AMT, '********' AS INCURRED_INDEM_LOSS_AMT, '********' AS INCURRED_OTHER_EXP_AMT, IC_WC_CLAIMS.INCURRED_TOTAL_AMT, IC_WC_CLAIMS.LOAD_DT, IC_WC_CLAIMS.UPDATE_DT FROM ADMIN.IC_WC_CLAIMS;

\echo
\echo *****  Creating view:  "IC_DETAIL_SDVW"

CREATE or replace VIEW  IC_DETAIL_SDVW
(
     LOAD_DT,
     CLAIM_NBR,
     CLAIM_VENDOR_CD,
     PROCESSING_OFFICE_NBR,
     PETM_SEQUENCE_NBR,
     RECORD_TYPE_CD,
     CMS_CLIENT_ID,
     CMS_CLIENT_ACCOUNT_NBR,
     CMS_CLIENT_LOCATION_CD,
     LINE_TYPE_CD,
     LOSS_TSTMP,
     EVENT_DESC,
     LOSS_DESC,
     CLAIM_TYPE_CD,
     CLAIM_SUBTYPE_CD,
     CLAIM_STATUS_CD,
     CLAIM_SUBSTATUS_CD,
     REPORTED_TO_CLIENT_DT,
     REPORTED_TO_CMS_DT,
     CLAIM_OPENED_DT,
     CLAIM_CLOSED_DT,
     CLAIM_REOPENED_DT,
     EMPLOYMENT_STATE_CD,
     ACCIDENT_STATE_CD,
     JURISDICTION_STATE_CD,
     SOURCE_CD,
     CAUSE_CD,
     NATURE_RESULT_CD,
     PART_TARGET_CD,
     STORE_NBR,
     LOSS_LOCATION_STREET,
     LOSS_LOCATION_CITY,
     LOSS_LOCATION_POSTAL_CD,
     CLAIMANT_NAME_TYPE_CD,
     CLAIMANT_LAST_NAME,
     CLAIMANT_FIRST_NAME,
     CLAIMANT_MIDDLE_INITIAL,
     CLAIMANT_ADDRESS_LINE_1,
     CLAIMANT_ADDRESS_LINE_2,
     CLAIMANT_CITY,
     CLAIMANT_STATE_CD,
     CLAIMANT_POSTAL_CD,
     CLAIMANT_COUNTRY_NAME,
     CLAIMANT_SSN,
     CLAIMANT_AGE,
     BIRTH_DT,
     DEATH_DT,
     DEPENDENTS_CNT,
     MARITAL_STATUS_CD,
     GENDER_CD,
     HIRE_DT,
     LENGTH_OF_SERVICE_YY,
     LENGTH_OF_SERVICE_MM,
     LENGTH_OF_SERVICE_DD,
     STATE_ASSIGNED_CLAIM_NBR,
     JOB_CLASSIFICATION_CD,
     OCCUPATION_CD,
     DEPARTMENT_CD,
     SUPERVISOR_ID,
     UNION_ID,
     AVERAGE_WEEKLY_WAGE_AMT,
     COMP_DISABL_RATE_AMT,
     LOST_DAYS_COUNT,
     LAST_DAY_WORKED_DT,
     RESTR_RTW_DT,
     FULL_RTW_DT,
     LINE_OF_COVERAGE_CD,
     COVERAGE_CD,
     PROGRAM_TYPE_CD,
     POLICY_TYPE_CD,
     CARRIER_CD,
     POLICY_NBR,
     POLICY_EFFECTIVE_DT,
     POLICY_EXPIRATION_DT,
     CLAIM_MADE_FLAG,
     CLAIM_MADE_DT,
     CLAIM_MADE_RETROACTIVE_DT,
     CLAIM_MADE_TAIL_DT,
     SIR_DEDUCT_AMT,
     DEDUCT_APPLIED_AMT,
     MAJOR_INJURY_CD,
     EXCESS_FLAG,
     SUBROG_FLAG,
     REHABILITATION_FLAG,
     APPORTIONMENT_FLAG,
     APPORTIONMENT_PCT,
     HOSPITALIZATION_FLAG,
     SUIT_LEGAL_FLAG,
     SUIT_FILED_DT,
     OSHA_REPORTABLE_FLAG,
     SAFETY_REPORTABLE_DAYS_CNT,
     SAFETY_RESTR_DAYS_CNT,
     OSHA_ACC_ILL_CD,
     VEHICLE_IDENTIFICATION_NBR,
     VEHICLE_MAKE,
     VEHICLE_MODEL,
     VEHICLE_YEAR,
     LOSS_PAYEE,
     DRIVER_NAME,
     DRIVER_AGE,
     DRIVER_GENDER_CD,
     DRIVER_CHARGEABLE_CD,
     PRODUCT_NAME,
     LAST_ACTION_DT,
     EXAMINER,
     CONVERTED_CLAIM_FLAG,
     PAID_INCURRED_CD,
     PTD_INDEM_LOSS_AMT,
     PTD_MEDICAL_AMT,
     PTD_OTHER_EXP_AMT,
     PTD_EXP_AMT,
     PCP_INDEM_LOSS_AMT,
     PCP_MEDICAL_AMT,
     PCP_OTHER_EXP_AMT,
     PCP_EXP_AMT,
     INCURRED_INDEM_LOSS_AMT,
     INCURRED_MEDICAL_AMT,
     INCURRED_OTHER_EXP_AMT,
     INCURRED_EXP_AMT,
     CIR_INDEM_LOSS_AMT,
     CIR_MEDICAL_AMT,
     CIR_OTHER_EXP_AMT,
     CIR_EXP_AMT,
     RTD_INDEM_LOSS_AMT,
     RTD_MEDICAL_AMT,
     RTD_OTHER_EXP_AMT,
     RTD_EXP_AMT,
     EVENT_NBR,
     SUFFIX_NBR,
     CARRIER_CHANGE_STATUS_CD,
     CLAIM_CREATED_DT,
     EXAMINER_OFFICE_CD,
     BODY_SIDE_CD,
     CLAIMANT_PHONE,
     CLAIMANT_CONTACT_DT,
     CLAIM_GID,
     CLIENT_EMPLOYEE_ID,
     CLAIM_MEDICARE_BEN_STATUS_CD,
     CLAIM_HICN,
     PLAN_NBR,
     LINE_NBR,
     LOCATION_NODE,
     EXAMINER_EMAIL_ADDR
) AS
SELECT IC_DETAIL.LOAD_DT, IC_DETAIL.CLAIM_NBR, IC_DETAIL.CLAIM_VENDOR_CD, IC_DETAIL.PROCESSING_OFFICE_NBR, IC_DETAIL.PETM_SEQUENCE_NBR, IC_DETAIL.RECORD_TYPE_CD, IC_DETAIL.CMS_CLIENT_ID, IC_DETAIL.CMS_CLIENT_ACCOUNT_NBR, IC_DETAIL.CMS_CLIENT_LOCATION_CD, IC_DETAIL.LINE_TYPE_CD, IC_DETAIL.LOSS_TSTMP, '********' AS EVENT_DESC, '********' AS LOSS_DESC, IC_DETAIL.CLAIM_TYPE_CD, IC_DETAIL.CLAIM_SUBTYPE_CD, IC_DETAIL.CLAIM_STATUS_CD, IC_DETAIL.CLAIM_SUBSTATUS_CD, IC_DETAIL.REPORTED_TO_CLIENT_DT, IC_DETAIL.REPORTED_TO_CMS_DT, IC_DETAIL.CLAIM_OPENED_DT, IC_DETAIL.CLAIM_CLOSED_DT, IC_DETAIL.CLAIM_REOPENED_DT, IC_DETAIL.EMPLOYMENT_STATE_CD, IC_DETAIL.ACCIDENT_STATE_CD, IC_DETAIL.JURISDICTION_STATE_CD, IC_DETAIL.SOURCE_CD, IC_DETAIL.CAUSE_CD, IC_DETAIL.NATURE_RESULT_CD, IC_DETAIL.PART_TARGET_CD, IC_DETAIL.STORE_NBR, IC_DETAIL.LOSS_LOCATION_STREET, IC_DETAIL.LOSS_LOCATION_CITY, IC_DETAIL.LOSS_LOCATION_POSTAL_CD, IC_DETAIL.CLAIMANT_NAME_TYPE_CD, '********' AS CLAIMANT_LAST_NAME, '********' AS CLAIMANT_FIRST_NAME, IC_DETAIL.CLAIMANT_MIDDLE_INITIAL, '********' AS CLAIMANT_ADDRESS_LINE_1, '********' AS CLAIMANT_ADDRESS_LINE_2, '********' AS CLAIMANT_CITY, '********' AS CLAIMANT_STATE_CD, '********' AS CLAIMANT_POSTAL_CD, IC_DETAIL.CLAIMANT_COUNTRY_NAME, '********' AS CLAIMANT_SSN, '********' AS CLAIMANT_AGE, '********' AS BIRTH_DT, IC_DETAIL.DEATH_DT, IC_DETAIL.DEPENDENTS_CNT, IC_DETAIL.MARITAL_STATUS_CD, IC_DETAIL.GENDER_CD, IC_DETAIL.HIRE_DT, IC_DETAIL.LENGTH_OF_SERVICE_YY, IC_DETAIL.LENGTH_OF_SERVICE_MM, IC_DETAIL.LENGTH_OF_SERVICE_DD, IC_DETAIL.STATE_ASSIGNED_CLAIM_NBR, IC_DETAIL.JOB_CLASSIFICATION_CD, IC_DETAIL.OCCUPATION_CD, IC_DETAIL.DEPARTMENT_CD, IC_DETAIL.SUPERVISOR_ID, IC_DETAIL.UNION_ID, '********' AS AVERAGE_WEEKLY_WAGE_AMT, '********' AS COMP_DISABL_RATE_AMT, IC_DETAIL.LOST_DAYS_COUNT, IC_DETAIL.LAST_DAY_WORKED_DT, IC_DETAIL.RESTR_RTW_DT, IC_DETAIL.FULL_RTW_DT, IC_DETAIL.LINE_OF_COVERAGE_CD, IC_DETAIL.COVERAGE_CD, IC_DETAIL.PROGRAM_TYPE_CD, IC_DETAIL.POLICY_TYPE_CD, IC_DETAIL.CARRIER_CD, IC_DETAIL.POLICY_NBR, IC_DETAIL.POLICY_EFFECTIVE_DT, IC_DETAIL.POLICY_EXPIRATION_DT, IC_DETAIL.CLAIM_MADE_FLAG, IC_DETAIL.CLAIM_MADE_DT, IC_DETAIL.CLAIM_MADE_RETROACTIVE_DT, IC_DETAIL.CLAIM_MADE_TAIL_DT, '********' AS SIR_DEDUCT_AMT, '********' AS DEDUCT_APPLIED_AMT, IC_DETAIL.MAJOR_INJURY_CD, IC_DETAIL.EXCESS_FLAG, IC_DETAIL.SUBROG_FLAG, IC_DETAIL.REHABILITATION_FLAG, IC_DETAIL.APPORTIONMENT_FLAG, IC_DETAIL.APPORTIONMENT_PCT, IC_DETAIL.HOSPITALIZATION_FLAG, IC_DETAIL.SUIT_LEGAL_FLAG, IC_DETAIL.SUIT_FILED_DT, IC_DETAIL.OSHA_REPORTABLE_FLAG, IC_DETAIL.SAFETY_REPORTABLE_DAYS_CNT, IC_DETAIL.SAFETY_RESTR_DAYS_CNT, IC_DETAIL.OSHA_ACC_ILL_CD, IC_DETAIL.VEHICLE_IDENTIFICATION_NBR, IC_DETAIL.VEHICLE_MAKE, IC_DETAIL.VEHICLE_MODEL, IC_DETAIL.VEHICLE_YEAR, IC_DETAIL.LOSS_PAYEE, IC_DETAIL.DRIVER_NAME, IC_DETAIL.DRIVER_AGE, IC_DETAIL.DRIVER_GENDER_CD, IC_DETAIL.DRIVER_CHARGEABLE_CD, IC_DETAIL.PRODUCT_NAME, IC_DETAIL.LAST_ACTION_DT, IC_DETAIL.EXAMINER, IC_DETAIL.CONVERTED_CLAIM_FLAG, IC_DETAIL.PAID_INCURRED_CD, '********' AS PTD_INDEM_LOSS_AMT, '********' AS PTD_MEDICAL_AMT, '********' AS PTD_OTHER_EXP_AMT, '********' AS PTD_EXP_AMT, '********' AS PCP_INDEM_LOSS_AMT, '********' AS PCP_MEDICAL_AMT, '********' AS PCP_OTHER_EXP_AMT, '********' AS PCP_EXP_AMT, '********' AS INCURRED_INDEM_LOSS_AMT, '********' AS INCURRED_MEDICAL_AMT, '********' AS INCURRED_OTHER_EXP_AMT, '********' AS INCURRED_EXP_AMT, '********' AS CIR_INDEM_LOSS_AMT, '********' AS CIR_MEDICAL_AMT, '********' AS CIR_OTHER_EXP_AMT, '********' AS CIR_EXP_AMT, '********' AS RTD_INDEM_LOSS_AMT, '********' AS RTD_MEDICAL_AMT, '********' AS RTD_OTHER_EXP_AMT, '********' AS RTD_EXP_AMT, IC_DETAIL.EVENT_NBR, IC_DETAIL.SUFFIX_NBR, IC_DETAIL.CARRIER_CHANGE_STATUS_CD, IC_DETAIL.CLAIM_CREATED_DT, IC_DETAIL.EXAMINER_OFFICE_CD, IC_DETAIL.BODY_SIDE_CD, '********' AS CLAIMANT_PHONE, IC_DETAIL.CLAIMANT_CONTACT_DT, IC_DETAIL.CLAIM_GID, IC_DETAIL.CLIENT_EMPLOYEE_ID, IC_DETAIL.CLAIM_MEDICARE_BEN_STATUS_CD, IC_DETAIL.CLAIM_HICN, IC_DETAIL.PLAN_NBR, IC_DETAIL.LINE_NBR, IC_DETAIL.LOCATION_NODE, IC_DETAIL.EXAMINER_EMAIL_ADDR FROM ADMIN.IC_DETAIL;

\echo
\echo *****  Creating view:  "PS2_ACCRUED_LABOR_WK_PRE_SDVW"

CREATE or replace VIEW  PS2_ACCRUED_LABOR_WK_PRE_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     PAY_FREQ_CD,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     CURRENCY_NBR
) AS
SELECT PS2_ACCRUED_LABOR_WK_PRE.WEEK_DT, PS2_ACCRUED_LABOR_WK_PRE.LOCATION_ID, PS2_ACCRUED_LABOR_WK_PRE.EMPLOYEE_ID, PS2_ACCRUED_LABOR_WK_PRE.EARN_ID, PS2_ACCRUED_LABOR_WK_PRE.STORE_DEPT_NBR, PS2_ACCRUED_LABOR_WK_PRE.JOB_CODE, PS2_ACCRUED_LABOR_WK_PRE.FULLPT_FLAG, PS2_ACCRUED_LABOR_WK_PRE.PAY_FREQ_CD, PS2_ACCRUED_LABOR_WK_PRE.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, PS2_ACCRUED_LABOR_WK_PRE.CURRENCY_NBR FROM ADMIN.PS2_ACCRUED_LABOR_WK_PRE;

\echo
\echo *****  Creating view:  "PS2_EMPL_PROFILE_HIST_SDVW"

CREATE or replace VIEW  PS2_EMPL_PROFILE_HIST_SDVW
(
     EMPLOYEE_ID,
     BADGE_NBR,
     STORE_NBR,
     STORE_DEPT_NBR,
     JOB_CODE,
     EMPL_CATEGORY_CD,
     EMPL_TYPE_CD,
     FULLPT_FLAG,
     EMPL_STATUS_CD,
     PS2_TERM_CD,
     PTM_ETIME_LBRLV,
     PTM_ETIME_PROF,
     PS2_FLAG,
     EMPL_FIRST_NAME,
     EMPL_LAST_NAME,
     STATE_CD,
     REGION_ID,
     COUNTRY_CD,
     TIME_ZONE_ID,
     EMPL_HIRE_DT,
     EMPL_TERM_DT,
     EMPL_BIRTH_DT,
     JOB_CODE_CHG_DT,
     EMPL_STATUS_EFFDT,
     HOURLY_RATE_LOC_AMT,
     ANNUAL_RATE_LOC_AMT,
     PTM_RATE3_AMT,
     PS_TAX_COMPANY_CD
) AS
SELECT PS2_EMPL_PROFILE_HIST.EMPLOYEE_ID, PS2_EMPL_PROFILE_HIST.BADGE_NBR, PS2_EMPL_PROFILE_HIST.STORE_NBR, PS2_EMPL_PROFILE_HIST.STORE_DEPT_NBR, PS2_EMPL_PROFILE_HIST.JOB_CODE, PS2_EMPL_PROFILE_HIST.EMPL_CATEGORY_CD, PS2_EMPL_PROFILE_HIST.EMPL_TYPE_CD, PS2_EMPL_PROFILE_HIST.FULLPT_FLAG, PS2_EMPL_PROFILE_HIST.EMPL_STATUS_CD, PS2_EMPL_PROFILE_HIST.PS2_TERM_CD, PS2_EMPL_PROFILE_HIST.PTM_ETIME_LBRLV, PS2_EMPL_PROFILE_HIST.PTM_ETIME_PROF, PS2_EMPL_PROFILE_HIST.PS2_FLAG, PS2_EMPL_PROFILE_HIST.EMPL_FIRST_NAME, PS2_EMPL_PROFILE_HIST.EMPL_LAST_NAME, PS2_EMPL_PROFILE_HIST.STATE_CD, PS2_EMPL_PROFILE_HIST.REGION_ID, PS2_EMPL_PROFILE_HIST.COUNTRY_CD, PS2_EMPL_PROFILE_HIST.TIME_ZONE_ID, PS2_EMPL_PROFILE_HIST.EMPL_HIRE_DT, PS2_EMPL_PROFILE_HIST.EMPL_TERM_DT, PS2_EMPL_PROFILE_HIST.EMPL_BIRTH_DT, PS2_EMPL_PROFILE_HIST.JOB_CODE_CHG_DT, PS2_EMPL_PROFILE_HIST.EMPL_STATUS_EFFDT, '********' AS HOURLY_RATE_LOC_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS PTM_RATE3_AMT, PS2_EMPL_PROFILE_HIST.PS_TAX_COMPANY_CD FROM ADMIN.PS2_EMPL_PROFILE_HIST;

\echo
\echo *****  Creating view:  "EMPL_TERM_DAYS_WORKED_VW_SDVW"

CREATE or replace VIEW  EMPL_TERM_DAYS_WORKED_VW_SDVW
(
     EMPL_TERM_WEEK_DT,
     EMPLOYEE_ID,
     LOCATION_ID,
     EMPL_HIRE_DT,
     EMPL_BIRTH_DT,
     EMPL_TERM_DT,
     NBR_DAYS_WORKED,
     EMPL_AGE_AT_TERM_DT,
     COUNT_FLAG,
     LOAD_TSTMP
) AS
SELECT EMPL_TERM_DAYS_WORKED_VW.EMPL_TERM_WEEK_DT, EMPL_TERM_DAYS_WORKED_VW.EMPLOYEE_ID, EMPL_TERM_DAYS_WORKED_VW.LOCATION_ID, EMPL_TERM_DAYS_WORKED_VW.EMPL_HIRE_DT, '********' AS EMPL_BIRTH_DT, EMPL_TERM_DAYS_WORKED_VW.EMPL_TERM_DT, EMPL_TERM_DAYS_WORKED_VW.NBR_DAYS_WORKED, EMPL_TERM_DAYS_WORKED_VW.EMPL_AGE_AT_TERM_DT, EMPL_TERM_DAYS_WORKED_VW.COUNT_FLAG, EMPL_TERM_DAYS_WORKED_VW.LOAD_TSTMP FROM ADMIN.EMPL_TERM_DAYS_WORKED_VW;

\echo
\echo *****  Creating view:  "EMPL_RATING_HIST_SDVW"

CREATE or replace VIEW  EMPL_RATING_HIST_SDVW
(
     CAL_YR,
     EMPLOYEE_ID,
     EMPL_RATING_EFF_DT,
     EMPL_RATING,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT EMPL_RATING_HIST.CAL_YR, EMPL_RATING_HIST.EMPLOYEE_ID, EMPL_RATING_HIST.EMPL_RATING_EFF_DT, '********' AS EMPL_RATING, EMPL_RATING_HIST.UPDATE_TSTMP, EMPL_RATING_HIST.LOAD_TSTMP FROM ADMIN.EMPL_RATING_HIST;

\echo
\echo *****  Creating view:  "EMPL_EMPL_LOC_WK_SDVW"

CREATE or replace VIEW  EMPL_EMPL_LOC_WK_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     PAY_FREQ_CD,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
SELECT EMPL_EMPL_LOC_WK.WEEK_DT, EMPL_EMPL_LOC_WK.LOCATION_ID, EMPL_EMPL_LOC_WK.EMPLOYEE_ID, EMPL_EMPL_LOC_WK.EARN_ID, EMPL_EMPL_LOC_WK.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK.JOB_CODE, EMPL_EMPL_LOC_WK.FULLPT_FLAG, EMPL_EMPL_LOC_WK.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK.PAY_FREQ_CD, EMPL_EMPL_LOC_WK.CURRENCY_NBR, EMPL_EMPL_LOC_WK.LOAD_TSTMP FROM ADMIN.EMPL_EMPL_LOC_WK;

\echo
\echo *****  Creating view:  "EMPL_PAY_GRADE_HIST_SDVW"

CREATE or replace VIEW  EMPL_PAY_GRADE_HIST_SDVW
(
     EMPLOYEE_ID,
     EMPL_GRADE_EFF_DT,
     PS_GRADE_ID,
     PS_COUNTRY_GROUP_CD,
     PS_PAY_GRADE_TYPE_CD,
     PS_PAY_GRADE_AREA_CD,
     PS_PAY_GRADE_LEVEL_CD,
     PS_PAY_LEVEL_MIN_AMT,
     PS_PAY_LEVEL_MAX_AMT,
     CURRENCY_ID,
     LOAD_TSTMP
) AS
SELECT EMPL_PAY_GRADE_HIST.EMPLOYEE_ID, EMPL_PAY_GRADE_HIST.EMPL_GRADE_EFF_DT, EMPL_PAY_GRADE_HIST.PS_GRADE_ID, EMPL_PAY_GRADE_HIST.PS_COUNTRY_GROUP_CD, EMPL_PAY_GRADE_HIST.PS_PAY_GRADE_TYPE_CD, EMPL_PAY_GRADE_HIST.PS_PAY_GRADE_AREA_CD, EMPL_PAY_GRADE_HIST.PS_PAY_GRADE_LEVEL_CD, '********' AS PS_PAY_LEVEL_MIN_AMT, '********' AS PS_PAY_LEVEL_MAX_AMT, EMPL_PAY_GRADE_HIST.CURRENCY_ID, EMPL_PAY_GRADE_HIST.LOAD_TSTMP FROM ADMIN.EMPL_PAY_GRADE_HIST;

\echo
\echo *****  Creating view:  "EMPL_LABOR_WK_VW_SDVW"

CREATE or replace VIEW  EMPL_LABOR_WK_VW_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     STORE_DEPT_NBR,
     EARN_ID,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
SELECT EMPL_LABOR_WK_VW.WEEK_DT, EMPL_LABOR_WK_VW.LOCATION_ID, EMPL_LABOR_WK_VW.STORE_DEPT_NBR, EMPL_LABOR_WK_VW.EARN_ID, EMPL_LABOR_WK_VW.JOB_CODE, EMPL_LABOR_WK_VW.FULLPT_FLAG, EMPL_LABOR_WK_VW.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, EMPL_LABOR_WK_VW.CURRENCY_NBR, EMPL_LABOR_WK_VW.LOAD_TSTMP FROM ADMIN.EMPL_LABOR_WK_VW;

\echo
\echo *****  Creating view:  "HONORARY_DESIGNEE_SDVW"

CREATE or replace VIEW  HONORARY_DESIGNEE_SDVW
(
     HD_ID,
     HD_TYPE_CD,
     HD_TYPE_DESC,
     HD_FIRST_NAME,
     HD_LAST_NAME,
     HD_SUFFIX,
     HD_BIRTH_MON,
     HD_BIRTH_DAY,
     HD_SPOUSE_FIRST_NAME,
     HD_SPOUSE_LAST_NAME,
     HD_ADDRESS,
     HD_CITY,
     HD_STATE,
     HD_ZIP_CD,
     HD_COUNTRY,
     HD_PHONE_NBR,
     HD_EXP_DT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT HONORARY_DESIGNEE.HD_ID, HONORARY_DESIGNEE.HD_TYPE_CD, HONORARY_DESIGNEE.HD_TYPE_DESC, HONORARY_DESIGNEE.HD_FIRST_NAME, HONORARY_DESIGNEE.HD_LAST_NAME, HONORARY_DESIGNEE.HD_SUFFIX, '********' AS HD_BIRTH_MON, '********' AS HD_BIRTH_DAY, HONORARY_DESIGNEE.HD_SPOUSE_FIRST_NAME, HONORARY_DESIGNEE.HD_SPOUSE_LAST_NAME, '********' AS HD_ADDRESS, '********' AS HD_CITY, '********' AS HD_STATE, '********' AS HD_ZIP_CD, HONORARY_DESIGNEE.HD_COUNTRY, '********' AS HD_PHONE_NBR, HONORARY_DESIGNEE.HD_EXP_DT, HONORARY_DESIGNEE.UPDATE_TSTMP, HONORARY_DESIGNEE.LOAD_TSTMP FROM ADMIN.HONORARY_DESIGNEE;

\echo
\echo *****  Creating view:  "EMPL_EMPL_LOC_WK_PSOFT_SDVW"

CREATE or replace VIEW  EMPL_EMPL_LOC_WK_PSOFT_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     PAY_FREQ_CD,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
SELECT EMPL_EMPL_LOC_WK_PSOFT.WEEK_DT, EMPL_EMPL_LOC_WK_PSOFT.LOCATION_ID, EMPL_EMPL_LOC_WK_PSOFT.EMPLOYEE_ID, EMPL_EMPL_LOC_WK_PSOFT.EARN_ID, EMPL_EMPL_LOC_WK_PSOFT.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK_PSOFT.JOB_CODE, EMPL_EMPL_LOC_WK_PSOFT.FULLPT_FLAG, EMPL_EMPL_LOC_WK_PSOFT.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK_PSOFT.PAY_FREQ_CD, EMPL_EMPL_LOC_WK_PSOFT.CURRENCY_NBR, EMPL_EMPL_LOC_WK_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_EMPL_LOC_WK_PSOFT;

\echo
\echo *****  Creating view:  "EMPL_WAGE_HIST_SDVW"

CREATE or replace VIEW  EMPL_WAGE_HIST_SDVW
(
     EMPLOYEE_ID,
     EMPL_WAGE_EFF_DT,
     PS_WAGE_TYPE_GID,
     EMPL_WAGE_END_DT,
     PS_WAGE_TYPE_DESC,
     CURRENCY_ID,
     PS_WAGE_TYPE_AMT,
     ANNUAL_RATE_INCL_FLAG,
     LOAD_TSTMP
) AS
SELECT EMPL_WAGE_HIST.EMPLOYEE_ID, EMPL_WAGE_HIST.EMPL_WAGE_EFF_DT, EMPL_WAGE_HIST.PS_WAGE_TYPE_GID, EMPL_WAGE_HIST.EMPL_WAGE_END_DT, EMPL_WAGE_HIST.PS_WAGE_TYPE_DESC, EMPL_WAGE_HIST.CURRENCY_ID, '********' AS PS_WAGE_TYPE_AMT, EMPL_WAGE_HIST.ANNUAL_RATE_INCL_FLAG, EMPL_WAGE_HIST.LOAD_TSTMP FROM ADMIN.EMPL_WAGE_HIST;

\echo
\echo *****  Creating view:  "PS2_ACCRUED_LABOR_WK_VW_SDVW"

CREATE or replace VIEW  PS2_ACCRUED_LABOR_WK_VW_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     STORE_DEPT_NBR,
     EARN_ID,
     JOB_CODE,
     FULLPT_FLAG,
     PAY_FREQ_CD,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     CURRENCY_NBR
) AS
SELECT PS2_ACCRUED_LABOR_WK_VW.WEEK_DT, PS2_ACCRUED_LABOR_WK_VW.LOCATION_ID, PS2_ACCRUED_LABOR_WK_VW.STORE_DEPT_NBR, PS2_ACCRUED_LABOR_WK_VW.EARN_ID, PS2_ACCRUED_LABOR_WK_VW.JOB_CODE, PS2_ACCRUED_LABOR_WK_VW.FULLPT_FLAG, PS2_ACCRUED_LABOR_WK_VW.PAY_FREQ_CD, PS2_ACCRUED_LABOR_WK_VW.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, PS2_ACCRUED_LABOR_WK_VW.CURRENCY_NBR FROM ADMIN.PS2_ACCRUED_LABOR_WK_VW;

\echo
\echo *****  Creating view:  "EMPL_EARNINGS_WK_SDVW"

CREATE or replace VIEW  EMPL_EARNINGS_WK_SDVW
(
     WEEK_DT,
     EMPLOYEE_ID,
     WORK_COST_CENTER_CD,
     EARN_ID,
     HOME_COST_CENTER_CD,
     PS_WORK_DEPT_CD,
     PS_WAGE_TYPE_GID,
     HOURS_WORKED,
     EARNINGS_LOC_AMT,
     CURRENCY_ID,
     LOAD_TSTMP
) AS
SELECT EMPL_EARNINGS_WK.WEEK_DT, EMPL_EARNINGS_WK.EMPLOYEE_ID, EMPL_EARNINGS_WK.WORK_COST_CENTER_CD, EMPL_EARNINGS_WK.EARN_ID, EMPL_EARNINGS_WK.HOME_COST_CENTER_CD, EMPL_EARNINGS_WK.PS_WORK_DEPT_CD, EMPL_EARNINGS_WK.PS_WAGE_TYPE_GID, EMPL_EARNINGS_WK.HOURS_WORKED, '********' AS EARNINGS_LOC_AMT, EMPL_EARNINGS_WK.CURRENCY_ID, EMPL_EARNINGS_WK.LOAD_TSTMP FROM ADMIN.EMPL_EARNINGS_WK;

\echo
\echo *****  Creating view:  "STORE_DIRECTORY_VW_SDVW"

CREATE or replace VIEW  STORE_DIRECTORY_VW_SDVW
(
     DIST_MGR_NAME,
     SITE_MANAGER_ID,
     SITE_MANAGER_NAME,
     STORE_NBR,
     STORE_NAME,
     OPEN_DT,
     SITE_ADDRESS,
     SITE_CITY,
     STATE_CD,
     POSTAL_CD,
     GEO_LATITUDE_NBR,
     GEO_LONGITUDE_NBR,
     DISTRICT_ID,
     DISTRICT_DESC,
     REGION_ID,
     REGION_DESC,
     SITE_EMAIL,
     STORE_PHONE,
     STORE_GROOM_PHONE,
     POSITION_SORT,
     PS_POSITION_DESC,
     EMPLOYEE_ID,
     EMPLOYEE,
     DEPT_SORT,
     DEPT_DESC,
     PS_PAY_GRADE_TYPE_CD,
     FULLPT_FLAG,
     EMPL_SENORITY_DT,
     EMPL_BIRTH_DT,
     YOS,
     NEW_HIRE_FLAG,
     BIRTH_MONTH,
     HIRE_MONTH,
     SCHEDULED,
     START_TIME,
     END_TIME,
     SENTIMENT_FLAG
) AS
SELECT STORE_DIRECTORY_VW.DIST_MGR_NAME, STORE_DIRECTORY_VW.SITE_MANAGER_ID, STORE_DIRECTORY_VW.SITE_MANAGER_NAME, STORE_DIRECTORY_VW.STORE_NBR, STORE_DIRECTORY_VW.STORE_NAME, STORE_DIRECTORY_VW.OPEN_DT, STORE_DIRECTORY_VW.SITE_ADDRESS, STORE_DIRECTORY_VW.SITE_CITY, STORE_DIRECTORY_VW.STATE_CD, STORE_DIRECTORY_VW.POSTAL_CD, STORE_DIRECTORY_VW.GEO_LATITUDE_NBR, STORE_DIRECTORY_VW.GEO_LONGITUDE_NBR, STORE_DIRECTORY_VW.DISTRICT_ID, STORE_DIRECTORY_VW.DISTRICT_DESC, STORE_DIRECTORY_VW.REGION_ID, STORE_DIRECTORY_VW.REGION_DESC, STORE_DIRECTORY_VW.SITE_EMAIL, STORE_DIRECTORY_VW.STORE_PHONE, STORE_DIRECTORY_VW.STORE_GROOM_PHONE, STORE_DIRECTORY_VW.POSITION_SORT, STORE_DIRECTORY_VW.PS_POSITION_DESC, STORE_DIRECTORY_VW.EMPLOYEE_ID, STORE_DIRECTORY_VW.EMPLOYEE, STORE_DIRECTORY_VW.DEPT_SORT, STORE_DIRECTORY_VW.DEPT_DESC, STORE_DIRECTORY_VW.PS_PAY_GRADE_TYPE_CD, STORE_DIRECTORY_VW.FULLPT_FLAG, STORE_DIRECTORY_VW.EMPL_SENORITY_DT, '********' AS EMPL_BIRTH_DT, STORE_DIRECTORY_VW.YOS, STORE_DIRECTORY_VW.NEW_HIRE_FLAG, STORE_DIRECTORY_VW.BIRTH_MONTH, STORE_DIRECTORY_VW.HIRE_MONTH, STORE_DIRECTORY_VW.SCHEDULED, STORE_DIRECTORY_VW.START_TIME, STORE_DIRECTORY_VW.END_TIME, STORE_DIRECTORY_VW.SENTIMENT_FLAG FROM ADMIN.STORE_DIRECTORY_VW;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_DAY_PSOFT_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_DAY_PSOFT_SDVW
(
     DAY_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_DAY_PSOFT.DAY_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPLOYEE_ID, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_DAY_PSOFT.GENDER_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_DAY_PSOFT.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_DAY_PSOFT.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_DAY_PSOFT.BADGE_NBR, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_STATUS_CD, EMPLOYEE_PROFILE_DAY_PSOFT.STATUS_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.FULLPT_FLAG, EMPLOYEE_PROFILE_DAY_PSOFT.FULLPT_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_TYPE_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_GROUP_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_HIRE_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_TERM_DT, EMPLOYEE_PROFILE_DAY_PSOFT.TERM_REASON_CD, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_ACTION_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_ACTION_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_DAY_PSOFT.LOCATION_ID, EMPLOYEE_PROFILE_DAY_PSOFT.LOCATION_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.STORE_NBR, EMPLOYEE_PROFILE_DAY_PSOFT.STORE_DEPT_NBR, EMPLOYEE_PROFILE_DAY_PSOFT.COMPANY_ID, EMPLOYEE_PROFILE_DAY_PSOFT.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_DAY_PSOFT.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_DAY_PSOFT.PS_DEPT_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_POSITION_ID, EMPLOYEE_PROFILE_DAY_PSOFT.POSITION_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_DAY_PSOFT.JOB_CODE, EMPLOYEE_PROFILE_DAY_PSOFT.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_GRADE_ID, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE_DAY_PSOFT.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_DAY_PSOFT.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_DAY_PSOFT.PS_COMP_FREQ_CD, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_DAY_PSOFT.CURRENCY_ID, EMPLOYEE_PROFILE_DAY_PSOFT.EXCH_RATE_PCT, EMPLOYEE_PROFILE_DAY_PSOFT.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_DAY_PSOFT;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_WK_GAP_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_WK_GAP_SDVW
(
     WEEK_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_WK_GAP.WEEK_DT, EMPLOYEE_PROFILE_WK_GAP.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK_GAP.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_WK_GAP.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK_GAP.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_WK_GAP.GENDER_CD, EMPLOYEE_PROFILE_WK_GAP.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_WK_GAP.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK_GAP.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK_GAP.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_WK_GAP.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_WK_GAP.BADGE_NBR, EMPLOYEE_PROFILE_WK_GAP.EMPL_STATUS_CD, EMPLOYEE_PROFILE_WK_GAP.STATUS_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.FULLPT_FLAG, EMPLOYEE_PROFILE_WK_GAP.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK_GAP.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK_GAP.TERM_REASON_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_WK_GAP.PS_ACTION_DT, EMPLOYEE_PROFILE_WK_GAP.PS_ACTION_CD, EMPLOYEE_PROFILE_WK_GAP.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK_GAP.LOCATION_ID, EMPLOYEE_PROFILE_WK_GAP.LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.STORE_NBR, EMPLOYEE_PROFILE_WK_GAP.STORE_DEPT_NBR, EMPLOYEE_PROFILE_WK_GAP.COMPANY_ID, EMPLOYEE_PROFILE_WK_GAP.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_WK_GAP.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK_GAP.PS_DEPT_CD, EMPLOYEE_PROFILE_WK_GAP.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.PS_POSITION_ID, EMPLOYEE_PROFILE_WK_GAP.POSITION_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK_GAP.JOB_CODE, EMPLOYEE_PROFILE_WK_GAP.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK_GAP.PS_GRADE_ID, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE_WK_GAP.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_WK_GAP.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_WK_GAP.PS_COMP_FREQ_CD, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK_GAP.CURRENCY_ID, EMPLOYEE_PROFILE_WK_GAP.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK_GAP.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK_GAP;

\echo
\echo *****  Creating view:  "PS2_EMPL_PROFILE_SDVW"

CREATE or replace VIEW  PS2_EMPL_PROFILE_SDVW
(
     EMPLOYEE_ID,
     BADGE_NBR,
     STORE_NBR,
     STORE_DEPT_NBR,
     JOB_CODE,
     EMPL_CATEGORY_CD,
     EMPL_TYPE_CD,
     FULLPT_FLAG,
     EMPL_STATUS_CD,
     PS2_TERM_CD,
     PTM_ETIME_LBRLV,
     PTM_ETIME_PROF,
     PS2_FLAG,
     EMPL_FIRST_NAME,
     EMPL_LAST_NAME,
     STATE_CD,
     REGION_ID,
     COUNTRY_CD,
     TIME_ZONE_ID,
     EMPL_HIRE_DT,
     EMPL_TERM_DT,
     EMPL_BIRTH_DT,
     JOB_CODE_CHG_DT,
     EMPL_STATUS_EFFDT,
     HOURLY_RATE_LOC_AMT,
     ANNUAL_RATE_LOC_AMT,
     PTM_RATE3_AMT,
     PS_TAX_COMPANY_CD
) AS
SELECT PS2_EMPL_PROFILE.EMPLOYEE_ID, PS2_EMPL_PROFILE.BADGE_NBR, PS2_EMPL_PROFILE.STORE_NBR, PS2_EMPL_PROFILE.STORE_DEPT_NBR, PS2_EMPL_PROFILE.JOB_CODE, PS2_EMPL_PROFILE.EMPL_CATEGORY_CD, PS2_EMPL_PROFILE.EMPL_TYPE_CD, PS2_EMPL_PROFILE.FULLPT_FLAG, PS2_EMPL_PROFILE.EMPL_STATUS_CD, PS2_EMPL_PROFILE.PS2_TERM_CD, PS2_EMPL_PROFILE.PTM_ETIME_LBRLV, PS2_EMPL_PROFILE.PTM_ETIME_PROF, PS2_EMPL_PROFILE.PS2_FLAG, PS2_EMPL_PROFILE.EMPL_FIRST_NAME, PS2_EMPL_PROFILE.EMPL_LAST_NAME, PS2_EMPL_PROFILE.STATE_CD, PS2_EMPL_PROFILE.REGION_ID, PS2_EMPL_PROFILE.COUNTRY_CD, PS2_EMPL_PROFILE.TIME_ZONE_ID, PS2_EMPL_PROFILE.EMPL_HIRE_DT, PS2_EMPL_PROFILE.EMPL_TERM_DT, PS2_EMPL_PROFILE.EMPL_BIRTH_DT, PS2_EMPL_PROFILE.JOB_CODE_CHG_DT, PS2_EMPL_PROFILE.EMPL_STATUS_EFFDT, '********' AS HOURLY_RATE_LOC_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS PTM_RATE3_AMT, PS2_EMPL_PROFILE.PS_TAX_COMPANY_CD FROM ADMIN.PS2_EMPL_PROFILE;

\echo
\echo *****  Creating view:  "EMPL_STD_BONUS_HIST_SDVW"

CREATE or replace VIEW  EMPL_STD_BONUS_HIST_SDVW
(
     EMPLOYEE_ID,
     EMPL_STD_BONUS_EFF_DT,
     EMPL_STD_BONUS_PCT,
     LOAD_TSTMP
) AS
SELECT EMPL_STD_BONUS_HIST.EMPLOYEE_ID, EMPL_STD_BONUS_HIST.EMPL_STD_BONUS_EFF_DT, '********' AS EMPL_STD_BONUS_PCT, EMPL_STD_BONUS_HIST.LOAD_TSTMP FROM ADMIN.EMPL_STD_BONUS_HIST;

\echo
\echo *****  Creating view:  "EMPL_EMPL_LOC_WK_PRE_SDVW"

CREATE or replace VIEW  EMPL_EMPL_LOC_WK_PRE_SDVW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     PAY_FREQ_CD,
     CURRENCY_NBR
) AS
SELECT EMPL_EMPL_LOC_WK_PRE.WEEK_DT, EMPL_EMPL_LOC_WK_PRE.LOCATION_ID, EMPL_EMPL_LOC_WK_PRE.EMPLOYEE_ID, EMPL_EMPL_LOC_WK_PRE.EARN_ID, EMPL_EMPL_LOC_WK_PRE.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK_PRE.JOB_CODE, EMPL_EMPL_LOC_WK_PRE.FULLPT_FLAG, EMPL_EMPL_LOC_WK_PRE.HOURS_WORKED, '********' AS EARNINGS_AMT, '********' AS EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK_PRE.PAY_FREQ_CD, EMPL_EMPL_LOC_WK_PRE.CURRENCY_NBR FROM ADMIN.EMPL_EMPL_LOC_WK_PRE;

\echo
\echo *****  Creating view:  "EMPL_PAY_RATE_HIST_PSOFT_SDVW"

CREATE or replace VIEW  EMPL_PAY_RATE_HIST_PSOFT_SDVW
(
     EMPLOYEE_ID,
     EMPL_PAY_RATE_EFF_DT,
     FROM_ANNUAL_RATE_LOC_AMT,
     FROM_HOURLY_RATE_LOC_AMT,
     FROM_CURRENCY_ID,
     TO_ANNUAL_RATE_LOC_AMT,
     TO_HOURLY_RATE_LOC_AMT,
     TO_CURRENCY_ID,
     PS_COMP_FREQ_CD,
     LOAD_TSTMP
) AS
SELECT EMPL_PAY_RATE_HIST_PSOFT.EMPLOYEE_ID, EMPL_PAY_RATE_HIST_PSOFT.EMPL_PAY_RATE_EFF_DT, '********' AS FROM_ANNUAL_RATE_LOC_AMT, '********' AS FROM_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_PSOFT.FROM_CURRENCY_ID, '********' AS TO_ANNUAL_RATE_LOC_AMT, '********' AS TO_HOURLY_RATE_LOC_AMT, EMPL_PAY_RATE_HIST_PSOFT.TO_CURRENCY_ID, EMPL_PAY_RATE_HIST_PSOFT.PS_COMP_FREQ_CD, EMPL_PAY_RATE_HIST_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_PAY_RATE_HIST_PSOFT;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_WK_PSOFT_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_WK_PSOFT_SDVW
(
     WEEK_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_WK_PSOFT.WEEK_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_WK_PSOFT.GENDER_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_WK_PSOFT.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK_PSOFT.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_WK_PSOFT.BADGE_NBR, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_STATUS_CD, EMPLOYEE_PROFILE_WK_PSOFT.STATUS_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.FULLPT_FLAG, EMPLOYEE_PROFILE_WK_PSOFT.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK_PSOFT.TERM_REASON_CD, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_ACTION_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_ACTION_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK_PSOFT.LOCATION_ID, EMPLOYEE_PROFILE_WK_PSOFT.LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.STORE_NBR, EMPLOYEE_PROFILE_WK_PSOFT.STORE_DEPT_NBR, EMPLOYEE_PROFILE_WK_PSOFT.COMPANY_ID, EMPLOYEE_PROFILE_WK_PSOFT.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_WK_PSOFT.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK_PSOFT.PS_DEPT_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_POSITION_ID, EMPLOYEE_PROFILE_WK_PSOFT.POSITION_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK_PSOFT.JOB_CODE, EMPLOYEE_PROFILE_WK_PSOFT.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_GRADE_ID, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE_WK_PSOFT.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_WK_PSOFT.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_WK_PSOFT.PS_COMP_FREQ_CD, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_WK_PSOFT.CURRENCY_ID, EMPLOYEE_PROFILE_WK_PSOFT.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK_PSOFT.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK_PSOFT;

\echo
\echo *****  Creating view:  "EMPL_PAYCHECK_HIST_SDVW"

CREATE or replace VIEW  EMPL_PAYCHECK_HIST_SDVW
(
     CHECK_DT,
     PROCESS_PAY_PERIOD,
     FOR_PAY_PERIOD,
     PAY_STATUS,
     PAY_START_DT,
     PAY_END_DT,
     EMPLOYEE_ID,
     WORK_COST_CENTER_CD,
     PS_WAGE_TYPE_CD,
     PS_COUNTRY_GROUP_CD,
     CHECK_NBR,
     COMPANY_ID,
     PS_TAX_COMPANY_CD,
     STATE_CD,
     EMPL_GROUP_CD,
     HOME_COST_CENTER_CD,
     HOURS_WORKED,
     WAGE_LOC_AMT,
     CURRENCY_ID,
     VOID_FLAG,
     COUNTRY_CD,
     GL_CONTROLLING_AREA,
     UNIT_OF_MEASURE,
     LOAD_TSTMP
) AS
SELECT EMPL_PAYCHECK_HIST.CHECK_DT, EMPL_PAYCHECK_HIST.PROCESS_PAY_PERIOD, EMPL_PAYCHECK_HIST.FOR_PAY_PERIOD, EMPL_PAYCHECK_HIST.PAY_STATUS, EMPL_PAYCHECK_HIST.PAY_START_DT, EMPL_PAYCHECK_HIST.PAY_END_DT, EMPL_PAYCHECK_HIST.EMPLOYEE_ID, EMPL_PAYCHECK_HIST.WORK_COST_CENTER_CD, EMPL_PAYCHECK_HIST.PS_WAGE_TYPE_CD, EMPL_PAYCHECK_HIST.PS_COUNTRY_GROUP_CD, EMPL_PAYCHECK_HIST.CHECK_NBR, EMPL_PAYCHECK_HIST.COMPANY_ID, EMPL_PAYCHECK_HIST.PS_TAX_COMPANY_CD, EMPL_PAYCHECK_HIST.STATE_CD, EMPL_PAYCHECK_HIST.EMPL_GROUP_CD, EMPL_PAYCHECK_HIST.HOME_COST_CENTER_CD, EMPL_PAYCHECK_HIST.HOURS_WORKED, '********' AS WAGE_LOC_AMT, EMPL_PAYCHECK_HIST.CURRENCY_ID, EMPL_PAYCHECK_HIST.VOID_FLAG, EMPL_PAYCHECK_HIST.COUNTRY_CD, EMPL_PAYCHECK_HIST.GL_CONTROLLING_AREA, EMPL_PAYCHECK_HIST.UNIT_OF_MEASURE, EMPL_PAYCHECK_HIST.LOAD_TSTMP FROM ADMIN.EMPL_PAYCHECK_HIST;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_PSOFT_SDVW"

CREATE or replace VIEW  EMPLOYEE_PROFILE_PSOFT_SDVW
(
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_PSOFT.EMPLOYEE_ID, EMPLOYEE_PROFILE_PSOFT.EMPL_FIRST_NAME, EMPLOYEE_PROFILE_PSOFT.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_PSOFT.EMPL_LAST_NAME, '********' AS EMPL_BIRTH_DT, EMPLOYEE_PROFILE_PSOFT.GENDER_CD, EMPLOYEE_PROFILE_PSOFT.PS_MARITAL_STATUS_CD, EMPLOYEE_PROFILE_PSOFT.ETHNIC_GROUP_ID, '********' AS EMPL_ADDR_1, '********' AS EMPL_ADDR_2, '********' AS EMPL_CITY, '********' AS EMPL_STATE, '********' AS EMPL_PROVINCE, '********' AS EMPL_ZIPCODE, EMPLOYEE_PROFILE_PSOFT.COUNTRY_CD, '********' AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_PSOFT.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE_PSOFT.EMPL_LOGIN_ID, EMPLOYEE_PROFILE_PSOFT.BADGE_NBR, EMPLOYEE_PROFILE_PSOFT.EMPL_STATUS_CD, EMPLOYEE_PROFILE_PSOFT.STATUS_CHG_DT, EMPLOYEE_PROFILE_PSOFT.FULLPT_FLAG, EMPLOYEE_PROFILE_PSOFT.FULLPT_CHG_DT, EMPLOYEE_PROFILE_PSOFT.EMPL_TYPE_CD, EMPLOYEE_PROFILE_PSOFT.PS_REG_TEMP_CD, EMPLOYEE_PROFILE_PSOFT.EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_PSOFT.EMPL_GROUP_CD, EMPLOYEE_PROFILE_PSOFT.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_PSOFT.EMPL_HIRE_DT, EMPLOYEE_PROFILE_PSOFT.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_PSOFT.EMPL_TERM_DT, EMPLOYEE_PROFILE_PSOFT.TERM_REASON_CD, EMPLOYEE_PROFILE_PSOFT.EMPL_SENORITY_DT, EMPLOYEE_PROFILE_PSOFT.PS_ACTION_DT, EMPLOYEE_PROFILE_PSOFT.PS_ACTION_CD, EMPLOYEE_PROFILE_PSOFT.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_PSOFT.LOCATION_ID, EMPLOYEE_PROFILE_PSOFT.LOCATION_CHG_DT, EMPLOYEE_PROFILE_PSOFT.STORE_NBR, EMPLOYEE_PROFILE_PSOFT.STORE_DEPT_NBR, EMPLOYEE_PROFILE_PSOFT.COMPANY_ID, EMPLOYEE_PROFILE_PSOFT.PS_PERSONNEL_AREA_ID, EMPLOYEE_PROFILE_PSOFT.PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_PSOFT.PS_DEPT_CD, EMPLOYEE_PROFILE_PSOFT.PS_DEPT_CHG_DT, EMPLOYEE_PROFILE_PSOFT.PS_POSITION_ID, EMPLOYEE_PROFILE_PSOFT.POSITION_CHG_DT, EMPLOYEE_PROFILE_PSOFT.PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_PSOFT.JOB_CODE, EMPLOYEE_PROFILE_PSOFT.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_PSOFT.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_PSOFT.PS_GRADE_ID, '********' AS EMPL_STD_BONUS_PCT, '********' AS EMPL_OVR_BONUS_PCT, '********' AS EMPL_RATING, EMPLOYEE_PROFILE_PSOFT.PAY_RATE_CHG_DT, EMPLOYEE_PROFILE_PSOFT.PS_PAYROLL_AREA_CD, EMPLOYEE_PROFILE_PSOFT.PS_TAX_COMPANY_CD, EMPLOYEE_PROFILE_PSOFT.PS_COMP_FREQ_CD, '********' AS COMP_RATE_AMT, '********' AS ANNUAL_RATE_LOC_AMT, '********' AS HOURLY_RATE_LOC_AMT, EMPLOYEE_PROFILE_PSOFT.CURRENCY_ID, EMPLOYEE_PROFILE_PSOFT.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_PSOFT;

\echo
\echo *****  Creating view:  "PET_MOMENT_REQUEST_PROCESSING_RPT_VW"

CREATE or replace VIEW  PET_MOMENT_REQUEST_PROCESSING_RPT_VW
(
     PM_REQUEST_ID,
     REQUEST_TSTMP,
     LOCATION_ID,
     STORE_NBR,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     CUST_EMAIL_ADDR,
     PET_NAME,
     PM_PROCESSING_TYPE_ID,
     PM_PROCESSING_TYPE_NAME,
     PM_PROCESSING_SUCCESS_FLAG,
     PM_PROCESSING_CREATE_TSTMP,
     PM_PROCESSING_LAST_MODIFIED_TSTMP,
     PM_TEMPLATE_NAME,
     PM_IMAGE_PATH,
     PM_ARCHIVED_FLAG,
     PM_PHOTO_CREATE_TSTMP,
     PM_REQUEST_LAST_MODIFIED_TSTMP
) AS
SELECT PMR.PM_REQUEST_ID, PMR.REQUEST_TSTMP, PMR.LOCATION_ID, PMR.STORE_NBR, PMR.CUST_FIRST_NAME, PMR.CUST_LAST_NAME, PMR.CUST_EMAIL_ADDR, PMR.PET_NAME, PMP.PM_PROCESSING_TYPE_ID, PMPT.PM_PROCESSING_TYPE_NAME, PMP.PM_PROCESSING_SUCCESS_FLAG, PMP.PM_CREATE_TSTMP AS PM_PROCESSING_CREATE_TSTMP, PMP.PM_LAST_MODIFIED_TSTMP AS PM_PROCESSING_LAST_MODIFIED_TSTMP, PMR.PM_TEMPLATE_NAME, PMR.PM_IMAGE_PATH, PMR.PM_ARCHIVED_FLAG, PMR.PM_PHOTO_CREATE_TSTMP, PMR.PM_LAST_MODIFIED_TSTMP AS PM_REQUEST_LAST_MODIFIED_TSTMP FROM ((ADMIN.PET_MOMENT_REQUEST PMR LEFT JOIN ADMIN.PET_MOMENT_PROCESSING PMP ON ((PMR.PM_REQUEST_ID = PMP.PM_REQUEST_ID))) LEFT JOIN ADMIN.PET_MOMENT_PROCESSING_TYPE PMPT ON ((PMP.PM_PROCESSING_TYPE_ID = PMPT.PM_PROCESSING_TYPE_ID)));

\echo
\echo *****  Creating view:  "EMPL_STORE_LOC_WK_VW"

CREATE or replace VIEW  EMPL_STORE_LOC_WK_VW
(
     WEEK_DT,
     LOCATION_ID,
     EMPLOYEE_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     PAY_FREQ_CD,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
SELECT AA.WEEK_DT, AA.LOCATION_ID, AA.EMPLOYEE_ID, AA.EARN_ID, AA.STORE_DEPT_NBR, AA.JOB_CODE, AA.FULLPT_FLAG, AA.HOURS_WORKED, AA.EARNINGS_AMT, AA.EARNINGS_LOC_AMT, AA.PAY_FREQ_CD, AA.CURRENCY_NBR, AA.LOAD_TSTMP FROM ((SELECT EMPL_EMPL_LOC_WK_PSOFT.WEEK_DT, EMPL_EMPL_LOC_WK_PSOFT.LOCATION_ID, EMPL_EMPL_LOC_WK_PSOFT.EMPLOYEE_ID, EMPL_EMPL_LOC_WK_PSOFT.EARN_ID, EMPL_EMPL_LOC_WK_PSOFT.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK_PSOFT.JOB_CODE, EMPL_EMPL_LOC_WK_PSOFT.FULLPT_FLAG, EMPL_EMPL_LOC_WK_PSOFT.HOURS_WORKED, EMPL_EMPL_LOC_WK_PSOFT.EARNINGS_AMT, EMPL_EMPL_LOC_WK_PSOFT.EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK_PSOFT.PAY_FREQ_CD, EMPL_EMPL_LOC_WK_PSOFT.CURRENCY_NBR, EMPL_EMPL_LOC_WK_PSOFT.LOAD_TSTMP FROM (ADMIN.EMPL_EMPL_LOC_WK_PSOFT JOIN ADMIN.SITE_PROFILE SP ON ((EMPL_EMPL_LOC_WK_PSOFT.LOCATION_ID = SP.LOCATION_ID))) WHERE (SP.LOCATION_TYPE_ID = 8)) UNION (SELECT EMPL_EMPL_LOC_WK.WEEK_DT, EMPL_EMPL_LOC_WK.LOCATION_ID, EMPL_EMPL_LOC_WK.EMPLOYEE_ID, EMPL_EMPL_LOC_WK.EARN_ID, EMPL_EMPL_LOC_WK.STORE_DEPT_NBR, EMPL_EMPL_LOC_WK.JOB_CODE, EMPL_EMPL_LOC_WK.FULLPT_FLAG, EMPL_EMPL_LOC_WK.HOURS_WORKED, EMPL_EMPL_LOC_WK.EARNINGS_AMT, EMPL_EMPL_LOC_WK.EARNINGS_LOC_AMT, EMPL_EMPL_LOC_WK.PAY_FREQ_CD, EMPL_EMPL_LOC_WK.CURRENCY_NBR, EMPL_EMPL_LOC_WK.LOAD_TSTMP FROM (ADMIN.EMPL_EMPL_LOC_WK JOIN ADMIN.SITE_PROFILE SP ON ((EMPL_EMPL_LOC_WK.LOCATION_ID = SP.LOCATION_ID))) WHERE (SP.LOCATION_TYPE_ID = 8))) AA;

\echo
\echo *****  Creating view:  "OMS_ORDER_LN_SALES_CRCY_VW"

CREATE or replace VIEW  OMS_ORDER_LN_SALES_CRCY_VW
(
     CREATED_TSTMP,
     OMS_ORDER_DT,
     OMS_ORDER_ID,
     OMS_ORDER_NBR,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_CREATION_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     PRODUCT_ID,
     SCHED_DELIVERY_FLG,
     ADD_ON_FLAG,
     CANCELLED_FLG,
     OMS_DO_TYPE_ID,
     SHIP_POSTAL_CD,
     SHIP_COUNTRY_CD,
     SHIP_STATE,
     BILL_POSTAL_CD,
     BILL_COUNTRY_CD,
     OMS_ORDER_STATUS_ID,
     OMS_ORDER_LN_STATUS_ID,
     FULF_LOCATION_ID,
     FULF_LOCATION_NBR,
     FULF_STORE_NAME,
     FULF_LOCATION_TYPE,
     FULF_LOCATION_TYPE_DESC,
     FULF_LOC_GROUP_ID,
     FULF_LOC_GROUP_DESC,
     SHIPPED_DT,
     AGING_DAYS,
     ORIG_ORDER_QTY,
     ALLOCATED_QTY,
     CANCELLED_QTY,
     UNIT_MONETARY_VALUE_AMT,
     ORIG_SHIP_CHARGE_AMT,
     SHIP_CHARGE_AMT,
     HEADER_DISC_AMT,
     LN_DISC_AMT,
     UNIT_TAX_AMT,
     NET_SALES_QTY,
     NET_SALES_AMT,
     SALES_QTY,
     SALES_AMT,
     NET_SALES_TAX_AMT,
     DISCOUNT_AMT,
     RETURN_QTY,
     RETURN_AMT,
     NET_MARGIN_AMT,
     PURCH_COST_AMT,
     SALES_COST,
     EXCH_RATE_PCT,
     NET_ORDER_SALES_DISC_AMT,
     NET_ORDER_MARGIN_DISC_AMT,
     NET_SALES_SHIP_AMT,
     MARGIN_PRE_AMT,
     MA_VF_AMT,
     MA_VF_PRODUCT_AMT,
     MA_SALES_VF_AMT,
     EXCHANGE_RATE_PCNT,
     PICK_DECL_QTY,
     ORDER_AGE,
     RX_TYPE,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     CREATION_DEVICE_TYPE,
     CREATION_DEVICE_WIDTH
) AS
SELECT OMS_ORDER_LN_SALES_VW.CREATED_TSTMP, OMS_ORDER_LN_SALES_VW.OMS_ORDER_DT, OMS_ORDER_LN_SALES_VW.OMS_ORDER_ID, OMS_ORDER_LN_SALES_VW.OMS_ORDER_NBR, OMS_ORDER_LN_SALES_VW.ORDER_NBR, OMS_ORDER_LN_SALES_VW.ORDER_CHANNEL, OMS_ORDER_LN_SALES_VW.ORDER_CREATION_CHANNEL, OMS_ORDER_LN_SALES_VW.ORDER_FULFILLMENT_CHANNEL, OMS_ORDER_LN_SALES_VW.PRODUCT_ID, OMS_ORDER_LN_SALES_VW.SCHED_DELIVERY_FLG, OMS_ORDER_LN_SALES_VW.ADD_ON_FLAG, OMS_ORDER_LN_SALES_VW.CANCELLED_FLG, OMS_ORDER_LN_SALES_VW.OMS_DO_TYPE_ID, OMS_ORDER_LN_SALES_VW.SHIP_POSTAL_CD, OMS_ORDER_LN_SALES_VW.SHIP_COUNTRY_CD, OMS_ORDER_LN_SALES_VW.SHIP_STATE, OMS_ORDER_LN_SALES_VW.BILL_POSTAL_CD, OMS_ORDER_LN_SALES_VW.BILL_COUNTRY_CD, OMS_ORDER_LN_SALES_VW.OMS_ORDER_STATUS_ID, OMS_ORDER_LN_SALES_VW.OMS_ORDER_LN_STATUS_ID, OMS_ORDER_LN_SALES_VW.FULF_LOCATION_ID, OMS_ORDER_LN_SALES_VW.FULF_LOCATION_NBR, OMS_ORDER_LN_SALES_VW.FULF_STORE_NAME, OMS_ORDER_LN_SALES_VW.FULF_LOCATION_TYPE, OMS_ORDER_LN_SALES_VW.FULF_LOCATION_TYPE_DESC, OMS_ORDER_LN_SALES_VW.FULF_LOC_GROUP_ID, OMS_ORDER_LN_SALES_VW.FULF_LOC_GROUP_DESC, OMS_ORDER_LN_SALES_VW.SHIPPED_DT, OMS_ORDER_LN_SALES_VW.AGING_DAYS, OMS_ORDER_LN_SALES_VW.ORIG_ORDER_QTY, OMS_ORDER_LN_SALES_VW.ALLOCATED_QTY, OMS_ORDER_LN_SALES_VW.CANCELLED_QTY, OMS_ORDER_LN_SALES_VW.UNIT_MONETARY_VALUE_AMT, OMS_ORDER_LN_SALES_VW.ORIG_SHIP_CHARGE_AMT, OMS_ORDER_LN_SALES_VW.SHIP_CHARGE_AMT, OMS_ORDER_LN_SALES_VW.HEADER_DISC_AMT, OMS_ORDER_LN_SALES_VW.LN_DISC_AMT, OMS_ORDER_LN_SALES_VW.UNIT_TAX_AMT, OMS_ORDER_LN_SALES_VW.NET_SALES_QTY, OMS_ORDER_LN_SALES_VW.NET_SALES_AMT, OMS_ORDER_LN_SALES_VW.SALES_QTY, OMS_ORDER_LN_SALES_VW.SALES_AMT, OMS_ORDER_LN_SALES_VW.NET_SALES_TAX_AMT, OMS_ORDER_LN_SALES_VW.DISCOUNT_AMT, OMS_ORDER_LN_SALES_VW.RETURN_QTY, OMS_ORDER_LN_SALES_VW.RETURN_AMT, OMS_ORDER_LN_SALES_VW.NET_MARGIN_AMT, OMS_ORDER_LN_SALES_VW.PURCH_COST_AMT, OMS_ORDER_LN_SALES_VW.SALES_COST, CASE WHEN (OMS_ORDER_LN_SALES_VW.EXCH_RATE_PCT ISNULL) THEN NULL::"NUMERIC" WHEN (CURRENCY_TYPE_LKUP.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE OMS_ORDER_LN_SALES_VW.EXCH_RATE_PCT END AS EXCH_RATE_PCT, OMS_ORDER_LN_SALES_VW.NET_ORDER_SALES_DISC_AMT, OMS_ORDER_LN_SALES_VW.NET_ORDER_MARGIN_DISC_AMT, OMS_ORDER_LN_SALES_VW.NET_SALES_SHIP_AMT, OMS_ORDER_LN_SALES_VW.MARGIN_PRE_AMT, OMS_ORDER_LN_SALES_VW.MA_VF_AMT, OMS_ORDER_LN_SALES_VW.MA_VF_PRODUCT_AMT, OMS_ORDER_LN_SALES_VW.MA_SALES_VF_AMT, CASE WHEN (CURRENCY_TYPE_LKUP.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE OMS_ORDER_LN_SALES_VW.EXCHANGE_RATE_PCNT END AS EXCHANGE_RATE_PCNT, OMS_ORDER_LN_SALES_VW.PICK_DECL_QTY, OMS_ORDER_LN_SALES_VW.ORDER_AGE, OMS_ORDER_LN_SALES_VW.RX_TYPE, CURRENCY_TYPE_LKUP.CURRENCY_TYPE_ID, CURRENCY_TYPE_LKUP.CURRENCY_TYPE_DESC, OMS_ORDER_LN_SALES_VW.CREATION_DEVICE_TYPE, OMS_ORDER_LN_SALES_VW.CREATION_DEVICE_WIDTH FROM (ADMIN.OMS_ORDER_LN_SALES_VW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP);

\echo
\echo *****  Creating view:  "PODS_CUSTOMERS_RPT_VW_20190225"

CREATE or replace VIEW  PODS_CUSTOMERS_RPT_VW_20190225
(
     PODS_CUSTOMER_ID,
     CUSTOMER_EID,
     CUSTOMER_FIRST_NM,
     PRIMARY_ADDR_COUNTRY_CD,
     EMAIL_VERIFY_FLAG,
     NO_PET_FLAG,
     PROFILE_COMPLETE_FLAG,
     ONLINE_PROFILE_FLAG,
     LOYALTY_FLAG,
     LOYALTY_NBR,
     LOYALTY_STATUS_ID,
     DOG_CNT,
     CAT_CNT,
     REP_CNT,
     SA_CNT,
     BIRD_CNT,
     FISH_CNT,
     OTHER_PET_CNT,
     CUSTOMER_SIGNUP_LOCATION_ID,
     CUSTOMER_SIGNUP_STORE_NBR,
     CUSTOMER_MAIL_OPT_OUT_FLG,
     CUSTOMER_EMAIL_OPT_OUT_FLAG,
     CUSTOMER_TEXT_OPT_OUT_FLAG,
     CUSTOMER_PUSH_OPT_OUT_FLAG,
     CUSTOMER_CREATE_SRC_ID,
     CUSTOMER_CREATE_TSTMP
) AS
WITH SIGNUPLOCATION AS (SELECT SITE_PROFILE_RPT.LOCATION_ID, SITE_PROFILE_RPT.STORE_NBR FROM ADMIN.SITE_PROFILE_RPT), PET AS (SELECT PP.PODS_CUSTOMER_ID, SUM(CASE WHEN (PET.PODS_PET_SPECIES_ID = 1) THEN 1 ELSE 0 END) AS DOG_CNT, SUM(CASE WHEN (PET.PODS_PET_SPECIES_ID = 2) THEN 1 ELSE 0 END) AS CAT_CNT, SUM(CASE WHEN (PET.PODS_PET_SPECIES_ID = 5) THEN 1 ELSE 0 END) AS REP_CNT, SUM(CASE WHEN (PET.PODS_PET_SPECIES_ID = 6) THEN 1 ELSE 0 END) AS SA_CNT, SUM(CASE WHEN (PET.PODS_PET_SPECIES_ID = 3) THEN 1 ELSE 0 END) AS BIRD_CNT, SUM(CASE WHEN (PET.PODS_PET_SPECIES_ID = 4) THEN 1 ELSE 0 END) AS FISH_CNT, SUM(CASE WHEN (PET.PODS_PET_SPECIES_ID = 7) THEN 1 ELSE 0 END) AS OTHER_PET_CNT FROM CIDB_PRD.ADMIN.PODS_CUSTOMER_PET PP, CIDB_PRD.ADMIN.PODS_PET PET WHERE ((PET.PODS_PET_ID = PP.PODS_PET_ID) AND (INT4(PP.ACTIVE_FLG) = 1)) GROUP BY PP.PODS_CUSTOMER_ID), EMAIL AS (SELECT ECM.PODS_PARTY_ID, (MAX(EMAILADDRESS.EMAIL_VERIFY_FLG))::NUMERIC(1,0) AS EMAIL_VERIFY_FLAG FROM (CIDB_PRD.ADMIN.PODS_CUSTOMER_CONTACT_METHOD ECM LEFT JOIN CIDB_PRD.ADMIN.PODS_EMAIL_ADDRESS EMAILADDRESS ON ((((EMAILADDRESS.PODS_EMAIL_ADDR_ID = ECM.PODS_EMAIL_ADDR_ID) AND (ECM.PODS_EMAIL_ADDR_ID NOTNULL)) AND (INT4(ECM.ACTIVE_FLG) = 1)))) GROUP BY ECM.PODS_PARTY_ID) SELECT PERSON.PODS_CUSTOMER_ID, MAX(SOURCEIDENTIFIER.PODS_SRC_ID) AS CUSTOMER_EID, MAX(PERSON.FIRST_NM) AS CUSTOMER_FIRST_NM, CASE WHEN (MAX(ADDRESS.COUNTRY_CD) NOTNULL) THEN "NVARCHAR"(MAX(ADDRESS.COUNTRY_CD)) WHEN ('N/A' NOTNULL) THEN 'N/A'::"NVARCHAR" ELSE "NVARCHAR"(NULL::"VARCHAR") END AS PRIMARY_ADDR_COUNTRY_CD, CASE WHEN ((MAX(E.EMAIL_VERIFY_FLAG))::NUMERIC(1,0) NOTNULL) THEN (MAX(E.EMAIL_VERIFY_FLAG))::NUMERIC(1,0) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS EMAIL_VERIFY_FLAG, CASE WHEN ((MAX(PERSON.NO_PET_FLG))::NUMERIC(1,0) NOTNULL) THEN (MAX(PERSON.NO_PET_FLG))::NUMERIC(1,0) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS NO_PET_FLAG, CASE WHEN ((MAX(LOYALTY.PROFILE_COMPLETE_FLG))::NUMERIC(1,0) NOTNULL) THEN (MAX(LOYALTY.PROFILE_COMPLETE_FLG))::NUMERIC(1,0) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS PROFILE_COMPLETE_FLAG, CASE WHEN ((MAX(LOYALTY.ONLINE_PROFILE_FLG))::NUMERIC(1,0) NOTNULL) THEN (MAX(LOYALTY.ONLINE_PROFILE_FLG))::NUMERIC(1,0) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS ONLINE_PROFILE_FLAG, MAX(CASE WHEN (LOYALTY.LOYALTY_NBR NOTNULL) THEN 1 ELSE 0 END) AS LOYALTY_FLAG, MAX(LOYALTY.LOYALTY_NBR) AS LOYALTY_NBR, MAX(LOYALTY.PODS_LOYALTY_STATUS_ID) AS LOYALTY_STATUS_ID, CASE WHEN (MAX(P.DOG_CNT) NOTNULL) THEN MAX(P.DOG_CNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS DOG_CNT, CASE WHEN (MAX(P.CAT_CNT) NOTNULL) THEN MAX(P.CAT_CNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS CAT_CNT, CASE WHEN (MAX(P.REP_CNT) NOTNULL) THEN MAX(P.REP_CNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS REP_CNT, CASE WHEN (MAX(P.SA_CNT) NOTNULL) THEN MAX(P.SA_CNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS SA_CNT, CASE WHEN (MAX(P.BIRD_CNT) NOTNULL) THEN MAX(P.BIRD_CNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS BIRD_CNT, CASE WHEN (MAX(P.FISH_CNT) NOTNULL) THEN MAX(P.FISH_CNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS FISH_CNT, CASE WHEN (MAX(P.OTHER_PET_CNT) NOTNULL) THEN MAX(P.OTHER_PET_CNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END AS OTHER_PET_CNT, MAX(SL.LOCATION_ID) AS CUSTOMER_SIGNUP_LOCATION_ID, MAX(SL.STORE_NBR) AS CUSTOMER_SIGNUP_STORE_NBR, MAX(PERSON.MAIL_OPT_OUT_FLG) AS CUSTOMER_MAIL_OPT_OUT_FLG, MAX(PERSON.EMAIL_OPT_OUT_FLG) AS CUSTOMER_EMAIL_OPT_OUT_FLAG, MAX(PERSON.TEXT_OPT_OUT_FLG) AS CUSTOMER_TEXT_OPT_OUT_FLAG, MAX(PERSON.PUSH_OPT_OUT_FLG) AS CUSTOMER_PUSH_OPT_OUT_FLAG, MAX(PERSON.PODS_CREATE_SRC_ID) AS CUSTOMER_CREATE_SRC_ID, MAX(PERSON.PODS_CREATE_TSTMP) AS CUSTOMER_CREATE_TSTMP FROM ((((((((CIDB_PRD.ADMIN.PODS_CUSTOMER PERSON JOIN CIDB_PRD.ADMIN.PODS_PARTY PARTY ON ((PERSON.PODS_CUSTOMER_ID = PARTY.PODS_CUSTOMER_ID))) LEFT JOIN CIDB_PRD.ADMIN.PODS_CUSTOMER_CONTACT_METHOD CONTACTMETHOD ON (((((CONTACTMETHOD.PODS_PARTY_ID = PARTY.PODS_PARTY_ID) AND (INT4(CONTACTMETHOD.PRIMARY_FLG) = 1)) AND (CONTACTMETHOD.PODS_ADDR_ID NOTNULL)) AND (INT4(CONTACTMETHOD.ACTIVE_FLG) = 1)))) LEFT JOIN EMAIL E ON ((E.PODS_PARTY_ID = PARTY.PODS_PARTY_ID))) LEFT JOIN CIDB_PRD.ADMIN.PODS_ADDRESS ADDRESS ON ((ADDRESS.PODS_ADDR_ID = CONTACTMETHOD.PODS_ADDR_ID))) LEFT JOIN CIDB_PRD.ADMIN.PODS_CUSTOMER_LOYALTY LOYALTY ON (((LOYALTY.PODS_CUSTOMER_ID = PERSON.PODS_CUSTOMER_ID) AND (LOYALTY.PODS_LOYALTY_PROGRAM_ID = 2)))) LEFT JOIN CIDB_PRD.ADMIN.PODS_SRC_IDENTIFIER SOURCEIDENTIFIER ON (((SOURCEIDENTIFIER.PODS_CUSTOMER_ID = PERSON.PODS_CUSTOMER_ID) AND ("NVARCHAR"(SOURCEIDENTIFIER.PODS_SRC_NM) = 'MDM'::"NVARCHAR")))) LEFT JOIN PET P ON ((P.PODS_CUSTOMER_ID = PERSON.PODS_CUSTOMER_ID))) LEFT JOIN SIGNUPLOCATION SL ON ((SL.STORE_NBR = LOYALTY.PODS_CREATE_SRC_ID))) GROUP BY PERSON.PODS_CUSTOMER_ID;

\echo
\echo *****  Creating view:  "STORE_DAY_SCHEDULE_VW"

CREATE or replace VIEW  STORE_DAY_SCHEDULE_VW
(
     DAY_DATE,
     LOCATION_ID,
     STORENBR,
     EMPLOYEE_ID,
     EMPLOYEE_NAME,
     EMPLOYEE_ID0,
     JOB_CODE,
     JOB_CODE_DESC,
     JOB_CODE_RANK,
     CORE_HRS,
     MIN_START_TM,
     MAX_END_TM,
     BIRTH_DT,
     STORE_DEPT_NBR,
     STORE_DEPT_DESC
) AS
((SELECT A11.DAY_DT AS DAY_DATE, A12.LOCATION_ID, A14.STORE_NBR AS STORENBR, INT8(A14.EMPLOYEE_ID) AS EMPLOYEE_ID, (MAX(BTRIM(((BTRIM(CASE WHEN (A15.EMPL_FIRST_NAME NOTNULL) THEN A15.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (A15.EMPL_LAST_NAME NOTNULL) THEN A15.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END)))))::VARCHAR(101) AS EMPLOYEE_NAME, (MAX(CASE WHEN (LENGTH("VARCHAR"(A15.EMPLOYEE_ID)) < 6) THEN LPAD("VARCHAR"(A15.EMPLOYEE_ID), 6, '0'::"VARCHAR") ELSE "VARCHAR"(A15.EMPLOYEE_ID) END))::VARCHAR(22) AS EMPLOYEE_ID0, A14.JOB_CODE, (MAX(RTRIM(A16.JOB_CODE_DESC)))::VARCHAR(40) AS JOB_CODE_DESC, CASE WHEN (A14.JOB_CODE = 2009) THEN 0 WHEN (A14.JOB_CODE = 3001) THEN 1 WHEN (A14.JOB_CODE = 3002) THEN 2 WHEN (A14.JOB_CODE = 3005) THEN 4 WHEN (A14.JOB_CODE = 3006) THEN 5 WHEN (A14.JOB_CODE = 3010) THEN 7 WHEN (A14.JOB_CODE = 3021) THEN 8 WHEN (A14.JOB_CODE = 3011) THEN 10 WHEN (A14.JOB_CODE = 1647) THEN 11 WHEN (A14.JOB_CODE = 1620) THEN 14 WHEN (A14.JOB_CODE = 1623) THEN 15 WHEN (A14.JOB_CODE = 1617) THEN 17 WHEN (A14.JOB_CODE = 1615) THEN 18 WHEN (A14.JOB_CODE = 1606) THEN 20 WHEN (A14.JOB_CODE = 2641) THEN 21 WHEN (A14.JOB_CODE = 1642) THEN 23 WHEN (A14.JOB_CODE = 1645) THEN 24 WHEN (A14.JOB_CODE = 1649) THEN 26 WHEN (A14.JOB_CODE = 2028) THEN 27 WHEN (A14.JOB_CODE = 2018) THEN 29 WHEN (A14.JOB_CODE = 3007) THEN 30 WHEN (A14.JOB_CODE = 3009) THEN 32 WHEN (A14.JOB_CODE = 2640) THEN 33 WHEN (A14.JOB_CODE = 2620) THEN 35 WHEN (A14.JOB_CODE = 1651) THEN 38 WHEN (A14.JOB_CODE = 1627) THEN 42 WHEN (A14.JOB_CODE = 2650) THEN 46 WHEN (A14.JOB_CODE = 2711) THEN 54 WHEN (A14.JOB_CODE = 1619) THEN 58 WHEN (A14.JOB_CODE = 2022) THEN 62 WHEN (A14.JOB_CODE = 2048) THEN 74 WHEN (A14.JOB_CODE = 1658) THEN 82 WHEN (A14.JOB_CODE = 2710) THEN 86 WHEN (A14.JOB_CODE = 2040) THEN 90 WHEN (A14.JOB_CODE = 2016) THEN 94 WHEN (A14.JOB_CODE = 2660) THEN 95 WHEN (A14.JOB_CODE = 2651) THEN 97 WHEN (A14.JOB_CODE = 1680) THEN 98 ELSE A14.JOB_CODE END AS JOB_CODE_RANK, (SUM(A11.CORE_HRS))::NUMERIC(38,6) AS CORE_HRS, MIN(A11.STRT_DTM) AS MIN_START_TM, MAX(A11.END_DTM) AS MAX_END_TM, MAX(A14.EMPL_BIRTH_DT) AS BIRTH_DT, (MAX(A14.STORE_DEPT_NBR))::VARCHAR(8) AS STORE_DEPT_NBR, (MAX(RTRIM(A18.STORE_DEPT_DESC)))::VARCHAR(40) AS STORE_DEPT_DESC FROM ((((((ADMIN.WFA_TSCHD A11 JOIN ADMIN.SITE_PROFILE_RPT A12 ON ((A11.LOCATION_ID = A12.LOCATION_ID))) JOIN ADMIN.EMPLOYEE_PROFILE_RPT A14 ON (((A11.EMPLOYEE_ID = "NUMERIC"(A14.EMPLOYEE_ID)) AND (A12.LOCATION_ID = A14.LOCATION_ID)))) JOIN ADMIN.EMPLOYEE_NAME_VIEW A15 ON (((A14.EMPLOYEE_ID = A15.EMPLOYEE_ID) AND (A14.EMPLOYEE_ID = A15.EMPLOYEE_ID)))) JOIN ADMIN.JOB_CODE A16 ON ((A14.JOB_CODE = A16.JOB_CODE))) JOIN ADMIN.SITE_PROFILE_RPT A17 ON (((A14.STORE_NBR = A17.STORE_NBR) AND (A12.LOCATION_ID = A17.LOCATION_ID)))) JOIN ADMIN.STORE_DEPT A18 ON ((A14.STORE_DEPT_NBR = A18.STORE_DEPT_NBR))) WHERE (((A12.LOCATION_TYPE_ID IN (8)) AND (A12.SITE_SALES_FLAG IN ('1'::BPCHAR))) AND (A11.DAY_DT = "TIMESTAMP"(DATE("TIMESTAMP"(TO_DATE("VARCHAR"(DATE('now(0)'::"VARCHAR")), 'yyyy-mm-dd'::"VARCHAR")))))) GROUP BY A11.DAY_DT, A12.LOCATION_ID, A14.STORE_NBR, A14.EMPLOYEE_ID, A14.JOB_CODE, CASE WHEN (A14.JOB_CODE = 2009) THEN 0 WHEN (A14.JOB_CODE = 3001) THEN 1 WHEN (A14.JOB_CODE = 3002) THEN 2 WHEN (A14.JOB_CODE = 3005) THEN 4 WHEN (A14.JOB_CODE = 3006) THEN 5 WHEN (A14.JOB_CODE = 3010) THEN 7 WHEN (A14.JOB_CODE = 3021) THEN 8 WHEN (A14.JOB_CODE = 3011) THEN 10 WHEN (A14.JOB_CODE = 1647) THEN 11 WHEN (A14.JOB_CODE = 1620) THEN 14 WHEN (A14.JOB_CODE = 1623) THEN 15 WHEN (A14.JOB_CODE = 1617) THEN 17 WHEN (A14.JOB_CODE = 1615) THEN 18 WHEN (A14.JOB_CODE = 1606) THEN 20 WHEN (A14.JOB_CODE = 2641) THEN 21 WHEN (A14.JOB_CODE = 1642) THEN 23 WHEN (A14.JOB_CODE = 1645) THEN 24 WHEN (A14.JOB_CODE = 1649) THEN 26 WHEN (A14.JOB_CODE = 2028) THEN 27 WHEN (A14.JOB_CODE = 2018) THEN 29 WHEN (A14.JOB_CODE = 3007) THEN 30 WHEN (A14.JOB_CODE = 3009) THEN 32 WHEN (A14.JOB_CODE = 2640) THEN 33 WHEN (A14.JOB_CODE = 2620) THEN 35 WHEN (A14.JOB_CODE = 1651) THEN 38 WHEN (A14.JOB_CODE = 1627) THEN 42 WHEN (A14.JOB_CODE = 2650) THEN 46 WHEN (A14.JOB_CODE = 2711) THEN 54 WHEN (A14.JOB_CODE = 1619) THEN 58 WHEN (A14.JOB_CODE = 2022) THEN 62 WHEN (A14.JOB_CODE = 2048) THEN 74 WHEN (A14.JOB_CODE = 1658) THEN 82 WHEN (A14.JOB_CODE = 2710) THEN 86 WHEN (A14.JOB_CODE = 2040) THEN 90 WHEN (A14.JOB_CODE = 2016) THEN 94 WHEN (A14.JOB_CODE = 2660) THEN 95 WHEN (A14.JOB_CODE = 2651) THEN 97 WHEN (A14.JOB_CODE = 1680) THEN 98 ELSE A14.JOB_CODE END) UNION (SELECT "TIMESTAMP"(DATE("TIMESTAMP"(DATE('now(0)'::"VARCHAR")))) AS DAY_DATE, A14.LOCATION_ID, A14.STORE_NBR AS STORENBR, A11.EMPLOYEE_ID, (MAX(BTRIM(((BTRIM(CASE WHEN (A11.EMPL_FIRST_NAME NOTNULL) THEN A11.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (A11.EMPL_LAST_NAME NOTNULL) THEN A11.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END)))))::VARCHAR(101) AS EMPLOYEE_NAME, (MAX(CASE WHEN (LENGTH("VARCHAR"(A11.EMPLOYEE_ID)) < 6) THEN LPAD("VARCHAR"(A11.EMPLOYEE_ID), 6, '0'::"VARCHAR") ELSE "VARCHAR"(A11.EMPLOYEE_ID) END))::VARCHAR(22) AS EMPLOYEE_ID0, A12.JOB_CODE, (MAX(RTRIM(A13.JOB_CODE_DESC)))::VARCHAR(40) AS JOB_CODE_DESC, 99 AS JOB_CODE_RANK, ('0'::NUMERIC)::NUMERIC(38,6) AS CORE_HRS, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '09:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MIN_START_TM, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '21:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MAX_END_TM, MAX(A12.EMPL_BIRTH_DT) AS BIRTH_DT, 2 AS STORE_DEPT_NBR, ('Core Associate'::"VARCHAR")::VARCHAR(40) AS STORE_DEPT_DESC FROM (((ADMIN.EMPLOYEE_NAME_VIEW A11 JOIN ADMIN.EMPLOYEE_PROFILE_RPT A12 ON ((A11.EMPLOYEE_ID = A12.EMPLOYEE_ID))) JOIN ADMIN.JOB_CODE A13 ON ((A12.JOB_CODE = A13.JOB_CODE))) JOIN ADMIN.SITE_PROFILE_RPT A14 ON ((INT4("SUBSTRING"(A12.PS_PERSONNEL_SUBAREA_ID, 2)) = A14.DISTRICT_ID))) WHERE (((A12.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1), ('L'::"VARCHAR")::VARCHAR(1))) AND (INT4((A14.SITE_SALES_FLAG)::"VARCHAR") = 1)) AND (A12.PS_PERSONNEL_SUBAREA_ID ~~ LIKE_ESCAPE('D%'::"VARCHAR", '\'::"VARCHAR"))) GROUP BY DATE('now(0)'::"VARCHAR"), A14.LOCATION_ID, A14.STORE_NBR, A11.EMPLOYEE_ID, A12.JOB_CODE)) UNION (SELECT "TIMESTAMP"(DATE("TIMESTAMP"(DATE('now(0)'::"VARCHAR")))) AS DAY_DATE, A14.LOCATION_ID, A14.STORE_NBR AS STORENBR, A11.EMPLOYEE_ID, (MAX(BTRIM(((BTRIM(CASE WHEN (A11.EMPL_FIRST_NAME NOTNULL) THEN A11.EMPL_FIRST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END) || ' '::"VARCHAR") || BTRIM(CASE WHEN (A11.EMPL_LAST_NAME NOTNULL) THEN A11.EMPL_LAST_NAME WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END)))))::VARCHAR(101) AS EMPLOYEE_NAME, (MAX(CASE WHEN (LENGTH("VARCHAR"(A11.EMPLOYEE_ID)) < 6) THEN LPAD("VARCHAR"(A11.EMPLOYEE_ID), 6, '0'::"VARCHAR") ELSE "VARCHAR"(A11.EMPLOYEE_ID) END))::VARCHAR(22) AS EMPLOYEE_ID0, A12.JOB_CODE, (MAX(RTRIM(A13.JOB_CODE_DESC)))::VARCHAR(40) AS JOB_CODE_DESC, 99 AS JOB_CODE_RANK, ('0'::NUMERIC)::NUMERIC(38,6) AS CORE_HRS, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '09:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MIN_START_TM, MAX(TO_TIMESTAMP((TO_CHAR("TIMESTAMP"(DATE('now(0)'::"VARCHAR")), 'YYYY-MM-DD '::"VARCHAR") || '21:00'::"VARCHAR"), 'YYYY-MM-DD HH:MI'::"VARCHAR")) AS MAX_END_TM, MAX(A12.EMPL_BIRTH_DT) AS BIRTH_DT, 2 AS STORE_DEPT_NBR, ('Core Associate'::"VARCHAR")::VARCHAR(40) AS STORE_DEPT_DESC FROM (((ADMIN.EMPLOYEE_NAME_VIEW A11 JOIN ADMIN.EMPLOYEE_PROFILE_RPT A12 ON ((A11.EMPLOYEE_ID = A12.EMPLOYEE_ID))) JOIN ADMIN.JOB_CODE A13 ON (((A12.JOB_CODE = A13.JOB_CODE) AND (A12.JOB_CODE IN (3021, 3010, 3011, 3005, 3006, 3001, 3002))))) JOIN ADMIN.SITE_PROFILE_RPT A14 ON (((A12.STORE_NBR = A14.STORE_NBR) AND (A12.LOCATION_ID = A14.LOCATION_ID)))) WHERE (((A12.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1), ('L'::"VARCHAR")::VARCHAR(1))) AND (INT4((A14.SITE_SALES_FLAG)::"VARCHAR") = 1)) AND (A11.EMPLOYEE_ID <> ALL (SELECT WFA_TSCHD.EMPLOYEE_ID FROM ADMIN.WFA_TSCHD WHERE (WFA_TSCHD.DAY_DT = "TIMESTAMP"(DATE("TIMESTAMP"(TO_DATE("VARCHAR"(DATE('now(0)'::"VARCHAR")), 'yyyy-mm-dd'::"VARCHAR")))))))) GROUP BY DATE('now(0)'::"VARCHAR"), A14.LOCATION_ID, A14.STORE_NBR, A11.EMPLOYEE_ID, A12.JOB_CODE);

\echo
\echo *****  Creating view:  "STORE_DAY_SCHEDULE_VW_10312018"

CREATE or replace VIEW  STORE_DAY_SCHEDULE_VW_10312018
(
     DAY_DATE,
     LOCATION_ID,
     STORENBR,
     EMPLOYEE_ID,
     EMPLOYEE_NAME,
     EMPLOYEE_ID0,
     JOB_CODE,
     JOB_CODE_DESC,
     JOB_CODE_RANK,
     CORE_HRS,
     MIN_START_TM,
     MAX_END_TM,
     BIRTH_DT,
     STORE_DEPT_NBR,
     STORE_DEPT_DESC
) AS
SELECT STORE_DAY_SCHEDULE_VW.DAY_DATE, STORE_DAY_SCHEDULE_VW.LOCATION_ID, STORE_DAY_SCHEDULE_VW.STORENBR, STORE_DAY_SCHEDULE_VW.EMPLOYEE_ID, STORE_DAY_SCHEDULE_VW.EMPLOYEE_NAME, STORE_DAY_SCHEDULE_VW.EMPLOYEE_ID0, STORE_DAY_SCHEDULE_VW.JOB_CODE, STORE_DAY_SCHEDULE_VW.JOB_CODE_DESC, STORE_DAY_SCHEDULE_VW.JOB_CODE_RANK, STORE_DAY_SCHEDULE_VW.CORE_HRS, STORE_DAY_SCHEDULE_VW.MIN_START_TM, STORE_DAY_SCHEDULE_VW.MAX_END_TM, STORE_DAY_SCHEDULE_VW.BIRTH_DT, STORE_DAY_SCHEDULE_VW.STORE_DEPT_NBR, STORE_DAY_SCHEDULE_VW.STORE_DEPT_DESC FROM ADMIN.STORE_DAY_SCHEDULE_VW;

\echo
\echo *****  Creating view:  "SALES_TRANS_SKU_USD_VW"

CREATE or replace VIEW  SALES_TRANS_SKU_USD_VW
(
     DAY_DT,
     SALES_INSTANCE_ID_DIST_KEY,
     SALES_INSTANCE_ID,
     PRODUCT_ID,
     SALES_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     TRANS_TSTMP,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CREATION_CHANNEL,
     COMP_FLAG,
     LOYALTY_NBR,
     LOYALTY_REDEMPTION_ID,
     LUID,
     CUSTOMER_EID,
     CUSTOMER_GID,
     SALES_CUSTOMER_LINK_EXCL_TYPE_ID,
     LOCATION_ID,
     STORE_NBR,
     STORE_COUNTRY_CD,
     SKU_NBR,
     SKU_DESC,
     "LIFE_STAGE_ID",
     "LIFE_STAGE_DESC",
     "SUB_SPECIES_ID",
     "SUB_SPECIES_DESC",
     PUPPY_FLG,
     KITTEN_FLG,
     SENIOR_DOG_FLG,
     SENIOR_CAT_FLG,
     BRAND_NAME,
     PRIMARY_VENDOR_ID,
     PRIMARY_VENDOR_NM,
     SVP_ID,
     SVP_DESC,
     VP_ID,
     VP_NM,
     VP_DESC,
     DIRECTOR_ID,
     DIRECTOR_NM,
     BUYER_ID,
     BUYER_NM,
     DIVISION_ID,
     DIVISION_DESC,
     DEPARTMENT_ID,
     DEPARTMENT_DESC,
     CLASS_ID,
     CLASS_DESC,
     CATEGORY_ID,
     CATEGORY_DESC,
     SEGMENT_ID,
     SEGMENT_DESC,
     GROUP_ID,
     GROUP_DESC,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_QTR,
     FISCAL_YR,
     CAL_WK,
     CAL_MO,
     CAL_QTR,
     CAL_YR,
     SALES_AMT,
     SALES_AMT_LOC,
     RETURN_AMT,
     RETURN_AMT_LOC,
     SALES_QTY,
     RETURN_QTY,
     SALES_COST_AMT,
     SALES_COST_AMT_LOC,
     RETURN_COST_AMT,
     RETURN_COST_AMT_LOC,
     DISCOUNT_AMT,
     DISCOUNT_AMT_LOC,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_AMT_LOC,
     DISCOUNT_RETURN_QTY,
     CLEARANCE_AMT,
     CLEARANCE_AMT_LOC,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_AMT_LOC,
     CLEARANCE_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_AMT_LOC,
     POS_COUPON_QTY,
     MA_SALES_AMT,
     MA_SALES_AMT_LOC,
     MA_TRANS_COST,
     MA_TRANS_COST_LOC,
     SPECIAL_SALES_FLG,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_AMT_LOC,
     SPECIAL_SALES_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_AMT_LOC,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     SPECIAL_SRVC_AMT_LOC,
     NET_SALES_AMT,
     NET_SALES_AMT_LOC,
     NET_SALES_COST_AMT,
     NET_SALES_COST_AMT_LOC,
     NET_SALES_QTY,
     NET_MARGIN_AMT,
     NET_MARGIN_AMT_LOC,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT
) AS
WITH PRODUCT_TEMP AS (SELECT SK.PRODUCT_ID, SK.SKU_NBR, SK.SKU_DESC, PAM.LIFE_STAGE_ID, PAM.LIFE_STAGE_DESC, PAM.SUB_SPECIES_ID, PAM.SUB_SPECIES_DESC, CASE WHEN ((PAM.LIFE_STAGE_ID = 'YOUNG'::"VARCHAR") AND (PAM.SUB_SPECIES_ID = 'DOG'::"VARCHAR")) THEN '1'::INT1 ELSE '0'::INT1 END AS PUPPY_FLG, CASE WHEN ((PAM.LIFE_STAGE_ID = 'YOUNG'::"VARCHAR") AND (PAM.SUB_SPECIES_ID = 'CAT'::"VARCHAR")) THEN '1'::INT1 ELSE '0'::INT1 END AS KITTEN_FLG, CASE WHEN ((PAM.LIFE_STAGE_ID = 'SENR'::"VARCHAR") AND (PAM.SUB_SPECIES_ID = 'DOG'::"VARCHAR")) THEN '1'::INT1 ELSE '0'::INT1 END AS SENIOR_DOG_FLG, CASE WHEN ((PAM.LIFE_STAGE_ID = 'SENR'::"VARCHAR") AND (PAM.SUB_SPECIES_ID = 'CAT'::"VARCHAR")) THEN '1'::INT1 ELSE '0'::INT1 END AS SENIOR_CAT_FLG, SK.BRAND_NAME, SK.PRIMARY_VENDOR_ID, SK.PRIMARY_VENDOR_NAME, SK.SVP_ID, SK.SVP_DESC, SK.VP_ID, SK.VP_NM, SK.VP_DESC, SK.DIRECTOR_ID, SK.DIRECTOR_DESC, SK.CATEGORY_BUYER_ID, SK.CATEGORY_BUYER_NM, SK.SAP_DIVISION_ID, SK.SAP_DIVISION_DESC, SK.SAP_DEPT_ID, SK.SAP_DEPT_DESC, SK.SAP_CLASS_ID, SK.SAP_CLASS_DESC, SK.SAP_CATEGORY_ID, SK.SAP_CATEGORY_DESC, SK.SEGMENT_ID, SK.SEGMENT_DESC, SK.PURCH_GROUP_ID, SK.PURCH_GROUP_NAME FROM (ADMIN.SKU_PROFILE_RPT SK JOIN ADMIN.PRODUCT_ATTRIBUTE_MV PAM ON ((SK.PRODUCT_ID = PAM.PRODUCT_ID))) LIMIT ALL), DAYS_TEMP AS (SELECT DATE(D.DAY_DT) AS DAY_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_QTR, D.FISCAL_YR, D.CAL_WK, D.CAL_MO, D.CAL_QTR, D.CAL_YR FROM ADMIN.DAYS D LIMIT ALL) SELECT STS.DAY_DT, STS.SALES_INSTANCE_ID_DIST_KEY, STS.SALES_INSTANCE_ID, STS.PRODUCT_ID, STS.SALES_TYPE_ID, STS.VOID_TYPE_CD, STS.TXN_WAS_POST_VOIDED_FLAG, STS.ORDER_NBR, STS.ORDER_SEQ_NBR, STS.TRANS_TSTMP, STS.ORDER_CHANNEL, STS.ORDER_ASSIST_LOCATION_ID, STS.ORDER_FULFILLMENT_CHANNEL, STS.ORDER_CREATION_CHANNEL, CASE WHEN (("TIMESTAMP"(STS.DAY_DT) >= SP.COMP_EFF_DT) AND ("TIMESTAMP"(STS.DAY_DT) <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS COMP_FLAG, STS.LOYALTY_NBR, STS.LOYALTY_REDEMPTION_ID, STS.LUID, STS.CUSTOMER_EID, STS.CUSTOMER_GID, STS.SALES_CUSTOMER_LINK_EXCL_TYPE_ID, STS.LOCATION_ID, SP.STORE_NBR, SP.COUNTRY_CD AS STORE_COUNTRY_CD, SK.SKU_NBR, SK.SKU_DESC, SK.LIFE_STAGE_ID, SK.LIFE_STAGE_DESC, SK.SUB_SPECIES_ID, SK.SUB_SPECIES_DESC, SK.PUPPY_FLG, SK.KITTEN_FLG, SK.SENIOR_DOG_FLG, SK.SENIOR_CAT_FLG, SK.BRAND_NAME, SK.PRIMARY_VENDOR_ID, SK.PRIMARY_VENDOR_NAME AS PRIMARY_VENDOR_NM, SK.SVP_ID, SK.SVP_DESC, SK.VP_ID, SK.VP_NM, SK.VP_DESC, SK.DIRECTOR_ID, SK.DIRECTOR_DESC AS DIRECTOR_NM, SK.CATEGORY_BUYER_ID AS BUYER_ID, SK.CATEGORY_BUYER_NM AS BUYER_NM, SK.SAP_DIVISION_ID AS DIVISION_ID, SK.SAP_DIVISION_DESC AS DIVISION_DESC, SK.SAP_DEPT_ID AS DEPARTMENT_ID, SK.SAP_DEPT_DESC AS DEPARTMENT_DESC, SK.SAP_CLASS_ID AS CLASS_ID, SK.SAP_CLASS_DESC AS CLASS_DESC, SK.SAP_CATEGORY_ID AS CATEGORY_ID, SK.SAP_CATEGORY_DESC AS CATEGORY_DESC, SK.SEGMENT_ID, SK.SEGMENT_DESC, SK.PURCH_GROUP_ID AS GROUP_ID, SK.PURCH_GROUP_NAME AS GROUP_DESC, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_QTR, D.FISCAL_YR, D.CAL_WK, D.CAL_MO, D.CAL_QTR, D.CAL_YR, ROUND((STS.SALES_AMT * STS.EXCH_RATE_PCT), 2) AS SALES_AMT, STS.SALES_AMT AS SALES_AMT_LOC, ROUND((STS.RETURN_AMT * STS.EXCH_RATE_PCT), 2) AS RETURN_AMT, STS.RETURN_AMT AS RETURN_AMT_LOC, STS.SALES_QTY, STS.RETURN_QTY, ROUND((STS.SALES_COST * STS.EXCH_RATE_PCT), 2) AS SALES_COST_AMT, STS.SALES_COST AS SALES_COST_AMT_LOC, ROUND((STS.RETURN_COST * STS.EXCH_RATE_PCT), 2) AS RETURN_COST_AMT, STS.RETURN_COST AS RETURN_COST_AMT_LOC, ROUND((STS.DISCOUNT_AMT * STS.EXCH_RATE_PCT), 2) AS DISCOUNT_AMT, STS.DISCOUNT_AMT AS DISCOUNT_AMT_LOC, STS.DISCOUNT_QTY, ROUND((STS.DISCOUNT_RETURN_AMT * STS.EXCH_RATE_PCT), 2) AS DISCOUNT_RETURN_AMT, STS.DISCOUNT_RETURN_AMT AS DISCOUNT_RETURN_AMT_LOC, STS.DISCOUNT_RETURN_QTY, ROUND((STS.CLEARANCE_AMT * STS.EXCH_RATE_PCT), 2) AS CLEARANCE_AMT, STS.CLEARANCE_AMT AS CLEARANCE_AMT_LOC, STS.CLEARANCE_QTY, ROUND((STS.CLEARANCE_RETURN_AMT * STS.EXCH_RATE_PCT), 2) AS CLEARANCE_RETURN_AMT, STS.CLEARANCE_RETURN_AMT AS CLEARANCE_RETURN_AMT_LOC, STS.CLEARANCE_RETURN_QTY, ROUND((STS.POS_COUPON_AMT * STS.EXCH_RATE_PCT), 2) AS POS_COUPON_AMT, STS.POS_COUPON_AMT AS POS_COUPON_AMT_LOC, STS.POS_COUPON_QTY, ROUND((STS.MA_SALES_AMT * STS.EXCH_RATE_PCT), 2) AS MA_SALES_AMT, STS.MA_SALES_AMT AS MA_SALES_AMT_LOC, ROUND((STS.MA_TRANS_COST * STS.EXCH_RATE_PCT), 2) AS MA_TRANS_COST, STS.MA_TRANS_COST AS MA_TRANS_COST_LOC, STS.SPECIAL_SALES_FLAG AS SPECIAL_SALES_FLG, ROUND((STS.SPECIAL_SALES_AMT * STS.EXCH_RATE_PCT), 2) AS SPECIAL_SALES_AMT, STS.SPECIAL_SALES_AMT AS SPECIAL_SALES_AMT_LOC, STS.SPECIAL_SALES_QTY, ROUND((STS.SPECIAL_RETURN_AMT * STS.EXCH_RATE_PCT), 2) AS SPECIAL_RETURN_AMT, STS.SPECIAL_RETURN_AMT AS SPECIAL_RETURN_AMT_LOC, STS.SPECIAL_RETURN_QTY, ROUND((STS.SPECIAL_SRVC_AMT * STS.EXCH_RATE_PCT), 2) AS SPECIAL_SRVC_AMT, STS.SPECIAL_SRVC_AMT AS SPECIAL_SRVC_AMT_LOC, ROUND((STS.NET_SALES_AMT * STS.EXCH_RATE_PCT), 2) AS NET_SALES_AMT, STS.NET_SALES_AMT AS NET_SALES_AMT_LOC, ROUND((STS.NET_SALES_COST * STS.EXCH_RATE_PCT), 2) AS NET_SALES_COST_AMT, STS.NET_SALES_COST AS NET_SALES_COST_AMT_LOC, STS.NET_SALES_QTY, ROUND((STS.NET_MARGIN_AMT * STS.EXCH_RATE_PCT), 2) AS NET_MARGIN_AMT, STS.NET_MARGIN_AMT AS NET_MARGIN_AMT_LOC, 1 AS CURRENCY_TYPE_ID, 'USD' AS CURRENCY_TYPE_DESC, STS.EXCH_RATE_PCT FROM (((ADMIN.SALES_TRANS_SKU STS JOIN DAYS_TEMP D ON ((STS.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((STS.LOCATION_ID = SP.LOCATION_ID))) JOIN PRODUCT_TEMP SK ON ((STS.PRODUCT_ID = SK.PRODUCT_ID))) WHERE ((STS.SALES_TYPE_ID IN (1, 2, 3, 4, 5)) AND (STS.TXN_WAS_POST_VOIDED_FLAG = 0)) LIMIT ALL;

\echo
\echo *****  Creating view:  "SDS_PET_RPT_VW"

CREATE or replace VIEW  SDS_PET_RPT_VW
(
     PODS_PET_ID,
     PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     LAST_SDS_APPT_ID,
     LAST_SDS_APPT_STATUS_ID,
     LAST_SDS_APPT_STATUS_DESC,
     LAST_APPT_LOCATION_ID,
     LAST_APPT_SDS_CUSTOMER_ID,
     LAST_APPT_SDS_CUSTOMER_FIRST_NAME,
     LAST_APPT_SDS_CUSTOMER_LAST_NAME,
     LAST_APPT_SDS_CUSTOMER_PHONE_NBR,
     LAST_APPT_PRIMARY_SERVICE_PRODUCT_ID,
     LAST_APPT_REQUESTED_EMPLOYEE_ID,
     LAST_APPT_REQUESTED_EMPLOYEE_FIRST_NAME,
     LAST_APPT_REQUESTED_EMPLOYEE_LAST_NAME,
     LAST_APPT_REQUESTED_EMPLOYEE_DISPLAY_NAME,
     LAST_APPT_ASSIGNED_EMPLOYEE_ID,
     LAST_APPT_ASSIGNED_EMPLOYEE_FIRST_NAME,
     LAST_APPT_ASSIGNED_EMPLOYEE_LAST_NAME,
     LAST_APPT_ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     FUTURE_SDS_APPT_ID,
     FUTURE_SDS_APPT_STATUS_ID,
     FUTURE_SDS_APPT_STATUS_DESC,
     FUTURE_APPT_LOCATION_ID,
     FUTURE_APPT_SDS_CUSTOMER_ID,
     FUTURE_APPT_SDS_CUSTOMER_FIRST_NAME,
     FUTURE_APPT_SDS_CUSTOMER_LAST_NAME,
     FUTURE_APPT_SDS_CUSTOMER_PHONE_NBR,
     FUTURE_APPT_PRIMARY_SERVICE_PRODUCT_ID
) AS
SELECT A.PODS_PET_ID, MAX(CASE WHEN (L.PET_NAME NOTNULL) THEN L.PET_NAME WHEN (F.PET_NAME NOTNULL) THEN F.PET_NAME ELSE NULL::"VARCHAR" END) AS PET_NAME, MAX(CASE WHEN (L.PETM_PET_SPECIES_ID NOTNULL) THEN L.PETM_PET_SPECIES_ID WHEN (F.PETM_PET_SPECIES_ID NOTNULL) THEN F.PETM_PET_SPECIES_ID ELSE NULL::INT4 END) AS PETM_PET_SPECIES_ID, MAX(CASE WHEN (L.PETM_PET_SPECIES_DESC NOTNULL) THEN L.PETM_PET_SPECIES_DESC WHEN (F.PETM_PET_SPECIES_DESC NOTNULL) THEN F.PETM_PET_SPECIES_DESC ELSE NULL::"VARCHAR" END) AS PETM_PET_SPECIES_DESC, MAX(CASE WHEN (L.PETM_PET_GENDER_ID NOTNULL) THEN L.PETM_PET_GENDER_ID WHEN (F.PETM_PET_GENDER_ID NOTNULL) THEN F.PETM_PET_GENDER_ID ELSE NULL::INT4 END) AS PETM_PET_GENDER_ID, MAX(CASE WHEN (L.PETM_PET_GENDER_DESC NOTNULL) THEN L.PETM_PET_GENDER_DESC WHEN (F.PETM_PET_GENDER_DESC NOTNULL) THEN F.PETM_PET_GENDER_DESC ELSE NULL::"VARCHAR" END) AS PETM_PET_GENDER_DESC, MAX(CASE WHEN (L.PETM_PET_BREED_ID NOTNULL) THEN L.PETM_PET_BREED_ID WHEN (F.PETM_PET_BREED_ID NOTNULL) THEN F.PETM_PET_BREED_ID ELSE NULL::INT4 END) AS PETM_PET_BREED_ID, MAX(CASE WHEN (L.PETM_PET_BREED_DESC NOTNULL) THEN L.PETM_PET_BREED_DESC WHEN (F.PETM_PET_BREED_DESC NOTNULL) THEN F.PETM_PET_BREED_DESC ELSE NULL::"VARCHAR" END) AS PETM_PET_BREED_DESC, MAX(CASE WHEN (L.MIXED_BREED_FLAG NOTNULL) THEN L.MIXED_BREED_FLAG WHEN (F.MIXED_BREED_FLAG NOTNULL) THEN F.MIXED_BREED_FLAG ELSE NULL::"NUMERIC" END) AS MIXED_BREED_FLAG, MAX(CASE WHEN (L.PETM_PET_COLOR_ID NOTNULL) THEN L.PETM_PET_COLOR_ID WHEN (F.PETM_PET_COLOR_ID NOTNULL) THEN F.PETM_PET_COLOR_ID ELSE NULL::INT4 END) AS PETM_PET_COLOR_ID, MAX(CASE WHEN (L.PETM_PET_COLOR_DESC NOTNULL) THEN L.PETM_PET_COLOR_DESC WHEN (F.PETM_PET_COLOR_DESC NOTNULL) THEN F.PETM_PET_COLOR_DESC ELSE NULL::"VARCHAR" END) AS PETM_PET_COLOR_DESC, MAX(CASE WHEN (L.PET_STATUS NOTNULL) THEN L.PET_STATUS WHEN (F.PET_STATUS NOTNULL) THEN F.PET_STATUS ELSE NULL::"VARCHAR" END) AS PET_STATUS, MAX(CASE WHEN (L.GROOMING_PET_RATING_DESC NOTNULL) THEN L.GROOMING_PET_RATING_DESC WHEN (F.GROOMING_PET_RATING_DESC NOTNULL) THEN F.GROOMING_PET_RATING_DESC ELSE NULL::"VARCHAR" END) AS GROOMING_PET_RATING_DESC, MAX(CASE WHEN (L.HOTEL_PET_RATING_DESC NOTNULL) THEN L.HOTEL_PET_RATING_DESC WHEN (F.HOTEL_PET_RATING_DESC NOTNULL) THEN F.HOTEL_PET_RATING_DESC ELSE NULL::"VARCHAR" END) AS HOTEL_PET_RATING_DESC, MAX(CASE WHEN (L.DDC_PET_RATING_DESC NOTNULL) THEN L.DDC_PET_RATING_DESC WHEN (F.DDC_PET_RATING_DESC NOTNULL) THEN F.DDC_PET_RATING_DESC ELSE NULL::"VARCHAR" END) AS DDC_PET_RATING_DESC, MAX(CASE WHEN (L.TRAINING_PET_RATING_DESC NOTNULL) THEN L.TRAINING_PET_RATING_DESC WHEN (F.TRAINING_PET_RATING_DESC NOTNULL) THEN F.TRAINING_PET_RATING_DESC ELSE NULL::"VARCHAR" END) AS TRAINING_PET_RATING_DESC, MAX(CASE WHEN (L.PET_BIRTH_DT NOTNULL) THEN "TIMESTAMP"(L.PET_BIRTH_DT) WHEN (F.PET_BIRTH_DT NOTNULL) THEN "TIMESTAMP"(F.PET_BIRTH_DT) ELSE NULL::"TIMESTAMP" END) AS PET_BIRTH_DT, MAX(CASE WHEN (L.BORDETELLA_EXP_DT NOTNULL) THEN L.BORDETELLA_EXP_DT WHEN (F.BORDETELLA_EXP_DT NOTNULL) THEN F.BORDETELLA_EXP_DT ELSE NULL::DATE END) AS BORDETELLA_EXP_DT, MAX(CASE WHEN (L.RABIES_EXP_DT NOTNULL) THEN L.RABIES_EXP_DT WHEN (F.RABIES_EXP_DT NOTNULL) THEN F.RABIES_EXP_DT ELSE NULL::DATE END) AS RABIES_EXP_DT, MAX(CASE WHEN (L.DISTEMPER_EXP_DT NOTNULL) THEN L.DISTEMPER_EXP_DT WHEN (F.DISTEMPER_EXP_DT NOTNULL) THEN F.DISTEMPER_EXP_DT ELSE NULL::DATE END) AS DISTEMPER_EXP_DT, MAX(CASE WHEN (L.PARVOVIRUS_EXP_DT NOTNULL) THEN L.PARVOVIRUS_EXP_DT WHEN (F.PARVOVIRUS_EXP_DT NOTNULL) THEN F.PARVOVIRUS_EXP_DT ELSE NULL::DATE END) AS PARVOVIRUS_EXP_DT, MAX(CASE WHEN (L.PARAINFLUENZA_EXP_DT NOTNULL) THEN L.PARAINFLUENZA_EXP_DT WHEN (F.PARAINFLUENZA_EXP_DT NOTNULL) THEN F.PARAINFLUENZA_EXP_DT ELSE NULL::DATE END) AS PARAINFLUENZA_EXP_DT, MAX(CASE WHEN (L.FVRCCP_EXP_DT NOTNULL) THEN L.FVRCCP_EXP_DT WHEN (F.FVRCCP_EXP_DT NOTNULL) THEN F.FVRCCP_EXP_DT ELSE NULL::DATE END) AS FVRCCP_EXP_DT, MAX(L.SDS_SERVICE_APPOINTMENT_ID) AS LAST_SDS_APPT_ID, MAX(L.SDS_APPT_STATUS_ID) AS LAST_SDS_APPT_STATUS_ID, MAX(L.SDS_APPT_STATUS_DESC) AS LAST_SDS_APPT_STATUS_DESC, MAX(L.LOCATION_ID) AS LAST_APPT_LOCATION_ID, MAX(L.SDS_ACCOUNT_ID) AS LAST_APPT_SDS_CUSTOMER_ID, MAX(L.CUSTOMER_FIRST_NAME) AS LAST_APPT_SDS_CUSTOMER_FIRST_NAME, MAX(L.CUSTOMER_LAST_NAME) AS LAST_APPT_SDS_CUSTOMER_LAST_NAME, MAX(L.CUSTOMER_PHONE_NBR) AS LAST_APPT_SDS_CUSTOMER_PHONE_NBR, MAX(L.PRIMARY_SERVICE_PRODUCT_ID) AS LAST_APPT_PRIMARY_SERVICE_PRODUCT_ID, MAX(L.REQUESTED_EMPLOYEE_ID) AS LAST_APPT_REQUESTED_EMPLOYEE_ID, MAX(L.REQUESTED_EMPLOYEE_FIRST_NAME) AS LAST_APPT_REQUESTED_EMPLOYEE_FIRST_NAME, MAX(L.REQUESTED_EMPLOYEE_LAST_NAME) AS LAST_APPT_REQUESTED_EMPLOYEE_LAST_NAME, MAX(L.REQUESTED_EMPLOYEE_DISPLAY_NAME) AS LAST_APPT_REQUESTED_EMPLOYEE_DISPLAY_NAME, MAX(L.ASSIGNED_EMPLOYEE_ID) AS LAST_APPT_ASSIGNED_EMPLOYEE_ID, MAX(L.ASSIGNED_EMPLOYEE_FIRST_NAME) AS LAST_APPT_ASSIGNED_EMPLOYEE_FIRST_NAME, MAX(L.ASSIGNED_EMPLOYEE_LAST_NAME) AS LAST_APPT_ASSIGNED_EMPLOYEE_LAST_NAME, MAX(L.ASSIGNED_EMPLOYEE_DISPLAY_NAME) AS LAST_APPT_ASSIGNED_EMPLOYEE_DISPLAY_NAME, MAX(F.SDS_SERVICE_APPOINTMENT_ID) AS FUTURE_SDS_APPT_ID, MAX(F.SDS_APPT_STATUS_ID) AS FUTURE_SDS_APPT_STATUS_ID, MAX(F.SDS_APPT_STATUS_DESC) AS FUTURE_SDS_APPT_STATUS_DESC, MAX(F.LOCATION_ID) AS FUTURE_APPT_LOCATION_ID, MAX(F.SDS_ACCOUNT_ID) AS FUTURE_APPT_SDS_CUSTOMER_ID, MAX(F.CUSTOMER_FIRST_NAME) AS FUTURE_APPT_SDS_CUSTOMER_FIRST_NAME, MAX(F.CUSTOMER_LAST_NAME) AS FUTURE_APPT_SDS_CUSTOMER_LAST_NAME, MAX(F.CUSTOMER_PHONE_NBR) AS FUTURE_APPT_SDS_CUSTOMER_PHONE_NBR, MAX(F.PRIMARY_SERVICE_PRODUCT_ID) AS FUTURE_APPT_PRIMARY_SERVICE_PRODUCT_ID FROM (((SELECT SDS_WORK_ORDER_RPT.PODS_PET_ID, MAX(CASE WHEN (DATE(SDS_WORK_ORDER_RPT.APPT_TSTMP) < DATE('now(0)'::"VARCHAR")) THEN SDS_WORK_ORDER_RPT.APPT_TSTMP ELSE NULL::"TIMESTAMP" END) AS LAST_APPT_TSTMP, MIN(CASE WHEN (DATE(SDS_WORK_ORDER_RPT.APPT_TSTMP) >= DATE('now(0)'::"VARCHAR")) THEN SDS_WORK_ORDER_RPT.APPT_TSTMP ELSE NULL::"TIMESTAMP" END) AS FUTURE_APPT_TSTMP FROM ADMIN.SDS_WORK_ORDER_RPT GROUP BY SDS_WORK_ORDER_RPT.PODS_PET_ID) A LEFT JOIN ADMIN.SDS_WORK_ORDER_RPT L ON (((L.PODS_PET_ID = A.PODS_PET_ID) AND (L.APPT_TSTMP = A.LAST_APPT_TSTMP)))) LEFT JOIN ADMIN.SDS_WORK_ORDER_RPT F ON (((F.PODS_PET_ID = A.PODS_PET_ID) AND (F.APPT_TSTMP = A.FUTURE_APPT_TSTMP)))) GROUP BY A.PODS_PET_ID;

\echo
\echo *****  Creating view:  "SVCS_APPT_RPT_VW"

CREATE or replace VIEW  SVCS_APPT_RPT_VW
(
     SVCS_SRC_CD,
     SRC_APPT_ID,
     SRC_BOOKING_NBR,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     SRC_ORDER_ID,
     SRC_WEB_SERVICE_ORDER_NBR,
     SRC_REDEMPTION_ID,
     LOCATION_ID,
     SVCS_SERVICE_LOCATION_TYPE,
     APPT_DT,
     APPT_TSTMP,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SRC_APPT_STATUS_ID,
     SRC_APPT_STATUS_DESC,
     SVCS_APPT_CREATION_CHANNEL,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SRC_ORDER_STATUS_ID,
     SRC_ORDER_STATUS_DESC,
     SRC_ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SRC_SERVICE_CATEGORY_ID,
     SRC_SERVICE_CATEGORY_DESC,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_ID,
     SRC_CUSTOMER_FIRST_NAME,
     SRC_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_PHONE_NBR,
     SRC_CUSTOMER_EMAIL_ADDR,
     SRC_CUSTOMER_ADDR1,
     SRC_CUSTOMER_ADDR2,
     SRC_CUSTOMER_CITY,
     SRC_CUSTOMER_STATE,
     SRC_CUSTOMER_POSTAL_CD,
     SRC_CUSTOMER_POSTAL_CD_EXT,
     SRC_CUSTOMER_COUNTRY_CD,
     SRC_CUSTOMER_DO_NOT_BOOKED_FLAG,
     SRC_CUSTOMER_DO_NOT_BOOKED_REASON,
     SRC_CUSTOMER_LOYALTY_FLAG,
     SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG,
     SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     SRC_RECEIVE_TEXT_NOTIFICATION_FLAG,
     SRC_RECEIVE_PUSH_NOTIFICATION_FLAG,
     SRC_REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     CUSTOMER_FIRST_SERVICES_APPT_FLAG,
     CUSTOMER_FIRST_GROOMING_APPT_FLAG,
     CUSTOMER_FIRST_HOTEL_APPT_FLAG,
     CUSTOMER_FIRST_DDC_APPT_FLAG,
     CUSTOMER_FIRST_TRAINING_APPT_FLAG,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     SRC_PET_ID,
     SRC_PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     SRC_PET_SPECIES_ID,
     SRC_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     SRC_PET_GENDER_ID,
     SRC_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     SRC_PET_BREED_ID,
     SRC_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     SRC_PET_COLOR_ID,
     SRC_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     PET_FIRST_SERVICES_APPT_FLAG,
     PET_FIRST_GROOMING_APPT_FLAG,
     PET_FIRST_HOTEL_APPT_FLAG,
     PET_FIRST_DDC_APPT_FLAG,
     PET_FIRST_TRAINING_APPT_FLAG,
     WEIGHT_IN_LBS,
     CC_APPT_CREATE_TSTMP,
     CREATED_CC_AGENT_NAME,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SRC_EMPLOYEE_GROUP_ID,
     REQUESTED_SRC_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SRC_EMPLOYEE_GROUP_ID,
     ASSIGNED_SRC_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOK_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_SRC_CANCEL_REASON_ID,
     APPT_SRC_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     PRIMARY_SERVICE_PRODUCT_ID,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     SRC_PAYMENT_ORIGIN,
     PRISM_START_DT,
     LAST_LOAD_START_TSTMP,
     EXCH_RATE_PCT
) AS
SELECT A.SVCS_SRC_CD, A.SRC_APPT_ID, A.SRC_BOOKING_NBR, A.PETM_POS_INVOICE_ID, A.INVOICE_CREATE_TSTMP, A.SRC_ORDER_ID, A.SRC_WEB_SERVICE_ORDER_NBR, A.SRC_REDEMPTION_ID, A.LOCATION_ID, A.SVCS_SERVICE_LOCATION_TYPE, A.APPT_DT, A.APPT_TSTMP, A.SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, A.SRC_APPT_STATUS_ID, A.SRC_APPT_STATUS_DESC, A.SVCS_APPT_CREATION_CHANNEL, A.SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, A.SRC_ORDER_STATUS_ID, A.SRC_ORDER_STATUS_DESC, A.SRC_ORDER_VOID_TSTMP, A.ORDER_VOID_REASON, A.SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SRC_SERVICE_CATEGORY_ID, A.SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, A.SVCS_CUSTOMER_FIRST_NAME, A.SVCS_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_ID, A.SRC_CUSTOMER_FIRST_NAME, A.SRC_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_PHONE_NBR, A.SRC_CUSTOMER_EMAIL_ADDR, A.SRC_CUSTOMER_ADDR1, A.SRC_CUSTOMER_ADDR2, A.SRC_CUSTOMER_CITY, A.SRC_CUSTOMER_STATE, A.SRC_CUSTOMER_POSTAL_CD, A.SRC_CUSTOMER_POSTAL_CD_EXT, A.SRC_CUSTOMER_COUNTRY_CD, A.SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, A.SRC_CUSTOMER_DO_NOT_BOOKED_REASON, A.SRC_CUSTOMER_LOYALTY_FLAG, A.SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, A.SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, A.SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, A.SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, A.SRC_REMINDER_CALL_FLAG, A.CUSTOMER_GROOMING_NEW_FLAG, A.CUSTOMER_HOTEL_NEW_FLAG, A.CUSTOMER_DDC_NEW_FLAG, A.CUSTOMER_TRAINING_NEW_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.SERVICES_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_SERVICES_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.GROOMING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_GROOMING_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.HOTEL_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_HOTEL_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.DDC_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_DDC_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.TRAINING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_TRAINING_APPT_FLAG, A.SVCS_PET_GID, A.SVCS_PET_NAME, A.SRC_PET_ID, A.SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.SRC_PET_SPECIES_ID, A.SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.SRC_PET_GENDER_ID, A.SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.SRC_PET_BREED_ID, A.SRC_PET_BREED_DESC, A.MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.SRC_PET_COLOR_ID, A.SRC_PET_COLOR_DESC, A.PET_STATUS, A.GROOMING_PET_RATING_DESC, A.HOTEL_PET_RATING_DESC, A.DDC_PET_RATING_DESC, A.TRAINING_PET_RATING_DESC, A.GROOMING_NOTES, A.GROOMING_SERVICE_CARD_ALERT_TEXT, A.PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, CASE WHEN (A.SRC_APPT_ID = PET.SERVICES_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_SERVICES_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.GROOMING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_GROOMING_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.HOTEL_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_HOTEL_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.DDC_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_DDC_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.TRAINING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_TRAINING_APPT_FLAG, A.WEIGHT_IN_LBS, A.CC_APPT_CREATE_TSTMP, A.CREATED_CC_AGENT_NAME, A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, A.REQUESTED_EMPLOYEE_FIRST_NAME, A.REQUESTED_EMPLOYEE_LAST_NAME, A.REQUESTED_EMPLOYEE_DISPLAY_NAME, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, A.ASSIGNED_EMPLOYEE_ID, A.ASSIGNED_EMPLOYEE_FIRST_NAME, A.ASSIGNED_EMPLOYEE_LAST_NAME, A.ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, A.APPT_UPDATE_FLAG, A.APPT_CONFIRMED_TSTMP, A.APPT_CONFIRMATION_CHANNEL, A.APPT_CONFIRMED_BY, A.MANUAL_APPOINTMENT_FLAG, A.WALK_IN_FLAG, A.PRE_CHECK_IN_FLAG, A.REBOOK_FLAG, A.NO_SHOW_FLAG, A.DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.APPT_CHECK_IN_TSTMP, A.APPT_CHECK_OUT_TSTMP, A.APPT_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, A.APPT_CANCEL_FLAG, A.APPT_CANCELLATION_CHANNEL, A.APPT_CANCELLED_BY, A.APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, A.APPT_SRC_CANCEL_REASON_ID, A.APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, A.APPT_CANCELLED_EMPLOYEE_LAST_NAME, A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, A.PRIMARY_SERVICE_PRODUCT_ID, A.APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, A.APPT_PAYMENT_TSTMP, A.APPT_PAYMENT_AMT, A.APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, A.SRC_PAYMENT_ORIGIN, A.PRISM_START_DT, A.LAST_LOAD_START_TSTMP, A.EXCH_RATE_PCT FROM (((((SELECT ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.SMS_APPOINTMENT_ID AS SRC_APPT_ID, (A.SMS_BOOKING_NUMBER)::VARCHAR(255) AS SRC_BOOKING_NBR, A.PETM_POS_INVOICE_ID, NULL::"TIMESTAMP" AS INVOICE_CREATE_TSTMP, A.SMS_ORDER_ID AS SRC_ORDER_ID, (NULL::"VARCHAR")::VARCHAR(30) AS SRC_WEB_SERVICE_ORDER_NBR, (NULL::"VARCHAR")::VARCHAR(18) AS SRC_REDEMPTION_ID, A.LOCATION_ID, ('Salon'::"VARCHAR")::VARCHAR(50) AS SVCS_SERVICE_LOCATION_TYPE, A.SMS_APPOINTMENT_DT AS APPT_DT, A.SMS_APPOINTMENT_TSTMP AS APPT_TSTMP, A.SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, A.SMS_APPT_STATUS_ID AS SRC_APPT_STATUS_ID, A.SMS_APPT_STATUS_DESC AS SRC_APPT_STATUS_DESC, CASE WHEN ((UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'IN-STORE'::"VARCHAR") OR (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'STORE'::"VARCHAR")) THEN 'In-Store'::"VARCHAR" WHEN ((UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR") OR (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'ONLINE MOBILE'::"VARCHAR")) THEN 'Digital'::"VARCHAR" WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN 'SRC'::"VARCHAR" WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'OTHER'::"VARCHAR") THEN 'Other'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SVCS_APPT_CREATION_CHANNEL, A.SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, INT4(A.SMS_ORDER_STATUS_ID) AS SRC_ORDER_STATUS_ID, A.SMS_ORDER_STATUS_DESC AS SRC_ORDER_STATUS_DESC, NULL::"TIMESTAMP" AS SRC_ORDER_VOID_TSTMP, (NULL::"VARCHAR")::VARCHAR(256) AS ORDER_VOID_REASON, A.SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SMS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, A.SMS_SERVICE_CATEGORY_DESC AS SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, A.SVCS_CUSTOMER_FIRST_NAME, A.SVCS_CUSTOMER_LAST_NAME, A.SMS_CUSTOMER_ID AS SRC_CUSTOMER_ID, A.SMS_CUSTOMER_FIRST_NAME AS SRC_CUSTOMER_FIRST_NAME, A.SMS_CUSTOMER_LAST_NAME AS SRC_CUSTOMER_LAST_NAME, A.SMS_CUSTOMER_PHONE_NBR AS SRC_CUSTOMER_PHONE_NBR, (A.SMS_CUSTOMER_EMAIL_ADDR)::VARCHAR(255) AS SRC_CUSTOMER_EMAIL_ADDR, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR1, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR2, (NULL::"VARCHAR")::VARCHAR(40) AS SRC_CUSTOMER_CITY, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_STATE, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD_EXT, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_COUNTRY_CD, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_DO_NOT_BOOKED_REASON, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_LOYALTY_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_REMINDER_CALL_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_GROOMING_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_HOTEL_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_DDC_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_TRAINING_NEW_FLAG, A.SVCS_PET_GID, A.SVCS_PET_NAME, A.SMS_PET_ID AS SRC_PET_ID, (A.SMS_PET_NAME)::VARCHAR(70) AS SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.SMS_PET_SPECIES_ID AS SRC_PET_SPECIES_ID, A.SMS_PET_SPECIES_DESC AS SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.SMS_PET_GENDER_ID AS SRC_PET_GENDER_ID, A.SMS_PET_GENDER_DESC AS SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.SMS_PET_BREED_ID AS SRC_PET_BREED_ID, A.SMS_PET_BREED_DESC AS SRC_PET_BREED_DESC, ("NUMERIC"(A.MIXED_BREED_FLAG))::NUMERIC(3,0) AS MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.SMS_PET_COLOR_ID AS SRC_PET_COLOR_ID, A.SMS_PET_COLOR_DESC AS SRC_PET_COLOR_DESC, (A.SMS_PET_STATUS_DESC)::VARCHAR(50) AS PET_STATUS, (A.SMS_GROOM_RATING)::VARCHAR(30) AS GROOMING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS HOTEL_PET_RATING_DESC, (A.SMS_DAYCAMP_RATING)::VARCHAR(30) AS DDC_PET_RATING_DESC, (A.SMS_TRAIN_RATING)::VARCHAR(30) AS TRAINING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_NOTES, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_SERVICE_CARD_ALERT_TEXT, "TIMESTAMP"(A.SMS_PET_BIRTH_DT) AS PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, CASE WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN A.APPT_CREATE_TSTMP ELSE NULL::"TIMESTAMP" END AS CC_APPT_CREATE_TSTMP, CASE WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN C.CC_AGENT_NAME ELSE NULL::"VARCHAR" END AS CREATED_CC_AGENT_NAME, A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SMS_EMPLOYEE_GROUP_ID AS REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SMS_EMPLOYEE_GROUP_DESC AS REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, A.REQUESTED_EMPLOYEE_FIRST_NAME, A.REQUESTED_EMPLOYEE_LAST_NAME, A.REQUESTED_EMPLOYEE_DISPLAY_NAME, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SMS_EMPLOYEE_GROUP_ID AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SMS_EMPLOYEE_GROUP_DESC AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, A.ASSIGNED_EMPLOYEE_ID, A.ASSIGNED_EMPLOYEE_FIRST_NAME, A.ASSIGNED_EMPLOYEE_LAST_NAME, A.ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORD_CREATE_TSTMP AS ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, ("NUMERIC"(A.APPT_UPDATE_IND))::NUMERIC(3,0) AS APPT_UPDATE_FLAG, NULL::"TIMESTAMP" AS APPT_CONFIRMED_TSTMP, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CONFIRMATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CONFIRMED_BY, (NULL::"NUMERIC")::NUMERIC(1,0) AS MANUAL_APPOINTMENT_FLAG, ("NUMERIC"(A.WALK_IN_IND))::NUMERIC(3,0) AS WALK_IN_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PRE_CHECK_IN_FLAG, ("NUMERIC"(A.REBOOKED_IND))::NUMERIC(3,0) AS REBOOK_FLAG, ("NUMERIC"(A.NO_SHOW_IND))::NUMERIC(3,0) AS NO_SHOW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.CHECK_IN_TSTMP AS APPT_CHECK_IN_TSTMP, A.CHECK_OUT_TSTMP AS APPT_CHECK_OUT_TSTMP, ("NUMERIC"(A.COMPLETE_IND))::NUMERIC(3,0) AS APPT_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, ("NUMERIC"(A.CANCEL_IND))::NUMERIC(9,0) AS APPT_CANCEL_FLAG, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CANCELLATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CANCELLED_BY, A.APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, A.SMS_CANCEL_REASON_ID AS APPT_SRC_CANCEL_REASON_ID, A.SMS_CANCEL_REASON_DESC AS APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, A.APPT_CANCELLED_EMPLOYEE_LAST_NAME, A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, SSP.PRODUCT_ID AS PRIMARY_SERVICE_PRODUCT_ID, (A.APPT_TOTAL_PRICE_AMT)::NUMERIC(18,2) AS APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, A.PAYMENT_TSTMP AS APPT_PAYMENT_TSTMP, (A.PAYMENT_AMT)::NUMERIC(18,2) AS APPT_PAYMENT_AMT, A.APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, ('POS'::"VARCHAR")::VARCHAR(100) AS SRC_PAYMENT_ORIGIN, SSR.PRISM_START_DT, NULL::"TIMESTAMP" AS LAST_LOAD_START_TSTMP, A.EXCH_RATE_PCT, (NULL::"NUMERIC")::NUMERIC(18,2) AS WEIGHT_IN_LBS FROM (((ADMIN.SMS_APPOINTMENT_RPT A LEFT JOIN ADMIN.SMS_SERVICE_PROFILE SSP ON ((A.SMS_PRIMARY_SERVICE_ID = SSP.SMS_SERVICE_ID))) LEFT JOIN (SELECT DISTINCT H.SMS_APPOINTMENT_ID, CASE WHEN (X.TP_CC_AGENT_NAME NOTNULL) THEN X.TP_CC_AGENT_NAME WHEN (U.SMS_USER_NAME NOTNULL) THEN U.SMS_USER_NAME ELSE NULL::"VARCHAR" END AS CC_AGENT_NAME FROM ((ADMIN.SMS_APPT_HISTORY H LEFT JOIN ADMIN.SMS_USER U ON ((H.SMS_USER_ID = U.SMS_USER_ID))) LEFT JOIN ADMIN.USR_TP_SMS_USER_XREF X ON ((LOWER(U.SMS_USER_LOGIN) = LOWER(X.SMS_USER_LOGIN)))) WHERE (H.SMS_HISTORY_ACTION_ID = 3)) C ON ((A.SMS_APPOINTMENT_ID = C.SMS_APPOINTMENT_ID))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON ((A.LOCATION_ID = SSR.LOCATION_ID)))) UNION ALL (SELECT ('TP'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, TIR.TP_INVOICE_NBR AS SRC_APPT_ID, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_BOOKING_NBR, TIR.TP_BASE_INVOICE_NBR AS PETM_POS_INVOICE_ID, NULL::"TIMESTAMP" AS INVOICE_CREATE_TSTMP, NULL::INT8 AS SRC_ORDER_ID, (NULL::"VARCHAR")::VARCHAR(30) AS SRC_WEB_SERVICE_ORDER_NBR, (NULL::"VARCHAR")::VARCHAR(18) AS SRC_REDEMPTION_ID, TIR.LOCATION_ID, (CASE WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 3) THEN 'Salon'::"VARCHAR" WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 4) THEN 'DDC'::"VARCHAR" WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 5) THEN 'Hotel'::"VARCHAR" WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 6) THEN 'Training'::"VARCHAR" ELSE NULL::"VARCHAR" END)::VARCHAR(50) AS SVCS_SERVICE_LOCATION_TYPE, DATE(TIR.APPT_START_TSTMP) AS APPT_DT, TIR.APPT_START_TSTMP AS APPT_TSTMP, TIR.SVCS_APPT_STATUS_GID, (TIR.SVCS_APPT_STATUS_DESC)::VARCHAR(50) AS SVCS_APPT_STATUS_DESC, TIR.TP_APPT_STATUS_ID AS SRC_APPT_STATUS_ID, (TIR.TP_APPT_STATUS_DESC)::VARCHAR(50) AS SRC_APPT_STATUS_DESC, CASE WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'IN-STORE'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'STORE'::"VARCHAR")) THEN 'In-Store'::"VARCHAR" WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE MOBILE'::"VARCHAR")) THEN 'Digital'::"VARCHAR" WHEN (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN 'SRC'::"VARCHAR" WHEN (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'OTHER'::"VARCHAR") THEN 'Other'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SVCS_APPT_CREATION_CHANNEL, NULL::INT4 AS SVCS_ORDER_STATUS_GID, (NULL::"VARCHAR")::VARCHAR(50) AS SVCS_ORDER_STATUS_DESC, NULL::INT4 AS SRC_ORDER_STATUS_ID, (NULL::"VARCHAR")::VARCHAR(50) AS SRC_ORDER_STATUS_DESC, NULL::"TIMESTAMP" AS SRC_ORDER_VOID_TSTMP, (NULL::"VARCHAR")::VARCHAR(256) AS ORDER_VOID_REASON, TIR.SVCS_SERVICE_CATEGORY_GID, (TIR.SVCS_SERVICE_CATEGORY_DESC)::VARCHAR(50) AS SVCS_SERVICE_CATEGORY_DESC, TIR.SMS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, (TIR.SMS_SERVICE_CATEGORY_DESC)::VARCHAR(50) AS SRC_SERVICE_CATEGORY_DESC, TIR.SVCS_CUSTOMER_GID, (TIR.SVCS_CUSTOMER_FIRST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_FIRST_NAME, (TIR.SVCS_CUSTOMER_LAST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_LAST_NAME, TIR.TP_CUSTOMER_NBR AS SRC_CUSTOMER_ID, (TIR.CUST_FIRST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_FIRST_NAME, (TIR.CUST_LAST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_LAST_NAME, NULL::INT8 AS SRC_CUSTOMER_PHONE_NBR, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_EMAIL_ADDR, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR1, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR2, (NULL::"VARCHAR")::VARCHAR(40) AS SRC_CUSTOMER_CITY, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_STATE, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD_EXT, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_COUNTRY_CD, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_DO_NOT_BOOKED_REASON, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_LOYALTY_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_REMINDER_CALL_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_GROOMING_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_HOTEL_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_DDC_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_TRAINING_NEW_FLAG, TIR.SVCS_PET_GID, (TIR.SVCS_PET_NAME)::VARCHAR(256) AS SVCS_PET_NAME, TIR.TP_PET_NBR AS SRC_PET_ID, (TIR.PET_NAME)::VARCHAR(70) AS SRC_PET_NAME, TIR.PETM_PET_SPECIES_ID, TIR.PETM_PET_SPECIES_DESC, TIR.TP_PET_SPECIES_ID AS SRC_PET_SPECIES_ID, TIR.TP_PET_SPECIES_DESC AS SRC_PET_SPECIES_DESC, TIR.PETM_PET_GENDER_ID, TIR.PETM_PET_GENDER_DESC, TIR.TP_PET_GENDER_ID AS SRC_PET_GENDER_ID, TIR.TP_PET_GENDER_DESC AS SRC_PET_GENDER_DESC, TIR.PETM_PET_BREED_ID, TIR.PETM_PET_BREED_DESC, TIR.TP_PET_BREED_ID AS SRC_PET_BREED_ID, TIR.TP_PET_BREED_DESC AS SRC_PET_BREED_DESC, (TIR.MIXED_BREED_FLAG)::NUMERIC(3,0) AS MIXED_BREED_FLAG, TIR.PETM_PET_COLOR_ID, TIR.PETM_PET_COLOR_DESC, TIR.TP_PET_COLOR_ID AS SRC_PET_COLOR_ID, TIR.TP_PET_COLOR_DESC AS SRC_PET_COLOR_DESC, (NULL::"VARCHAR")::VARCHAR(50) AS PET_STATUS, (NULL::"VARCHAR")::VARCHAR(30) AS GROOMING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS HOTEL_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS DDC_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS TRAINING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_NOTES, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_SERVICE_CARD_ALERT_TEXT, "TIMESTAMP"(TIR.PET_BIRTH_DT) AS PET_BIRTH_DT, TIR.BORDETELLA_EXP_DT, TIR.RABIES_EXP_DT, TIR.DISTEMPER_EXP_DT, TIR.PARVOVIRUS_EXP_DT, TIR.PARAINFLUENZA_EXP_DT, TIR.FVRCCP_EXP_DT, CASE WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR")) THEN TIR.CC_APPT_CREATE_TSTMP ELSE NULL::"TIMESTAMP" END AS CC_APPT_CREATE_TSTMP, (CASE WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR")) THEN C.TP_CC_AGENT_NAME ELSE NULL::"VARCHAR" END)::VARCHAR(257) AS CREATED_CC_AGENT_NAME, NULL::INT4 AS REQUESTED_SVCS_EMPLOYEE_GROUP_GID, (NULL::"VARCHAR")::VARCHAR(50) AS REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, NULL::INT4 AS REQUESTED_SRC_EMPLOYEE_GROUP_ID, (NULL::"VARCHAR")::VARCHAR(50) AS REQUESTED_SRC_EMPLOYEE_GROUP_DESC, NULL::INT4 AS REQUESTED_EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(256) AS REQUESTED_EMPLOYEE_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS REQUESTED_EMPLOYEE_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS REQUESTED_EMPLOYEE_DISPLAY_NAME, NULL::INT4 AS ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, (NULL::"VARCHAR")::VARCHAR(50) AS ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, NULL::INT4 AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, (NULL::"VARCHAR")::VARCHAR(50) AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, NULL::INT4 AS ASSIGNED_EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(256) AS ASSIGNED_EMPLOYEE_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS ASSIGNED_EMPLOYEE_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS ASSIGNED_EMPLOYEE_DISPLAY_NAME, NULL::"TIMESTAMP" AS ORDER_CREATE_TSTMP, TIR.RESERV_CREATE_DT AS APPT_CREATE_TSTMP, TIR.RESERV_LAST_UPDATE_DT AS APPT_LAST_MODIFY_TSTMP, (CASE WHEN (TIR.RESERV_LAST_UPDATE_DT NOTNULL) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS APPT_UPDATE_FLAG, NULL::"TIMESTAMP" AS APPT_CONFIRMED_TSTMP, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CONFIRMATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CONFIRMED_BY, (NULL::"NUMERIC")::NUMERIC(1,0) AS MANUAL_APPOINTMENT_FLAG, (CASE WHEN (TIR.RESERV_CREATE_DT NOTNULL) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS WALK_IN_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PRE_CHECK_IN_FLAG, ('0'::NUMERIC)::NUMERIC(3,0) AS REBOOK_FLAG, (CASE WHEN (TIR.CANCEL_REASON_ID = 4) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS NO_SHOW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS DUMMY_APPOINTMENT_FLAG, TIR.APPT_START_TSTMP AS SCHED_APPT_START_TSTMP, TIR.APPT_END_TSTMP AS SCHED_APPT_END_TSTMP, TIR.ACTUAL_IN_DT AS APPT_CHECK_IN_TSTMP, TIR.ACTUAL_OUT_DT AS APPT_CHECK_OUT_TSTMP, (CASE WHEN (TIR.INVOICE_STATE_ID = 3) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS APPT_COMPLETE_FLAG, TIR.CANCEL_DT AS APPT_CANCEL_TSTMP, ("NUMERIC"(CASE WHEN (TIR.CANCEL_DT ISNULL) THEN 0 ELSE 1 END))::NUMERIC(9,0) AS APPT_CANCEL_FLAG, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CANCELLATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CANCELLED_BY, TIR.APPT_SVCS_CANCEL_REASON_GID, TIR.APPT_SVCS_CANCEL_REASON_DESC, TIR.CANCEL_REASON_ID AS APPT_SRC_CANCEL_REASON_ID, TIR.CANCEL_REASON_DESC AS APPT_SRC_CANCEL_REASON_DESC, NULL::INT4 AS APPT_CANCELLED_EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, NULL::INT4 AS PRIMARY_SERVICE_PRODUCT_ID, (TIR.TP_EXTENDED_PRICE)::NUMERIC(18,2) AS APPT_TOTAL_PRICE_AMT, TIR.TP_ITEM_QTY AS APPT_TOTAL_ITEM_QTY, TIR.PAYMENT_DT AS APPT_PAYMENT_TSTMP, (TIR.PAYMENT_AMT)::NUMERIC(18,2) AS APPT_PAYMENT_AMT, 4 AS APPT_SVCS_PAYMENT_METHOD_GID, ('CASH'::"VARCHAR")::VARCHAR(50) AS APPT_SVCS_PAYMENT_METHOD_DESC, ('POS'::"VARCHAR")::VARCHAR(100) AS SRC_PAYMENT_ORIGIN, SSR.PRISM_START_DT, NULL::"TIMESTAMP" AS LAST_LOAD_START_TSTMP, TIR.EXCH_RATE_PCT, (NULL::"NUMERIC")::NUMERIC(18,2) AS WEIGHT_IN_LBS FROM ((ADMIN.TP_INVOICE_RPT TIR LEFT JOIN (SELECT DISTINCT H.TP_INVOICE_NBR, X.TP_CC_AGENT_NAME FROM ((SELECT H.TP_INVOICE_NBR, H.USER_NAME, H.HISTORY_DT, H.CHANGE_DT, H.TP_HIST_ACTION FROM (ADMIN.TP_HISTORY H JOIN (SELECT TP_HISTORY.TP_INVOICE_NBR, MAX(TP_HISTORY.HISTORY_DT) AS HISTORY_DT FROM ADMIN.TP_HISTORY WHERE (((((TP_HISTORY.TP_INVOICE_NBR NOTNULL) AND (TP_HISTORY.TP_INVOICE_NBR > 0)) AND (TP_HISTORY.HISTORY_DT = TP_HISTORY.CHANGE_DT)) AND (TP_HISTORY.HISTORY_DT > '2013-01-01 00:00:00'::"TIMESTAMP")) AND (LOWER(TP_HISTORY.TP_HIST_ACTION) = 'create'::"VARCHAR")) GROUP BY TP_HISTORY.TP_INVOICE_NBR) HA ON (((H.TP_INVOICE_NBR = HA.TP_INVOICE_NBR) AND (H.HISTORY_DT = HA.HISTORY_DT))))) H LEFT JOIN ADMIN.USR_TP_SMS_USER_XREF X ON ((UPPER(H.USER_NAME) = X.TP_CC_LOGIN))) WHERE ((((((H.TP_INVOICE_NBR NOTNULL) AND (H.TP_INVOICE_NBR > 0)) AND (H.HISTORY_DT = H.CHANGE_DT)) AND (H.HISTORY_DT > '2013-01-01 00:00:00'::"TIMESTAMP")) AND (LOWER(H.TP_HIST_ACTION) = 'create'::"VARCHAR")) AND (X.TP_CC_AGENT_NAME NOTNULL))) C ON ((TIR.TP_INVOICE_NBR = C.TP_INVOICE_NBR))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON ((TIR.LOCATION_ID = SSR.LOCATION_ID))))) UNION ALL (SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.SDS_WORK_ORDER_NBR AS SRC_APPT_ID, A.SDS_BOOKING_NBR AS SRC_BOOKING_NBR, A.PETM_POS_INVOICE_ID, A.INVOICE_CREATE_TSTMP, A.SDS_ORDER_NBR AS SRC_ORDER_ID, SO.SDS_WEB_SERVICE_ORDER_NBR AS SRC_WEB_SERVICE_ORDER_NBR, A.SDS_REDEMPTION_ID AS SRC_REDEMPTION_ID, A.LOCATION_ID, A.SDS_LOCATION_TYPE, DATE(A.APPT_TSTMP) AS APPT_DT, A.APPT_TSTMP, INT4(A.SVCS_APPT_STATUS_GID) AS SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, A.SDS_APPT_STATUS_ID AS SRC_APPT_STATUS_ID, A.SDS_APPT_STATUS_DESC AS SRC_APPT_STATUS_DESC, CASE WHEN ((UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'IN-STORE'::"VARCHAR") OR (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'STORE'::"VARCHAR")) THEN 'In-Store'::"VARCHAR" WHEN ((UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR") OR (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'ONLINE MOBILE'::"VARCHAR")) THEN 'Digital'::"VARCHAR" WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN 'SRC'::"VARCHAR" WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'OTHER'::"VARCHAR") THEN 'Other'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SVCS_APPT_CREATION_CHANNEL, INT4(A.SVCS_ORDER_STATUS_GID) AS SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, A.SDS_ORDER_STATUS_ID AS SRC_ORDER_STATUS_ID, A.SDS_ORDER_STATUS_DESC AS SRC_ORDER_STATUS_DESC, A.ORDER_VOID_TSTMP AS SRC_ORDER_VOID_TSTMP, A.ORDER_VOID_REASON, INT4(A.SVCS_SERVICE_CATEGORY_GID) AS SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SDS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, A.SDS_SERVICE_CATEGORY_DESC AS SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, (A.CUSTOMER_FIRST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_FIRST_NAME, (A.CUSTOMER_LAST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_LAST_NAME, A.PODS_CUSTOMER_ID AS SRC_CUSTOMER_ID, (A.CUSTOMER_FIRST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_FIRST_NAME, (A.CUSTOMER_LAST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_LAST_NAME, A.CUSTOMER_PHONE_NBR AS SRC_CUSTOMER_PHONE_NBR, A.CUSTOMER_EMAIL_ADDR AS SRC_CUSTOMER_EMAIL_ADDR, A.CUSTOMER_ADDR1 AS SRC_CUSTOMER_ADDR1, A.CUSTOMER_ADDR2 AS SRC_CUSTOMER_ADDR2, A.CUSTOMER_CITY AS SRC_CUSTOMER_CITY, A.CUSTOMER_STATE AS SRC_CUSTOMER_STATE, A.CUSTOMER_POSTAL_CD AS SRC_CUSTOMER_POSTAL_CD, A.CUSTOMER_POSTAL_CD_EXT AS SRC_CUSTOMER_POSTAL_CD_EXT, A.CUSTOMER_COUNTRY_CD AS SRC_CUSTOMER_COUNTRY_CD, A.CUSTOMER_DO_NOT_BOOKED_FLAG AS SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, A.CUSTOMER_DO_NOT_BOOKED_REASON AS SRC_CUSTOMER_DO_NOT_BOOKED_REASON, A.CUSTOMER_LOYALTY_FLAG AS SRC_CUSTOMER_LOYALTY_FLAG, A.DIGITAL_LOYALTY_CUSTOMER_FLAG AS SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, A.RECEIVE_EMAIL_NOTIFICATIONS_FLAG AS SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, A.RECEIVE_TEXT_NOTIFICATION_FLAG AS SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, A.RECEIVE_PUSH_NOTIFICATION_FLAG AS SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, A.REMINDER_CALL_FLAG AS SRC_REMINDER_CALL_FLAG, A.CUSTOMER_GROOMING_NEW_FLAG, A.CUSTOMER_HOTEL_NEW_FLAG, A.CUSTOMER_DDC_NEW_FLAG, A.CUSTOMER_TRAINING_NEW_FLAG, A.SVCS_PET_GID, (A.PET_NAME)::VARCHAR(256) AS SVCS_PET_NAME, A.PODS_PET_ID AS SRC_PET_ID, A.PET_NAME AS SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.PETM_PET_SPECIES_ID AS SRC_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC AS SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.PETM_PET_GENDER_ID AS SRC_PET_GENDER_ID, A.PETM_PET_GENDER_DESC AS SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.PETM_PET_BREED_ID AS SRC_PET_BREED_ID, A.PETM_PET_BREED_DESC AS SRC_PET_BREED_DESC, (A.MIXED_BREED_FLAG)::NUMERIC(3,0) AS MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.PETM_PET_COLOR_ID AS SRC_PET_COLOR_ID, A.PETM_PET_COLOR_DESC AS SRC_PET_COLOR_DESC, A.PET_STATUS, A.GROOMING_PET_RATING_DESC, A.HOTEL_PET_RATING_DESC, A.DDC_PET_RATING_DESC, A.TRAINING_PET_RATING_DESC, A.GROOMING_NOTES, A.GROOMING_SERVICE_CARD_ALERT_TEXT, "TIMESTAMP"(A.PET_BIRTH_DT) AS PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, CASE WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN A.APPT_CREATE_TSTMP ELSE NULL::"TIMESTAMP" END AS CC_APPT_CREATE_TSTMP, (CASE WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN A.CREATED_SDS_USER_NAME ELSE NULL::"VARCHAR" END)::VARCHAR(257) AS CREATED_CC_AGENT_NAME, INT4(A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID) AS REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SDS_EMPLOYEE_GROUP_ID AS REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SDS_EMPLOYEE_GROUP_DESC AS REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, (A.REQUESTED_EMPLOYEE_FIRST_NAME)::VARCHAR(256) AS REQUESTED_EMPLOYEE_FIRST_NAME, (A.REQUESTED_EMPLOYEE_LAST_NAME)::VARCHAR(256) AS REQUESTED_EMPLOYEE_LAST_NAME, (A.REQUESTED_EMPLOYEE_DISPLAY_NAME)::VARCHAR(256) AS REQUESTED_EMPLOYEE_DISPLAY_NAME, INT4(A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID) AS ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SDS_EMPLOYEE_GROUP_ID AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, A.ASSIGNED_EMPLOYEE_ID, (A.ASSIGNED_EMPLOYEE_FIRST_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_FIRST_NAME, (A.ASSIGNED_EMPLOYEE_LAST_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_LAST_NAME, (A.ASSIGNED_EMPLOYEE_DISPLAY_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, (A.APPT_UPDATE_FLAG)::NUMERIC(3,0) AS APPT_UPDATE_FLAG, A.APPT_CONFIRMED_TSTMP, A.APPT_CONFIRMATION_CHANNEL, A.APPT_CONFIRMED_BY, A.MANUAL_APPOINTMENT_FLAG, (A.WALK_IN_FLAG)::NUMERIC(3,0) AS WALK_IN_FLAG, A.PRE_CHECK_IN_FLAG, (A.REBOOKED_FLAG)::NUMERIC(3,0) AS REBOOK_FLAG, (A.NO_SHOW_FLAG)::NUMERIC(3,0) AS NO_SHOW_FLAG, A.DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.APPT_CHECK_IN_TSTMP, A.APPT_CHECK_OUT_TSTMP, (A.APPT_COMPLETE_FLAG)::NUMERIC(3,0) AS APPT_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, (A.APPT_CANCEL_FLAG)::NUMERIC(9,0) AS APPT_CANCEL_FLAG, A.APPT_CANCELLATION_CHANNEL, A.APPT_CANCELLED_BY, INT4(A.APPT_SVCS_CANCEL_REASON_GID) AS APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, INT4(A.APPT_SDS_CANCEL_REASON_ID) AS APPT_SRC_CANCEL_REASON_ID, A.APPT_SDS_CANCEL_REASON_DESC AS APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, (A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME)::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_FIRST_NAME, (A.APPT_CANCELLED_EMPLOYEE_LAST_NAME)::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_LAST_NAME, (A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME)::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, A.PRIMARY_SERVICE_PRODUCT_ID, A.APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, A.APPT_PAYMENT_TSTMP, A.APPT_PAYMENT_AMT, INT4(A.APPT_SVCS_PAYMENT_METHOD_GID) AS APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, CASE WHEN (A.PAYMENT_ORIGIN NOTNULL) THEN UPPER(A.PAYMENT_ORIGIN) ELSE 'POS'::"VARCHAR" END AS SRC_PAYMENT_ORIGIN, SSR.PRISM_START_DT, B.LAST_LOAD_START_TSTMP, A.EXCH_RATE_PCT, A.WEIGHT_IN_LBS FROM (((ADMIN.SDS_WORK_ORDER_RPT A LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON ((A.LOCATION_ID = SSR.LOCATION_ID))) LEFT JOIN ADMIN.SDS_ORDER SO ON ((SO.SDS_ORDER_ID = A.SDS_ORDER_ID))) LEFT JOIN ADMIN.SVCS_INFA_LOAD_CTRL B ON ((B.SVCS_SRC_CD = 'PRISM'::"VARCHAR"))))) A LEFT JOIN ADMIN.SVCS_CUSTOMER_FIRST_APPT CUST ON ((A.SVCS_CUSTOMER_GID = CUST.SVCS_CUSTOMER_GID))) LEFT JOIN ADMIN.SVCS_PET_FIRST_APPT PET ON ((A.SVCS_PET_GID = PET.SVCS_PET_GID)));

\echo
\echo *****  Creating view:  "SVCS_APPT_SERVICE_RPT_VW"

CREATE or replace VIEW  SVCS_APPT_SERVICE_RPT_VW
(
     SVCS_SRC_CD,
     SRC_APPT_ID,
     SRC_APPT_SERVICE_ID,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     SRC_ORDER_ID,
     SRC_WEB_SERVICE_ORDER_NBR,
     SRC_REDEMPTION_ID,
     LOCATION_ID,
     SVCS_SERVICE_LOCATION_TYPE,
     PRODUCT_ID,
     UPC_ID,
     PRIMARY_SERVICE_FLAG,
     SRC_INTERNAL_TAX_CLASS,
     SRC_EXTERNAL_TAX_CD,
     SVCS_SERVICE_SUB_CATEGORY_GID,
     SVCS_SERVICE_SUB_CATEGORY_DESC,
     SRC_SERVICE_SUB_CATEGORY_ID,
     SRC_SERVICE_SUB_CATEGORY_DESC,
     APPT_DT,
     APPT_TSTMP,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SRC_APPT_STATUS_ID,
     SRC_APPT_STATUS_DESC,
     SVCS_APPT_CREATION_CHANNEL,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SRC_ORDER_STATUS_ID,
     SRC_ORDER_STATUS_DESC,
     SRC_ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SRC_SERVICE_CATEGORY_ID,
     SRC_SERVICE_CATEGORY_DESC,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_ID,
     SRC_CUSTOMER_FIRST_NAME,
     SRC_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_PHONE_NBR,
     SRC_CUSTOMER_EMAIL_ADDR,
     SRC_CUSTOMER_ADDR1,
     SRC_CUSTOMER_ADDR2,
     SRC_CUSTOMER_CITY,
     SRC_CUSTOMER_STATE,
     SRC_CUSTOMER_POSTAL_CD,
     SRC_CUSTOMER_POSTAL_CD_EXT,
     SRC_CUSTOMER_COUNTRY_CD,
     SRC_CUSTOMER_DO_NOT_BOOKED_FLAG,
     SRC_CUSTOMER_DO_NOT_BOOKED_REASON,
     SRC_CUSTOMER_LOYALTY_FLAG,
     SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG,
     SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     SRC_RECEIVE_TEXT_NOTIFICATION_FLAG,
     SRC_RECEIVE_PUSH_NOTIFICATION_FLAG,
     SRC_REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     CUSTOMER_FIRST_SERVICES_APPT_FLAG,
     CUSTOMER_FIRST_GROOMING_APPT_FLAG,
     CUSTOMER_FIRST_HOTEL_APPT_FLAG,
     CUSTOMER_FIRST_DDC_APPT_FLAG,
     CUSTOMER_FIRST_TRAINING_APPT_FLAG,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     SRC_PET_ID,
     SRC_PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     SRC_PET_SPECIES_ID,
     SRC_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     SRC_PET_GENDER_ID,
     SRC_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     SRC_PET_BREED_ID,
     SRC_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     SRC_PET_COLOR_ID,
     SRC_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     SRC_PET_CREATE_TSTMP,
     BOARDED_GUEST_FLAG,
     PET_FIRST_SERVICES_APPT_FLAG,
     PET_FIRST_GROOMING_APPT_FLAG,
     PET_FIRST_HOTEL_APPT_FLAG,
     PET_FIRST_DDC_APPT_FLAG,
     PET_FIRST_TRAINING_APPT_FLAG,
     WEIGHT_IN_LBS,
     CC_APPT_CREATE_TSTMP,
     CREATED_CC_AGENT_NAME,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SRC_EMPLOYEE_GROUP_ID,
     REQUESTED_SRC_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SRC_EMPLOYEE_GROUP_ID,
     ASSIGNED_SRC_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_SERVICE_CREATE_TSTMP,
     APPT_SERVICE_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_SERVICE_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     PREPAID_FLAG,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOK_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     SCHED_APPT_SERVICE_START_TSTMP,
     SCHED_APPT_SERVICE_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_SERVICE_START_TSTMP,
     APPT_SERVICE_END_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_SERVICE_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_SERVICE_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_SERVICE_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_SRC_CANCEL_REASON_ID,
     APPT_SRC_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_SERVICE_ITEM_QTY,
     ORIG_UNIT_PRICE_AMT,
     LIST_PRICE_AMT,
     FINAL_UNIT_PRICE_AMT,
     TOTAL_GROOM_PAY_PRICE_AMT,
     SVCS_PRICE_OVERRIDE_REASON_GID,
     SVCS_PRICE_OVERRIDE_REASON_DESC,
     SRC_PRICE_OVERRIDE_REASON_ID,
     SRC_PRICE_OVERRIDE_REASON_DESC,
     APPT_SERVICE_PRICE_OVERRIDE_TSTMP,
     EMPLOYEE_COMMISSION_RATE_PCT,
     EMPLOYEE_COMMISSION_AMT,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     SRC_PAYMENT_ORIGIN,
     PRISM_START_DT,
     LAST_LOAD_START_TSTMP,
     EXCH_RATE_PCT
) AS
SELECT A.SVCS_SRC_CD, A.SRC_APPT_ID, A.SRC_APPT_SERVICE_ID, A.PETM_POS_INVOICE_ID, A.INVOICE_CREATE_TSTMP, A.SRC_ORDER_ID, A.SRC_WEB_SERVICE_ORDER_NBR, A.SRC_REDEMPTION_ID, A.LOCATION_ID, A.SVCS_SERVICE_LOCATION_TYPE, A.PRODUCT_ID, A.UPC_ID, A.PRIMARY_SERVICE_FLAG, A.SRC_INTERNAL_TAX_CLASS, A.SRC_EXTERNAL_TAX_CD, A.SVCS_SERVICE_SUB_CATEGORY_GID, A.SVCS_SERVICE_SUB_CATEGORY_DESC, A.SRC_SERVICE_SUB_CATEGORY_ID, A.SRC_SERVICE_SUB_CATEGORY_DESC, A.APPT_DT, A.APPT_TSTMP, A.SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, A.SRC_APPT_STATUS_ID, A.SRC_APPT_STATUS_DESC, A.SVCS_APPT_CREATION_CHANNEL, A.SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, A.SRC_ORDER_STATUS_ID, A.SRC_ORDER_STATUS_DESC, A.SRC_ORDER_VOID_TSTMP, A.ORDER_VOID_REASON, A.SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SRC_SERVICE_CATEGORY_ID, A.SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, A.SVCS_CUSTOMER_FIRST_NAME, A.SVCS_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_ID, A.SRC_CUSTOMER_FIRST_NAME, A.SRC_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_PHONE_NBR, A.SRC_CUSTOMER_EMAIL_ADDR, A.SRC_CUSTOMER_ADDR1, A.SRC_CUSTOMER_ADDR2, A.SRC_CUSTOMER_CITY, A.SRC_CUSTOMER_STATE, A.SRC_CUSTOMER_POSTAL_CD, A.SRC_CUSTOMER_POSTAL_CD_EXT, A.SRC_CUSTOMER_COUNTRY_CD, A.SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, A.SRC_CUSTOMER_DO_NOT_BOOKED_REASON, A.SRC_CUSTOMER_LOYALTY_FLAG, A.SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, A.SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, A.SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, A.SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, A.SRC_REMINDER_CALL_FLAG, A.CUSTOMER_GROOMING_NEW_FLAG, A.CUSTOMER_HOTEL_NEW_FLAG, A.CUSTOMER_DDC_NEW_FLAG, A.CUSTOMER_TRAINING_NEW_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.SERVICES_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_SERVICES_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.GROOMING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_GROOMING_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.HOTEL_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_HOTEL_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.DDC_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_DDC_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = CUST.TRAINING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS CUSTOMER_FIRST_TRAINING_APPT_FLAG, A.SVCS_PET_GID, A.SVCS_PET_NAME, A.SRC_PET_ID, A.SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.SRC_PET_SPECIES_ID, A.SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.SRC_PET_GENDER_ID, A.SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.SRC_PET_BREED_ID, A.SRC_PET_BREED_DESC, A.MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.SRC_PET_COLOR_ID, A.SRC_PET_COLOR_DESC, A.PET_STATUS, A.GROOMING_PET_RATING_DESC, A.HOTEL_PET_RATING_DESC, A.DDC_PET_RATING_DESC, A.TRAINING_PET_RATING_DESC, A.GROOMING_NOTES, A.GROOMING_SERVICE_CARD_ALERT_TEXT, A.PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, A.SRC_PET_CREATE_TSTMP, A.BOARDED_GUEST_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.SERVICES_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_SERVICES_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.GROOMING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_GROOMING_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.HOTEL_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_HOTEL_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.DDC_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_DDC_APPT_FLAG, CASE WHEN (A.SRC_APPT_ID = PET.TRAINING_SRC_APPT_ID) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END AS PET_FIRST_TRAINING_APPT_FLAG, A.WEIGHT_IN_LBS, A.CC_APPT_CREATE_TSTMP, A.CREATED_CC_AGENT_NAME, A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, A.REQUESTED_EMPLOYEE_FIRST_NAME, A.REQUESTED_EMPLOYEE_LAST_NAME, A.REQUESTED_EMPLOYEE_DISPLAY_NAME, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, A.ASSIGNED_EMPLOYEE_ID, A.ASSIGNED_EMPLOYEE_FIRST_NAME, A.ASSIGNED_EMPLOYEE_LAST_NAME, A.ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, A.APPT_SERVICE_CREATE_TSTMP, A.APPT_SERVICE_LAST_MODIFY_TSTMP, A.APPT_UPDATE_FLAG, A.APPT_SERVICE_UPDATE_FLAG, A.APPT_CONFIRMED_TSTMP, A.APPT_CONFIRMATION_CHANNEL, A.APPT_CONFIRMED_BY, A.PREPAID_FLAG, A.MANUAL_APPOINTMENT_FLAG, A.WALK_IN_FLAG, A.PRE_CHECK_IN_FLAG, A.REBOOK_FLAG, A.NO_SHOW_FLAG, A.DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.SCHED_APPT_SERVICE_START_TSTMP, A.SCHED_APPT_SERVICE_END_TSTMP, A.APPT_CHECK_IN_TSTMP, A.APPT_CHECK_OUT_TSTMP, A.APPT_SERVICE_START_TSTMP, A.APPT_SERVICE_END_TSTMP, A.APPT_COMPLETE_FLAG, A.APPT_SERVICE_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, A.APPT_SERVICE_CANCEL_TSTMP, A.APPT_CANCEL_FLAG, A.APPT_SERVICE_CANCEL_FLAG, A.APPT_CANCELLATION_CHANNEL, A.APPT_CANCELLED_BY, A.APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, A.APPT_SRC_CANCEL_REASON_ID, A.APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, A.APPT_CANCELLED_EMPLOYEE_LAST_NAME, A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, A.APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, A.APPT_SERVICE_ITEM_QTY, A.ORIG_UNIT_PRICE_AMT, A.LIST_PRICE_AMT, A.FINAL_UNIT_PRICE_AMT, A.TOTAL_GROOM_PAY_PRICE_AMT, A.SVCS_PRICE_OVERRIDE_REASON_GID, A.SVCS_PRICE_OVERRIDE_REASON_DESC, A.SRC_PRICE_OVERRIDE_REASON_ID, A.SRC_PRICE_OVERRIDE_REASON_DESC, A.APPT_SERVICE_PRICE_OVERRIDE_TSTMP, A.EMPLOYEE_COMMISSION_RATE_PCT, A.EMPLOYEE_COMMISSION_AMT, A.APPT_PAYMENT_TSTMP, A.APPT_PAYMENT_AMT, A.APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, A.SRC_PAYMENT_ORIGIN, A.PRISM_START_DT, A.LAST_LOAD_START_TSTMP, A.EXCH_RATE_PCT FROM (((((SELECT ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.SMS_APPOINTMENT_ID AS SRC_APPT_ID, A.SMS_APPT_SERVICE_ID AS SRC_APPT_SERVICE_ID, A.PETM_POS_INVOICE_ID, NULL::"TIMESTAMP" AS INVOICE_CREATE_TSTMP, A.SMS_ORDER_ID AS SRC_ORDER_ID, (NULL::"VARCHAR")::VARCHAR(30) AS SRC_WEB_SERVICE_ORDER_NBR, (NULL::"VARCHAR")::VARCHAR(18) AS SRC_REDEMPTION_ID, A.LOCATION_ID, ('Salon'::"VARCHAR")::VARCHAR(50) AS SVCS_SERVICE_LOCATION_TYPE, A.PRODUCT_ID, A.UPC_ID, ("NUMERIC"(FLOAT8(A.PRIMARY_SERVICE_FLAG)))::NUMERIC(38,6) AS PRIMARY_SERVICE_FLAG, (NULL::"VARCHAR")::VARCHAR(25) AS SRC_INTERNAL_TAX_CLASS, (NULL::"VARCHAR")::VARCHAR(25) AS SRC_EXTERNAL_TAX_CD, A.SVCS_SERVICE_SUB_CATEGORY_GID, A.SVCS_SERVICE_SUB_CATEGORY_DESC, A.SMS_SERVICE_SUBCAT_ID AS SRC_SERVICE_SUB_CATEGORY_ID, A.SMS_SERVICE_SUBCAT_DESC AS SRC_SERVICE_SUB_CATEGORY_DESC, A.SMS_APPOINTMENT_DT AS APPT_DT, A.SMS_APPOINTMENT_TSTMP AS APPT_TSTMP, A.SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, INT4(A.SMS_APPT_STATUS_ID) AS SRC_APPT_STATUS_ID, A.SMS_APPT_STATUS_DESC AS SRC_APPT_STATUS_DESC, CASE WHEN ((UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'IN-STORE'::"VARCHAR") OR (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'STORE'::"VARCHAR")) THEN 'In-Store'::"VARCHAR" WHEN ((UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR") OR (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'ONLINE MOBILE'::"VARCHAR")) THEN 'Digital'::"VARCHAR" WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN 'SRC'::"VARCHAR" WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'OTHER'::"VARCHAR") THEN 'Other'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SVCS_APPT_CREATION_CHANNEL, A.SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, INT4(A.SMS_ORDER_STATUS_ID) AS SRC_ORDER_STATUS_ID, A.SMS_ORDER_STATUS_DESC AS SRC_ORDER_STATUS_DESC, NULL::"TIMESTAMP" AS SRC_ORDER_VOID_TSTMP, (NULL::"VARCHAR")::VARCHAR(256) AS ORDER_VOID_REASON, A.SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SMS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, A.SMS_SERVICE_CATEGORY_DESC AS SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, A.SVCS_CUSTOMER_FIRST_NAME, A.SVCS_CUSTOMER_LAST_NAME, A.SMS_CUSTOMER_ID AS SRC_CUSTOMER_ID, A.SMS_CUSTOMER_FIRST_NAME AS SRC_CUSTOMER_FIRST_NAME, A.SMS_CUSTOMER_LAST_NAME AS SRC_CUSTOMER_LAST_NAME, A.SMS_CUSTOMER_PHONE_NBR AS SRC_CUSTOMER_PHONE_NBR, (A.SMS_CUSTOMER_EMAIL_ADDR)::VARCHAR(255) AS SRC_CUSTOMER_EMAIL_ADDR, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR1, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR2, (NULL::"VARCHAR")::VARCHAR(40) AS SRC_CUSTOMER_CITY, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_STATE, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD_EXT, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_COUNTRY_CD, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_DO_NOT_BOOKED_REASON, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_LOYALTY_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, ("NUMERIC"(A.SMS_REMINDER_CALL_FLAG, 65552))::NUMERIC(5,4) AS SRC_REMINDER_CALL_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_GROOMING_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_HOTEL_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_DDC_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_TRAINING_NEW_FLAG, A.SVCS_PET_GID, A.SVCS_PET_NAME, A.SMS_PET_ID AS SRC_PET_ID, (A.SMS_PET_NAME)::VARCHAR(70) AS SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.SMS_PET_SPECIES_ID AS SRC_PET_SPECIES_ID, A.SMS_PET_SPECIES_DESC AS SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.SMS_PET_GENDER_ID AS SRC_PET_GENDER_ID, A.SMS_PET_GENDER_DESC AS SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.SMS_PET_BREED_ID AS SRC_PET_BREED_ID, A.SMS_PET_BREED_DESC AS SRC_PET_BREED_DESC, ("NUMERIC"(A.MIXED_BREED_FLAG))::NUMERIC(3,0) AS MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.SMS_PET_COLOR_ID AS SRC_PET_COLOR_ID, A.SMS_PET_COLOR_DESC AS SRC_PET_COLOR_DESC, (A.SMS_PET_STATUS_DESC)::VARCHAR(50) AS PET_STATUS, (A.SMS_GROOM_RATING)::VARCHAR(30) AS GROOMING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS HOTEL_PET_RATING_DESC, (A.SMS_DAYCAMP_RATING)::VARCHAR(30) AS DDC_PET_RATING_DESC, (A.SMS_TRAIN_RATING)::VARCHAR(30) AS TRAINING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_NOTES, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_SERVICE_CARD_ALERT_TEXT, A.SMS_PET_BIRTH_DT AS PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, A.SMS_PET_CREATE_TSTMP AS SRC_PET_CREATE_TSTMP, ("NUMERIC"(CASE WHEN (UPPER(A.SMS_ROOM_DESC) = 'HOTEL GUEST'::"VARCHAR") THEN 1 ELSE 0 END))::NUMERIC(9,0) AS BOARDED_GUEST_FLAG, CASE WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN A.APPT_CREATE_TSTMP ELSE NULL::"TIMESTAMP" END AS CC_APPT_CREATE_TSTMP, CASE WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN C.CC_AGENT_NAME ELSE NULL::"VARCHAR" END AS CREATED_CC_AGENT_NAME, A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SMS_EMPLOYEE_GROUP_ID AS REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SMS_EMPLOYEE_GROUP_DESC AS REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, A.REQUESTED_EMPLOYEE_FIRST_NAME, A.REQUESTED_EMPLOYEE_LAST_NAME, A.REQUESTED_EMPLOYEE_DISPLAY_NAME, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SMS_EMPLOYEE_GROUP_ID AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SMS_EMPLOYEE_GROUP_DESC AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, INT8(A.ASSIGNED_EMPLOYEE_ID) AS ASSIGNED_EMPLOYEE_ID, A.ASSIGNED_EMPLOYEE_FIRST_NAME, A.ASSIGNED_EMPLOYEE_LAST_NAME, A.ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORD_CREATE_TSTMP AS ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, A.APPT_SVC_CREATE_TSTMP AS APPT_SERVICE_CREATE_TSTMP, A.APPT_SVC_LAST_MODIFY_TSTMP AS APPT_SERVICE_LAST_MODIFY_TSTMP, ("NUMERIC"(A.APPT_UPDATE_IND))::NUMERIC(3,0) AS APPT_UPDATE_FLAG, ("NUMERIC"(A.APPT_SVC_UPDATE_IND))::NUMERIC(3,0) AS APPT_SERVICE_UPDATE_FLAG, NULL::"TIMESTAMP" AS APPT_CONFIRMED_TSTMP, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CONFIRMATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CONFIRMED_BY, (NULL::"NUMERIC")::NUMERIC(1,0) AS PREPAID_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS MANUAL_APPOINTMENT_FLAG, ("NUMERIC"(A.WALK_IN_FLAG))::NUMERIC(3,0) AS WALK_IN_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PRE_CHECK_IN_FLAG, ("NUMERIC"(A.REBOOKED_IND))::NUMERIC(3,0) AS REBOOK_FLAG, ("NUMERIC"(A.NO_SHOW_IND))::NUMERIC(3,0) AS NO_SHOW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.SCHED_SERVICE_START_TSTMP AS SCHED_APPT_SERVICE_START_TSTMP, A.SCHED_SERVICE_END_TSTMP AS SCHED_APPT_SERVICE_END_TSTMP, A.CHECK_IN_TSTMP AS APPT_CHECK_IN_TSTMP, A.CHECK_OUT_TSTMP AS APPT_CHECK_OUT_TSTMP, A.SERVICE_START_TSTMP AS APPT_SERVICE_START_TSTMP, A.SERVICE_END_TSTMP AS APPT_SERVICE_END_TSTMP, ("NUMERIC"(A.COMPLETE_IND))::NUMERIC(3,0) AS APPT_COMPLETE_FLAG, ("NUMERIC"(A.SERVICE_COMPLETE_IND))::NUMERIC(3,0) AS APPT_SERVICE_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, A.SERVICE_CANCEL_TSTMP AS APPT_SERVICE_CANCEL_TSTMP, ("NUMERIC"(A.CANCEL_IND))::NUMERIC(3,0) AS APPT_CANCEL_FLAG, ("NUMERIC"(A.SERVICE_CANCEL_IND))::NUMERIC(3,0) AS APPT_SERVICE_CANCEL_FLAG, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CANCELLATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CANCELLED_BY, A.APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, A.SMS_CANCEL_REASON_ID AS APPT_SRC_CANCEL_REASON_ID, A.SMS_CANCEL_REASON_DESC AS APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, A.APPT_CANCELLED_EMPLOYEE_LAST_NAME, A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, (A.APPT_TOTAL_PRICE_AMT)::NUMERIC(18,2) AS APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, INT4(A.APPT_SERVICE_ITEM_QTY) AS APPT_SERVICE_ITEM_QTY, (A.ORIG_PRICE_AMT)::NUMERIC(18,2) AS ORIG_UNIT_PRICE_AMT, (A.ORIG_PRICE_AMT)::NUMERIC(18,2) AS LIST_PRICE_AMT, (A.FINAL_PRICE_AMT)::NUMERIC(18,2) AS FINAL_UNIT_PRICE_AMT, (NULL::"NUMERIC")::NUMERIC(18,2) AS TOTAL_GROOM_PAY_PRICE_AMT, A.SVCS_PRICE_OVERRIDE_REASON_GID, A.SVCS_PRICE_OVERRIDE_REASON_DESC, INT4(A.OVERRIDE_REASON_ID) AS SRC_PRICE_OVERRIDE_REASON_ID, A.PRICE_OVERRIDE_REASON_DESC AS SRC_PRICE_OVERRIDE_REASON_DESC, "TIMESTAMP"(A.APPT_SERVICE_PRICE_OVERRIDE_DT) AS APPT_SERVICE_PRICE_OVERRIDE_TSTMP, (A.EMPLOYEE_COMMISSION_RATE_PCT)::NUMERIC(10,4) AS EMPLOYEE_COMMISSION_RATE_PCT, (A.SMS_COMMISSION_AMT)::NUMERIC(10,2) AS EMPLOYEE_COMMISSION_AMT, A.PAYMENT_TSTMP AS APPT_PAYMENT_TSTMP, (A.PAYMENT_AMT)::NUMERIC(18,2) AS APPT_PAYMENT_AMT, A.APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, ('POS'::"VARCHAR")::VARCHAR(100) AS SRC_PAYMENT_ORIGIN, SSR.PRISM_START_DT, NULL::"TIMESTAMP" AS LAST_LOAD_START_TSTMP, A.EXCH_RATE_PCT, (NULL::"NUMERIC")::NUMERIC(18,2) AS WEIGHT_IN_LBS FROM ((ADMIN.SMS_APPOINTMENT_SERVICE_RPT A LEFT JOIN (SELECT DISTINCT H.SMS_APPOINTMENT_ID, CASE WHEN (X.TP_CC_AGENT_NAME NOTNULL) THEN X.TP_CC_AGENT_NAME WHEN (U.SMS_USER_NAME NOTNULL) THEN U.SMS_USER_NAME ELSE NULL::"VARCHAR" END AS CC_AGENT_NAME FROM ((ADMIN.SMS_APPT_HISTORY H LEFT JOIN ADMIN.SMS_USER U ON ((H.SMS_USER_ID = U.SMS_USER_ID))) LEFT JOIN ADMIN.USR_TP_SMS_USER_XREF X ON ((LOWER(U.SMS_USER_LOGIN) = LOWER(X.SMS_USER_LOGIN)))) WHERE (H.SMS_HISTORY_ACTION_ID = 3)) C ON ((A.SMS_APPOINTMENT_ID = C.SMS_APPOINTMENT_ID))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON ((A.LOCATION_ID = SSR.LOCATION_ID)))) UNION ALL (SELECT ('TP'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, TISR.TP_INVOICE_NBR AS SRC_APPT_ID, INT8(TISR.ITEM_ID) AS SRC_APPT_SERVICE_ID, TIR.TP_BASE_INVOICE_NBR AS PETM_POS_INVOICE_ID, NULL::"TIMESTAMP" AS INVOICE_CREATE_TSTMP, NULL::INT8 AS SRC_ORDER_ID, (NULL::"VARCHAR")::VARCHAR(30) AS SRC_WEB_SERVICE_ORDER_NBR, (NULL::"VARCHAR")::VARCHAR(18) AS SRC_REDEMPTION_ID, TISR.LOCATION_ID, (CASE WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 3) THEN 'Salon'::"VARCHAR" WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 4) THEN 'DDC'::"VARCHAR" WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 5) THEN 'Hotel'::"VARCHAR" WHEN (TIR.SVCS_SERVICE_CATEGORY_GID = 6) THEN 'Training'::"VARCHAR" ELSE NULL::"VARCHAR" END)::VARCHAR(50) AS SVCS_SERVICE_LOCATION_TYPE, TISR.PRODUCT_ID, TISR.UPC_ID, (NULL::"NUMERIC")::NUMERIC(38,6) AS PRIMARY_SERVICE_FLAG, (NULL::"VARCHAR")::VARCHAR(25) AS SRC_INTERNAL_TAX_CLASS, (NULL::"VARCHAR")::VARCHAR(25) AS SRC_EXTERNAL_TAX_CD, NULL::INT4 AS SVCS_SERVICE_SUB_CATEGORY_GID, (NULL::"VARCHAR")::VARCHAR(50) AS SVCS_SERVICE_SUB_CATEGORY_DESC, NULL::INT4 AS SRC_SERVICE_SUB_CATEGORY_ID, (NULL::"VARCHAR")::VARCHAR(50) AS SRC_SERVICE_SUB_CATEGORY_DESC, DATE(TISR.APPT_START_TSTMP) AS APPT_DT, TISR.APPT_START_TSTMP AS APPT_TSTMP, TISR.SVCS_APPT_STATUS_GID, (TISR.SVCS_APPT_STATUS_DESC)::VARCHAR(50) AS SVCS_APPT_STATUS_DESC, TISR.TP_APPT_STATUS_ID AS SRC_APPT_STATUS_ID, (TISR.TP_APPT_STATUS_DESC)::VARCHAR(50) AS SRC_APPT_STATUS_DESC, CASE WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'IN-STORE'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'STORE'::"VARCHAR")) THEN 'In-Store'::"VARCHAR" WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE MOBILE'::"VARCHAR")) THEN 'Digital'::"VARCHAR" WHEN (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN 'SRC'::"VARCHAR" WHEN (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'OTHER'::"VARCHAR") THEN 'Other'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SVCS_APPT_CREATION_CHANNEL, NULL::INT4 AS SVCS_ORDER_STATUS_GID, (NULL::"VARCHAR")::VARCHAR(50) AS SVCS_ORDER_STATUS_DESC, NULL::INT4 AS SRC_ORDER_STATUS_ID, (NULL::"VARCHAR")::VARCHAR(50) AS SRC_ORDER_STATUS_DESC, NULL::"TIMESTAMP" AS SRC_ORDER_VOID_TSTMP, (NULL::"VARCHAR")::VARCHAR(256) AS ORDER_VOID_REASON, TIR.SVCS_SERVICE_CATEGORY_GID, (TIR.SVCS_SERVICE_CATEGORY_DESC)::VARCHAR(50) AS SVCS_SERVICE_CATEGORY_DESC, TIR.SMS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, (TIR.SMS_SERVICE_CATEGORY_DESC)::VARCHAR(50) AS SRC_SERVICE_CATEGORY_DESC, TISR.SVCS_CUSTOMER_GID, (TISR.SVCS_CUSTOMER_FIRST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_FIRST_NAME, (TISR.SVCS_CUSTOMER_LAST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_LAST_NAME, TISR.TP_CUSTOMER_NBR AS SRC_CUSTOMER_ID, (TISR.CUST_FIRST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_FIRST_NAME, (TISR.CUST_LAST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_LAST_NAME, NULL::INT8 AS SRC_CUSTOMER_PHONE_NBR, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_EMAIL_ADDR, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR1, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_ADDR2, (NULL::"VARCHAR")::VARCHAR(40) AS SRC_CUSTOMER_CITY, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_STATE, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD, (NULL::"VARCHAR")::VARCHAR(10) AS SRC_CUSTOMER_POSTAL_CD_EXT, (NULL::"VARCHAR")::VARCHAR(2) AS SRC_CUSTOMER_COUNTRY_CD, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, (NULL::"VARCHAR")::VARCHAR(255) AS SRC_CUSTOMER_DO_NOT_BOOKED_REASON, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_CUSTOMER_LOYALTY_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, (NULL::"NUMERIC")::NUMERIC(5,4) AS SRC_REMINDER_CALL_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_GROOMING_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_HOTEL_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_DDC_NEW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CUSTOMER_TRAINING_NEW_FLAG, TISR.SVCS_PET_GID, (TISR.SVCS_PET_NAME)::VARCHAR(256) AS SVCS_PET_NAME, TISR.TP_PET_NBR AS SRC_PET_ID, (TISR.PET_NAME)::VARCHAR(70) AS SRC_PET_NAME, TISR.PETM_PET_SPECIES_ID, TISR.PETM_PET_SPECIES_DESC, TISR.TP_PET_SPECIES_ID AS SRC_PET_SPECIES_ID, TISR.TP_PET_SPECIES_DESC AS SRC_PET_SPECIES_DESC, TISR.PETM_PET_GENDER_ID, TISR.PETM_PET_GENDER_DESC, TISR.TP_PET_GENDER_ID AS SRC_PET_GENDER_ID, TISR.TP_PET_GENDER_DESC AS SRC_PET_GENDER_DESC, TISR.PETM_PET_BREED_ID, TISR.PETM_PET_BREED_DESC, TISR.TP_PET_BREED_ID AS SRC_PET_BREED_ID, TISR.TP_PET_BREED_DESC AS SRC_PET_BREED_DESC, (TISR.MIXED_BREED_FLAG)::NUMERIC(3,0) AS MIXED_BREED_FLAG, TISR.PETM_PET_COLOR_ID, TISR.PETM_PET_COLOR_DESC, TISR.TP_PET_COLOR_ID AS SRC_PET_COLOR_ID, TISR.TP_PET_COLOR_DESC AS SRC_PET_COLOR_DESC, (NULL::"VARCHAR")::VARCHAR(50) AS PET_STATUS, (NULL::"VARCHAR")::VARCHAR(30) AS GROOMING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS HOTEL_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS DDC_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(30) AS TRAINING_PET_RATING_DESC, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_NOTES, (NULL::"VARCHAR")::VARCHAR(255) AS GROOMING_SERVICE_CARD_ALERT_TEXT, "TIMESTAMP"(TISR.PET_BIRTH_DT) AS PET_BIRTH_DT, TISR.BORDETELLA_EXP_DT, TISR.RABIES_EXP_DT, TISR.DISTEMPER_EXP_DT, TISR.PARVOVIRUS_EXP_DT, TISR.PARAINFLUENZA_EXP_DT, TISR.FVRCCP_EXP_DT, "TIMESTAMP"(TISR.PET_CREATE_DT) AS SRC_PET_CREATE_TSTMP, (NULL::"NUMERIC")::NUMERIC(9,0) AS BOARDED_GUEST_FLAG, CASE WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR")) THEN TISR.CC_APPT_CREATE_TSTMP ELSE NULL::"TIMESTAMP" END AS CC_APPT_CREATE_TSTMP, (CASE WHEN ((UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") OR (UPPER(BTRIM(TIR.APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR")) THEN C.TP_CC_AGENT_NAME ELSE NULL::"VARCHAR" END)::VARCHAR(257) AS CREATED_CC_AGENT_NAME, NULL::INT4 AS REQUESTED_SVCS_EMPLOYEE_GROUP_GID, (NULL::"VARCHAR")::VARCHAR(50) AS REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, NULL::INT4 AS REQUESTED_SRC_EMPLOYEE_GROUP_ID, (NULL::"VARCHAR")::VARCHAR(50) AS REQUESTED_SRC_EMPLOYEE_GROUP_DESC, NULL::INT4 AS REQUESTED_EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(256) AS REQUESTED_EMPLOYEE_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS REQUESTED_EMPLOYEE_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS REQUESTED_EMPLOYEE_DISPLAY_NAME, NULL::INT4 AS ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, (NULL::"VARCHAR")::VARCHAR(50) AS ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, NULL::INT4 AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, (NULL::"VARCHAR")::VARCHAR(50) AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, TISR.TP_EMPLOYEE_ID AS ASSIGNED_EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(256) AS ASSIGNED_EMPLOYEE_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS ASSIGNED_EMPLOYEE_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS ASSIGNED_EMPLOYEE_DISPLAY_NAME, NULL::"TIMESTAMP" AS ORDER_CREATE_TSTMP, TIR.RESERV_CREATE_DT AS APPT_CREATE_TSTMP, TIR.RESERV_LAST_UPDATE_DT AS APPT_LAST_MODIFY_TSTMP, TISR.CREATE_DT AS APPT_SERVICE_CREATE_TSTMP, TISR.RESERV_LAST_UPDATE_DT AS APPT_SERVICE_LAST_MODIFY_TSTMP, (CASE WHEN (TIR.RESERV_LAST_UPDATE_DT NOTNULL) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS APPT_UPDATE_FLAG, (CASE WHEN (TISR.RESERV_LAST_UPDATE_DT NOTNULL) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS APPT_SERVICE_UPDATE_FLAG, NULL::"TIMESTAMP" AS APPT_CONFIRMED_TSTMP, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CONFIRMATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CONFIRMED_BY, (NULL::"NUMERIC")::NUMERIC(1,0) AS PREPAID_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS MANUAL_APPOINTMENT_FLAG, (CASE WHEN (TIR.RESERV_CREATE_DT NOTNULL) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS WALK_IN_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PRE_CHECK_IN_FLAG, ('0'::NUMERIC)::NUMERIC(3,0) AS REBOOK_FLAG, (CASE WHEN (TIR.CANCEL_REASON_ID = 4) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS NO_SHOW_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS DUMMY_APPOINTMENT_FLAG, TIR.APPT_START_TSTMP AS SCHED_APPT_START_TSTMP, TIR.APPT_END_TSTMP AS SCHED_APPT_END_TSTMP, TISR.APPT_START_TSTMP AS SCHED_APPT_SERVICE_START_TSTMP, TISR.APPT_END_TSTMP AS SCHED_APPT_SERVICE_END_TSTMP, TIR.ACTUAL_IN_DT AS APPT_CHECK_IN_TSTMP, TIR.ACTUAL_OUT_DT AS APPT_CHECK_OUT_TSTMP, CASE WHEN (TISR.CANCEL_DT ISNULL) THEN TISR.ACTUAL_IN_DT ELSE NULL::"TIMESTAMP" END AS APPT_SERVICE_START_TSTMP, CASE WHEN (TISR.CANCEL_DT ISNULL) THEN TISR.ACTUAL_OUT_DT ELSE NULL::"TIMESTAMP" END AS APPT_SERVICE_END_TSTMP, (CASE WHEN (TIR.INVOICE_STATE_ID = 3) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS APPT_COMPLETE_FLAG, (CASE WHEN ((TISR.ACTUAL_OUT_DT NOTNULL) AND (TISR.CANCEL_DT ISNULL)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS APPT_SERVICE_COMPLETE_FLAG, TIR.CANCEL_DT AS APPT_CANCEL_TSTMP, TISR.CANCEL_DT AS APPT_SERVICE_CANCEL_TSTMP, (CASE WHEN (TIR.CANCEL_DT ISNULL) THEN '0'::NUMERIC ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END)::NUMERIC(3,0) AS APPT_CANCEL_FLAG, (CASE WHEN (TISR.CANCEL_DT NOTNULL) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END)::NUMERIC(3,0) AS APPT_SERVICE_CANCEL_FLAG, (NULL::"VARCHAR")::VARCHAR(50) AS APPT_CANCELLATION_CHANNEL, (NULL::"VARCHAR")::VARCHAR(255) AS APPT_CANCELLED_BY, TISR.APPT_SVCS_CANCEL_REASON_GID, TISR.APPT_SVCS_CANCEL_REASON_DESC, TISR.CANCEL_REASON_ID AS APPT_SRC_CANCEL_REASON_ID, TISR.CANCEL_REASON_DESC AS APPT_SRC_CANCEL_REASON_DESC, NULL::INT4 AS APPT_CANCELLED_EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, (TIR.TP_EXTENDED_PRICE)::NUMERIC(18,2) AS APPT_TOTAL_PRICE_AMT, TIR.TP_ITEM_QTY AS APPT_TOTAL_ITEM_QTY, INT4(TISR.TP_ITEM_QTY) AS APPT_SERVICE_ITEM_QTY, (TISR.ORIGINAL_ITEM_PRICE)::NUMERIC(18,2) AS ORIG_UNIT_PRICE_AMT, (TISR.ORIGINAL_ITEM_PRICE)::NUMERIC(18,2) AS LIST_PRICE_AMT, (TISR.FINAL_ITEM_PRICE)::NUMERIC(18,2) AS FINAL_UNIT_PRICE_AMT, (NULL::"NUMERIC")::NUMERIC(18,2) AS TOTAL_GROOM_PAY_PRICE_AMT, TISR.SVCS_OVERRIDE_REASON_GID AS SVCS_PRICE_OVERRIDE_REASON_GID, TISR.SVCS_OVERRIDE_REASON_DESC AS SVCS_PRICE_OVERRIDE_REASON_DESC, INT4(TISR.TP_REASON_CODE_ID) AS SRC_PRICE_OVERRIDE_REASON_ID, TISR.TP_REASON_CODE_DESC AS SRC_PRICE_OVERRIDE_REASON_DESC, "TIMESTAMP"(TISR.OVERRIDE_DT) AS APPT_SERVICE_PRICE_OVERRIDE_TSTMP, (NULL::"NUMERIC")::NUMERIC(10,4) AS EMPLOYEE_COMMISSION_RATE_PCT, (NULL::"NUMERIC")::NUMERIC(10,2) AS EMPLOYEE_COMMISSION_AMT, TIR.PAYMENT_DT AS APPT_PAYMENT_TSTMP, (TIR.PAYMENT_AMT)::NUMERIC(18,2) AS APPT_PAYMENT_AMT, 4 AS APPT_SVCS_PAYMENT_METHOD_GID, ('CASH'::"VARCHAR")::VARCHAR(50) AS APPT_SVCS_PAYMENT_METHOD_DESC, ('POS'::"VARCHAR")::VARCHAR(100) AS SRC_PAYMENT_ORIGIN, SSR.PRISM_START_DT, NULL::"TIMESTAMP" AS LAST_LOAD_START_TSTMP, TISR.EXCH_RATE_PCT, (NULL::"NUMERIC")::NUMERIC(18,2) AS WEIGHT_IN_LBS FROM (((ADMIN.TP_INVOICE_RPT TIR JOIN ADMIN.TP_INVOICE_SERVICE_RPT TISR ON ((TIR.TP_INVOICE_NBR = TISR.TP_INVOICE_NBR))) LEFT JOIN (SELECT DISTINCT H.TP_INVOICE_NBR, X.TP_CC_AGENT_NAME FROM ((SELECT H.TP_INVOICE_NBR, H.USER_NAME, H.HISTORY_DT, H.CHANGE_DT, H.TP_HIST_ACTION FROM (ADMIN.TP_HISTORY H JOIN (SELECT TP_HISTORY.TP_INVOICE_NBR, MAX(TP_HISTORY.HISTORY_DT) AS HISTORY_DT FROM ADMIN.TP_HISTORY WHERE (((((TP_HISTORY.TP_INVOICE_NBR NOTNULL) AND (TP_HISTORY.TP_INVOICE_NBR > 0)) AND (TP_HISTORY.HISTORY_DT = TP_HISTORY.CHANGE_DT)) AND (TP_HISTORY.HISTORY_DT > '2013-01-01 00:00:00'::"TIMESTAMP")) AND (LOWER(TP_HISTORY.TP_HIST_ACTION) = 'create'::"VARCHAR")) GROUP BY TP_HISTORY.TP_INVOICE_NBR) HA ON (((H.TP_INVOICE_NBR = HA.TP_INVOICE_NBR) AND (H.HISTORY_DT = HA.HISTORY_DT))))) H LEFT JOIN ADMIN.USR_TP_SMS_USER_XREF X ON ((UPPER(H.USER_NAME) = X.TP_CC_LOGIN))) WHERE ((((((H.TP_INVOICE_NBR NOTNULL) AND (H.TP_INVOICE_NBR > 0)) AND (H.HISTORY_DT = H.CHANGE_DT)) AND (H.HISTORY_DT > '2013-01-01 00:00:00'::"TIMESTAMP")) AND (LOWER(H.TP_HIST_ACTION) = 'create'::"VARCHAR")) AND (X.TP_CC_AGENT_NAME NOTNULL))) C ON ((TISR.TP_INVOICE_NBR = C.TP_INVOICE_NBR))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON ((TISR.LOCATION_ID = SSR.LOCATION_ID))))) UNION ALL (SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.SDS_WORK_ORDER_NBR AS SRC_APPT_ID, A.SDS_ORDER_ITEM_NBR AS SRC_APPT_SERVICE_ID, A.PETM_POS_INVOICE_ID, A.INVOICE_CREATE_TSTMP, A.SDS_ORDER_NBR AS SRC_ORDER_ID, SO.SDS_WEB_SERVICE_ORDER_NBR AS SRC_WEB_SERVICE_ORDER_NBR, A.SDS_REDEMPTION_ID AS SRC_REDEMPTION_ID, A.LOCATION_ID, A.SDS_LOCATION_TYPE, A.PRODUCT_ID, A.UPC_ID, (A.PRIMARY_SERVICE_FLAG)::NUMERIC(38,6) AS PRIMARY_SERVICE_FLAG, A.INTERNAL_TAX_CLASS AS SRC_INTERNAL_TAX_CLASS, A.EXTERNAL_TAX_CD AS SRC_EXTERNAL_TAX_CD, INT4(A.SVCS_SERVICE_SUB_CATEGORY_GID) AS SVCS_SERVICE_SUB_CATEGORY_GID, A.SVCS_SERVICE_SUB_CATEGORY_DESC, A.SDS_SERVICE_SUB_CATEGORY_ID AS SRC_SERVICE_SUB_CATEGORY_ID, A.SDS_SERVICE_SUB_CATEGORY_DESC AS SRC_SERVICE_SUB_CATEGORY_DESC, DATE(A.APPT_TSTMP) AS APPT_DT, A.APPT_TSTMP, INT4(A.SVCS_APPT_STATUS_GID) AS SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, A.SDS_APPT_STATUS_ID AS SRC_APPT_STATUS_ID, A.SDS_APPT_STATUS_DESC AS SRC_APPT_STATUS_DESC, CASE WHEN ((UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'IN-STORE'::"VARCHAR") OR (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'STORE'::"VARCHAR")) THEN 'In-Store'::"VARCHAR" WHEN ((UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR") OR (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'ONLINE MOBILE'::"VARCHAR")) THEN 'Digital'::"VARCHAR" WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN 'SRC'::"VARCHAR" WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'OTHER'::"VARCHAR") THEN 'Other'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SVCS_APPT_CREATION_CHANNEL, INT4(A.SVCS_ORDER_STATUS_GID) AS SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, A.SDS_ORDER_STATUS_ID AS SRC_ORDER_STATUS_ID, A.SDS_ORDER_STATUS_DESC AS SRC_ORDER_STATUS_DESC, A.ORDER_VOID_TSTMP AS SRC_ORDER_VOID_TSTMP, A.ORDER_VOID_REASON, INT4(A.SVCS_SERVICE_CATEGORY_GID) AS SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SDS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, A.SDS_SERVICE_CATEGORY_DESC AS SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, (A.CUSTOMER_FIRST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_FIRST_NAME, (A.CUSTOMER_LAST_NAME)::VARCHAR(512) AS SVCS_CUSTOMER_LAST_NAME, A.PODS_CUSTOMER_ID AS SRC_CUSTOMER_ID, (A.CUSTOMER_FIRST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_FIRST_NAME, (A.CUSTOMER_LAST_NAME)::VARCHAR(128) AS SRC_CUSTOMER_LAST_NAME, A.CUSTOMER_PHONE_NBR AS SRC_CUSTOMER_PHONE_NBR, A.CUSTOMER_EMAIL_ADDR AS SRC_CUSTOMER_EMAIL_ADDR, A.CUSTOMER_ADDR1 AS SRC_CUSTOMER_ADDR1, A.CUSTOMER_ADDR2 AS SRC_CUSTOMER_ADDR2, A.CUSTOMER_CITY AS SRC_CUSTOMER_CITY, A.CUSTOMER_STATE AS SRC_CUSTOMER_STATE, A.CUSTOMER_POSTAL_CD AS SRC_CUSTOMER_POSTAL_CD, A.CUSTOMER_POSTAL_CD_EXT AS SRC_CUSTOMER_POSTAL_CD_EXT, A.CUSTOMER_COUNTRY_CD AS SRC_CUSTOMER_COUNTRY_CD, A.CUSTOMER_DO_NOT_BOOKED_FLAG AS SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, A.CUSTOMER_DO_NOT_BOOKED_REASON AS SRC_CUSTOMER_DO_NOT_BOOKED_REASON, A.CUSTOMER_LOYALTY_FLAG AS SRC_CUSTOMER_LOYALTY_FLAG, A.DIGITAL_LOYALTY_CUSTOMER_FLAG AS SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, A.RECEIVE_EMAIL_NOTIFICATIONS_FLAG AS SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, A.RECEIVE_TEXT_NOTIFICATION_FLAG AS SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, A.RECEIVE_PUSH_NOTIFICATION_FLAG AS SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, (A.REMINDER_CALL_FLAG)::NUMERIC(5,4) AS SRC_REMINDER_CALL_FLAG, A.CUSTOMER_GROOMING_NEW_FLAG, A.CUSTOMER_HOTEL_NEW_FLAG, A.CUSTOMER_DDC_NEW_FLAG, A.CUSTOMER_TRAINING_NEW_FLAG, A.SVCS_PET_GID, (A.PET_NAME)::VARCHAR(256) AS SVCS_PET_NAME, A.PODS_PET_ID AS SRC_PET_ID, A.PET_NAME AS SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.PETM_PET_SPECIES_ID AS SRC_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC AS SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.PETM_PET_GENDER_ID AS SRC_PET_GENDER_ID, A.PETM_PET_GENDER_DESC AS SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.PETM_PET_BREED_ID AS SRC_PET_BREED_ID, A.PETM_PET_BREED_DESC AS SRC_PET_BREED_DESC, (A.MIXED_BREED_FLAG)::NUMERIC(3,0) AS MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.PETM_PET_COLOR_ID AS SRC_PET_COLOR_ID, A.PETM_PET_COLOR_DESC AS SRC_PET_COLOR_DESC, A.PET_STATUS, A.GROOMING_PET_RATING_DESC, A.HOTEL_PET_RATING_DESC, A.DDC_PET_RATING_DESC, A.TRAINING_PET_RATING_DESC, A.GROOMING_NOTES, A.GROOMING_SERVICE_CARD_ALERT_TEXT, "TIMESTAMP"(A.PET_BIRTH_DT) AS PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, A.SDS_PET_CREATE_TSTMP AS SRC_PET_CREATE_TSTMP, (A.BOARDED_GUEST_FLAG)::NUMERIC(9,0) AS BOARDED_GUEST_FLAG, CASE WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN A.APPT_CREATE_TSTMP ELSE NULL::"TIMESTAMP" END AS CC_APPT_CREATE_TSTMP, (CASE WHEN (UPPER(BTRIM(A.SDS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN A.CREATED_SDS_USER_NAME ELSE NULL::"VARCHAR" END)::VARCHAR(257) AS CREATED_CC_AGENT_NAME, INT4(A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID) AS REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SDS_EMPLOYEE_GROUP_ID AS REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SDS_EMPLOYEE_GROUP_DESC AS REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, (A.REQUESTED_EMPLOYEE_FIRST_NAME)::VARCHAR(256) AS REQUESTED_EMPLOYEE_FIRST_NAME, (A.REQUESTED_EMPLOYEE_LAST_NAME)::VARCHAR(256) AS REQUESTED_EMPLOYEE_LAST_NAME, (A.REQUESTED_EMPLOYEE_DISPLAY_NAME)::VARCHAR(256) AS REQUESTED_EMPLOYEE_DISPLAY_NAME, INT4(A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID) AS ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SDS_EMPLOYEE_GROUP_ID AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, INT8(A.ASSIGNED_EMPLOYEE_ID) AS ASSIGNED_EMPLOYEE_ID, (A.ASSIGNED_EMPLOYEE_FIRST_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_FIRST_NAME, (A.ASSIGNED_EMPLOYEE_LAST_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_LAST_NAME, (A.ASSIGNED_EMPLOYEE_DISPLAY_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, A.APPT_SERVICE_CREATE_TSTMP, A.APPT_SERVICE_LAST_MODIFY_TSTMP, (A.APPT_UPDATE_FLAG)::NUMERIC(3,0) AS APPT_UPDATE_FLAG, (A.APPT_SERVICE_UPDATE_FLAG)::NUMERIC(3,0) AS APPT_SERVICE_UPDATE_FLAG, A.APPT_CONFIRMED_TSTMP, A.APPT_CONFIRMATION_CHANNEL, A.APPT_CONFIRMED_BY, A.PREPAID_FLAG, A.MANUAL_APPOINTMENT_FLAG, (A.WALK_IN_FLAG)::NUMERIC(3,0) AS WALK_IN_FLAG, A.PRE_CHECK_IN_FLAG, (A.REBOOKED_FLAG)::NUMERIC(3,0) AS REBOOK_FLAG, (A.NO_SHOW_FLAG)::NUMERIC(3,0) AS NO_SHOW_FLAG, A.DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.SCHED_APPT_SERVICE_START_TSTMP, A.SCHED_APPT_SERVICE_END_TSTMP, A.APPT_CHECK_IN_TSTMP, A.APPT_CHECK_OUT_TSTMP, A.APPT_SERVICE_START_TSTMP, A.APPT_SERVICE_END_TSTMP, (A.APPT_COMPLETE_FLAG)::NUMERIC(3,0) AS APPT_COMPLETE_FLAG, (A.APPT_SERVICE_COMPLETE_FLAG)::NUMERIC(3,0) AS APPT_SERVICE_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, A.APPT_SERVICE_CANCEL_TSTMP, (A.APPT_CANCEL_FLAG)::NUMERIC(3,0) AS APPT_CANCEL_FLAG, (A.APPT_SERVICE_CANCEL_FLAG)::NUMERIC(3,0) AS APPT_SERVICE_CANCEL_FLAG, A.APPT_CANCELLATION_CHANNEL, A.APPT_CANCELLED_BY, INT4(A.APPT_SVCS_CANCEL_REASON_GID) AS APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, INT4(A.APPT_SDS_CANCEL_REASON_ID) AS APPT_SRC_CANCEL_REASON_ID, A.APPT_SDS_CANCEL_REASON_DESC AS APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, (A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME)::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_FIRST_NAME, (A.APPT_CANCELLED_EMPLOYEE_LAST_NAME)::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_LAST_NAME, (A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME)::VARCHAR(256) AS APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, A.APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, A.APPT_SERVICE_ITEM_QTY, A.ORIG_UNIT_PRICE_AMT, A.LIST_PRICE_AMT, A.FINAL_UNIT_PRICE_AMT, A.TOTAL_GROOM_PAY_PRICE_AMT, A.SVCS_PRICE_OVERRIDE_REASON_GID, A.SVCS_PRICE_OVERRIDE_REASON_DESC, A.SDS_PRICE_OVERRIDE_REASON_ID AS SRC_PRICE_OVERRIDE_REASON_ID, A.SDS_PRICE_OVERRIDE_REASON_DESC AS SRC_PRICE_OVERRIDE_REASON_DESC, A.APPT_SERVICE_PRICE_OVERRIDE_TSTMP, (A.EMPLOYEE_COMMISSION_RATE_PCT)::NUMERIC(10,4) AS EMPLOYEE_COMMISSION_RATE_PCT, A.EMPLOYEE_COMMISSION_AMT, A.APPT_PAYMENT_TSTMP, A.APPT_PAYMENT_AMT, A.APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, CASE WHEN (A.PAYMENT_ORIGIN NOTNULL) THEN UPPER(A.PAYMENT_ORIGIN) ELSE 'POS'::"VARCHAR" END AS SRC_PAYMENT_ORIGIN, SSR.PRISM_START_DT, B.LAST_LOAD_START_TSTMP, A.EXCH_RATE_PCT, A.WEIGHT_IN_LBS FROM (((ADMIN.SDS_ORDER_ITEM_RPT A LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON ((A.LOCATION_ID = SSR.LOCATION_ID))) LEFT JOIN ADMIN.SDS_ORDER SO ON ((SO.SDS_ORDER_ID = A.SDS_ORDER_ID))) LEFT JOIN ADMIN.SVCS_INFA_LOAD_CTRL B ON ((B.SVCS_SRC_CD = 'PRISM'::"VARCHAR"))) WHERE (A.PRODUCT_ID NOTNULL))) A LEFT JOIN ADMIN.SVCS_CUSTOMER_FIRST_APPT CUST ON ((A.SVCS_CUSTOMER_GID = CUST.SVCS_CUSTOMER_GID))) LEFT JOIN ADMIN.SVCS_PET_FIRST_APPT PET ON ((A.SVCS_PET_GID = PET.SVCS_PET_GID)));

\echo
\echo *****  Creating view:  "SVCS_APPT_RPT_CRCY_VW"

CREATE or replace VIEW  SVCS_APPT_RPT_CRCY_VW
(
     SVCS_SRC_CD,
     SRC_APPT_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     SRC_BOOKING_NBR,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     SRC_ORDER_ID,
     SRC_WEB_SERVICE_ORDER_NBR,
     SRC_REDEMPTION_ID,
     LOCATION_ID,
     SVCS_SERVICE_LOCATION_TYPE,
     APPT_DT,
     APPT_TSTMP,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SRC_APPT_STATUS_ID,
     SRC_APPT_STATUS_DESC,
     SVCS_APPT_CREATION_CHANNEL,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SRC_ORDER_STATUS_ID,
     SRC_ORDER_STATUS_DESC,
     SRC_ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SRC_SERVICE_CATEGORY_ID,
     SRC_SERVICE_CATEGORY_DESC,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_ID,
     SRC_CUSTOMER_FIRST_NAME,
     SRC_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_PHONE_NBR,
     SRC_CUSTOMER_EMAIL_ADDR,
     SRC_CUSTOMER_ADDR1,
     SRC_CUSTOMER_ADDR2,
     SRC_CUSTOMER_CITY,
     SRC_CUSTOMER_STATE,
     SRC_CUSTOMER_POSTAL_CD,
     SRC_CUSTOMER_POSTAL_CD_EXT,
     SRC_CUSTOMER_COUNTRY_CD,
     SRC_CUSTOMER_DO_NOT_BOOKED_FLAG,
     SRC_CUSTOMER_DO_NOT_BOOKED_REASON,
     SRC_CUSTOMER_LOYALTY_FLAG,
     SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG,
     SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     SRC_RECEIVE_TEXT_NOTIFICATION_FLAG,
     SRC_RECEIVE_PUSH_NOTIFICATION_FLAG,
     SRC_REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     CUSTOMER_FIRST_SERVICES_APPT_FLAG,
     CUSTOMER_FIRST_GROOMING_APPT_FLAG,
     CUSTOMER_FIRST_HOTEL_APPT_FLAG,
     CUSTOMER_FIRST_DDC_APPT_FLAG,
     CUSTOMER_FIRST_TRAINING_APPT_FLAG,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     SRC_PET_ID,
     SRC_PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     SRC_PET_SPECIES_ID,
     SRC_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     SRC_PET_GENDER_ID,
     SRC_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     SRC_PET_BREED_ID,
     SRC_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     SRC_PET_COLOR_ID,
     SRC_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     PET_FIRST_SERVICES_APPT_FLAG,
     PET_FIRST_GROOMING_APPT_FLAG,
     PET_FIRST_HOTEL_APPT_FLAG,
     PET_FIRST_DDC_APPT_FLAG,
     PET_FIRST_TRAINING_APPT_FLAG,
     WEIGHT_IN_LBS,
     CC_APPT_CREATE_TSTMP,
     CREATED_CC_AGENT_NAME,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SRC_EMPLOYEE_GROUP_ID,
     REQUESTED_SRC_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SRC_EMPLOYEE_GROUP_ID,
     ASSIGNED_SRC_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOK_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_SRC_CANCEL_REASON_ID,
     APPT_SRC_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     PRIMARY_SERVICE_PRODUCT_ID,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     SRC_PAYMENT_ORIGIN,
     LAST_LOAD_START_TSTMP,
     PRISM_START_DT,
     EXCH_RATE_PCT
) AS
SELECT A.SVCS_SRC_CD, A.SRC_APPT_ID, B.CURRENCY_TYPE_ID, B.CURRENCY_TYPE_DESC, A.SRC_BOOKING_NBR, A.PETM_POS_INVOICE_ID, A.INVOICE_CREATE_TSTMP, A.SRC_ORDER_ID, A.SRC_WEB_SERVICE_ORDER_NBR, A.SRC_REDEMPTION_ID, A.LOCATION_ID, A.SVCS_SERVICE_LOCATION_TYPE, A.APPT_DT, A.APPT_TSTMP, A.SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, A.SRC_APPT_STATUS_ID, A.SRC_APPT_STATUS_DESC, A.SVCS_APPT_CREATION_CHANNEL, A.SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, A.SRC_ORDER_STATUS_ID, A.SRC_ORDER_STATUS_DESC, A.SRC_ORDER_VOID_TSTMP, A.ORDER_VOID_REASON, A.SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SRC_SERVICE_CATEGORY_ID, A.SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, A.SVCS_CUSTOMER_FIRST_NAME, A.SVCS_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_ID, A.SRC_CUSTOMER_FIRST_NAME, A.SRC_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_PHONE_NBR, A.SRC_CUSTOMER_EMAIL_ADDR, A.SRC_CUSTOMER_ADDR1, A.SRC_CUSTOMER_ADDR2, A.SRC_CUSTOMER_CITY, A.SRC_CUSTOMER_STATE, A.SRC_CUSTOMER_POSTAL_CD, A.SRC_CUSTOMER_POSTAL_CD_EXT, A.SRC_CUSTOMER_COUNTRY_CD, A.SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, A.SRC_CUSTOMER_DO_NOT_BOOKED_REASON, A.SRC_CUSTOMER_LOYALTY_FLAG, A.SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, A.SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, A.SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, A.SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, A.SRC_REMINDER_CALL_FLAG, A.CUSTOMER_GROOMING_NEW_FLAG, A.CUSTOMER_HOTEL_NEW_FLAG, A.CUSTOMER_DDC_NEW_FLAG, A.CUSTOMER_TRAINING_NEW_FLAG, A.CUSTOMER_FIRST_SERVICES_APPT_FLAG, A.CUSTOMER_FIRST_GROOMING_APPT_FLAG, A.CUSTOMER_FIRST_HOTEL_APPT_FLAG, A.CUSTOMER_FIRST_DDC_APPT_FLAG, A.CUSTOMER_FIRST_TRAINING_APPT_FLAG, A.SVCS_PET_GID, A.SVCS_PET_NAME, A.SRC_PET_ID, A.SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.SRC_PET_SPECIES_ID, A.SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.SRC_PET_GENDER_ID, A.SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.SRC_PET_BREED_ID, A.SRC_PET_BREED_DESC, A.MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.SRC_PET_COLOR_ID, A.SRC_PET_COLOR_DESC, A.PET_STATUS, A.GROOMING_PET_RATING_DESC, A.HOTEL_PET_RATING_DESC, A.DDC_PET_RATING_DESC, A.TRAINING_PET_RATING_DESC, A.GROOMING_NOTES, A.GROOMING_SERVICE_CARD_ALERT_TEXT, A.PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, A.PET_FIRST_SERVICES_APPT_FLAG, A.PET_FIRST_GROOMING_APPT_FLAG, A.PET_FIRST_HOTEL_APPT_FLAG, A.PET_FIRST_DDC_APPT_FLAG, A.PET_FIRST_TRAINING_APPT_FLAG, A.WEIGHT_IN_LBS, A.CC_APPT_CREATE_TSTMP, A.CREATED_CC_AGENT_NAME, A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, A.REQUESTED_EMPLOYEE_FIRST_NAME, A.REQUESTED_EMPLOYEE_LAST_NAME, A.REQUESTED_EMPLOYEE_DISPLAY_NAME, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, A.ASSIGNED_EMPLOYEE_ID, A.ASSIGNED_EMPLOYEE_FIRST_NAME, A.ASSIGNED_EMPLOYEE_LAST_NAME, A.ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, A.APPT_UPDATE_FLAG, A.APPT_CONFIRMED_TSTMP, A.APPT_CONFIRMATION_CHANNEL, A.APPT_CONFIRMED_BY, A.MANUAL_APPOINTMENT_FLAG, A.WALK_IN_FLAG, A.PRE_CHECK_IN_FLAG, A.REBOOK_FLAG, A.NO_SHOW_FLAG, A.DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.APPT_CHECK_IN_TSTMP, A.APPT_CHECK_OUT_TSTMP, A.APPT_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, A.APPT_CANCEL_FLAG, A.APPT_CANCELLATION_CHANNEL, A.APPT_CANCELLED_BY, A.APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, A.APPT_SRC_CANCEL_REASON_ID, A.APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, A.APPT_CANCELLED_EMPLOYEE_LAST_NAME, A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, A.PRIMARY_SERVICE_PRODUCT_ID, A.APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, A.APPT_PAYMENT_TSTMP, A.APPT_PAYMENT_AMT, A.APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, A.SRC_PAYMENT_ORIGIN, A.LAST_LOAD_START_TSTMP, A.PRISM_START_DT, CASE WHEN (B.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE A.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM (ADMIN.SVCS_APPT_RPT_VW A CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP B);

\echo
\echo *****  Creating view:  "SVCS_APPT_SERVICE_RPT_CRCY_VW"

CREATE or replace VIEW  SVCS_APPT_SERVICE_RPT_CRCY_VW
(
     SVCS_SRC_CD,
     SRC_APPT_ID,
     SRC_APPT_SERVICE_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     SRC_ORDER_ID,
     SRC_WEB_SERVICE_ORDER_NBR,
     SRC_REDEMPTION_ID,
     LOCATION_ID,
     SVCS_SERVICE_LOCATION_TYPE,
     PRODUCT_ID,
     UPC_ID,
     PRIMARY_SERVICE_FLAG,
     SRC_INTERNAL_TAX_CLASS,
     SRC_EXTERNAL_TAX_CD,
     SVCS_SERVICE_SUB_CATEGORY_GID,
     SVCS_SERVICE_SUB_CATEGORY_DESC,
     SRC_SERVICE_SUB_CATEGORY_ID,
     SRC_SERVICE_SUB_CATEGORY_DESC,
     APPT_DT,
     APPT_TSTMP,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SRC_APPT_STATUS_ID,
     SRC_APPT_STATUS_DESC,
     SVCS_APPT_CREATION_CHANNEL,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SRC_ORDER_STATUS_ID,
     SRC_ORDER_STATUS_DESC,
     SRC_ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SRC_SERVICE_CATEGORY_ID,
     SRC_SERVICE_CATEGORY_DESC,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_ID,
     SRC_CUSTOMER_FIRST_NAME,
     SRC_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_PHONE_NBR,
     SRC_CUSTOMER_EMAIL_ADDR,
     SRC_CUSTOMER_ADDR1,
     SRC_CUSTOMER_ADDR2,
     SRC_CUSTOMER_CITY,
     SRC_CUSTOMER_STATE,
     SRC_CUSTOMER_POSTAL_CD,
     SRC_CUSTOMER_POSTAL_CD_EXT,
     SRC_CUSTOMER_COUNTRY_CD,
     SRC_CUSTOMER_DO_NOT_BOOKED_FLAG,
     SRC_CUSTOMER_DO_NOT_BOOKED_REASON,
     SRC_CUSTOMER_LOYALTY_FLAG,
     SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG,
     SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     SRC_RECEIVE_TEXT_NOTIFICATION_FLAG,
     SRC_RECEIVE_PUSH_NOTIFICATION_FLAG,
     SRC_REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     CUSTOMER_FIRST_SERVICES_APPT_FLAG,
     CUSTOMER_FIRST_GROOMING_APPT_FLAG,
     CUSTOMER_FIRST_HOTEL_APPT_FLAG,
     CUSTOMER_FIRST_DDC_APPT_FLAG,
     CUSTOMER_FIRST_TRAINING_APPT_FLAG,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     SRC_PET_ID,
     SRC_PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     SRC_PET_SPECIES_ID,
     SRC_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     SRC_PET_GENDER_ID,
     SRC_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     SRC_PET_BREED_ID,
     SRC_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     SRC_PET_COLOR_ID,
     SRC_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     SRC_PET_CREATE_TSTMP,
     BOARDED_GUEST_FLAG,
     PET_FIRST_SERVICES_APPT_FLAG,
     PET_FIRST_GROOMING_APPT_FLAG,
     PET_FIRST_HOTEL_APPT_FLAG,
     PET_FIRST_DDC_APPT_FLAG,
     PET_FIRST_TRAINING_APPT_FLAG,
     WEIGHT_IN_LBS,
     CC_APPT_CREATE_TSTMP,
     CREATED_CC_AGENT_NAME,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SRC_EMPLOYEE_GROUP_ID,
     REQUESTED_SRC_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SRC_EMPLOYEE_GROUP_ID,
     ASSIGNED_SRC_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_SERVICE_CREATE_TSTMP,
     APPT_SERVICE_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_SERVICE_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     PREPAID_FLAG,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOK_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     SCHED_APPT_SERVICE_START_TSTMP,
     SCHED_APPT_SERVICE_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_SERVICE_START_TSTMP,
     APPT_SERVICE_END_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_SERVICE_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_SERVICE_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_SERVICE_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_SRC_CANCEL_REASON_ID,
     APPT_SRC_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_SERVICE_ITEM_QTY,
     ORIG_UNIT_PRICE_AMT,
     LIST_PRICE_AMT,
     FINAL_UNIT_PRICE_AMT,
     TOTAL_GROOM_PAY_PRICE_AMT,
     SVCS_PRICE_OVERRIDE_REASON_GID,
     SVCS_PRICE_OVERRIDE_REASON_DESC,
     SRC_PRICE_OVERRIDE_REASON_ID,
     SRC_PRICE_OVERRIDE_REASON_DESC,
     APPT_SERVICE_PRICE_OVERRIDE_TSTMP,
     EMPLOYEE_COMMISSION_RATE_PCT,
     EMPLOYEE_COMMISSION_AMT,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     SRC_PAYMENT_ORIGIN,
     PRISM_START_DT,
     LAST_LOAD_START_TSTMP,
     EXCH_RATE_PCT
) AS
SELECT A.SVCS_SRC_CD, A.SRC_APPT_ID, A.SRC_APPT_SERVICE_ID, B.CURRENCY_TYPE_ID, B.CURRENCY_TYPE_DESC, A.PETM_POS_INVOICE_ID, A.INVOICE_CREATE_TSTMP, A.SRC_ORDER_ID, A.SRC_WEB_SERVICE_ORDER_NBR, A.SRC_REDEMPTION_ID, A.LOCATION_ID, A.SVCS_SERVICE_LOCATION_TYPE, A.PRODUCT_ID, A.UPC_ID, A.PRIMARY_SERVICE_FLAG, A.SRC_INTERNAL_TAX_CLASS, A.SRC_EXTERNAL_TAX_CD, A.SVCS_SERVICE_SUB_CATEGORY_GID, A.SVCS_SERVICE_SUB_CATEGORY_DESC, A.SRC_SERVICE_SUB_CATEGORY_ID, A.SRC_SERVICE_SUB_CATEGORY_DESC, A.APPT_DT, A.APPT_TSTMP, A.SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, A.SRC_APPT_STATUS_ID, A.SRC_APPT_STATUS_DESC, A.SVCS_APPT_CREATION_CHANNEL, A.SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, A.SRC_ORDER_STATUS_ID, A.SRC_ORDER_STATUS_DESC, A.SRC_ORDER_VOID_TSTMP, A.ORDER_VOID_REASON, A.SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, A.SRC_SERVICE_CATEGORY_ID, A.SRC_SERVICE_CATEGORY_DESC, A.SVCS_CUSTOMER_GID, A.SVCS_CUSTOMER_FIRST_NAME, A.SVCS_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_ID, A.SRC_CUSTOMER_FIRST_NAME, A.SRC_CUSTOMER_LAST_NAME, A.SRC_CUSTOMER_PHONE_NBR, A.SRC_CUSTOMER_EMAIL_ADDR, A.SRC_CUSTOMER_ADDR1, A.SRC_CUSTOMER_ADDR2, A.SRC_CUSTOMER_CITY, A.SRC_CUSTOMER_STATE, A.SRC_CUSTOMER_POSTAL_CD, A.SRC_CUSTOMER_POSTAL_CD_EXT, A.SRC_CUSTOMER_COUNTRY_CD, A.SRC_CUSTOMER_DO_NOT_BOOKED_FLAG, A.SRC_CUSTOMER_DO_NOT_BOOKED_REASON, A.SRC_CUSTOMER_LOYALTY_FLAG, A.SRC_DIGITAL_LOYALTY_CUSTOMER_FLAG, A.SRC_RECEIVE_EMAIL_NOTIFICATIONS_FLAG, A.SRC_RECEIVE_TEXT_NOTIFICATION_FLAG, A.SRC_RECEIVE_PUSH_NOTIFICATION_FLAG, A.SRC_REMINDER_CALL_FLAG, A.CUSTOMER_GROOMING_NEW_FLAG, A.CUSTOMER_HOTEL_NEW_FLAG, A.CUSTOMER_DDC_NEW_FLAG, A.CUSTOMER_TRAINING_NEW_FLAG, A.CUSTOMER_FIRST_SERVICES_APPT_FLAG, A.CUSTOMER_FIRST_GROOMING_APPT_FLAG, A.CUSTOMER_FIRST_HOTEL_APPT_FLAG, A.CUSTOMER_FIRST_DDC_APPT_FLAG, A.CUSTOMER_FIRST_TRAINING_APPT_FLAG, A.SVCS_PET_GID, A.SVCS_PET_NAME, A.SRC_PET_ID, A.SRC_PET_NAME, A.PETM_PET_SPECIES_ID, A.PETM_PET_SPECIES_DESC, A.SRC_PET_SPECIES_ID, A.SRC_PET_SPECIES_DESC, A.PETM_PET_GENDER_ID, A.PETM_PET_GENDER_DESC, A.SRC_PET_GENDER_ID, A.SRC_PET_GENDER_DESC, A.PETM_PET_BREED_ID, A.PETM_PET_BREED_DESC, A.SRC_PET_BREED_ID, A.SRC_PET_BREED_DESC, A.MIXED_BREED_FLAG, A.PETM_PET_COLOR_ID, A.PETM_PET_COLOR_DESC, A.SRC_PET_COLOR_ID, A.SRC_PET_COLOR_DESC, A.PET_STATUS, A.GROOMING_PET_RATING_DESC, A.HOTEL_PET_RATING_DESC, A.DDC_PET_RATING_DESC, A.TRAINING_PET_RATING_DESC, A.GROOMING_NOTES, A.GROOMING_SERVICE_CARD_ALERT_TEXT, A.PET_BIRTH_DT, A.BORDETELLA_EXP_DT, A.RABIES_EXP_DT, A.DISTEMPER_EXP_DT, A.PARVOVIRUS_EXP_DT, A.PARAINFLUENZA_EXP_DT, A.FVRCCP_EXP_DT, A.SRC_PET_CREATE_TSTMP, A.BOARDED_GUEST_FLAG, A.PET_FIRST_SERVICES_APPT_FLAG, A.PET_FIRST_GROOMING_APPT_FLAG, A.PET_FIRST_HOTEL_APPT_FLAG, A.PET_FIRST_DDC_APPT_FLAG, A.PET_FIRST_TRAINING_APPT_FLAG, A.WEIGHT_IN_LBS, A.CC_APPT_CREATE_TSTMP, A.CREATED_CC_AGENT_NAME, A.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, A.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, A.REQUESTED_SRC_EMPLOYEE_GROUP_ID, A.REQUESTED_SRC_EMPLOYEE_GROUP_DESC, A.REQUESTED_EMPLOYEE_ID, A.REQUESTED_EMPLOYEE_FIRST_NAME, A.REQUESTED_EMPLOYEE_LAST_NAME, A.REQUESTED_EMPLOYEE_DISPLAY_NAME, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, A.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, A.ASSIGNED_SRC_EMPLOYEE_GROUP_ID, A.ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, A.ASSIGNED_EMPLOYEE_ID, A.ASSIGNED_EMPLOYEE_FIRST_NAME, A.ASSIGNED_EMPLOYEE_LAST_NAME, A.ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.ORDER_CREATE_TSTMP, A.APPT_CREATE_TSTMP, A.APPT_LAST_MODIFY_TSTMP, A.APPT_SERVICE_CREATE_TSTMP, A.APPT_SERVICE_LAST_MODIFY_TSTMP, A.APPT_UPDATE_FLAG, A.APPT_SERVICE_UPDATE_FLAG, A.APPT_CONFIRMED_TSTMP, A.APPT_CONFIRMATION_CHANNEL, A.APPT_CONFIRMED_BY, A.PREPAID_FLAG, A.MANUAL_APPOINTMENT_FLAG, A.WALK_IN_FLAG, A.PRE_CHECK_IN_FLAG, A.REBOOK_FLAG, A.NO_SHOW_FLAG, A.DUMMY_APPOINTMENT_FLAG, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, A.SCHED_APPT_SERVICE_START_TSTMP, A.SCHED_APPT_SERVICE_END_TSTMP, A.APPT_CHECK_IN_TSTMP, A.APPT_CHECK_OUT_TSTMP, A.APPT_SERVICE_START_TSTMP, A.APPT_SERVICE_END_TSTMP, A.APPT_COMPLETE_FLAG, A.APPT_SERVICE_COMPLETE_FLAG, A.APPT_CANCEL_TSTMP, A.APPT_SERVICE_CANCEL_TSTMP, A.APPT_CANCEL_FLAG, A.APPT_SERVICE_CANCEL_FLAG, A.APPT_CANCELLATION_CHANNEL, A.APPT_CANCELLED_BY, A.APPT_SVCS_CANCEL_REASON_GID, A.APPT_SVCS_CANCEL_REASON_DESC, A.APPT_SRC_CANCEL_REASON_ID, A.APPT_SRC_CANCEL_REASON_DESC, A.APPT_CANCELLED_EMPLOYEE_ID, A.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, A.APPT_CANCELLED_EMPLOYEE_LAST_NAME, A.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, A.APPT_TOTAL_PRICE_AMT, A.APPT_TOTAL_ITEM_QTY, A.APPT_SERVICE_ITEM_QTY, A.ORIG_UNIT_PRICE_AMT, A.LIST_PRICE_AMT, A.FINAL_UNIT_PRICE_AMT, A.TOTAL_GROOM_PAY_PRICE_AMT, A.SVCS_PRICE_OVERRIDE_REASON_GID, A.SVCS_PRICE_OVERRIDE_REASON_DESC, A.SRC_PRICE_OVERRIDE_REASON_ID, A.SRC_PRICE_OVERRIDE_REASON_DESC, A.APPT_SERVICE_PRICE_OVERRIDE_TSTMP, A.EMPLOYEE_COMMISSION_RATE_PCT, A.EMPLOYEE_COMMISSION_AMT, A.APPT_PAYMENT_TSTMP, A.APPT_PAYMENT_AMT, A.APPT_SVCS_PAYMENT_METHOD_GID, A.APPT_SVCS_PAYMENT_METHOD_DESC, A.SRC_PAYMENT_ORIGIN, A.PRISM_START_DT, A.LAST_LOAD_START_TSTMP, CASE WHEN (B.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE A.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM (ADMIN.SVCS_APPT_SERVICE_RPT_VW A CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP B);

\echo
\echo *****  Creating view:  "SVCS_APPT_STATUS_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_APPT_STATUS_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_APPT_STATUS_ID,
     SRC_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_APPT_STATUS_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") THEN SMS.SMS_APPT_STATUS_DESC WHEN (XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") THEN TP.SMS_APPT_STATUS_DESC WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN SDS.SDS_APPT_STATUS_DESC ELSE NULL::"VARCHAR" END AS SRC_APPT_STATUS_DESC, XREF.SVCS_APPT_STATUS_GID, SVCS.SVCS_APPT_STATUS_DESC FROM ((((ADMIN.SVCS_APPT_STATUS SVCS JOIN ADMIN.SVCS_APPT_STATUS_XREF XREF ON ((SVCS.SVCS_APPT_STATUS_GID = XREF.SVCS_APPT_STATUS_GID))) LEFT JOIN ADMIN.SMS_APPOINTMENT_STATUS SMS ON (((XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") AND (XREF.SRC_APPT_STATUS_ID = SMS.SMS_APPT_STATUS_ID)))) LEFT JOIN ADMIN.SDS_APPT_STATUS SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_APPT_STATUS_ID = SDS.SDS_APPT_STATUS_GID)))) LEFT JOIN ADMIN.SMS_APPOINTMENT_STATUS TP ON (((XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") AND (XREF.SRC_APPT_STATUS_ID = TP.SMS_APPT_STATUS_ID))));

\echo
\echo *****  Creating view:  "SVCS_CANCEL_REASON_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_CANCEL_REASON_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_CANCEL_REASON_ID,
     SRC_CANCEL_REASON_DESC,
     SVCS_CANCEL_REASON_GID,
     SVCS_CANCEL_REASON_DESC
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_CANCEL_REASON_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") THEN SMS.SMS_CANCEL_REASON_TX WHEN (XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") THEN TP.CANCEL_REASON_TX WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN SDS.SDS_CANCEL_REASON_DESC ELSE NULL::"VARCHAR" END AS SRC_CANCEL_REASON_DESC, XREF.SVCS_CANCEL_REASON_GID, SVCS.SVCS_CANCEL_REASON_DESC FROM ((((ADMIN.SVCS_CANCEL_REASON SVCS JOIN ADMIN.SVCS_CANCEL_REASON_XREF XREF ON ((SVCS.SVCS_CANCEL_REASON_GID = XREF.SVCS_CANCEL_REASON_GID))) LEFT JOIN ADMIN.SMS_CANCEL_REASON SMS ON (((XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") AND (XREF.SRC_CANCEL_REASON_ID = SMS.SMS_CANCEL_REASON_ID)))) LEFT JOIN ADMIN.TP_CANCEL_REASON TP ON (((XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") AND (XREF.SRC_CANCEL_REASON_ID = TP.CANCEL_REASON_ID)))) LEFT JOIN ADMIN.SDS_CANCEL_REASON SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_CANCEL_REASON_ID = SDS.SDS_CANCEL_REASON_GID))));

\echo
\echo *****  Creating view:  "SVCS_EMPLOYEE_BLOCKED_TIME_VW"

CREATE or replace VIEW  SVCS_EMPLOYEE_BLOCKED_TIME_VW
(
     DAY_DT,
     SVCS_SRC_CD,
     EMPLOYEE_ID,
     SRC_EMPLOYEE_ID,
     LOCATION_ID,
     BLOCKED_START_TSTMP,
     BLOCKED_END_TSTMP,
     BLOCKED_TIME_MINS,
     WEB_BOOKING_ONLY_FLAG,
     BLOCKED_TIME_NOTES,
     SRC_CREATE_USER_ID
) AS
(SELECT SMS_SCHEDULE_BLOCKED_TIME.DAY_DT, ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, SMS_SCHEDULE_BLOCKED_TIME.EMPLOYEE_ID, ("VARCHAR"(SMS_SCHEDULE_BLOCKED_TIME.SMS_EMPLOYEE_ID))::VARCHAR(22) AS SRC_EMPLOYEE_ID, SMS_SCHEDULE_BLOCKED_TIME.LOCATION_ID, SMS_SCHEDULE_BLOCKED_TIME.START_TIME_ID AS BLOCKED_START_TSTMP, SMS_SCHEDULE_BLOCKED_TIME.END_TIME_ID AS BLOCKED_END_TSTMP, INT8(SMS_SCHEDULE_BLOCKED_TIME.TIME_BLOCK_MINS) AS BLOCKED_TIME_MINS, SMS_SCHEDULE_BLOCKED_TIME.WEB_BOOKING_ONLY_FLAG, SMS_SCHEDULE_BLOCKED_TIME.BLOCKED_TIME_NOTES, ("VARCHAR"(SMS_SCHEDULE_BLOCKED_TIME.CREATE_USER_ID))::VARCHAR(22) AS SRC_CREATE_USER_ID FROM ADMIN.SMS_SCHEDULE_BLOCKED_TIME WHERE (SMS_SCHEDULE_BLOCKED_TIME.DELETE_TSTMP ISNULL)) UNION ALL (SELECT DATE(SRA.ABSENCE_START_TSTMP) AS DAY_DT, ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, EMP.EMPLOYEE_ID, (EMP.SDS_EMPLOYEE_ID)::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, SRA.ABSENCE_START_TSTMP AS BLOCKED_START_TSTMP, SRA.ABSENCE_END_TSTMP AS BLOCKED_END_TSTMP, (DATE_PART('EPOCH'::"VARCHAR", (SRA.ABSENCE_END_TSTMP - SRA.ABSENCE_START_TSTMP)) / 60) AS BLOCKED_TIME_MINS, NULL::INT8 AS WEB_BOOKING_ONLY_FLAG, (SRA.SDS_RESOURCE_ABSENCE_TYPE)::VARCHAR(250) AS BLOCKED_TIME_NOTES, (SRA.SDS_CREATED_BY_ID)::VARCHAR(22) AS SRC_CREATE_USER_ID FROM (ADMIN.SDS_RESOURCE_ABSENCE SRA JOIN ADMIN.SDS_EMPLOYEE EMP ON ((SRA.SDS_RESOURCE_ID = EMP.SDS_EMPLOYEE_ID))) WHERE (SRA.DELETED_FLAG = '0'::NUMERIC));

\echo
\echo *****  Creating view:  "SVCS_EMPLOYEE_GROUP_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_EMPLOYEE_GROUP_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_EMPLOYEE_GROUP_ID,
     SRC_EMPLOYEE_GROUP_DESC,
     SVCS_EMPLOYEE_GROUP_GID,
     SVCS_EMPLOYEE_GROUP_DESC,
     EMPLOYEE_GROUP_COMMISSION
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_EMPLOYEE_GROUP_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") THEN SMS.SMS_EMPLOYEE_GROUP_DESC WHEN (XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") THEN TP.POSITION_DESC WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN SDS.SDS_EMPLOYEE_GROUP_NAME ELSE NULL::"VARCHAR" END AS SRC_EMPLOYEE_GROUP_DESC, XREF.SVCS_EMPLOYEE_GROUP_GID, SVCS.SVCS_EMPLOYEE_GROUP_DESC, SVCS.EMPLOYEE_GROUP_COMMISSION FROM ((((ADMIN.SVCS_EMPLOYEE_GROUP SVCS JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF XREF ON ((SVCS.SVCS_EMPLOYEE_GROUP_GID = XREF.SVCS_EMPLOYEE_GROUP_GID))) LEFT JOIN ADMIN.SMS_EMPLOYEE_GROUP SMS ON (((XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") AND (XREF.SRC_EMPLOYEE_GROUP_ID = SMS.SMS_EMPLOYEE_GROUP_ID)))) LEFT JOIN ADMIN.TP_POSITION TP ON (((XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") AND (XREF.SRC_EMPLOYEE_GROUP_ID = TP.POSITION_ID)))) LEFT JOIN (SELECT DISTINCT SDS_EMPLOYEE_GROUP.SDS_EMPLOYEE_GROUP_GID, SDS_EMPLOYEE_GROUP.SDS_EMPLOYEE_GROUP_NAME FROM ADMIN.SDS_EMPLOYEE_GROUP) SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_EMPLOYEE_GROUP_ID = SDS.SDS_EMPLOYEE_GROUP_GID))));

\echo
\echo *****  Creating view:  "SVCS_EMPLOYEE_DAY_VW"

CREATE or replace VIEW  SVCS_EMPLOYEE_DAY_VW
(
     DAY_DT,
     SVCS_SRC_CD,
     SRC_EMPLOYEE_ID,
     LOCATION_ID,
     SRC_USER_ID,
     EMPLOYEE_ID,
     SVCS_EMPLOYEE_GROUP_GID,
     SVCS_EMPLOYEE_GROUP_DESC,
     SRC_EMPLOYEE_GROUP_ID,
     SRC_EMPLOYEE_GROUP_DESC,
     SRC_EMPLOYEE_DISPLAY_NAME,
     EMPLOYEE_FIRST_NAME,
     EMPLOYEE_LAST_NAME,
     EMPLOYEE_STATUS_CD,
     EMPLOYEE_STATUS_DESC,
     EMPLOYEE_TERM_DT,
     MAX_BLOCK_1_CAPACITY,
     MAX_BLOCK_2_CAPACITY,
     MAX_CHECK_IN_PER_HOUR,
     MAX_APPTS,
     MAX_CONCURRENT_APPTS,
     MAX_WEIGHT,
     OLD_MAX_WEIGHT
) AS
(SELECT EMP.DAY_DT, ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, ("VARCHAR"(EMP.SMS_EMPLOYEE_ID))::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, ("VARCHAR"(EMP.SMS_USER_ID))::VARCHAR(22) AS SRC_USER_ID, EMP.EMPLOYEE_ID, EMPX.SVCS_EMPLOYEE_GROUP_GID, EMPX.SVCS_EMPLOYEE_GROUP_DESC, EMPX.SRC_EMPLOYEE_GROUP_ID, EMPX.SRC_EMPLOYEE_GROUP_DESC, (EMP.SMS_EMPLOYEE_NAME)::VARCHAR(255) AS SRC_EMPLOYEE_DISPLAY_NAME, (EP.EMPL_FIRST_NAME)::VARCHAR(128) AS EMPLOYEE_FIRST_NAME, (EP.EMPL_LAST_NAME)::VARCHAR(128) AS EMPLOYEE_LAST_NAME, EP.EMPL_STATUS_CD AS EMPLOYEE_STATUS_CD, ES.EMPL_STATUS_DESC AS EMPLOYEE_STATUS_DESC, EP.EMPL_TERM_DT AS EMPLOYEE_TERM_DT, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_1_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_2_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_CHECK_IN_PER_HOUR, EMP.MAX_APPTS, EMP.MAX_CONCURRENT_APPTS, (NULL::"NUMERIC")::NUMERIC(18,3) AS MAX_WEIGHT, (NULL::"NUMERIC")::NUMERIC(18,3) AS OLD_MAX_WEIGHT FROM ((((ADMIN.SMS_EMPLOYEE_DAY EMP LEFT JOIN ADMIN.EMPLOYEE_PROFILE_DAY EP ON (((EMP.EMPLOYEE_ID = EP.EMPLOYEE_ID) AND (EMP.DAY_DT = EP.DAY_DT)))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON (((EMP.LOCATION_ID = SSR.LOCATION_ID) AND (EMP.DAY_DT >= "TIMESTAMP"(SSR.PRISM_START_DT))))) LEFT JOIN ADMIN.EMPLOYEE_STATUS ES ON ((EP.EMPL_STATUS_CD = ES.EMPL_STATUS_CD))) LEFT JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW EMPX ON (((EMP.SMS_EMPLOYEE_GROUP_ID = EMPX.SRC_EMPLOYEE_GROUP_ID) AND (EMPX.SVCS_SRC_CD = 'SMS'::"VARCHAR")))) WHERE (SSR.LOCATION_ID ISNULL)) UNION ALL (SELECT "TIMESTAMP"(EMP.DAY_DT) AS DAY_DT, ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, (EMP.SDS_EMPLOYEE_ID)::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, (EMP.SDS_USER_ID)::VARCHAR(22) AS SRC_USER_ID, EMP.EMPLOYEE_ID, EMPX.SVCS_EMPLOYEE_GROUP_GID, EMPX.SVCS_EMPLOYEE_GROUP_DESC, EMP.SDS_EMPLOYEE_GROUP_GID AS SRC_EMPLOYEE_GROUP_ID, (EMP.SDS_EMPLOYEE_GROUP_NAME)::VARCHAR(80) AS SRC_EMPLOYEE_GROUP_DESC, EMP.SDS_EMPLOYEE_DISPLAY_NAME AS SRC_EMPLOYEE_DISPLAY_NAME, EMP.EMPLOYEE_FIRST_NAME, EMP.EMPLOYEE_LAST_NAME, EMP.EMPLOYEE_STATUS_CD, EMP.EMPLOYEE_STATUS_DESC, "TIMESTAMP"(EMP.EMPLOYEE_TERM_DT) AS EMPLOYEE_TERM_DT, EMP.MAX_BLOCK_1_CAPACITY, EMP.MAX_BLOCK_2_CAPACITY, EMP.MAX_CHECK_IN_PER_HOUR, NULL::INT4 AS MAX_APPTS, NULL::INT4 AS MAX_CONCURRENT_APPTS, EMP.MAX_WEIGHT, EMP.OLD_MAX_WEIGHT FROM (((ADMIN.SDS_EMPLOYEE_DAY EMP LEFT JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW EMPX ON (((EMP.SDS_EMPLOYEE_GROUP_GID = EMPX.SRC_EMPLOYEE_GROUP_ID) AND (EMPX.SVCS_SRC_CD = 'PRISM'::"VARCHAR")))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON (((EMP.LOCATION_ID = SSR.LOCATION_ID) AND (EMP.DAY_DT >= SSR.PRISM_START_DT)))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR_1 ON ((EMP.LOCATION_ID = SSR_1.LOCATION_ID))) WHERE ((EMP.EMPLOYEE_ID NOTNULL) AND ((SSR_1.LOCATION_ID ISNULL) OR (SSR.LOCATION_ID NOTNULL))));

\echo
\echo *****  Creating view:  "SVCS_EMPLOYEE_VW"

CREATE or replace VIEW  SVCS_EMPLOYEE_VW
(
     SVCS_SRC_CD,
     SRC_EMPLOYEE_ID,
     LOCATION_ID,
     SRC_USER_ID,
     EMPLOYEE_ID,
     SVCS_EMPLOYEE_GROUP_GID,
     SVCS_EMPLOYEE_GROUP_DESC,
     SRC_EMPLOYEE_GROUP_ID,
     SRC_EMPLOYEE_GROUP_DESC,
     SRC_EMPLOYEE_DISPLAY_NAME,
     EMPLOYEE_FIRST_NAME,
     EMPLOYEE_LAST_NAME,
     EMPLOYEE_STATUS_CD,
     EMPLOYEE_STATUS_DESC,
     EMPLOYEE_TERM_DT,
     SRC_EMPLOYEE_ACTIVE_FLAG,
     MAX_BLOCK_1_CAPACITY,
     MAX_BLOCK_2_CAPACITY,
     MAX_CHECK_IN_PER_HOUR,
     MAX_APPTS,
     MAX_CONCURRENT_APPTS
) AS
((SELECT ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, ("VARCHAR"(EMP.SMS_EMPLOYEE_ID))::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, ("VARCHAR"(EMP.SMS_USER_ID))::VARCHAR(22) AS SRC_USER_ID, INT8(EMP.EMPLOYEE_ID) AS EMPLOYEE_ID, EMPX.SVCS_EMPLOYEE_GROUP_GID, EMPX.SVCS_EMPLOYEE_GROUP_DESC, EMPX.SRC_EMPLOYEE_GROUP_ID, EMPX.SRC_EMPLOYEE_GROUP_DESC, (EMP.SMS_EMPLOYEE_NAME)::VARCHAR(255) AS SRC_EMPLOYEE_DISPLAY_NAME, (EP.EMPL_FIRST_NAME)::VARCHAR(128) AS EMPLOYEE_FIRST_NAME, (EP.EMPL_LAST_NAME)::VARCHAR(128) AS EMPLOYEE_LAST_NAME, EP.EMPL_STATUS_CD AS EMPLOYEE_STATUS_CD, EP.EMPL_STATUS_DESC AS EMPLOYEE_STATUS_DESC, EP.EMPL_TERM_DT AS EMPLOYEE_TERM_DT, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_EMPLOYEE_ACTIVE_FLAG, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_1_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_2_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_CHECK_IN_PER_HOUR, EMP.MAX_APPTS, EMP.MAX_CONCURRENT_APPTS FROM ((ADMIN.SMS_EMPLOYEE EMP LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT EP ON ((EMP.EMPLOYEE_ID = EP.EMPLOYEE_ID))) LEFT JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW EMPX ON (((EMP.SMS_EMPLOYEE_GROUP_ID = EMPX.SRC_EMPLOYEE_GROUP_ID) AND (EMPX.SVCS_SRC_CD = 'SMS'::"VARCHAR")))) WHERE (EMP.DELETE_TSTMP ISNULL)) UNION ALL (SELECT ('TP'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, ("VARCHAR"(EMP.TP_EMPLOYEE_ID))::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, (NULL::"VARCHAR")::VARCHAR(22) AS SRC_USER_ID, EMP.TP_EMPLOYEE_ID AS EMPLOYEE_ID, EMPX.SVCS_EMPLOYEE_GROUP_GID, EMPX.SVCS_EMPLOYEE_GROUP_DESC, EMPX.SRC_EMPLOYEE_GROUP_ID, EMPX.SRC_EMPLOYEE_GROUP_DESC, (EMP.EMPLOYEE_NAME)::VARCHAR(255) AS SRC_EMPLOYEE_DISPLAY_NAME, (EP.EMPL_FIRST_NAME)::VARCHAR(128) AS EMPLOYEE_FIRST_NAME, (EP.EMPL_LAST_NAME)::VARCHAR(128) AS EMPLOYEE_LAST_NAME, EP.EMPL_STATUS_CD AS EMPLOYEE_STATUS_CD, EP.EMPL_STATUS_DESC AS EMPLOYEE_STATUS_DESC, EP.EMPL_TERM_DT AS EMPLOYEE_TERM_DT, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_EMPLOYEE_ACTIVE_FLAG, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_1_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_2_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_CHECK_IN_PER_HOUR, NULL::INT4 AS MAX_APPTS, NULL::INT4 AS MAX_CONCURRENT_APPTS FROM ((ADMIN.TP_EMPLOYEE EMP LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT EP ON ((EMP.TP_EMPLOYEE_ID = EP.EMPLOYEE_ID))) LEFT JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW EMPX ON (((EMP.POSITION_ID = EMPX.SRC_EMPLOYEE_GROUP_ID) AND (EMPX.SVCS_SRC_CD = 'TP'::"VARCHAR")))))) UNION ALL (SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, (EMP.SDS_EMPLOYEE_ID)::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, (EMP.SDS_USER_ID)::VARCHAR(22) AS SRC_USER_ID, INT8(EMP.EMPLOYEE_ID) AS EMPLOYEE_ID, EMPX.SVCS_EMPLOYEE_GROUP_GID, EMPX.SVCS_EMPLOYEE_GROUP_DESC, EMP.SDS_EMPLOYEE_GROUP_GID AS SRC_EMPLOYEE_GROUP_ID, (EMP.SDS_EMPLOYEE_GROUP_NAME)::VARCHAR(80) AS SRC_EMPLOYEE_GROUP_DESC, EMP.SDS_EMPLOYEE_DISPLAY_NAME AS SRC_EMPLOYEE_DISPLAY_NAME, EMP.EMPLOYEE_FIRST_NAME, EMP.EMPLOYEE_LAST_NAME, EMP.EMPLOYEE_STATUS_CD, EMP.EMPLOYEE_STATUS_DESC, "TIMESTAMP"(EMP.EMPLOYEE_TERM_DT) AS EMPLOYEE_TERM_DT, EMP.SDS_EMPLOYEE_ACTIVE_FLAG AS SRC_EMPLOYEE_ACTIVE_FLAG, EMP.MAX_BLOCK_1_CAPACITY, EMP.MAX_BLOCK_2_CAPACITY, EMP.MAX_CHECK_IN_PER_HOUR, NULL::INT4 AS MAX_APPTS, NULL::INT4 AS MAX_CONCURRENT_APPTS FROM (ADMIN.SDS_EMPLOYEE EMP LEFT JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW EMPX ON (((EMP.SDS_EMPLOYEE_GROUP_GID = EMPX.SRC_EMPLOYEE_GROUP_ID) AND (EMPX.SVCS_SRC_CD = 'PRISM'::"VARCHAR")))) WHERE (EMP.EMPLOYEE_ID NOTNULL));

\echo
\echo *****  Creating view:  "SVCS_ORDER_STATUS_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_ORDER_STATUS_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_ORDER_STATUS_ID,
     SRC_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_ORDER_STATUS_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") THEN SMS.SMS_ORDER_STATUS_DESC WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN SDS.SDS_ORDER_STATUS_DESC ELSE NULL::"VARCHAR" END AS SRC_ORDER_STATUS_DESC, XREF.SVCS_ORDER_STATUS_GID, SVCS.SVCS_ORDER_STATUS_DESC FROM (((ADMIN.SVCS_ORDER_STATUS SVCS JOIN ADMIN.SVCS_ORDER_STATUS_XREF XREF ON ((SVCS.SVCS_ORDER_STATUS_GID = XREF.SVCS_ORDER_STATUS_GID))) LEFT JOIN ADMIN.SMS_ORDER_STATUS SMS ON (((XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") AND (XREF.SRC_ORDER_STATUS_ID = SMS.SMS_ORDER_STATUS_ID)))) LEFT JOIN ADMIN.SDS_ORDER_STATUS SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_ORDER_STATUS_ID = SDS.SDS_ORDER_STATUS_GID))));

\echo
\echo *****  Creating view:  "SVCS_OVERRIDE_REASON_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_OVERRIDE_REASON_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_OVERRIDE_REASON_ID,
     SRC_OVERRIDE_REASON_DESC,
     SVCS_OVERRIDE_REASON_GID,
     SVCS_OVERRIDE_REASON_DESC
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_OVERRIDE_REASON_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") THEN SMS.SMS_OVERRIDE_REASON_DESC WHEN (XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") THEN TP.TP_REASON_CODE_DESC WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN SDS.SDS_OVERRIDE_REASON_DESC ELSE NULL::"VARCHAR" END AS SRC_OVERRIDE_REASON_DESC, XREF.SVCS_OVERRIDE_REASON_GID, SVCS.SVCS_OVERRIDE_REASON_DESC FROM ((((ADMIN.SVCS_OVERRIDE_REASON SVCS JOIN ADMIN.SVCS_OVERRIDE_REASON_XREF XREF ON ((SVCS.SVCS_OVERRIDE_REASON_GID = XREF.SVCS_OVERRIDE_REASON_GID))) LEFT JOIN ADMIN.SMS_OVERRIDE_REASON SMS ON (((XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") AND (XREF.SRC_OVERRIDE_REASON_ID = SMS.SMS_OVERRIDE_REASON_ID)))) LEFT JOIN ADMIN.TP_REASON_CODE TP ON (((XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") AND (XREF.SRC_OVERRIDE_REASON_ID = TP.TP_REASON_CODE_ID)))) LEFT JOIN ADMIN.SDS_OVERRIDE_REASON SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_OVERRIDE_REASON_ID = SDS.SDS_OVERRIDE_REASON_GID))));

\echo
\echo *****  Creating view:  "SVCS_PAYMENT_METHOD_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_PAYMENT_METHOD_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_PAYMENT_METHOD_ID,
     SRC_PAYMENT_METHOD_DESC,
     SVCS_PAYMENT_METHOD_GID,
     SVCS_PAYMENT_METHOD_DESC
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_PAYMENT_METHOD_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") THEN CASE WHEN (XREF.SRC_PAYMENT_METHOD_ID = 14) THEN 'Post to POS'::"VARCHAR" ELSE NULL::"VARCHAR" END WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN SDS.SDS_PAYMENT_METHOD_DESC ELSE NULL::"VARCHAR" END AS SRC_PAYMENT_METHOD_DESC, XREF.SVCS_PAYMENT_METHOD_GID, SVCS.SVCS_PAYMENT_METHOD_DESC FROM ((ADMIN.SVCS_PAYMENT_METHOD SVCS JOIN ADMIN.SVCS_PAYMENT_METHOD_XREF XREF ON ((SVCS.SVCS_PAYMENT_METHOD_GID = XREF.SVCS_PAYMENT_METHOD_GID))) LEFT JOIN ADMIN.SDS_PAYMENT_METHOD SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_PAYMENT_METHOD_ID = SDS.SDS_PAYMENT_METHOD_GID))));

\echo
\echo *****  Creating view:  "SDS_PET_CONDITION_RPT_VW"

CREATE or replace VIEW  SDS_PET_CONDITION_RPT_VW
(
     SVCS_PET_GID,
     PETM_PET_CONDITION_ID,
     PETM_PET_CONDITION_DESC,
     SRC_PET_CONDITION_ID,
     SRC_PET_CONDITION_DESC
) AS
SELECT D.SVCS_PET_GID, P.PETM_PET_CONDITION_ID, P.PETM_PET_CONDITION_DESC, P.PETM_PET_CONDITION_ID AS SRC_PET_CONDITION_ID, P.PETM_PET_CONDITION_DESC AS SRC_PET_CONDITION_DESC FROM (ADMIN.SVCS_PET_XREF D LEFT JOIN (SELECT A.PODS_PET_ID, A.PETM_PET_CONDITION_ID, B.PETM_PET_CONDITION_DESC, A.PETM_PET_CONDITION_ID AS SRC_PET_CONDITION_ID, B.PETM_PET_CONDITION_DESC AS SRC_PET_CONDITION_DESC FROM (ADMIN.PODS_PET_CONDITION A JOIN ADMIN.PETM_PET_CONDITION B ON ((B.PETM_PET_CONDITION_ID = A.PETM_PET_CONDITION_ID))) WHERE (A.ACTIVE_FLG = ('1'::NUMERIC(1,0))::NUMERIC(1,0))) P ON ((P.PODS_PET_ID = D.SRC_PET_ID)));

\echo
\echo *****  Creating view:  "SVCS_PET_LAST_APPT_RPT_VW"

CREATE or replace VIEW  SVCS_PET_LAST_APPT_RPT_VW
(
     SVCS_SRC_CD,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     SRC_PET_ID,
     SRC_PET_NAME,
     PET_STATUS,
     PET_LAST_APPT_DT,
     PET_LAST_SERVICE_PRODUCT_ID
) AS
SELECT B.SVCS_SRC_CD, B.SVCS_PET_GID, B.SVCS_PET_NAME, B.SRC_PET_ID, B.SRC_PET_NAME, B.PET_STATUS, A.PET_LAST_APPT_DT, B.PRIMARY_SERVICE_PRODUCT_ID AS PET_LAST_SERVICE_PRODUCT_ID FROM ((SELECT SVCS_APPT_RPT_VW.SVCS_SRC_CD, SVCS_APPT_RPT_VW.SVCS_PET_GID, MAX(SVCS_APPT_RPT_VW.APPT_DT) AS PET_LAST_APPT_DT FROM ADMIN.SVCS_APPT_RPT_VW WHERE (SVCS_APPT_RPT_VW.SVCS_APPT_STATUS_GID = 8) GROUP BY SVCS_APPT_RPT_VW.SVCS_SRC_CD, SVCS_APPT_RPT_VW.SVCS_PET_GID) A JOIN ADMIN.SVCS_APPT_RPT_VW B ON (((((B.SVCS_SRC_CD = A.SVCS_SRC_CD) AND (B.SVCS_PET_GID = A.SVCS_PET_GID)) AND (B.APPT_DT = A.PET_LAST_APPT_DT)) AND (B.SVCS_APPT_STATUS_GID = 8))));

\echo
\echo *****  Creating view:  "SDS_PET_VET_PHONE_RPT_VW"

CREATE or replace VIEW  SDS_PET_VET_PHONE_RPT_VW
(
     PODS_PET_ID,
     SVCS_PET_GID,
     VET_PHONE_NBR,
     PHONE_RNK
) AS
SELECT V.PODS_PET_ID, V.SVCS_PET_GID, V.VET_PHONE_NBR, V.PHONE_RNK FROM (SELECT DISTINCT PP.PODS_PET_ID, SPX.SVCS_PET_GID, PPH.PHONE_NBR AS VET_PHONE_NBR, ROW_NUMBER() OVER (PARTITION BY PP.PODS_PET_ID  ORDER BY PV.PODS_UPDATE_TSTMP DESC, PV.PODS_CREATE_TSTMP DESC, PPH.PHONE_NBR ) AS PHONE_RNK FROM ((((((ADMIN.SDS_ASSET SA JOIN ADMIN.PODS_PET PP ON ((INT8(SA.PODS_PET_ID) = PP.PODS_PET_ID))) LEFT JOIN ADMIN.SVCS_PET_XREF SPX ON (((PP.PODS_PET_ID = SPX.SRC_PET_ID) AND (SPX.PET_SRC_CD = 'PRISM'::"VARCHAR")))) LEFT JOIN ADMIN.PODS_PET_VET_CLINIC PV ON ((PP.PODS_PET_ID = PV.PODS_PET_ID))) LEFT JOIN ADMIN.PODS_PARTY PPR ON ((PV.PODS_PET_VET_CLINIC_ID = PPR.PODS_PET_VET_CLINIC_ID))) LEFT JOIN ADMIN.PODS_CUSTOMER_CONTACT_METHOD PCM ON ((PPR.PODS_PARTY_ID = PCM.PODS_PARTY_ID))) LEFT JOIN ADMIN.PODS_PHONE PPH ON ((PCM.PODS_PHONE_ID = PPH.PODS_PHONE_ID)))) V WHERE (V.PHONE_RNK = 1);

\echo
\echo *****  Creating view:  "SVCS_SERVICE_CATEGORY_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_SERVICE_CATEGORY_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_SERVICE_CATEGORY_ID,
     SRC_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_SERVICE_CATEGORY_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") THEN SMS.SMS_SERVICE_CATEGORY_DESC WHEN (XREF.SVCS_SRC_CD = 'TP'::"VARCHAR") THEN CASE WHEN (XREF.SRC_SERVICE_CATEGORY_ID = 73) THEN 'Overnight Boarding'::"VARCHAR" WHEN (XREF.SRC_SERVICE_CATEGORY_ID = 3509) THEN 'Grooming'::"VARCHAR" WHEN (XREF.SRC_SERVICE_CATEGORY_ID = 3510) THEN 'Daycamp/Daycare'::"VARCHAR" WHEN (XREF.SRC_SERVICE_CATEGORY_ID = 3511) THEN 'Training'::"VARCHAR" ELSE NULL::"VARCHAR" END WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN SDS.SDS_SERVICE_CATEGORY_DESC ELSE NULL::"VARCHAR" END AS SRC_SERVICE_CATEGORY_DESC, XREF.SVCS_SERVICE_CATEGORY_GID, SVCS.SVCS_SERVICE_CATEGORY_DESC FROM (((ADMIN.SVCS_SERVICE_CATEGORY SVCS JOIN ADMIN.SVCS_SERVICE_CATEGORY_XREF XREF ON ((SVCS.SVCS_SERVICE_CATEGORY_GID = XREF.SVCS_SERVICE_CATEGORY_GID))) LEFT JOIN ADMIN.SMS_SERVICE_CATEGORY SMS ON (((XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") AND (XREF.SRC_SERVICE_CATEGORY_ID = SMS.SMS_SERVICE_CATEGORY_ID)))) LEFT JOIN ADMIN.SDS_SERVICE_CATEGORY SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_SERVICE_CATEGORY_ID = SDS.SDS_SERVICE_CATEGORY_GID))));

\echo
\echo *****  Creating view:  "SVCS_SERVICE_SUB_CATEGORY_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_SERVICE_SUB_CATEGORY_XREF_RPT_VW
(
     SVCS_SRC_CD,
     SRC_SERVICE_SUB_CATEGORY_ID,
     SRC_SERVICE_SUB_CATEGORY_DESC,
     SVCS_SERVICE_SUB_CATEGORY_GID,
     SVCS_SERVICE_SUB_CATEGORY_DESC
) AS
SELECT XREF.SVCS_SRC_CD, XREF.SRC_SERVICE_SUB_CATEGORY_ID, CASE WHEN (XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") THEN SMS.SMS_SERVICE_SUBCAT_DESC WHEN (XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") THEN "NVARCHAR"(SDS.SDS_SERVICE_SUB_CATEGORY_DESC) ELSE "NVARCHAR"(NULL::"VARCHAR") END AS SRC_SERVICE_SUB_CATEGORY_DESC, XREF.SVCS_SERVICE_SUB_CATEGORY_GID, SVCS.SVCS_SERVICE_SUB_CATEGORY_DESC FROM (((ADMIN.SVCS_SERVICE_SUB_CATEGORY SVCS JOIN ADMIN.SVCS_SERVICE_SUB_CATEGORY_XREF XREF ON ((SVCS.SVCS_SERVICE_SUB_CATEGORY_GID = XREF.SVCS_SERVICE_SUB_CATEGORY_GID))) LEFT JOIN ADMIN.SMS_SERVICE_SUBCATEGORY SMS ON (((XREF.SVCS_SRC_CD = 'SMS'::"VARCHAR") AND (XREF.SRC_SERVICE_SUB_CATEGORY_ID = SMS.SMS_SERVICE_SUBCAT_ID)))) LEFT JOIN ADMIN.SDS_SERVICE_SUB_CATEGORY SDS ON (((XREF.SVCS_SRC_CD = 'PRISM'::"VARCHAR") AND (XREF.SRC_SERVICE_SUB_CATEGORY_ID = SDS.SDS_SERVICE_SUB_CATEGORY_GID))));

\echo
\echo *****  Creating view:  "SVCS_WFA_TDTL_VW"

CREATE or replace VIEW  SVCS_WFA_TDTL_VW
(
     SVCS_SRC_CD,
     DAY_DT,
     TDTL_ID,
     STRT_DTM,
     END_DTM,
     LOCATION_ID,
     EMPLOYEE_ID,
     WFA_BUSN_AREA_ID,
     WFA_BUSN_AREA_DESC,
     WFA_DEPT_ID,
     WFA_DEPT_DESC,
     WFA_TASK_ID,
     WFA_TASK_DESC,
     PRI_LOCATION_ID,
     PRI_WFA_BUSN_AREA_ID,
     PRI_WFA_BUSN_AREA_DESC,
     PRI_WFA_DEPT_ID,
     PRI_WFA_DEPT_DESC,
     PRI_WFA_TASK_ID,
     PRI_WFA_TASK_DESC,
     TSITEM_ID,
     RECORDED_FOR_DAT,
     ADJ_SWT,
     EDT_SWT,
     EMP_SKEY,
     UNSCHD_STRT_DTM,
     UNSCHD_END_DTM,
     STRT_TZONE_SKEY,
     LBRACCT_SKEY,
     LBRACCT_ID,
     HM_LBRACCT_SWT,
     HM_LBRACCT_SKEY,
     HM_LBRACCT_ID,
     FROM_LBRACCT_SKEY,
     FROM_LBRACCT_ID,
     PAYCD_SKEY,
     PAYCD_ID,
     CORE_HRS_SWT,
     FROM_PAYCD_SKEY,
     FROM_PAYCD_ID,
     SUPV_SKEY,
     PRI_JOB_SKEY,
     JOB_SKEY,
     PRI_ORG_SKEY,
     ORG_SKEY,
     PAYPER_SKEY,
     HDAY_SKEY,
     STRT_PNCHEVNT_SKEY,
     END_PNCHEVNT_SKEY,
     STRT_DSRC_SKEY,
     END_DSRC_SKEY,
     DSRC_SKEY,
     EMPSTAT_SKEY,
     AGE_NBR,
     TENURE_MO_NBR,
     DFLT_PAY_RULE_SKEY,
     DFLT_WRK_RULE_SWT,
     DFLT_WRK_RULE_SKEY,
     WRK_RULE_SKEY,
     MONEY_AMT,
     DRTN_AMT,
     CORE_AMT,
     NON_CORE_AMT,
     DRTN_DIFF_AMT,
     DRTN_HRS,
     CORE_HRS,
     NON_CORE_HRS,
     LOCKED_SWT,
     GRP_SCHD_SKEY,
     WORK_LOCATION_ID,
     WEEK_DT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT A.SVCS_SRC_CD, B.DAY_DT, B.TDTL_ID, B.STRT_DTM, B.END_DTM, B.LOCATION_ID, B.EMPLOYEE_ID, B.WFA_BUSN_AREA_ID, B.WFA_BUSN_AREA_DESC, B.WFA_DEPT_ID, B.WFA_DEPT_DESC, B.WFA_TASK_ID, B.WFA_TASK_DESC, B.PRI_LOCATION_ID, B.PRI_WFA_BUSN_AREA_ID, B.PRI_WFA_BUSN_AREA_DESC, B.PRI_WFA_DEPT_ID, B.PRI_WFA_DEPT_DESC, B.PRI_WFA_TASK_ID, B.PRI_WFA_TASK_DESC, B.TSITEM_ID, B.RECORDED_FOR_DAT, B.ADJ_SWT, B.EDT_SWT, B.EMP_SKEY, B.UNSCHD_STRT_DTM, B.UNSCHD_END_DTM, B.STRT_TZONE_SKEY, B.LBRACCT_SKEY, B.LBRACCT_ID, B.HM_LBRACCT_SWT, B.HM_LBRACCT_SKEY, B.HM_LBRACCT_ID, B.FROM_LBRACCT_SKEY, B.FROM_LBRACCT_ID, B.PAYCD_SKEY, B.PAYCD_ID, B.CORE_HRS_SWT, B.FROM_PAYCD_SKEY, B.FROM_PAYCD_ID, B.SUPV_SKEY, B.PRI_JOB_SKEY, B.JOB_SKEY, B.PRI_ORG_SKEY, B.ORG_SKEY, B.PAYPER_SKEY, B.HDAY_SKEY, B.STRT_PNCHEVNT_SKEY, B.END_PNCHEVNT_SKEY, B.STRT_DSRC_SKEY, B.END_DSRC_SKEY, B.DSRC_SKEY, B.EMPSTAT_SKEY, B.AGE_NBR, B.TENURE_MO_NBR, B.DFLT_PAY_RULE_SKEY, B.DFLT_WRK_RULE_SWT, B.DFLT_WRK_RULE_SKEY, B.WRK_RULE_SKEY, B.MONEY_AMT, B.DRTN_AMT, B.CORE_AMT, B.NON_CORE_AMT, B.DRTN_DIFF_AMT, B.DRTN_HRS, B.CORE_HRS, B.NON_CORE_HRS, B.LOCKED_SWT, B.GRP_SCHD_SKEY, B.WORK_LOCATION_ID, B.WEEK_DT, B.UPDATE_DT, B.LOAD_DT FROM (ADMIN.WFA_TDTL B CROSS JOIN (SELECT DISTINCT V.SVCS_SRC_CD FROM ADMIN.SVCS_SERVICE_CATEGORY_XREF_RPT_VW V) A);

\echo
\echo *****  Creating view:  "SDS_APPT_BLOCKED_CHECKED_IN_EXCEPTION_RPT_VW"

CREATE or replace VIEW  SDS_APPT_BLOCKED_CHECKED_IN_EXCEPTION_RPT_VW
(
     SVCS_SRC_CD,
     SDS_APPT_ID,
     APPT_DT,
     LOCATION_ID,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SRC_EMPLOYEE_GROUP_ID,
     ASSIGNED_SRC_EMPLOYEE_GROUP_DESC,
     LAST_TOTAL_BLOCKED_CNT,
     LAST_TOTAL_CHECKED_IN_CNT
) AS
SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, O.SDS_WORK_ORDER_NBR AS SDS_APPT_ID, DATE(O.APPT_TSTMP) AS APPT_DT, O.LOCATION_ID, O.ASSIGNED_EMPLOYEE_ID, O.ASSIGNED_EMPLOYEE_FIRST_NAME, O.ASSIGNED_EMPLOYEE_LAST_NAME, O.ASSIGNED_EMPLOYEE_DISPLAY_NAME, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, O.ASSIGNED_SDS_EMPLOYEE_GROUP_ID AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, O.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, (MAX(B.LAST_TOTAL_BLOCKED_CNT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)) AS LAST_TOTAL_BLOCKED_CNT, (MAX(C.LAST_TOTAL_CHECKED_IN_CNT) - ('1'::NUMERIC(1,0))::NUMERIC(1,0)) AS LAST_TOTAL_CHECKED_IN_CNT FROM ((ADMIN.SDS_WORK_ORDER_RPT O LEFT JOIN (SELECT B.SDS_APPT_ID, DATE(O.APPT_TSTMP) AS APPT_DT, O.ASSIGNED_EMPLOYEE_ID, FIRST_VALUE(B.TOTAL_BLOCKED_CNT) OVER (PARTITION BY B.SDS_APPT_ID  ORDER BY B.CHANGED_TSTMP DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS LAST_TOTAL_BLOCKED_CNT FROM (ADMIN.SDS_APPT_BLOCKED_EXCEPTION_HIST B JOIN ADMIN.SDS_WORK_ORDER_RPT O ON ((O.SDS_WORK_ORDER_NBR = B.SDS_APPT_ID)))) B ON (((B.ASSIGNED_EMPLOYEE_ID = O.ASSIGNED_EMPLOYEE_ID) AND (B.SDS_APPT_ID = O.SDS_WORK_ORDER_NBR)))) LEFT JOIN (SELECT C.SDS_APPT_ID, DATE(O.APPT_TSTMP) AS APPT_DT, O.ASSIGNED_EMPLOYEE_ID, FIRST_VALUE(C.TOTAL_CHECKED_IN_CNT) OVER (PARTITION BY C.SDS_APPT_ID  ORDER BY C.CHANGED_TSTMP DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS LAST_TOTAL_CHECKED_IN_CNT FROM (ADMIN.SDS_APPT_CHECKED_IN_EXCEPTION_HIST C JOIN ADMIN.SDS_WORK_ORDER_RPT O ON ((O.SDS_WORK_ORDER_NBR = C.SDS_APPT_ID)))) C ON (((C.ASSIGNED_EMPLOYEE_ID = O.ASSIGNED_EMPLOYEE_ID) AND (C.SDS_APPT_ID = O.SDS_WORK_ORDER_NBR)))) WHERE (O.ASSIGNED_EMPLOYEE_ID NOTNULL) GROUP BY ('PRISM'::"VARCHAR")::VARCHAR(5), O.SDS_WORK_ORDER_NBR, DATE(O.APPT_TSTMP), O.LOCATION_ID, O.ASSIGNED_EMPLOYEE_ID, O.ASSIGNED_EMPLOYEE_FIRST_NAME, O.ASSIGNED_EMPLOYEE_LAST_NAME, O.ASSIGNED_EMPLOYEE_DISPLAY_NAME, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, O.ASSIGNED_SDS_EMPLOYEE_GROUP_ID, O.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC;

\echo
\echo *****  Creating view:  "SDS_APPT_BLOCKED_EXCEPTION_HIST_RPT_VW"

CREATE or replace VIEW  SDS_APPT_BLOCKED_EXCEPTION_HIST_RPT_VW
(
     SVCS_SRC_CD,
     SDS_APPT_ID,
     LOCATION_ID,
     APPT_TSTMP,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SRC_EMPLOYEE_GROUP_ID,
     ASSIGNED_SRC_EMPLOYEE_GROUP_DESC,
     CHANGED_EMPLOYEE_ID,
     CHANGED_EMPLOYEE_NAME,
     CHANGED_TSTMP,
     TOTAL_BLOCKED_CNT
) AS
SELECT 'PRISM' AS SVCS_SRC_CD, B.SDS_APPT_ID, O.LOCATION_ID, O.APPT_TSTMP, O.ASSIGNED_EMPLOYEE_ID, O.ASSIGNED_EMPLOYEE_FIRST_NAME, O.ASSIGNED_EMPLOYEE_LAST_NAME, O.ASSIGNED_EMPLOYEE_DISPLAY_NAME, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, O.ASSIGNED_SDS_EMPLOYEE_GROUP_ID AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, O.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, B.CHANGED_EMPLOYEE_ID, E.SDS_EMPLOYEE_DISPLAY_NAME AS CHANGED_EMPLOYEE_NAME, B.CHANGED_TSTMP, (B.TOTAL_BLOCKED_CNT - ('1'::NUMERIC(1,0))::NUMERIC(1,0)) AS TOTAL_BLOCKED_CNT FROM ((ADMIN.SDS_APPT_BLOCKED_EXCEPTION_HIST B JOIN ADMIN.SDS_WORK_ORDER_RPT O ON ((O.SDS_WORK_ORDER_NBR = B.SDS_APPT_ID))) LEFT JOIN (SELECT DISTINCT E.EMPLOYEE_ID, E.SDS_EMPLOYEE_DISPLAY_NAME, E.LOCATION_ID FROM ADMIN.SDS_EMPLOYEE E) E ON (((E.EMPLOYEE_ID = B.CHANGED_EMPLOYEE_ID) AND (O.LOCATION_ID = E.LOCATION_ID))));

\echo
\echo *****  Creating view:  "SDS_APPT_CHECKED_IN_EXCEPTION_HIST_RPT_VW"

CREATE or replace VIEW  SDS_APPT_CHECKED_IN_EXCEPTION_HIST_RPT_VW
(
     SVCS_SRC_CD,
     SDS_APPT_ID,
     LOCATION_ID,
     APPT_TSTMP,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SRC_EMPLOYEE_GROUP_ID,
     ASSIGNED_SRC_EMPLOYEE_GROUP_DESC,
     CHANGED_EMPLOYEE_ID,
     CHANGED_EMPLOYEE_NAME,
     CHANGED_TSTMP,
     TOTAL_CHECKED_IN_CNT
) AS
SELECT 'PRISM' AS SVCS_SRC_CD, B.SDS_APPT_ID, O.LOCATION_ID, O.APPT_TSTMP, O.ASSIGNED_EMPLOYEE_ID, O.ASSIGNED_EMPLOYEE_FIRST_NAME, O.ASSIGNED_EMPLOYEE_LAST_NAME, O.ASSIGNED_EMPLOYEE_DISPLAY_NAME, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, O.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, O.ASSIGNED_SDS_EMPLOYEE_GROUP_ID AS ASSIGNED_SRC_EMPLOYEE_GROUP_ID, O.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC AS ASSIGNED_SRC_EMPLOYEE_GROUP_DESC, B.CHANGED_EMPLOYEE_ID, E.SDS_EMPLOYEE_DISPLAY_NAME AS CHANGED_EMPLOYEE_NAME, B.CHANGED_TSTMP, (B.TOTAL_CHECKED_IN_CNT - ('1'::NUMERIC(1,0))::NUMERIC(1,0)) AS TOTAL_CHECKED_IN_CNT FROM ((ADMIN.SDS_APPT_CHECKED_IN_EXCEPTION_HIST B JOIN ADMIN.SDS_WORK_ORDER_RPT O ON ((O.SDS_WORK_ORDER_NBR = B.SDS_APPT_ID))) LEFT JOIN (SELECT DISTINCT E.EMPLOYEE_ID, E.SDS_EMPLOYEE_DISPLAY_NAME, E.LOCATION_ID FROM ADMIN.SDS_EMPLOYEE E) E ON (((E.EMPLOYEE_ID = B.CHANGED_EMPLOYEE_ID) AND (O.LOCATION_ID = E.LOCATION_ID))));

\echo
\echo *****  Creating view:  "SVCS_APPT_SERVICE_DAY_VW"

CREATE or replace VIEW  SVCS_APPT_SERVICE_DAY_VW
(
     DAY_DT,
     SVCS_SRC_CD,
     LOCATION_ID,
     SRC_APPT_ID,
     PRODUCT_ID,
     SRC_ORDER_ID,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SRC_APPT_STATUS_ID,
     SRC_APPT_STATUS_DESC,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     APPT_DAY_STATUS_FLAG,
     APPT_SERVICE_ITEM_QTY,
     PET_CNT
) AS
((SELECT D.DAY_DT, ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.LOCATION_ID, A.SMS_APPOINTMENT_ID AS SRC_APPT_ID, A.PRODUCT_ID, A.SMS_ORDER_ID AS SRC_ORDER_ID, C.SVCS_APPT_STATUS_GID, C.SVCS_APPT_STATUS_DESC, C.SRC_APPT_STATUS_ID, C.SRC_APPT_STATUS_DESC, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, CASE WHEN (D.DAY_DT = "TIMESTAMP"(DATE(A.SCHED_APPT_END_TSTMP))) THEN 'O'::"VARCHAR" WHEN (D.DAY_DT = "TIMESTAMP"(DATE(A.SCHED_APPT_START_TSTMP))) THEN 'I'::"VARCHAR" ELSE 'A'::"VARCHAR" END AS APPT_DAY_STATUS_FLAG, INT4(A.APPT_SERVICE_ITEM_QTY) AS APPT_SERVICE_ITEM_QTY, 1 AS PET_CNT FROM ((ADMIN.SMS_APPOINTMENT_SERVICE_RPT A LEFT JOIN ADMIN.SVCS_APPT_STATUS_XREF_RPT_VW C ON (((A.SMS_APPT_STATUS_ID = C.SRC_APPT_STATUS_ID) AND (C.SVCS_SRC_CD = 'SMS'::"VARCHAR")))) JOIN ADMIN.DAYS D ON ((((D.DAY_DT >= "TIMESTAMP"(A.SMS_APPOINTMENT_DT)) AND (D.DAY_DT <= "TIMESTAMP"(DATE(A.SCHED_APPT_END_TSTMP)))) OR ((D.DAY_DT = "TIMESTAMP"(A.SMS_APPOINTMENT_DT)) AND (A.SMS_APPOINTMENT_DT = DATE(A.SCHED_APPT_END_TSTMP))))))) UNION ALL (SELECT "TIMESTAMP"(S.DAY_DT) AS DAY_DT, ('TP'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, S.LOCATION_ID, S.TP_INVOICE_NBR AS SRC_APPT_ID, S.PRODUCT_ID, S.TP_INVOICE_NBR AS SRC_ORDER_ID, C.SVCS_APPT_STATUS_GID, C.SVCS_APPT_STATUS_DESC, C.SRC_APPT_STATUS_ID, C.SRC_APPT_STATUS_DESC, S.APPT_START_TSTMP AS SCHED_APPT_START_TSTMP, S.APPT_END_TSTMP AS SCHED_APPT_END_TSTMP, (S.FOLIO_STATUS_FLAG)::VARCHAR(1) AS APPT_DAY_STATUS_FLAG, INT4(S.SERVICE_SCHEDULE_QTY) AS APPT_SERVICE_ITEM_QTY, 1 AS PET_CNT FROM (ADMIN.TP_INVOICE_SERVICE_DAY S LEFT JOIN ADMIN.SVCS_APPT_STATUS_XREF_RPT_VW C ON (((CASE WHEN (S.INVOICE_STATE_ID = 1) THEN 2 WHEN (S.INVOICE_STATE_ID = 2) THEN 4 WHEN (S.INVOICE_STATE_ID = 3) THEN 5 WHEN (S.INVOICE_STATE_ID = 4) THEN 6 ELSE NULL::INT4 END = C.SRC_APPT_STATUS_ID) AND (C.SVCS_SRC_CD = 'TP'::"VARCHAR")))))) UNION ALL (SELECT DISTINCT D.DAY_DT, ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.LOCATION_ID, A.SDS_WORK_ORDER_NBR AS SRC_APPT_ID, A.PRODUCT_ID, A.SDS_ORDER_NBR AS SRC_ORDER_ID, C.SVCS_APPT_STATUS_GID, C.SVCS_APPT_STATUS_DESC, C.SRC_APPT_STATUS_ID, C.SRC_APPT_STATUS_DESC, A.SCHED_APPT_START_TSTMP, A.SCHED_APPT_END_TSTMP, CASE WHEN (D.DAY_DT = "TIMESTAMP"(DATE(A.SCHED_APPT_END_TSTMP))) THEN 'O'::"VARCHAR" WHEN (D.DAY_DT = "TIMESTAMP"(DATE(A.SCHED_APPT_START_TSTMP))) THEN 'I'::"VARCHAR" ELSE 'A'::"VARCHAR" END AS APPT_DAY_STATUS_FLAG, A.APPT_SERVICE_ITEM_QTY, 1 AS PET_CNT FROM ((ADMIN.SDS_ORDER_ITEM_RPT A LEFT JOIN ADMIN.SVCS_APPT_STATUS_XREF_RPT_VW C ON (((A.SDS_APPT_STATUS_ID = C.SRC_APPT_STATUS_ID) AND (C.SVCS_SRC_CD = 'PRISM'::"VARCHAR")))) JOIN ADMIN.DAYS D ON ((((D.DAY_DT >= "TIMESTAMP"(DATE(A.APPT_TSTMP))) AND (D.DAY_DT <= "TIMESTAMP"(DATE(A.SCHED_APPT_END_TSTMP)))) OR ((D.DAY_DT = "TIMESTAMP"(DATE(A.APPT_TSTMP))) AND (A.APPT_TSTMP = "TIMESTAMP"(DATE(A.SCHED_APPT_END_TSTMP))))))) WHERE (A.PRODUCT_ID NOTNULL));

\echo
\echo *****  Creating view:  "SVCS_CUSTOMER_FUTURE_APPT_RPT_VW"

CREATE or replace VIEW  SVCS_CUSTOMER_FUTURE_APPT_RPT_VW
(
     SVCS_CUSTOMER_GID,
     APPT_DT,
     SVCS_SRC_CD,
     SRC_APPT_ID,
     FUTURE_APPT_DT,
     FUTURE_SVCS_SRC_CD,
     FUTURE_SRC_APPT_ID,
     FUTURE_SVCS_APPT_STATUS_GID,
     FUTURE_SVCS_APPT_STATUS_DESC,
     FUTURE_SRC_APPT_STATUS_ID,
     FUTURE_SRC_APPT_STATUS_DESC,
     FUTURE_LOCATION_ID,
     FUTURE_STORE_NBR,
     FUTURE_STORE_NAME
) AS
SELECT X.SVCS_CUSTOMER_GID, X.APPT_DT, X.SVCS_SRC_CD, X.SRC_APPT_ID, X.FUTURE_APPT_DT, X.FUTURE_SVCS_SRC_CD, X.FUTURE_SRC_APPT_ID, X.FUTURE_SVCS_APPT_STATUS_GID, X.FUTURE_SVCS_APPT_STATUS_DESC, X.FUTURE_SRC_APPT_STATUS_ID, X.FUTURE_SRC_APPT_STATUS_DESC, X.FUTURE_LOCATION_ID, X.FUTURE_STORE_NBR, X.FUTURE_STORE_NAME FROM (SELECT A.SVCS_CUSTOMER_GID, A.APPT_DT, A.SVCS_SRC_CD, A.SRC_APPT_ID, F.APPT_DT AS FUTURE_APPT_DT, F.SVCS_SRC_CD AS FUTURE_SVCS_SRC_CD, F.SRC_APPT_ID AS FUTURE_SRC_APPT_ID, F.SVCS_APPT_STATUS_GID AS FUTURE_SVCS_APPT_STATUS_GID, F.SVCS_APPT_STATUS_DESC AS FUTURE_SVCS_APPT_STATUS_DESC, F.SRC_APPT_STATUS_ID AS FUTURE_SRC_APPT_STATUS_ID, F.SRC_APPT_STATUS_DESC AS FUTURE_SRC_APPT_STATUS_DESC, F.LOCATION_ID AS FUTURE_LOCATION_ID, S.STORE_NBR AS FUTURE_STORE_NBR, S.STORE_NAME AS FUTURE_STORE_NAME, ROW_NUMBER() OVER (PARTITION BY A.SVCS_CUSTOMER_GID, A.SVCS_SRC_CD, A.SRC_APPT_ID  ORDER BY F.APPT_DT ) AS RNK FROM ((ADMIN.SVCS_APPT_RPT_VW A LEFT JOIN ADMIN.SVCS_APPT_RPT_VW F ON (((((F.SVCS_CUSTOMER_GID = A.SVCS_CUSTOMER_GID) AND (A.APPT_DT < F.APPT_DT)) AND (F.SVCS_APPT_STATUS_GID IN (3, 4, 5, 6, 8))) AND ((F.SVCS_SRC_CD = ('SMS'::"VARCHAR")::VARCHAR(5)) OR (F.SVCS_SRC_CD = ('PRISM'::"VARCHAR")::VARCHAR(5)))))) LEFT JOIN ADMIN.SITE_PROFILE_RPT S ON ((S.LOCATION_ID = F.LOCATION_ID))) WHERE (A.SVCS_SRC_CD IN (('SMS'::"VARCHAR")::VARCHAR(5), ('PRISM'::"VARCHAR")::VARCHAR(5)))) X WHERE (X.RNK = 1);

\echo
\echo *****  Creating view:  "SVCS_APPT_CREATION_CHANNEL_RPT_VW"

CREATE or replace VIEW  SVCS_APPT_CREATION_CHANNEL_RPT_VW
(
     SVCS_APPT_CREATION_CHANNEL
) AS
(((SELECT ('SRC'::"VARCHAR")::VARCHAR(8) AS SVCS_APPT_CREATION_CHANNEL) UNION ALL (SELECT ('In-Store'::"VARCHAR")::VARCHAR(8) AS SVCS_APPT_CREATION_CHANNEL)) UNION ALL (SELECT ('Digital'::"VARCHAR")::VARCHAR(8) AS SVCS_APPT_CREATION_CHANNEL)) UNION ALL (SELECT ('Other'::"VARCHAR")::VARCHAR(8) AS SVCS_APPT_CREATION_CHANNEL);

\echo
\echo *****  Creating view:  "SVCS_PET_STATUS_RPT_VW"

CREATE or replace VIEW  SVCS_PET_STATUS_RPT_VW
(
     PET_STATUS
) AS
(SELECT ('Active'::"VARCHAR")::VARCHAR(8) AS PET_STATUS) UNION ALL (SELECT ('Inactive'::"VARCHAR")::VARCHAR(8) AS PET_STATUS);

\echo
\echo *****  Creating view:  "SVCS_PET_BREED_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_PET_BREED_XREF_RPT_VW
(
     SVCS_SRC_CD,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     SRC_PET_BREED_ID,
     SRC_PET_BREED_DESC
) AS
(SELECT ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, PB.PETM_PET_BREED_ID, PB.PETM_PET_BREED_DESC, SMS.SMS_BREED_ID AS SRC_PET_BREED_ID, SMS.SMS_BREED_DESC AS SRC_PET_BREED_DESC FROM ((ADMIN.PETM_PET_BREED_XREF PBX LEFT JOIN ADMIN.PETM_PET_BREED PB ON ((PBX.PETM_PET_BREED_ID = PB.PETM_PET_BREED_ID))) LEFT JOIN ADMIN.SMS_BREED SMS ON ((INT4(PBX.PETM_PET_SYSTEM_BREED_ID) = SMS.SMS_BREED_ID))) WHERE (PBX.PETM_PET_SYSTEM_ID = 1)) UNION ALL (SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, PB.PETM_PET_BREED_ID, PB.PETM_PET_BREED_DESC, PB.PETM_PET_BREED_ID AS SRC_PET_BREED_ID, PB.PETM_PET_BREED_DESC AS SRC_PET_BREED_DESC FROM ADMIN.PETM_PET_BREED PB);

\echo
\echo *****  Creating view:  "SVCS_PET_SPECIES_XREF_RPT_VW"

CREATE or replace VIEW  SVCS_PET_SPECIES_XREF_RPT_VW
(
     SVCS_SRC_CD,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_NAME,
     SRC_PET_SPECIES_ID,
     SRC_PET_SPECIES_DESC
) AS
(SELECT ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, PS.PETM_PET_SPECIES_ID, PS.PETM_PET_SPECIES_NAME, SMS.SMS_SPECIES_ID AS SRC_PET_SPECIES_ID, (SMS.SMS_SPECIES_DESC)::VARCHAR(50) AS SRC_PET_SPECIES_DESC FROM ((ADMIN.PETM_PET_SPECIES_XREF PSX JOIN ADMIN.PETM_PET_SPECIES PS ON ((PSX.PETM_PET_SPECIES_ID = PS.PETM_PET_SPECIES_ID))) LEFT JOIN ADMIN.SMS_SPECIES SMS ON ((INT4(PSX.PETM_PET_SYSTEM_SPECIES_ID) = SMS.SMS_SPECIES_ID))) WHERE (PSX.PETM_PET_SYSTEM_ID = 1)) UNION ALL (SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, PETM_PET_SPECIES.PETM_PET_SPECIES_ID, PETM_PET_SPECIES.PETM_PET_SPECIES_NAME, PETM_PET_SPECIES.PETM_PET_SPECIES_ID AS SRC_PET_SPECIES_ID, PETM_PET_SPECIES.PETM_PET_SPECIES_NAME AS SRC_PET_SPECIES_DESC FROM ADMIN.PETM_PET_SPECIES);

\echo
\echo *****  Creating view:  "E_RES_REQUESTS_RPT_VW"

CREATE or replace VIEW  E_RES_REQUESTS_RPT_VW
(
     E_RES_REQUEST_ID,
     E_RES_CART_ID,
     E_RES_REQUEST_EXT_ID,
     LOCATION_ID,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     CHECK_IN_TSTMP,
     CHECK_OUT_TSTMP,
     NOTES,
     TOTAL_AMT,
     CUST_CALLED_FLAG,
     CALL_REASON,
     CALL_COMMENT,
     CLOSING_COMMENT,
     E_RES_STATUS_ID,
     E_RES_STATUS_DESC,
     DELETED_FLAG,
     E_RES_SOURCE,
     E_RES_LOCKED_BY,
     E_RES_LOCKED_TSTMP,
     E_RES_CREATED_BY,
     E_RES_CREATED_TSTMP,
     E_RES_UPDATED_BY,
     E_RES_UPDATED_TSTMP
) AS
SELECT R.E_RES_REQUEST_ID, R.E_RES_CART_ID, R.E_RES_REQUEST_EXT_ID, S.LOCATION_ID, R.CUST_FIRST_NAME, R.CUST_LAST_NAME, R.CHECK_IN_TSTMP, R.CHECK_OUT_TSTMP, R.NOTES, R.TOTAL_AMT, R.CUST_CALLED_FLAG, R.CALL_REASON, R.CALL_COMMENT, R.CLOSING_COMMENT, R.E_RES_STATUS_ID, A.E_RES_STATUS_DESC, R.DELETED_FLAG, R.E_RES_SOURCE, R.E_RES_LOCKED_BY, R.E_RES_LOCKED_TSTMP, R.E_RES_CREATED_BY, R.E_RES_CREATED_TSTMP, R.E_RES_UPDATED_BY, R.E_RES_UPDATED_TSTMP FROM ((SDS_PRD.ADMIN.E_RES_REQUESTS R JOIN ADMIN.SITE_PROFILE_RPT S ON ((S.STORE_NBR = R.STORE_NBR))) JOIN SDS_PRD.ADMIN.E_RES_STATUS A ON ((R.E_RES_STATUS_ID = A.E_RES_STATUS_ID)));

\echo
\echo *****  Creating view:  "E_RES_PETS_RPT_VW"

CREATE or replace VIEW  E_RES_PETS_RPT_VW
(
     E_RES_PET_ID,
     E_RES_REQUEST_ID,
     E_RES_PET_EXT_ID,
     PET_NAME,
     LOCATION_ID,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_NAME,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_GENDER_CD,
     MIXED_BREED_FLAG,
     FIXED_FLAG,
     PET_BIRTH_DT,
     PET_WEIGHT,
     ROOM_SHARED_FLAG,
     ROOM_TYPE,
     ROOM_UNIT_PRICE,
     ROOM_TOTAL_AMT,
     INSTRUCTIONS,
     VET_NAME,
     VET_PHONE,
     PET_TOTAL_AMT,
     BOOKING_REFERENCE,
     CHECK_IN_TSTMP,
     CHECK_OUT_TSTMP,
     E_RES_CREATED_TSTMP
) AS
SELECT P.E_RES_PET_ID, P.E_RES_REQUEST_ID, P.E_RES_PET_EXT_ID, P.PET_NAME, L.LOCATION_ID, P.PETM_PET_SPECIES_ID, S.PETM_PET_SPECIES_NAME, CASE WHEN (P.PETM_PET_BREED_ID ISNULL) THEN 0 ELSE P.PETM_PET_BREED_ID END AS PETM_PET_BREED_ID, CASE WHEN ((P.PETM_PET_BREED_ID ISNULL) OR (P.PETM_PET_BREED_ID = 0)) THEN 'Not Defined'::"VARCHAR" ELSE B.PETM_PET_BREED_DESC END AS PETM_PET_BREED_DESC, CASE WHEN (P.PETM_PET_COLOR_ID ISNULL) THEN 0 ELSE P.PETM_PET_COLOR_ID END AS PETM_PET_COLOR_ID, CASE WHEN ((P.PETM_PET_COLOR_ID ISNULL) OR (P.PETM_PET_COLOR_ID = 0)) THEN 'Not Defined'::"VARCHAR" ELSE C.PETM_PET_COLOR_DESC END AS PETM_PET_COLOR_DESC, CASE WHEN (P.PET_GENDER_CD ISNULL) THEN 'U'::"VARCHAR" ELSE P.PET_GENDER_CD END AS PET_GENDER_CD, P.MIXED_BREED_FLAG, P.FIXED_FLAG, P.PET_BIRTH_DT, P.PET_WEIGHT, P.ROOM_SHARED_FLAG, P.ROOM_TYPE, P.ROOM_UNIT_PRICE, P.ROOM_TOTAL_AMT, P.INSTRUCTIONS, P.VET_NAME, P.VET_PHONE, P.PET_TOTAL_AMT, P.BOOKING_REFERENCE, R.CHECK_IN_TSTMP, R.CHECK_OUT_TSTMP, R.E_RES_CREATED_TSTMP FROM (((((SDS_PRD.ADMIN.E_RES_PETS P JOIN SDS_PRD.ADMIN.E_RES_REQUESTS R ON ((R.E_RES_REQUEST_ID = P.E_RES_REQUEST_ID))) JOIN ADMIN.SITE_PROFILE_RPT L ON ((L.STORE_NBR = R.STORE_NBR))) JOIN CIDB_PRD.ADMIN.PETM_PET_SPECIES S ON ((S.PETM_PET_SPECIES_ID = P.PETM_PET_SPECIES_ID))) LEFT JOIN CIDB_PRD.ADMIN.PETM_PET_BREED B ON ((B.PETM_PET_BREED_ID = P.PETM_PET_BREED_ID))) LEFT JOIN CIDB_PRD.ADMIN.PETM_PET_COLOR C ON ((C.PETM_PET_COLOR_ID = P.PETM_PET_COLOR_ID)));

\echo
\echo *****  Creating view:  "E_RES_PET_ADD_ONS_RPT_VW"

CREATE or replace VIEW  E_RES_PET_ADD_ONS_RPT_VW
(
     E_RES_PET_ADD_ON_ID,
     E_RES_PET_ID,
     E_RES_REQUEST_ID,
     LOCATION_ID,
     E_RES_ADD_ON_ID,
     ADD_ON_NAME,
     ADD_ON_DESC,
     SKU_NBR,
     E_RES_ADD_ON_CATEGORY_ID,
     E_RES_ADD_ON_CATEGORY_NAME,
     E_RES_ADD_ON_CATEGORY_DESC,
     E_RES_GROUP_ID,
     ALLOW_MULTIPLE_ADD_ONS_FLAG,
     SCHEDULABLE_FLAG,
     BREED_QUALIFIER_FLAG,
     E_RES_ADD_ON_RATE_TYPE_ID,
     IMAGE_URL,
     SORT_ORDER_NBR,
     DELETED_FLAG,
     ADD_ON_FREQ,
     UNIT_PRICE_AMT,
     TOTAL_PRICE_AMT,
     CHECK_IN_TSTMP,
     CHECK_OUT_TSTMP,
     E_RES_CREATED_TSTMP
) AS
SELECT S.E_RES_SELECTED_ADD_ON_ID AS E_RES_PET_ADD_ON_ID, S.E_RES_PET_ID, R.E_RES_REQUEST_ID, L.LOCATION_ID, A.E_RES_ADD_ON_ID, A.ADD_ON_NAME, A.ADD_ON_DESC, A.SKU_NBR, C.E_RES_ADD_ON_CATEGORY_ID, C.E_RES_ADD_ON_CATEGORY_NAME, C.E_RES_ADD_ON_CATEGORY_DESC, A.E_RES_GROUP_ID, A.ALLOW_MULTIPLE_ADD_ONS_FLAG, A.SCHEDULABLE_FLAG, A.BREED_QUALIFIER_FLAG, A.E_RES_ADD_ON_RATE_TYPE_ID, A.IMAGE_URL, A.SORT_ORDER_NBR, A.DELETED_FLAG, S.ADD_ON_FREQ, S.UNIT_PRICE_AMT, S.TOTAL_PRICE_AMT, R.CHECK_IN_TSTMP, R.CHECK_OUT_TSTMP, R.E_RES_CREATED_TSTMP FROM (((((SDS_PRD.ADMIN.E_RES_SELECTED_ADD_ONS S JOIN SDS_PRD.ADMIN.E_RES_ADD_ONS A ON ((SUBSTR(S.E_RES_ADD_ON_DESC, (LENGTH(S.E_RES_ADD_ON_DESC) - 7), 7) = A.SKU_NBR))) JOIN SDS_PRD.ADMIN.E_RES_ADD_ON_CATEGORY C ON ((A.E_RES_ADD_ON_CATEGORY_ID = C.E_RES_ADD_ON_CATEGORY_ID))) JOIN SDS_PRD.ADMIN.E_RES_PETS P ON ((S.E_RES_PET_ID = P.E_RES_PET_ID))) JOIN SDS_PRD.ADMIN.E_RES_REQUESTS R ON ((R.E_RES_REQUEST_ID = P.E_RES_REQUEST_ID))) JOIN ADMIN.SITE_PROFILE_RPT L ON ((L.STORE_NBR = R.STORE_NBR)));

\echo
\echo *****  Creating view:  "E_RES_PET_MEDICATIONS_RPT_VW"

CREATE or replace VIEW  E_RES_PET_MEDICATIONS_RPT_VW
(
     E_RES_PET_MEDICATION_ID,
     E_RES_PET_ID,
     E_RES_REQUEST_ID,
     LOCATION_ID,
     MEDICATION_NAME,
     MEDICATION_DOSE,
     MEDICATION_TIME_OF_DAY,
     MEDICATION_FREQ,
     AILMENTS,
     MEDICATION_INSTRUCTIONS,
     UNIT_PRICE_AMT,
     TOTAL_PRICE_AMT,
     CHECK_IN_TSTMP,
     CHECK_OUT_TSTMP,
     E_RES_CREATED_TSTMP
) AS
SELECT M.E_RES_SELECTED_MEDICATION_ID AS E_RES_PET_MEDICATION_ID, M.E_RES_PET_ID, P.E_RES_REQUEST_ID, L.LOCATION_ID, M.MEDICATION_NAME, M.MEDICATION_DOSE, M.MEDICATION_TIME_OF_DAY, M.MEDICATION_FREQ, M.AILMENTS, M.MEDICATION_INSTRUCTIONS, M.UNIT_PRICE_AMT, M.TOTAL_PRICE_AMT, R.CHECK_IN_TSTMP, R.CHECK_OUT_TSTMP, R.E_RES_CREATED_TSTMP FROM (((SDS_PRD.ADMIN.E_RES_SELECTED_MEDICATIONS M JOIN SDS_PRD.ADMIN.E_RES_PETS P ON ((M.E_RES_PET_ID = P.E_RES_PET_ID))) JOIN SDS_PRD.ADMIN.E_RES_REQUESTS R ON ((P.E_RES_REQUEST_ID = R.E_RES_REQUEST_ID))) JOIN ADMIN.SITE_PROFILE_RPT L ON ((L.STORE_NBR = R.STORE_NBR)));

\echo
\echo *****  Creating view:  "RFX_RTM_CASE_PROJECT_RPT_VW"

CREATE or replace VIEW  RFX_RTM_CASE_PROJECT_RPT_VW
(
     RFX_RTM_VERSION,
     RFX_PROJECT_ID,
     LOCATION_ID,
     STORE_NBR,
     RFX_PROJECT_TYPE_CD,
     RFX_PROJECT_TYPE_DESC,
     RFX_PROJECT_TITLE,
     RFX_PROJECT_PRIORITY_CD,
     RFX_PROJECT_PRIORITY_DESC,
     RFX_EXECUTION_ASSIGNED_ROLE_CD,
     RFX_EXECUTION_ASSIGNED_ROLE_DESC,
     RFX_EXECUTION_ASSIGNED_DEPT_CD,
     RFX_EXECUTION_ASSIGNED_DEPT_DESC,
     RFX_EXECUTION_ASSIGNED_USER_ID,
     RFX_EXECUTION_ASSIGNED_USER_NAME,
     RFX_PROJECT_EXECUTION_START_TSTMP,
     RFX_PROJECT_EXECUTION_END_TSTMP,
     RFX_PROJECT_EXECUTION_COMPLETION_TSTMP,
     EST_EFFORT_IN_HOURS,
     RFX_PROJECT_EXECUTION_STATUS_CD,
     RFX_PROJECT_EXECUTION_STATUS_DESC,
     ON_TIME_COMPLETION_FLAG,
     RFX_CREATOR_USER_ID,
     RFX_CREATOR_NAME,
     RFX_CREATOR_UNIT,
     RFX_CREATOR_DEPT_CD,
     RFX_CREATOR_DEPT_DESC,
     RFX_RELEASE_USER_ID,
     RFX_RELEASE_USER_NAME,
     RFX_PROJECT_ASSIGNED_ROLE_CD,
     RFX_PROJECT_ASSIGNED_ROLE_DESC,
     RFX_PROJECT_ASSIGNED_DEPT_CD,
     RFX_PROJECT_ASSIGNED_DEPT_DESC,
     RFX_UNIT_ORG_LEVEL,
     RFX_TASK_CNT,
     WORKLOAD_FLAG,
     CONFIDENTIAL_FLAG,
     RFX_PROJECT_CREATION_TSTMP,
     RFX_PROJECT_LAUNCH_TSTMP,
     RFX_PROJECT_START_TSTMP,
     RFX_PROJECT_END_TSTMP,
     RFX_PROJECT_COMPLETION_TSTMP,
     RFX_PROJECT_STATUS_CD,
     RFX_PROJECT_STATUS_DESC,
     RFX_LAST_UPDATED_USER_ID,
     RFX_LAST_UPDATED_USER_NAME,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
(SELECT ('V-16'::"VARCHAR")::VARCHAR(4) AS RFX_RTM_VERSION, P.RFX_PROJECT_ID, P.LOCATION_ID, S.STORE_NBR, (P.RFX_PROJECT_TYPE_CD)::VARCHAR(30) AS RFX_PROJECT_TYPE_CD, (PT.RFX_PROJECT_TYPE_DESC)::VARCHAR(200) AS RFX_PROJECT_TYPE_DESC, P.RFX_PROJECT_TITLE, INT4(P.RFX_PROJECT_PRIORITY_CD) AS RFX_PROJECT_PRIORITY_CD, (PP.RFX_PROJECT_PRIORITY_DESC)::VARCHAR(200) AS RFX_PROJECT_PRIORITY_DESC, P.RFX_EXECUTION_ASSIGNED_ROLE_CD, (RRA.RFX_ROLE_DESC)::VARCHAR(200) AS RFX_EXECUTION_ASSIGNED_ROLE_DESC, P.RFX_EXECUTION_ASSIGNED_DEPT_CD, (RDA.RFX_DEPT_DESC)::VARCHAR(200) AS RFX_EXECUTION_ASSIGNED_DEPT_DESC, P.RFX_EXECUTION_ASSIGNED_USER_ID, P.RFX_EXECUTION_ASSIGNED_USER_NAME, P.RFX_PROJECT_EXECUTION_START_TSTMP, P.RFX_PROJECT_EXECUTION_END_TSTMP, P.RFX_PROJECT_EXECUTION_COMPLETION_TSTMP, (P.EST_EFFORT_IN_HOURS)::NUMERIC(18,10) AS EST_EFFORT_IN_HOURS, P.RFX_PROJECT_EXECUTION_STATUS_CD, (PSE.RFX_PROJECT_EXECUTION_STATUS_DESC)::VARCHAR(200) AS RFX_PROJECT_EXECUTION_STATUS_DESC, P.ON_TIME_COMPLETION_FLAG, P.RFX_CREATOR_USER_ID, P.RFX_CREATOR_NAME, P.RFX_CREATOR_UNIT, P.RFX_CREATOR_DEPT_CD, RD.RFX_DEPT_DESC AS RFX_CREATOR_DEPT_DESC, P.RFX_RELEASE_USER_ID, P.RFX_RELEASE_USER_NAME, P.RFX_PROJECT_ASSIGNED_ROLE_CD, RRP.RFX_ROLE_DESC AS RFX_PROJECT_ASSIGNED_ROLE_DESC, P.RFX_PROJECT_ASSIGNED_DEPT_CD, RDP.RFX_DEPT_DESC AS RFX_PROJECT_ASSIGNED_DEPT_DESC, P.RFX_UNIT_ORG_LEVEL, P.RFX_TASK_CNT, P.WORKLOAD_FLAG, P.CONFIDENTIAL_FLAG, P.RFX_PROJECT_CREATION_TSTMP, P.RFX_PROJECT_LAUNCH_TSTMP, P.RFX_PROJECT_START_TSTMP, P.RFX_PROJECT_END_TSTMP, P.RFX_PROJECT_COMPLETION_TSTMP, P.RFX_PROJECT_STATUS_CD, PS.RFX_PROJECT_STATUS_DESC, P.RFX_LAST_UPDATED_USER_ID, P.RFX_LAST_UPDATED_USER_NAME, P.UPDATE_TSTMP, P.LOAD_TSTMP FROM ((((((((((ADMIN.RFX_RTM_PROJECT P LEFT JOIN ADMIN.SITE_PROFILE S ON ((P.LOCATION_ID = S.LOCATION_ID))) LEFT JOIN ADMIN.RFX_RTM_PROJECT_TYPE PT ON ((P.RFX_PROJECT_TYPE_CD = PT.RFX_PROJECT_TYPE_CD))) LEFT JOIN ADMIN.RFX_RTM_PROJECT_PRIORITY PP ON ((P.RFX_PROJECT_PRIORITY_CD = INT2(PP.RFX_PROJECT_PRIORITY_CD)))) LEFT JOIN ADMIN.RFX_RTM_ROLE RRA ON ((P.RFX_EXECUTION_ASSIGNED_ROLE_CD = RRA.RFX_ROLE_CD))) LEFT JOIN ADMIN.RFX_RTM_DEPT RDA ON ((P.RFX_EXECUTION_ASSIGNED_DEPT_CD = RDA.RFX_DEPT_CD))) LEFT JOIN ADMIN.RFX_RTM_PROJECT_EXECUTION_STATUS PSE ON ((P.RFX_PROJECT_EXECUTION_STATUS_CD = PSE.RFX_PROJECT_EXECUTION_STATUS_CD))) LEFT JOIN ADMIN.RFX_RTM_DEPT RD ON ((P.RFX_CREATOR_DEPT_CD = RD.RFX_DEPT_CD))) LEFT JOIN ADMIN.RFX_RTM_ROLE RRP ON ((P.RFX_PROJECT_ASSIGNED_ROLE_CD = RRP.RFX_ROLE_CD))) LEFT JOIN ADMIN.RFX_RTM_DEPT RDP ON ((P.RFX_PROJECT_ASSIGNED_DEPT_CD = RDP.RFX_DEPT_CD))) LEFT JOIN ADMIN.RFX_RTM_PROJECT_STATUS PS ON ((P.RFX_PROJECT_STATUS_CD = PS.RFX_PROJECT_STATUS_CD)))) UNION ALL (SELECT ('V-14'::"VARCHAR")::VARCHAR(4) AS RFX_RTM_VERSION, CP.CASE_INITIATIVE_CD AS RFX_PROJECT_ID, CP.LOCATION_ID, CP.STORE_NBR, CASE WHEN (CP.CASE_PROJECT_TYPE_CD = '22'::"VARCHAR") THEN 'SWA'::"VARCHAR" ELSE CP.CASE_PROJECT_TYPE_CD END AS RFX_PROJECT_TYPE_CD, CP.CASE_PROJECT_TYPE_DESC AS RFX_PROJECT_TYPE_DESC, CP.CASE_PROJECT_TITLE AS RFX_PROJECT_TITLE, CP.CASE_PRIORITY_ID AS RFX_PROJECT_PRIORITY_CD, CASE WHEN (CP.CASE_PRIORITY_DESC = 'High'::"VARCHAR") THEN 'Urgent'::"VARCHAR" WHEN (CP.CASE_PRIORITY_DESC = 'Medium'::"VARCHAR") THEN 'Standard'::"VARCHAR" ELSE CP.CASE_PRIORITY_DESC END AS RFX_PROJECT_PRIORITY_DESC, (CASE WHEN (CP.CASE_ROLE_CD = 'S_SM'::"VARCHAR") THEN 'S_SL'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'C_PROJCRTR'::"VARCHAR") THEN 'P_CREATOR'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'C_SWV'::"VARCHAR") THEN 'SW_VIEWER'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'C_SWC'::"VARCHAR") THEN 'SW_CREATOR'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'R_RVP'::"VARCHAR") THEN 'CORP_AVP'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'C_VIEWER'::"VARCHAR") THEN 'P_VIEWER'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'S_DEPRTMGR'::"VARCHAR") THEN 'S_DEPTMGR'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'S_OP'::"VARCHAR") THEN 'S_ASL'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'ADMIN'::"VARCHAR") THEN 'SYSADMIN'::"VARCHAR" WHEN (CP.CASE_ROLE_CD = 'D_DM'::"VARCHAR") THEN 'D_DL'::"VARCHAR" ELSE CP.CASE_ROLE_CD END)::VARCHAR(100) AS RFX_EXECUTION_ASSIGNED_ROLE_CD, CP.CASE_ROLE_DESC AS RFX_EXECUTION_ASSIGNED_ROLE_DESC, (CASE WHEN (CP.CASE_DEPT_CD = '3105'::"VARCHAR") THEN '3100'::"VARCHAR" WHEN (CP.CASE_DEPT_CD = '3115'::"VARCHAR") THEN '3110'::"VARCHAR" ELSE CP.CASE_DEPT_CD END)::VARCHAR(100) AS RFX_EXECUTION_ASSIGNED_DEPT_CD, CP.CASE_DEPT_DESC AS RFX_EXECUTION_ASSIGNED_DEPT_DESC, (CP.CASE_ASSIGN_USER_ID)::VARCHAR(20) AS RFX_EXECUTION_ASSIGNED_USER_ID, (CP.CASE_ASSIGN_USER_NAME)::VARCHAR(100) AS RFX_EXECUTION_ASSIGNED_USER_NAME, CP.CASE_PROJ_EST_START_TSTMP AS RFX_PROJECT_EXECUTION_START_TSTMP, ACT_FNSH_TIME.FNL_CASE_PROJ_EST_FINISH_TSTMP AS RFX_PROJECT_EXECUTION_END_TSTMP, CP.CASE_PROJ_COMPLETE_TSTMP AS RFX_PROJECT_EXECUTION_COMPLETION_TSTMP, CP.CASE_PROJECT_EXP_HOURS AS EST_EFFORT_IN_HOURS, (CP.CASE_WORK_STATUS_CD)::VARCHAR(16) AS RFX_PROJECT_EXECUTION_STATUS_CD, CP.CASE_WORK_STATUS_DESC AS RFX_PROJECT_EXECUTION_STATUS_DESC, (NULL::"NUMERIC")::NUMERIC(1,0) AS ON_TIME_COMPLETION_FLAG, (NULL::"VARCHAR")::VARCHAR(20) AS RFX_CREATOR_USER_ID, (NULL::"VARCHAR")::VARCHAR(100) AS RFX_CREATOR_NAME, (CP.REQUESTOR_UNIT)::VARCHAR(100) AS RFX_CREATOR_UNIT, (NULL::"VARCHAR")::VARCHAR(100) AS RFX_CREATOR_DEPT_CD, (NULL::"VARCHAR")::VARCHAR(100) AS RFX_CREATOR_DEPT_DESC, (NULL::"VARCHAR")::VARCHAR(20) AS RFX_RELEASE_USER_ID, (NULL::"VARCHAR")::VARCHAR(100) AS RFX_RELEASE_USER_NAME, (NULL::"VARCHAR")::VARCHAR(16) AS RFX_PROJECT_ASSIGNED_ROLE_CD, (NULL::"VARCHAR")::VARCHAR(100) AS RFX_PROJECT_ASSIGNED_ROLE_DESC, (NULL::"VARCHAR")::VARCHAR(16) AS RFX_PROJECT_ASSIGNED_DEPT_CD, (NULL::"VARCHAR")::VARCHAR(100) AS RFX_PROJECT_ASSIGNED_DEPT_DESC, (NULL::"VARCHAR")::VARCHAR(50) AS RFX_UNIT_ORG_LEVEL, NULL::INT2 AS RFX_TASK_CNT, NULL::INT2 AS WORKLOAD_FLAG, NULL::INT2 AS CONFIDENTIAL_FLAG, NULL::"TIMESTAMP" AS RFX_PROJECT_CREATION_TSTMP, NULL::"TIMESTAMP" AS RFX_PROJECT_LAUNCH_TSTMP, NULL::"TIMESTAMP" AS RFX_PROJECT_START_TSTMP, NULL::"TIMESTAMP" AS RFX_PROJECT_END_TSTMP, NULL::"TIMESTAMP" AS RFX_PROJECT_COMPLETION_TSTMP, (NULL::"VARCHAR")::VARCHAR(16) AS RFX_PROJECT_STATUS_CD, (NULL::"VARCHAR")::VARCHAR(100) AS RFX_PROJECT_STATUS_DESC, (CP.UPDATED_BY_ID)::VARCHAR(20) AS RFX_LAST_UPDATED_USER_ID, (CP.UPDATED_BY_NAME)::VARCHAR(100) AS RFX_LAST_UPDATED_USER_NAME, CP.UPDATE_TSTMP, CP.LOAD_TSTMP FROM (ADMIN.CASE_PROJECT CP JOIN (SELECT PRJ.CASE_INITIATIVE_CD, CASE WHEN (MAX(PRJ.CASE_PROJ_EST_FINISH_TSTMP) NOTNULL) THEN MAX(PRJ.CASE_PROJ_EST_FINISH_TSTMP) WHEN (DATE('now'::"VARCHAR") NOTNULL) THEN "TIMESTAMP"(DATE('now'::"VARCHAR")) ELSE NULL::"TIMESTAMP" END AS FNL_CASE_PROJ_EST_FINISH_TSTMP FROM ADMIN.CASE_PROJECT PRJ GROUP BY PRJ.CASE_INITIATIVE_CD) ACT_FNSH_TIME ON ((CP.CASE_INITIATIVE_CD = ACT_FNSH_TIME.CASE_INITIATIVE_CD))));

\echo
\echo *****  Creating view:  "RFX_SWA_WALK_RESPONSE_RPT_VW"

CREATE or replace VIEW  RFX_SWA_WALK_RESPONSE_RPT_VW
(
     RFX_SWA_VERSION,
     RFX_WALK_ID,
     LOCATION_ID,
     RESPONDER_NBR,
     RFX_WALK_GROUP_HANDLE,
     RFX_WALK_QUESTION_HANDLE,
     RFX_WALK_SUB_QUESTION_NBR,
     RFX_WALK_RESPONSE_TSTMP,
     RFX_WALK_TSTMP,
     RFX_SUBMISSION_TSTMP,
     RFX_SURVEY_ID,
     RFX_WALK_TYPE_ID,
     RFX_WALK_TYPE_NAME,
     RFX_WALK_PARTICIPANTS_NAME,
     RFX_WALK_OWNER_ID,
     RFX_WALK_OWNER_NAME,
     SITE_MANAGER_ID,
     SITE_MANAGER_NAME,
     RFX_WALK_QUESTION_TEXT,
     RFX_WALK_SUB_QUESTION_TEXT,
     RFX_WALK_RESPONSE_TYPE_CD,
     OPTION_SELECTED,
     OPTION_TEXT,
     NUMERIC_VALUE,
     TEXT_VALUE,
     DATE_VALUE,
     ATTACHMENT_COUNT,
     COMMENTS,
     RFX_TASK_CNT,
     RFX_PASS_STATUS_CD,
     RESPONSE_POINTS_SCORED,
     RESPONSE_TOTAL_POINTS,
     RESPONSE_TARGET_POINTS,
     MERGED_NUMERIC_VALUE
) AS
SELECT AA.RFX_SWA_VERSION, AA.RFX_WALK_ID, AA.LOCATION_ID, AA.RESPONDER_NBR, AA.RFX_WALK_GROUP_HANDLE, AA.RFX_WALK_QUESTION_HANDLE, AA.RFX_WALK_SUB_QUESTION_NBR, AA.RFX_WALK_RESPONSE_TSTMP, AA.RFX_WALK_TSTMP, AA.RFX_SUBMISSION_TSTMP, AA.RFX_SURVEY_ID, AA.RFX_WALK_TYPE_ID, AA.RFX_WALK_TYPE_NAME, AA.RFX_WALK_PARTICIPANTS_NAME, AA.RFX_WALK_OWNER_ID, AA.RFX_WALK_OWNER_NAME, AA.SITE_MANAGER_ID, AA.SITE_MANAGER_NAME, AA.RFX_WALK_QUESTION_TEXT, AA.RFX_WALK_SUB_QUESTION_TEXT, AA.RFX_WALK_RESPONSE_TYPE_CD, AA.OPTION_SELECTED, AA.OPTION_TEXT, AA.NUMERIC_VALUE, AA.TEXT_VALUE, AA.DATE_VALUE, AA.ATTACHMENT_COUNT, AA.COMMENTS, AA.RFX_TASK_CNT, AA.RFX_PASS_STATUS_CD, AA.RESPONSE_POINTS_SCORED, AA.RESPONSE_TOTAL_POINTS, AA.RESPONSE_TARGET_POINTS, CASE WHEN ((AA.TEXT_VALUE <> ''::"VARCHAR") AND (LENGTH(TRANSLATE(AA.TEXT_VALUE, '0123456789'::"VARCHAR", ''::"VARCHAR")) = 0)) THEN TO_NUMBER(AA.TEXT_VALUE, '999999999999999999'::"VARCHAR") WHEN (((LENGTH(TRANSLATE(AA.TEXT_VALUE, '0123456789'::"VARCHAR", ''::"VARCHAR")) = 1) AND (LENGTH(TRANSLATE(AA.TEXT_VALUE, '0123456789.'::"VARCHAR", ''::"VARCHAR")) = 0)) AND (BTRIM(AA.TEXT_VALUE) <> '.'::"VARCHAR")) THEN TO_NUMBER(BTRIM(AA.TEXT_VALUE, '.'::"VARCHAR"), '999999999999999999D9999'::"VARCHAR") ELSE AA.NUMERIC_VALUE END AS MERGED_NUMERIC_VALUE FROM ((SELECT ('V-16'::"VARCHAR")::VARCHAR(4) AS RFX_SWA_VERSION, R.RFX_WALK_ID, R.LOCATION_ID, S.RFX_WALK_ID AS RESPONDER_NBR, (SUBSTR(R.RFX_WALK_GROUP_HANDLE, 1, 12))::VARCHAR(16) AS RFX_WALK_GROUP_HANDLE, R.RFX_WALK_QUESTION_HANDLE, INT4(R.RFX_WALK_SUB_QUESTION_NBR) AS RFX_WALK_SUB_QUESTION_NBR, R.RFX_WALK_RESPONSE_TSTMP, S.RFX_WALK_TSTMP, S.RFX_SUBMISSION_TSTMP, R.RFX_WALK_GROUP_HANDLE AS RFX_SURVEY_ID, ("VARCHAR"(S.RFX_WALK_TYPE_ID))::VARCHAR(16) AS RFX_WALK_TYPE_ID, S.RFX_WALK_TYPE_NAME, S.RFX_WALK_PARTICIPANTS_NAME, S.RFX_WALK_OWNER_ID, S.RFX_WALK_OWNER_NAME, S.SITE_MANAGER_ID, S.SITE_MANAGER_NAME, R.RFX_WALK_QUESTION_TEXT, R.RFX_WALK_SUB_QUESTION_TEXT, R.RFX_WALK_RESPONSE_TYPE_CD, INT4(R.OPTION_SELECTED) AS OPTION_SELECTED, R.OPTION_TEXT, R.NUMERIC_VALUE, R.TEXT_VALUE, R.DATE_VALUE, R.ATTACHMENT_COUNT, R.COMMENTS, S.RFX_TASK_CNT, S.RFX_PASS_STATUS_CD, (R.POINTS_SCORED)::NUMERIC(22,2) AS RESPONSE_POINTS_SCORED, (CASE WHEN (R.OPTION_SELECTED = 3) THEN '0'::NUMERIC ELSE R.TOTAL_POINTS END)::NUMERIC(22,2) AS RESPONSE_TOTAL_POINTS, R.TARGET_POINTS AS RESPONSE_TARGET_POINTS FROM (ADMIN.RFX_SWA_WALK_RESPONSE R JOIN ADMIN.RFX_SWA_STORE_WALK S ON ((R.RFX_WALK_ID = S.RFX_WALK_ID)))) UNION ALL (SELECT ('V-14'::"VARCHAR")::VARCHAR(4) AS RFX_SWA_VERSION, INT8(INT4(SUBSTR(CASE WHEN (R.WALK_ID NOTNULL) THEN R.WALK_ID WHEN (T.WALK_ID NOTNULL) THEN T.WALK_ID ELSE NULL::"VARCHAR" END, 4, 6))) AS RFX_WALK_ID, CASE WHEN (R.LOCATION_ID NOTNULL) THEN R.LOCATION_ID WHEN (T.LOCATION_ID NOTNULL) THEN T.LOCATION_ID ELSE NULL::INT4 END AS LOCATION_ID, INT8(CASE WHEN (T.RESPONDER_NBR NOTNULL) THEN T.RESPONDER_NBR WHEN (R.RESPONDER_NBR NOTNULL) THEN R.RESPONDER_NBR ELSE NULL::INT4 END) AS RESPONDER_NBR, T.WALK_TYPE_ID AS RFX_WALK_GROUP_HANDLE, (CASE WHEN (R.QUESTION_ID NOTNULL) THEN R.QUESTION_ID WHEN (T.QUESTION_ID NOTNULL) THEN T.QUESTION_ID ELSE NULL::"VARCHAR" END)::VARCHAR(100) AS RFX_WALK_QUESTION_HANDLE, CASE WHEN (R.SUB_QUESTION_NBR NOTNULL) THEN R.SUB_QUESTION_NBR WHEN (T.ROW_NBR NOTNULL) THEN T.ROW_NBR ELSE NULL::INT4 END AS RFX_WALK_SUB_QUESTION_NBR, CASE WHEN (R.LAST_UPDATE_TSTMP NOTNULL) THEN R.LAST_UPDATE_TSTMP WHEN (T.LAST_UPDATE_TSTMP NOTNULL) THEN T.LAST_UPDATE_TSTMP ELSE NULL::"TIMESTAMP" END AS RFX_WALK_RESPONSE_TSTMP, CASE WHEN (R.DAY_DT NOTNULL) THEN R.DAY_DT WHEN (T.DAY_DT NOTNULL) THEN T.DAY_DT ELSE NULL::"TIMESTAMP" END AS RFX_WALK_TSTMP, NULL::"TIMESTAMP" AS RFX_SUBMISSION_TSTMP, (CASE WHEN (R.RFLXS_SURVEY_ID NOTNULL) THEN R.RFLXS_SURVEY_ID WHEN (T.RFLXS_SURVEY_ID NOTNULL) THEN T.RFLXS_SURVEY_ID ELSE NULL::"VARCHAR" END)::VARCHAR(100) AS RFX_SURVEY_ID, T.WALK_TYPE_ID AS RFX_WALK_TYPE_ID, (WT.WALK_TYPE_DESCR)::VARCHAR(400) AS RFX_WALK_TYPE_NAME, (NULL::"VARCHAR")::VARCHAR(200) AS RFX_WALK_PARTICIPANTS_NAME, (NULL::"VARCHAR")::VARCHAR(20) AS RFX_WALK_OWNER_ID, T.USR_FLD1 AS RFX_WALK_OWNER_NAME, T.SITE_MANAGER_ID, T.SITE_MANAGER_NAME, (R.QUESTION_TEXT)::VARCHAR(1024) AS RFX_WALK_QUESTION_TEXT, (R.ROW_DESCRIPTION)::VARCHAR(1024) AS RFX_WALK_SUB_QUESTION_TEXT, (NULL::"VARCHAR")::VARCHAR(2) AS RFX_WALK_RESPONSE_TYPE_CD, R.OPTION_SELECTED, (R.OPTION_TEXT)::VARCHAR(500) AS OPTION_TEXT, (R.NUM_VALUE)::NUMERIC(22,4) AS NUMERIC_VALUE, R.TEXT_VALUE, R.DATE_VALUE, NULL::INT2 AS ATTACHMENT_COUNT, R.RESPONDER_COMMENTS AS COMMENTS, NULL::INT2 AS RFX_TASK_CNT, (NULL::"VARCHAR")::VARCHAR(1) AS RFX_PASS_STATUS_CD, (CASE WHEN (T.POINTS NOTNULL) THEN T.POINTS WHEN (R.NO_POINTS NOTNULL) THEN "NUMERIC"(R.NO_POINTS) ELSE NULL::"NUMERIC" END)::NUMERIC(22,2) AS RESPONSE_POINTS_SCORED, (CASE WHEN (T.TOT_PTS NOTNULL) THEN T.TOT_PTS WHEN (R.TOT_POINTS NOTNULL) THEN "NUMERIC"(R.TOT_POINTS) ELSE NULL::"NUMERIC" END)::NUMERIC(22,2) AS RESPONSE_TOTAL_POINTS, (NULL::"NUMERIC")::NUMERIC(7,2) AS RESPONSE_TARGET_POINTS FROM ((ADMIN.RFLXS_STORE_WALK_TOTALS T FULL JOIN ADMIN.RFLXS_SURVEY_RESPONSE_OP_RESPONSE R ON ((((((((T.DAY_DT = R.DAY_DT) AND (T.RFLXS_SURVEY_ID = R.RFLXS_SURVEY_ID)) AND (T.LOCATION_ID = R.LOCATION_ID)) AND (T.RESPONDER_NBR = R.RESPONDER_NBR)) AND (T.WALK_ID = R.WALK_ID)) AND (T.QUESTION_ID = R.QUESTION_ID)) AND (T.ROW_NBR = R.SUB_QUESTION_NBR)))) LEFT JOIN ADMIN.RFLXS_STORE_WALK_TYPE WT ON ((WT.WALK_TYPE_ID = T.WALK_TYPE_ID))) WHERE ((((((((T.WALK_TOTALS_DEL_FLG = 0) OR (T.WALK_TOTALS_DEL_FLG ISNULL)) AND ((T.STORE_WALK_DEL_FLG = 0) OR (T.STORE_WALK_DEL_FLG ISNULL))) AND ((R.OP_RESPONSE_DEL_FLG = 0) OR (R.OP_RESPONSE_DEL_FLG ISNULL))) AND ((R.RESPONSE_DEL_FLG = 0) OR (R.RESPONSE_DEL_FLG ISNULL))) AND (CASE WHEN (R.QUESTION_ID NOTNULL) THEN R.QUESTION_ID WHEN (T.QUESTION_ID NOTNULL) THEN T.QUESTION_ID ELSE NULL::"VARCHAR" END !~~ LIKE_ESCAPE('P%'::"VARCHAR", '\'::"VARCHAR"))) AND (CASE WHEN (R.QUESTION_ID NOTNULL) THEN R.QUESTION_ID WHEN (T.QUESTION_ID NOTNULL) THEN T.QUESTION_ID ELSE NULL::"VARCHAR" END !~~ LIKE_ESCAPE('S%'::"VARCHAR", '\'::"VARCHAR"))) AND (CASE WHEN (R.QUESTION_ID NOTNULL) THEN R.QUESTION_ID WHEN (T.QUESTION_ID NOTNULL) THEN T.QUESTION_ID ELSE NULL::"VARCHAR" END !~~ LIKE_ESCAPE('QNR%'::"VARCHAR", '\'::"VARCHAR"))))) AA;

\echo
\echo *****  Creating view:  "PS2_ADJUSTED_LABOR_WK_CRCY_VW"

CREATE or replace VIEW  PS2_ADJUSTED_LABOR_WK_CRCY_VW
(
     WEEK_DT,
     LOCATION_ID,
     EARN_ID,
     STORE_DEPT_NBR,
     JOB_CODE,
     ACT_HOURS_WORKED,
     ACT_EARNINGS_LOC_AMT,
     EARNED_HOURS,
     EARNED_LOC_AMT,
     FORECAST_HRS,
     FORECAST_LOC_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT ALW.WEEK_DT, ALW.LOCATION_ID, ALW.EARN_ID, ALW.STORE_DEPT_NBR, ALW.JOB_CODE, ALW.ACT_HOURS_WORKED, ALW.ACT_EARNINGS_LOC_AMT, ALW.EARNED_HOURS, ALW.EARNED_LOC_AMT, ALW.FORECAST_HRS, ALW.FORECAST_LOC_AMT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE ALW.EXCHANGE_RATE END AS EXCH_RATE_PCT, ALW.UPDATE_DT, ALW.LOAD_DT FROM (ADMIN.PS2_ADJUSTED_LABOR_WK ALW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SERVICE_SMART_CRCY_VW"

CREATE or replace VIEW  SERVICE_SMART_CRCY_VW
(
     WEEK_DT,
     LOCATION_ID,
     COUNTRY_CD,
     C_ACTUAL_HRS,
     C_EARN_HRS,
     C_HRS_EFFICIENCY,
     C_ACTUAL_SPEC_HRS,
     C_EARN_SPEC_HRS,
     C_SPEC_HRS_EFFICIENCY,
     C_ACTUAL_AMT,
     C_EARN_AMT,
     C_AMT_EFFICIENCY,
     C_ACTUAL_OT_HRS,
     C_ACTUAL_OT_AMT,
     C_EARN_OT_AMT,
     C_OT_AMT_EFFICIENCY,
     C_ACTUAL_PRCNT,
     C_EARN_PRCNT,
     C_INCREMENTAL_HRS,
     S_ACTUAL_FSG_HRS,
     S_EARN_FSG_HRS,
     S_FSG_HRS_EFFICIENCY,
     S_ACTUAL_FSG_AMT,
     S_EARN_FSG_AMT,
     S_FSG_AMT_EFFICIENCY,
     S_ACTUAL_FSG_PRCNT,
     S_EARN_FSG_PRCNT,
     S_ACTUAL_BB_HRS,
     S_EARN_BB_HRS,
     S_BB_HRS_EFFICIENCY,
     S_ACTUAL_BB_AMT,
     S_EARN_BB_AMT,
     S_BB_AMT_EFFICIENCY,
     S_ACTUAL_BB_PRCNT,
     S_EARN_BB_PRCNT,
     S_ACTUAL_TTL_HRS,
     S_EARN_TTL_HRS,
     S_TTL_HRS_EFFICIENCY,
     S_ACTUAL_TTL_AMT,
     S_EARN_TTL_AMT,
     S_TTL_AMT_EFFICIENCY,
     S_ACTUAL_TTL_PRCNT,
     S_EARN_TTL_PRCNT,
     T_ACTUAL_HRS,
     T_EARN_HRS,
     T_HRS_EFFICIENCY,
     T_ACTUAL_AMT,
     T_EARN_AMT,
     T_AMT_EFFICIENCY,
     T_ACTUAL_PRCNT,
     T_EARN_PRCNT,
     C_PLAN_AMT,
     S_PLAN_AMT,
     T_PLAN_AMT,
     C_CSM_ACTUAL_AMT,
     C_CSM_ACTUAL_HRS,
     C_CSM_PLAN_AMT,
     C_CSM_PLAN_HRS,
     C_CHM_ACTUAL_AMT,
     C_CHM_ACTUAL_HRS,
     C_CHM_PLAN_AMT,
     C_CHM_PLAN_HRS,
     C_CHA_ACTUAL_AMT,
     C_CHA_ACTUAL_HRS,
     C_CHA_PLAN_AMT,
     C_CHA_PLAN_HRS,
     CSM_PLAN_TTL_PAY,
     CSM_PLAN_TTL_HRS,
     H_HOURLY_ACTUAL_HRS,
     H_HOURLY_ACTUAL_OT_HRS,
     H_HOURLY_ACTUAL_AMT,
     H_HOURLY_ACTUAL_OT_AMT,
     H_SALARY_ACTUAL_HRS,
     H_SALARY_ACTUAL_AMT,
     H_HOURLY_EARN_AMT,
     H_SALARY_EARN_AMT,
     H_HOURLY_EARN_HRS,
     H_SALARY_EARN_HRS,
     H_HOURLY_OT_EARN_AMT,
     H_HOURLY_OT_EARN_HRS,
     S_FCST_BB_HRS,
     S_FCST_FSG_HRS,
     T_FCST_HRS,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     UPDATE_DT,
     LOAD_DT
) AS
SELECT SS.WEEK_DT, SS.LOCATION_ID, SS.COUNTRY_CD, SS.C_ACTUAL_HRS, SS.C_EARN_HRS, SS.C_HRS_EFFICIENCY, SS.C_ACTUAL_SPEC_HRS, SS.C_EARN_SPEC_HRS, SS.C_SPEC_HRS_EFFICIENCY, SS.C_ACTUAL_AMT, SS.C_EARN_AMT, SS.C_AMT_EFFICIENCY, SS.C_ACTUAL_OT_HRS, SS.C_ACTUAL_OT_AMT, SS.C_EARN_OT_AMT, SS.C_OT_AMT_EFFICIENCY, SS.C_ACTUAL_PRCNT, SS.C_EARN_PRCNT, SS.C_INCREMENTAL_HRS, SS.S_ACTUAL_FSG_HRS, SS.S_EARN_FSG_HRS, SS.S_FSG_HRS_EFFICIENCY, SS.S_ACTUAL_FSG_AMT, SS.S_EARN_FSG_AMT, SS.S_FSG_AMT_EFFICIENCY, SS.S_ACTUAL_FSG_PRCNT, SS.S_EARN_FSG_PRCNT, SS.S_ACTUAL_BB_HRS, SS.S_EARN_BB_HRS, SS.S_BB_HRS_EFFICIENCY, SS.S_ACTUAL_BB_AMT, SS.S_EARN_BB_AMT, SS.S_BB_AMT_EFFICIENCY, SS.S_ACTUAL_BB_PRCNT, SS.S_EARN_BB_PRCNT, SS.S_ACTUAL_TTL_HRS, SS.S_EARN_TTL_HRS, SS.S_TTL_HRS_EFFICIENCY, SS.S_ACTUAL_TTL_AMT, SS.S_EARN_TTL_AMT, SS.S_TTL_AMT_EFFICIENCY, SS.S_ACTUAL_TTL_PRCNT, SS.S_EARN_TTL_PRCNT, SS.T_ACTUAL_HRS, SS.T_EARN_HRS, SS.T_HRS_EFFICIENCY, SS.T_ACTUAL_AMT, SS.T_EARN_AMT, SS.T_AMT_EFFICIENCY, SS.T_ACTUAL_PRCNT, SS.T_EARN_PRCNT, SS.C_PLAN_AMT, SS.S_PLAN_AMT, SS.T_PLAN_AMT, SS.C_CSM_ACTUAL_AMT, SS.C_CSM_ACTUAL_HRS, SS.C_CSM_PLAN_AMT, SS.C_CSM_PLAN_HRS, SS.C_CHM_ACTUAL_AMT, SS.C_CHM_ACTUAL_HRS, SS.C_CHM_PLAN_AMT, SS.C_CHM_PLAN_HRS, SS.C_CHA_ACTUAL_AMT, SS.C_CHA_ACTUAL_HRS, SS.C_CHA_PLAN_AMT, SS.C_CHA_PLAN_HRS, SS.CSM_PLAN_TTL_PAY, SS.CSM_PLAN_TTL_HRS, SS.H_HOURLY_ACTUAL_HRS, SS.H_HOURLY_ACTUAL_OT_HRS, SS.H_HOURLY_ACTUAL_AMT, SS.H_HOURLY_ACTUAL_OT_AMT, SS.H_SALARY_ACTUAL_HRS, SS.H_SALARY_ACTUAL_AMT, SS.H_HOURLY_EARN_AMT, SS.H_SALARY_EARN_AMT, SS.H_HOURLY_EARN_HRS, SS.H_SALARY_EARN_HRS, SS.H_HOURLY_OT_EARN_AMT, SS.H_HOURLY_OT_EARN_HRS, SS.S_FCST_BB_HRS, SS.S_FCST_FSG_HRS, SS.T_FCST_HRS, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SS.EXCH_RATE_PCT END AS EXCH_RATE_PCT, SS.UPDATE_DT, SS.LOAD_DT FROM (ADMIN.SERVICE_SMART SS CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "PS2_EARNED_LABOR_CRCY_VW"

CREATE or replace VIEW  PS2_EARNED_LABOR_CRCY_VW
(
     WEEK_DT,
     LOCATION_ID,
     WFA_BUSN_AREA_ID,
     WFA_DEPT_ID,
     WFA_TASK_ID,
     "TYPE",
     SOURCE,
     EARNED_OT_HRS,
     EARNED_LOC_OT_AMT,
     FCST_HRS,
     EARNED_TTL_HRS,
     EARNED_LOC_TTL_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     STORE_NBR,
     WFA_BUSN_AREA_DESC,
     WFA_DEPT_DESC,
     WFA_TASK_DESC,
     LOAD_DT
) AS
SELECT CASE WHEN (PEL.WEEK_DT ISNULL) THEN FCST.WEEK_DT ELSE PEL.WEEK_DT END AS WEEK_DT, CASE WHEN (PEL.LOCATION_ID ISNULL) THEN FCST.LOCATION_ID ELSE PEL.LOCATION_ID END AS LOCATION_ID, CASE WHEN (PEL.WFA_BUSN_AREA_ID ISNULL) THEN FCST.WFA_BUSN_AREA_ID ELSE PEL.WFA_BUSN_AREA_ID END AS WFA_BUSN_AREA_ID, CASE WHEN (PEL.WFA_DEPT_ID ISNULL) THEN FCST.WFA_DEPT_ID ELSE PEL.WFA_DEPT_ID END AS WFA_DEPT_ID, CASE WHEN (PEL.WFA_TASK_ID ISNULL) THEN FCST.WFA_TASK_ID ELSE PEL.WFA_TASK_ID END AS WFA_TASK_ID, CASE WHEN (PEL."TYPE" ISNULL) THEN "VARCHAR"(FCST.WFA_BUSN_AREA_DESC) ELSE PEL."TYPE" END AS "TYPE", PEL.SOURCE, CASE WHEN (PEL.EARNED_OT_HRS ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_OT_HRS END AS EARNED_OT_HRS, CASE WHEN (PEL.EARNED_LOC_OT_AMT ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_LOC_OT_AMT END AS EARNED_LOC_OT_AMT, CASE WHEN ((FCST.FCST_HRS ISNULL) AND (FCHTL.FCST_HRS ISNULL)) THEN '0'::NUMERIC WHEN (FCHTL.FCST_HRS NOTNULL) THEN FCHTL.FCST_HRS ELSE FCST.FCST_HRS END AS FCST_HRS, CASE WHEN (PEL.EARNED_TTL_HRS ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_TTL_HRS END AS EARNED_TTL_HRS, CASE WHEN (PEL.EARNED_LOC_TTL_AMT ISNULL) THEN '0'::NUMERIC ELSE PEL.EARNED_LOC_TTL_AMT END AS EARNED_LOC_TTL_AMT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) WHEN (PEL.ACTUAL_EXCH_RATE ISNULL) THEN PS2.ACTUAL_EXCH_RATE ELSE PEL.ACTUAL_EXCH_RATE END AS EXCH_RATE_PCT, CASE WHEN (PEL.FISCAL_WK ISNULL) THEN FCST.FISCAL_WK ELSE PEL.FISCAL_WK END AS FISCAL_WK, CASE WHEN (PEL.FISCAL_MO ISNULL) THEN FCST.FISCAL_MO ELSE PEL.FISCAL_MO END AS FISCAL_MO, CASE WHEN (PEL.FISCAL_YR ISNULL) THEN FCST.FISCAL_YR ELSE PEL.FISCAL_YR END AS FISCAL_YR, CASE WHEN (PEL.STORE_NBR ISNULL) THEN FCST.STORE_NBR ELSE PEL.STORE_NBR END AS STORE_NBR, CASE WHEN (PEL.WFA_BUSN_AREA_DESC ISNULL) THEN "VARCHAR"(FCST.WFA_BUSN_AREA_DESC) ELSE PEL.WFA_BUSN_AREA_DESC END AS WFA_BUSN_AREA_DESC, CASE WHEN (PEL.WFA_DEPT_DESC ISNULL) THEN "VARCHAR"(FCST.WFA_DEPT_DESC) ELSE PEL.WFA_DEPT_DESC END AS WFA_DEPT_DESC, CASE WHEN (PEL.WFA_TASK_DESC ISNULL) THEN "VARCHAR"(FCST.WFA_TASK_DESC) ELSE PEL.WFA_TASK_DESC END AS WFA_TASK_DESC, CASE WHEN (PEL.LOAD_DT ISNULL) THEN FCST.LOAD_DT ELSE PEL.LOAD_DT END AS LOAD_DT FROM ((((((((SELECT PS2_EARNED_LABOR_PSOFT.WEEK_DT, PS2_EARNED_LABOR_PSOFT.LOCATION_ID, PS2_EARNED_LABOR_PSOFT.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR_PSOFT.WFA_DEPT_ID, PS2_EARNED_LABOR_PSOFT.WFA_TASK_ID, PS2_EARNED_LABOR_PSOFT."TYPE", PS2_EARNED_LABOR_PSOFT.SOURCE, (PS2_EARNED_LABOR_PSOFT.EARNED_OT_HRS)::NUMERIC(38,2) AS EARNED_OT_HRS, (PS2_EARNED_LABOR_PSOFT.EARNED_LOC_OT_AMT)::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR_PSOFT.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR_PSOFT.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR_PSOFT.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR_PSOFT.FISCAL_WK, PS2_EARNED_LABOR_PSOFT.FISCAL_MO, PS2_EARNED_LABOR_PSOFT.FISCAL_YR, PS2_EARNED_LABOR_PSOFT.STORE_NBR, PS2_EARNED_LABOR_PSOFT.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR_PSOFT.WFA_DEPT_DESC, PS2_EARNED_LABOR_PSOFT.WFA_TASK_DESC, PS2_EARNED_LABOR_PSOFT.LOAD_DT FROM ADMIN.PS2_EARNED_LABOR_PSOFT) UNION ALL (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.SOURCE, (PS2_EARNED_LABOR.EARNED_OT_HRS)::NUMERIC(38,2) AS EARNED_OT_HRS, (PS2_EARNED_LABOR.EARNED_LOC_OT_AMT)::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR.FISCAL_WK, PS2_EARNED_LABOR.FISCAL_MO, PS2_EARNED_LABOR.FISCAL_YR, PS2_EARNED_LABOR.STORE_NBR, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.LOAD_DT FROM ADMIN.PS2_EARNED_LABOR WHERE (PS2_EARNED_LABOR.WEEK_DT < '2012-12-30 00:00:00'::"TIMESTAMP"))) UNION ALL (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.SOURCE, (PS2_EARNED_LABOR.EARNED_OT_HRS)::NUMERIC(38,2) AS EARNED_OT_HRS, (PS2_EARNED_LABOR.EARNED_LOC_OT_AMT)::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR.FISCAL_WK, PS2_EARNED_LABOR.FISCAL_MO, PS2_EARNED_LABOR.FISCAL_YR, PS2_EARNED_LABOR.STORE_NBR, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.LOAD_DT FROM (ADMIN.PS2_EARNED_LABOR JOIN ADMIN.SITE_PROFILE_RPT ON ((PS2_EARNED_LABOR.LOCATION_ID = SITE_PROFILE_RPT.LOCATION_ID))) WHERE ((PS2_EARNED_LABOR.WEEK_DT >= '2012-12-30 00:00:00'::"TIMESTAMP") AND (((SITE_PROFILE_RPT.HOTEL_FLAG = 1) AND (PS2_EARNED_LABOR."TYPE" NOT IN (('PetsHotel'::"VARCHAR")::VARCHAR(50), ('Day Camp'::"VARCHAR")::VARCHAR(50)))) OR ((SITE_PROFILE_RPT.HOTEL_FLAG = 0) AND (PS2_EARNED_LABOR.WFA_BUSN_AREA_ID <> 4)))))) UNION ALL (SELECT HTL.WEEK_DT, HTL.LOCATION_ID, HTL.WFA_BUSN_AREA_ID, MAX(HTL.WFA_DEPT_ID) AS WFA_DEPT_ID, MAX(HTL.WFA_TASK_ID) AS WFA_TASK_ID, (MAX(HTL."TYPE"))::VARCHAR(50) AS "TYPE", (MAX(HTL.SOURCE))::CHAR(1) AS SOURCE, (SUM(HTL.EARNED_OT_HRS))::NUMERIC(38,2) AS EARNED_OT_HRS, (SUM(HTL.EARNED_LOC_OT_AMT))::NUMERIC(38,2) AS EARNED_LOC_OT_AMT, (SUM(HTL.EARNED_TTL_HRS))::NUMERIC(38,2) AS EARNED_TTL_HRS, (SUM(HTL.EARNED_LOC_TTL_AMT))::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, (MAX(HTL.ACTUAL_EXCH_RATE))::NUMERIC(9,6) AS ACTUAL_EXCH_RATE, MAX(HTL.FISCAL_WK) AS FISCAL_WK, MAX(HTL.FISCAL_MO) AS FISCAL_MO, MAX(HTL.FISCAL_YR) AS FISCAL_YR, MAX(HTL.STORE_NBR) AS STORE_NBR, (MAX(HTL.WFA_BUSN_AREA_DESC))::VARCHAR(50) AS WFA_BUSN_AREA_DESC, (MAX(HTL.WFA_DEPT_DESC))::VARCHAR(50) AS WFA_DEPT_DESC, (MAX(HTL.WFA_TASK_DESC))::VARCHAR(50) AS WFA_TASK_DESC, MAX(HTL.LOAD_DT) AS LOAD_DT FROM ((SELECT "TIMESTAMP"(HTL.WEEK_DT) AS WEEK_DT, HTL.LOCATION_ID, P.WFA_BUSN_AREA_ID, P.WFA_DEPT_ID, P.WFA_TASK_ID, P."TYPE", P.SOURCE, ('0'::NUMERIC)::NUMERIC(9,2) AS EARNED_OT_HRS, ('0'::NUMERIC)::NUMERIC(9,2) AS EARNED_LOC_OT_AMT, HTL.TOTAL_EARNED_HRS AS EARNED_TTL_HRS, HTL.TOTAL_EARNED_AMT AS EARNED_LOC_TTL_AMT, P.ACTUAL_EXCH_RATE, HTL.FISCAL_WK, HTL.FISCAL_MO, HTL.FISCAL_YR, HTL.STORE_NBR, P.WFA_BUSN_AREA_DESC, P.WFA_DEPT_DESC, P.WFA_TASK_DESC, HTL.LOAD_TSTMP AS LOAD_DT FROM (((SELECT PS2_HTL_EARNED.WEEK_DT, PS2_HTL_EARNED.LOCATION_ID, SUM(PS2_HTL_EARNED.TOTAL_EARNED_HRS) AS TOTAL_EARNED_HRS, SUM(PS2_HTL_EARNED.TOTAL_EARNED_AMT) AS TOTAL_EARNED_AMT, PS2_HTL_EARNED.FISCAL_WK, PS2_HTL_EARNED.FISCAL_MO, PS2_HTL_EARNED.FISCAL_YR, PS2_HTL_EARNED.STORE_NBR, MAX(PS2_HTL_EARNED.LOAD_TSTMP) AS LOAD_TSTMP FROM ADMIN.PS2_HTL_EARNED GROUP BY PS2_HTL_EARNED.WEEK_DT, PS2_HTL_EARNED.LOCATION_ID, PS2_HTL_EARNED.FISCAL_WK, PS2_HTL_EARNED.FISCAL_MO, PS2_HTL_EARNED.FISCAL_YR, PS2_HTL_EARNED.STORE_NBR) HTL JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((SPR.LOCATION_ID = HTL.LOCATION_ID))) JOIN (SELECT P.WEEK_DT, P.LOCATION_ID, P.WFA_DEPT_ID, P.WFA_TASK_ID, P.SOURCE, P."TYPE", P.WFA_BUSN_AREA_ID, P.WFA_BUSN_AREA_DESC, P.WFA_DEPT_DESC, P.WFA_TASK_DESC, P.ACTUAL_EXCH_RATE, ROW_NUMBER() OVER (PARTITION BY P.WEEK_DT, P.LOCATION_ID  ORDER BY P.ROW_CNT DESC ) AS RN FROM (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR.SOURCE, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, SUM(1) AS ROW_CNT FROM ADMIN.PS2_EARNED_LABOR WHERE (PS2_EARNED_LABOR.WFA_BUSN_AREA_ID = 4::INT2) GROUP BY PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR.SOURCE, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE) P) P ON ((((("TIMESTAMP"(HTL.WEEK_DT) = P.WEEK_DT) AND (HTL.LOCATION_ID = P.LOCATION_ID)) AND (P.RN = 1)) AND (SPR.HOTEL_FLAG = 1)))) WHERE (HTL.WEEK_DT >= '2012-12-30'::DATE)) UNION ALL (SELECT PS2_EARNED_LABOR.WEEK_DT, PS2_EARNED_LABOR.LOCATION_ID, PS2_EARNED_LABOR.WFA_BUSN_AREA_ID, PS2_EARNED_LABOR.WFA_DEPT_ID, PS2_EARNED_LABOR.WFA_TASK_ID, PS2_EARNED_LABOR."TYPE", PS2_EARNED_LABOR.SOURCE, PS2_EARNED_LABOR.EARNED_OT_HRS, PS2_EARNED_LABOR.EARNED_LOC_OT_AMT, (PS2_EARNED_LABOR.EARNED_TTL_HRS)::NUMERIC(38,2) AS EARNED_TTL_HRS, (PS2_EARNED_LABOR.EARNED_LOC_TTL_AMT)::NUMERIC(38,2) AS EARNED_LOC_TTL_AMT, PS2_EARNED_LABOR.ACTUAL_EXCH_RATE, PS2_EARNED_LABOR.FISCAL_WK, PS2_EARNED_LABOR.FISCAL_MO, PS2_EARNED_LABOR.FISCAL_YR, PS2_EARNED_LABOR.STORE_NBR, PS2_EARNED_LABOR.WFA_BUSN_AREA_DESC, PS2_EARNED_LABOR.WFA_DEPT_DESC, PS2_EARNED_LABOR.WFA_TASK_DESC, PS2_EARNED_LABOR.LOAD_DT FROM (ADMIN.PS2_EARNED_LABOR JOIN ADMIN.SITE_PROFILE_RPT ON ((PS2_EARNED_LABOR.LOCATION_ID = SITE_PROFILE_RPT.LOCATION_ID))) WHERE ((PS2_EARNED_LABOR.WEEK_DT >= '2012-12-30 00:00:00'::"TIMESTAMP") AND ((SITE_PROFILE_RPT.HOTEL_FLAG = 0) AND (PS2_EARNED_LABOR.WFA_BUSN_AREA_ID = 4))))) HTL GROUP BY HTL.WEEK_DT, HTL.LOCATION_ID, HTL.WFA_BUSN_AREA_ID)) PEL FULL JOIN (SELECT WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID, WFST.WFA_DEPT_ID, WFST.WFA_TASK_ID, MAX(WFST.WFA_BUSN_AREA_DESC) AS WFA_BUSN_AREA_DESC, MAX(WFST.WFA_DEPT_DESC) AS WFA_DEPT_DESC, MAX(WFST.WFA_TASK_DESC) AS WFA_TASK_DESC, SUM(WFST.FCST_HRS) AS FCST_HRS, MAX(SP.STORE_NBR) AS STORE_NBR, MAX(DA.FISCAL_WK) AS FISCAL_WK, MAX(DA.FISCAL_MO) AS FISCAL_MO, MAX(DA.FISCAL_YR) AS FISCAL_YR, MAX(WFST.LOAD_DT) AS LOAD_DT FROM (((ADMIN.WFA_FCST_SLS_TASK WFST LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.LOCATION_ID = WFST.LOCATION_ID))) LEFT JOIN (SELECT DISTINCT DAYS.WEEK_DT, DAYS.FISCAL_WK, DAYS.FISCAL_MO, DAYS.FISCAL_YR FROM ADMIN.DAYS) DA ON ((DA.WEEK_DT = WFST.WEEK_DT))) CROSS JOIN (SELECT MAX(PS2_EARNED_LABOR.WEEK_DT) AS MAX_DATE FROM ADMIN.PS2_EARNED_LABOR) MXDT) WHERE ((((WFST.FCST_HRS > '0'::NUMERIC) AND (WFST.WFA_BUSN_AREA_ID <> 4)) AND (WFST.WEEK_DT > '2012-12-30 00:00:00'::"TIMESTAMP")) AND (WFST.WEEK_DT <= MXDT.MAX_DATE)) GROUP BY WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID, WFST.WFA_DEPT_ID, WFST.WFA_TASK_ID) FCST ON ((((((PEL.WEEK_DT = FCST.WEEK_DT) AND (PEL.LOCATION_ID = FCST.LOCATION_ID)) AND (PEL.WFA_BUSN_AREA_ID = FCST.WFA_BUSN_AREA_ID)) AND (PEL.WFA_DEPT_ID = FCST.WFA_DEPT_ID)) AND (PEL.WFA_TASK_ID = FCST.WFA_TASK_ID)))) LEFT JOIN (SELECT WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID, MAX(WFST.WFA_BUSN_AREA_DESC) AS WFA_BUSN_AREA_DESC, SUM(WFST.FCST_HRS) AS FCST_HRS, MAX(SP.STORE_NBR) AS STORE_NBR, MAX(DA.FISCAL_WK) AS FISCAL_WK, MAX(DA.FISCAL_MO) AS FISCAL_MO, MAX(DA.FISCAL_YR) AS FISCAL_YR, MAX(WFST.LOAD_DT) AS LOAD_DT FROM (((ADMIN.WFA_FCST_SLS_TASK WFST LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.LOCATION_ID = WFST.LOCATION_ID))) LEFT JOIN (SELECT DISTINCT DAYS.WEEK_DT, DAYS.FISCAL_WK, DAYS.FISCAL_MO, DAYS.FISCAL_YR FROM ADMIN.DAYS) DA ON ((DA.WEEK_DT = WFST.WEEK_DT))) CROSS JOIN (SELECT MAX(PS2_EARNED_LABOR.WEEK_DT) AS MAX_DATE FROM ADMIN.PS2_EARNED_LABOR) MXDT) WHERE ((((WFST.FCST_HRS > '0'::NUMERIC) AND (WFST.WFA_BUSN_AREA_ID = 4)) AND (WFST.WEEK_DT > '2012-12-30 00:00:00'::"TIMESTAMP")) AND (WFST.WEEK_DT <= MXDT.MAX_DATE)) GROUP BY WFST.WEEK_DT, WFST.LOCATION_ID, WFST.WFA_BUSN_AREA_ID) FCHTL ON ((((PEL.WEEK_DT = FCHTL.WEEK_DT) AND (PEL.LOCATION_ID = FCHTL.LOCATION_ID)) AND (PEL.WFA_BUSN_AREA_ID = FCHTL.WFA_BUSN_AREA_ID)))) LEFT JOIN (SELECT PS2.WEEK_DT, PS2.LOCATION_ID, MAX(PS2.ACTUAL_EXCH_RATE) AS ACTUAL_EXCH_RATE FROM ADMIN.PS2_EARNED_LABOR PS2 GROUP BY PS2.WEEK_DT, PS2.LOCATION_ID) PS2 ON (((PEL.WEEK_DT = PS2.WEEK_DT) AND (PEL.LOCATION_ID = PS2.LOCATION_ID)))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "EMPL_LABOR_WK_CRCY_VW"

CREATE or replace VIEW  EMPL_LABOR_WK_CRCY_VW
(
     WEEK_DT,
     LOCATION_ID,
     STORE_DEPT_NBR,
     EARN_ID,
     JOB_CODE,
     FULLPT_FLAG,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     CURRENCY_NBR,
     LOAD_TSTMP
) AS
SELECT ELW.WEEK_DT, ELW.LOCATION_ID, ELW.STORE_DEPT_NBR, ELW.EARN_ID, ELW.JOB_CODE, ELW.FULLPT_FLAG, ELW.HOURS_WORKED, ELW.EARNINGS_AMT, ELW.EARNINGS_LOC_AMT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) WHEN (ELW.EARNINGS_LOC_AMT = '0'::NUMERIC) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) WHEN (ELW.EARNINGS_LOC_AMT <> '0'::NUMERIC) THEN (ELW.EARNINGS_AMT / ELW.EARNINGS_LOC_AMT) ELSE NULL::"NUMERIC" END AS EXCH_RATE_PCT, ELW.CURRENCY_NBR, ELW.LOAD_TSTMP FROM (((SELECT EMPL_LABOR_WK_PSOFT.WEEK_DT, EMPL_LABOR_WK_PSOFT.LOCATION_ID, EMPL_LABOR_WK_PSOFT.STORE_DEPT_NBR, EMPL_LABOR_WK_PSOFT.EARN_ID, EMPL_LABOR_WK_PSOFT.JOB_CODE, EMPL_LABOR_WK_PSOFT.FULLPT_FLAG, EMPL_LABOR_WK_PSOFT.HOURS_WORKED, EMPL_LABOR_WK_PSOFT.EARNINGS_AMT, EMPL_LABOR_WK_PSOFT.EARNINGS_LOC_AMT, EMPL_LABOR_WK_PSOFT.CURRENCY_NBR, EMPL_LABOR_WK_PSOFT.LOAD_TSTMP FROM ADMIN.EMPL_LABOR_WK_PSOFT) UNION (SELECT EMPL_LABOR_WK.WEEK_DT, EMPL_LABOR_WK.LOCATION_ID, EMPL_LABOR_WK.STORE_DEPT_NBR, EMPL_LABOR_WK.EARN_ID, EMPL_LABOR_WK.JOB_CODE, EMPL_LABOR_WK.FULLPT_FLAG, EMPL_LABOR_WK.HOURS_WORKED, EMPL_LABOR_WK.EARNINGS_AMT, EMPL_LABOR_WK.EARNINGS_LOC_AMT, EMPL_LABOR_WK.CURRENCY_NBR, EMPL_LABOR_WK.LOAD_TSTMP FROM ADMIN.EMPL_LABOR_WK)) ELW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "PS2_ACCRUED_LABOR_WK_CRCY_VW"

CREATE or replace VIEW  PS2_ACCRUED_LABOR_WK_CRCY_VW
(
     WEEK_DT,
     LOCATION_ID,
     STORE_DEPT_NBR,
     EARN_ID,
     JOB_CODE,
     FULLPT_FLAG,
     PAY_FREQ_CD,
     HOURS_WORKED,
     EARNINGS_AMT,
     EARNINGS_LOC_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     CURRENCY_NBR
) AS
SELECT ALW.WEEK_DT, ALW.LOCATION_ID, ALW.STORE_DEPT_NBR, ALW.EARN_ID, ALW.JOB_CODE, ALW.FULLPT_FLAG, ALW.PAY_FREQ_CD, ALW.HOURS_WORKED, ALW.EARNINGS_AMT, ALW.EARNINGS_LOC_AMT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) WHEN (ALW.EARNINGS_LOC_AMT = '0'::NUMERIC) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) WHEN (ALW.EARNINGS_LOC_AMT <> '0'::NUMERIC) THEN (ALW.EARNINGS_AMT / ALW.EARNINGS_LOC_AMT) ELSE NULL::"NUMERIC" END AS EXCH_RATE_PCT, ALW.CURRENCY_NBR FROM (ADMIN.PS2_ACCRUED_LABOR_WK ALW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "MEDALLIA_SURVEY_SKU_VW"

CREATE or replace VIEW  MEDALLIA_SURVEY_SKU_VW
(
     MEDALLIA_SURVEY_RESPONSE_TSTMP,
     MEDALLIA_SURVEY_ID,
     MEDALLIA_SURVEY_CREATION_TSTMP,
     SURVEY_TYPE,
     MEDALLIA_TXN_ID,
     TRANSACTION_TSTMP,
     SALES_INSTANCE_ID,
     TXN_SEGMENT,
     PAYMENT_DEVICE_TYPE,
     LOCATION_ID,
     STORE_NBR,
     PRODUCT_ID,
     REGISTER_NBR,
     TRANSACTION_NBR,
     CASHIER_NBR,
     SALES_COACH_ID,
     CUSTOMER_EID,
     CUSTOMER_LOYALTY_NBR,
     CUSTOMER_FIRST_TIME_PURCHASE_FLAG,
     ORDER_CHANNEL,
     ORDER_NBR,
     RETURN_TXN_FLAG,
     TRAINING_START_DT,
     PREV_PURCHASE_DT,
     TOTAL_PURCHASED_ITEM_QTY,
     COUPON_AMT,
     PRICE_OVERRIDE_AMT,
     TOTAL_PAID_AMT,
     SALON_BOOKING_CHANNEL,
     MEDALLIA_SALON_EMPL_GROUP_ID,
     SALON_EMPLOYEE_ID_1,
     SALON_EMPLOYEE_ID_2,
     SALON_EMPLOYEE_ID_3,
     SALON_EMPLOYEE_ID_4,
     MEDALLIA_PET_GROUP_ID,
     PET_ID_1,
     PET_ID_2,
     PET_ID_3,
     PET_ID_4,
     SMS_EMPLOYEE_GROUP_DESC,
     AUTO_COMPLETED_FLAG,
     AUTO_COMPLETED_DATE,
     LATEST_SUBMIT_DATE,
     MEDALLIA_SURVEY_QUESTION_ID,
     MEDALLIA_SURVEY_ANSWER_TXT,
     MEDALLIA_SURVEY_ANSWER_NBR,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT M.MEDALLIA_SURVEY_RESPONSE_TSTMP, M.MEDALLIA_SURVEY_ID, M.MEDALLIA_SURVEY_CREATION_TSTMP, M.SURVEY_TYPE, M.MEDALLIA_TXN_ID, M.TRANSACTION_TSTMP, M.SALES_INSTANCE_ID, M.TXN_SEGMENT, M.PAYMENT_DEVICE_TYPE, M.LOCATION_ID, M.STORE_NBR, S.PRODUCT_ID, M.REGISTER_NBR, M.TRANSACTION_NBR, M.CASHIER_NBR, M.SALES_COACH_ID, M.CUSTOMER_EID, M.CUSTOMER_LOYALTY_NBR, M.CUSTOMER_FIRST_TIME_PURCHASE_FLAG, M.ORDER_CHANNEL, M.ORDER_NBR, M.RETURN_TXN_FLAG, M.TRAINING_START_DT, M.PREV_PURCHASE_DT, M.TOTAL_PURCHASED_ITEM_QTY, M.COUPON_AMT, M.PRICE_OVERRIDE_AMT, M.TOTAL_PAID_AMT, M.SALON_BOOKING_CHANNEL, M.MEDALLIA_SALON_EMPL_GROUP_ID, M.SALON_EMPLOYEE_ID_1, M.SALON_EMPLOYEE_ID_2, M.SALON_EMPLOYEE_ID_3, M.SALON_EMPLOYEE_ID_4, M.MEDALLIA_PET_GROUP_ID, M.PET_ID_1, M.PET_ID_2, M.PET_ID_3, M.PET_ID_4, M.SMS_EMPLOYEE_GROUP_DESC, M.AUTO_COMPLETED_FLAG, M.AUTO_COMPLETED_DATE, M.LATEST_SUBMIT_DATE, M.MEDALLIA_SURVEY_QUESTION_ID, M.MEDALLIA_SURVEY_ANSWER_TXT, M.MEDALLIA_SURVEY_ANSWER_NBR, M.UPDATE_TSTMP, M.LOAD_TSTMP FROM (ADMIN.MEDALLIA_SURVEY M JOIN ADMIN.SALES_TRANS_SKU S ON (((S.DAY_DT = DATE(M.TRANSACTION_TSTMP)) AND (S.SALES_INSTANCE_ID = M.SALES_INSTANCE_ID))));

\echo
\echo *****  Creating view:  "SALES_TRANS_ORDER_VW"

CREATE or replace VIEW  SALES_TRANS_ORDER_VW
(
     DAY_DT,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     CUST_TRANS_ID,
     ORDER_DT,
     SALES_TYPE_ID,
     DS_DC_NBR,
     DS_WEB_ORDER_NBR,
     DS_EMPLOYEE_ID,
     DS_CATLG_SRC_CD,
     GUEST_FULFILL_STORE_NBR,
     DS_ASSIST_STORE_NBR,
     DS_AFFILIATE_ID,
     DS_CHANNEL_CD,
     ORIG_ORDER_NBR,
     ORIG_ORDER_SEQ_NBR,
     DS_ORDER_RETAIL_AMT,
     DS_ORDER_SHIP_COST_AMT,
     DS_ORDER_FRT_TAX_RT,
     SHIPPING_AMT,
     SHIPPING_DISCOUNT_AMT,
     DATE_LOADED,
     CREATION_DEVICE_TYPE,
     CREATION_DEVICE_WIDTH,
     AFTERPAY_FLG
) AS
SELECT S.DAY_DT, S.LOCATION_ID, S.SALES_INSTANCE_ID, S.ORDER_NBR, S.ORDER_SEQ_NBR, S.CUST_TRANS_ID, S.ORDER_DT, S.SALES_TYPE_ID, S.DS_DC_NBR, S.DS_WEB_ORDER_NBR, S.DS_EMPLOYEE_ID, S.DS_CATLG_SRC_CD, S.GUEST_FULFILL_STORE_NBR, S.DS_ASSIST_STORE_NBR, S.DS_AFFILIATE_ID, S.DS_CHANNEL_CD, S.ORIG_ORDER_NBR, S.ORIG_ORDER_SEQ_NBR, S.DS_ORDER_RETAIL_AMT, S.DS_ORDER_SHIP_COST_AMT, S.DS_ORDER_FRT_TAX_RT, S.SHIPPING_AMT, S.SHIPPING_DISCOUNT_AMT, S.DATE_LOADED, O.CREATION_DEVICE_TYPE, O.CREATION_DEVICE_WIDTH, O.AFTERPAY_FLG FROM (ADMIN.SALES_TRANS_ORDER S JOIN ADMIN.OMS_ORDER O ON (((S.ORDER_NBR = O.ORDER_NBR) AND (DATE(O.CREATED_TSTMP) = DATE(S.ORDER_DT))))) WHERE ((O.OMS_ORDER_DT > '2019-01-08'::DATE) AND (S.DAY_DT > '2019-01-08 00:00:00'::"TIMESTAMP"));

\echo
\echo *****  Creating view:  "EMPLOYEE_TENURE_VW"

CREATE or replace VIEW  EMPLOYEE_TENURE_VW
(
     EMPLOYEE_ID,
     JOB_GROUP_ID,
     JOB_CODE_CHG_DT,
     JOB_GROUP_CHG_DT,
     TENURE_DAYS_CNT
) AS
WITH EMPL_STATUS AS (SELECT ALL_HIST.EMPLOYEE_ID, ALL_HIST.EMPL_STATUS_EFF_DT AS STATUS_START_DT, CASE WHEN ((DATE(LEAD(ALL_HIST.EMPL_STATUS_EFF_DT) OVER (PARTITION BY ALL_HIST.EMPLOYEE_ID  ORDER BY ALL_HIST.EMPL_STATUS_EFF_DT )) - 1) NOTNULL) THEN (DATE(LEAD(ALL_HIST.EMPL_STATUS_EFF_DT) OVER (PARTITION BY ALL_HIST.EMPLOYEE_ID  ORDER BY ALL_HIST.EMPL_STATUS_EFF_DT )) - 1) WHEN ('9999-12-31' NOTNULL) THEN '9999-12-31'::DATE ELSE NULL::DATE END AS STATUS_END_DT, ALL_HIST.FROM_EMPL_STATUS_CD, ALL_HIST.TO_EMPL_STATUS_CD FROM ((SELECT EMPL_STATUS_HIST_PSOFT.EMPLOYEE_ID, EMPL_STATUS_HIST_PSOFT.EMPL_STATUS_EFF_DT, EMPL_STATUS_HIST_PSOFT.FROM_EMPL_STATUS_CD, EMPL_STATUS_HIST_PSOFT.TO_EMPL_STATUS_CD FROM ADMIN.EMPL_STATUS_HIST_PSOFT WHERE (NOT (((EMPL_STATUS_HIST_PSOFT.FROM_EMPL_STATUS_CD = 'L'::"VARCHAR") AND (EMPL_STATUS_HIST_PSOFT.TO_EMPL_STATUS_CD = 'L'::"VARCHAR")) OR ((EMPL_STATUS_HIST_PSOFT.FROM_EMPL_STATUS_CD = 'A'::"VARCHAR") AND (EMPL_STATUS_HIST_PSOFT.TO_EMPL_STATUS_CD = 'L'::"VARCHAR")) OR ((EMPL_STATUS_HIST_PSOFT.FROM_EMPL_STATUS_CD = 'L'::"VARCHAR") AND (EMPL_STATUS_HIST_PSOFT.TO_EMPL_STATUS_CD = 'A'::"VARCHAR"))))) UNION (SELECT EMPL_STATUS_HIST.EMPLOYEE_ID, EMPL_STATUS_HIST.EMPL_STATUS_EFF_DT, EMPL_STATUS_HIST.FROM_EMPL_STATUS_CD, EMPL_STATUS_HIST.TO_EMPL_STATUS_CD FROM ADMIN.EMPL_STATUS_HIST WHERE (NOT (((EMPL_STATUS_HIST.FROM_EMPL_STATUS_CD = 'L'::"VARCHAR") AND (EMPL_STATUS_HIST.TO_EMPL_STATUS_CD = 'L'::"VARCHAR")) OR ((EMPL_STATUS_HIST.FROM_EMPL_STATUS_CD = 'A'::"VARCHAR") AND (EMPL_STATUS_HIST.TO_EMPL_STATUS_CD = 'L'::"VARCHAR")) OR ((EMPL_STATUS_HIST.FROM_EMPL_STATUS_CD = 'L'::"VARCHAR") AND (EMPL_STATUS_HIST.TO_EMPL_STATUS_CD = 'A'::"VARCHAR")))))) ALL_HIST), EMPL_JOB AS (SELECT ALL_JOBS.EMPLOYEE_ID, ALL_JOBS.EMPL_JOB_EFF_DT AS JOB_START_DT, CASE WHEN ((DATE(LEAD(ALL_JOBS.EMPL_JOB_EFF_DT) OVER (PARTITION BY ALL_JOBS.EMPLOYEE_ID  ORDER BY ALL_JOBS.EMPL_JOB_EFF_DT )) - 1) NOTNULL) THEN (DATE(LEAD(ALL_JOBS.EMPL_JOB_EFF_DT) OVER (PARTITION BY ALL_JOBS.EMPLOYEE_ID  ORDER BY ALL_JOBS.EMPL_JOB_EFF_DT )) - 1) WHEN ('9999-12-31' NOTNULL) THEN '9999-12-31'::DATE ELSE NULL::DATE END AS JOB_END_DT, ALL_JOBS.FROM_JOB_CODE, ALL_JOBS.TO_JOB_CODE FROM ((SELECT EMPL_JOB_HIST_PSOFT.EMPLOYEE_ID, EMPL_JOB_HIST_PSOFT.EMPL_JOB_EFF_DT, EMPL_JOB_HIST_PSOFT.FROM_JOB_CODE, EMPL_JOB_HIST_PSOFT.TO_JOB_CODE FROM ADMIN.EMPL_JOB_HIST_PSOFT) UNION (SELECT EMPL_JOB_HIST.EMPLOYEE_ID, EMPL_JOB_HIST.EMPL_JOB_EFF_DT, EMPL_JOB_HIST.FROM_JOB_CODE, EMPL_JOB_HIST.TO_JOB_CODE FROM ADMIN.EMPL_JOB_HIST)) ALL_JOBS), EMPL_JOB_STATUS_HIST AS ((((SELECT S.EMPLOYEE_ID, S.FROM_EMPL_STATUS_CD, S.TO_EMPL_STATUS_CD, J.FROM_JOB_CODE, J.TO_JOB_CODE, J.JOB_START_DT AS START_DT, J.JOB_END_DT AS END_DT FROM (EMPL_STATUS S JOIN EMPL_JOB J ON (((S.EMPLOYEE_ID = J.EMPLOYEE_ID) AND (((J.JOB_START_DT >= S.STATUS_START_DT) AND (J.JOB_START_DT <= "TIMESTAMP"(S.STATUS_END_DT))) AND (("TIMESTAMP"(J.JOB_END_DT) >= S.STATUS_START_DT) AND (J.JOB_END_DT <= S.STATUS_END_DT))))))) UNION (SELECT S.EMPLOYEE_ID, S.FROM_EMPL_STATUS_CD, S.TO_EMPL_STATUS_CD, J.FROM_JOB_CODE, J.TO_JOB_CODE, J.JOB_START_DT AS START_DT, S.STATUS_END_DT AS END_DT FROM (EMPL_STATUS S JOIN EMPL_JOB J ON (((S.EMPLOYEE_ID = J.EMPLOYEE_ID) AND (((J.JOB_START_DT >= S.STATUS_START_DT) AND (J.JOB_START_DT <= "TIMESTAMP"(S.STATUS_END_DT))) AND (NOT (("TIMESTAMP"(J.JOB_END_DT) >= S.STATUS_START_DT) AND (J.JOB_END_DT <= S.STATUS_END_DT))))))))) UNION (SELECT S.EMPLOYEE_ID, S.FROM_EMPL_STATUS_CD, S.TO_EMPL_STATUS_CD, J.FROM_JOB_CODE, J.TO_JOB_CODE, S.STATUS_START_DT AS START_DT, J.JOB_END_DT AS END_DT FROM (EMPL_STATUS S JOIN EMPL_JOB J ON (((S.EMPLOYEE_ID = J.EMPLOYEE_ID) AND ((NOT ((J.JOB_START_DT >= S.STATUS_START_DT) AND (J.JOB_START_DT <= "TIMESTAMP"(S.STATUS_END_DT)))) AND (("TIMESTAMP"(J.JOB_END_DT) >= S.STATUS_START_DT) AND (J.JOB_END_DT <= S.STATUS_END_DT)))))))) UNION (SELECT S.EMPLOYEE_ID, S.FROM_EMPL_STATUS_CD, S.TO_EMPL_STATUS_CD, J.FROM_JOB_CODE, J.TO_JOB_CODE, S.STATUS_START_DT AS START_DT, S.STATUS_END_DT AS END_DT FROM (EMPL_STATUS S JOIN EMPL_JOB J ON (((S.EMPLOYEE_ID = J.EMPLOYEE_ID) AND (((S.STATUS_START_DT >= J.JOB_START_DT) AND (S.STATUS_START_DT <= "TIMESTAMP"(J.JOB_END_DT))) AND (("TIMESTAMP"(S.STATUS_END_DT) >= J.JOB_START_DT) AND (S.STATUS_END_DT <= J.JOB_END_DT)))))))), EMPL_JOB_GROUP_HIST AS (SELECT E.EMPLOYEE_ID, E.START_DT, E.END_DT, E.TO_EMPL_STATUS_CD AS STATUS_CD, E.TO_JOB_CODE AS JOB_CODE, CASE WHEN (J.JOB_GROUP_SORT ISNULL) THEN ((E.TO_EMPL_STATUS_CD || '-'::"VARCHAR") || "VARCHAR"(E.TO_JOB_CODE)) ELSE (("VARCHAR"(J.JOB_GROUP_SORT) || '-'::"VARCHAR") || E.TO_EMPL_STATUS_CD) END AS JOB_GROUP_ID, CASE WHEN (E.END_DT = '9999-12-31'::DATE) THEN ((DATE_PART('EPOCH'::"VARCHAR", DATE_TRUNC('day'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) - DATE_PART('EPOCH'::"VARCHAR", E.START_DT)) / 86400) ELSE ((DATE_PART('EPOCH'::"VARCHAR", E.END_DT) - DATE_PART('EPOCH'::"VARCHAR", E.START_DT)) / 86400) END AS TENURE_DAYS_COUNT, RANK() OVER (PARTITION BY E.EMPLOYEE_ID, CASE WHEN (J.JOB_GROUP_SORT ISNULL) THEN ((E.TO_EMPL_STATUS_CD || '-'::"VARCHAR") || "VARCHAR"(E.TO_JOB_CODE)) ELSE (("VARCHAR"(J.JOB_GROUP_SORT) || '-'::"VARCHAR") || E.TO_EMPL_STATUS_CD) END  ORDER BY E.START_DT DESC ) AS JOB_RANK FROM (EMPL_JOB_STATUS_HIST E LEFT JOIN (SELECT USR_JOB_GROUP.JOB_CODE, USR_JOB_GROUP.JOB_GROUP_SORT FROM ADMIN.USR_JOB_GROUP WHERE (USR_JOB_GROUP.JOB_GROUP_SORT IN (1, 2, 3, 4, 5, 6, 7, 9))) J ON ((E.TO_JOB_CODE = J.JOB_CODE)))), EMPL_TENURE_FILTER_DATE AS (SELECT AA.EMPLOYEE_ID, AA.FILTER_OUT_DT, AA.TENURE_DAYS_COUNT, AA.JOB_RANK, AA.TIME_RANK FROM (SELECT EMPL_JOB_GROUP_HIST.EMPLOYEE_ID, EMPL_JOB_GROUP_HIST.START_DT AS FILTER_OUT_DT, EMPL_JOB_GROUP_HIST.TENURE_DAYS_COUNT, EMPL_JOB_GROUP_HIST.JOB_RANK, RANK() OVER (PARTITION BY EMPL_JOB_GROUP_HIST.EMPLOYEE_ID  ORDER BY EMPL_JOB_GROUP_HIST.START_DT DESC ) AS TIME_RANK FROM  EMPL_JOB_GROUP_HIST WHERE (EMPL_JOB_GROUP_HIST.JOB_RANK = 1)) AA WHERE (AA.TIME_RANK = 2)) SELECT E.EMPLOYEE_ID, E.JOB_GROUP_ID, MAX(E.START_DT) AS JOB_CODE_CHG_DT, MIN(E.START_DT) AS JOB_GROUP_CHG_DT, CASE WHEN ((E.JOB_GROUP_ID ~~ LIKE_ESCAPE('%T%'::"VARCHAR", '\'::"VARCHAR")) OR (E.JOB_GROUP_ID ~~ LIKE_ESCAPE('%D%'::"VARCHAR", '\'::"VARCHAR"))) THEN '0'::INT8 ELSE ((DATE_PART('EPOCH'::"VARCHAR", DATE_TRUNC('day'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) - DATE_PART('EPOCH'::"VARCHAR", MIN(E.START_DT))) / 86400) END AS TENURE_DAYS_CNT FROM ((SELECT EMPL_JOB_GROUP_HIST.EMPLOYEE_ID, EMPL_JOB_GROUP_HIST.JOB_GROUP_ID, EMPL_JOB_GROUP_HIST.START_DT FROM  EMPL_JOB_GROUP_HIST WHERE (((EMPL_JOB_GROUP_HIST.STATUS_CD = 'T'::"VARCHAR") AND (EMPL_JOB_GROUP_HIST.TENURE_DAYS_COUNT > 30)) OR (EMPL_JOB_GROUP_HIST.STATUS_CD <> 'T'::"VARCHAR"))) E LEFT JOIN EMPL_TENURE_FILTER_DATE F ON ((E.EMPLOYEE_ID = F.EMPLOYEE_ID))) WHERE (E.START_DT > CASE WHEN (F.FILTER_OUT_DT NOTNULL) THEN F.FILTER_OUT_DT WHEN ('1900-01-01' NOTNULL) THEN '1900-01-01 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END) GROUP BY E.EMPLOYEE_ID, E.JOB_GROUP_ID;

\echo
\echo *****  Creating view:  "SDS_CUSTOMER_RPT_VW"

CREATE or replace VIEW  SDS_CUSTOMER_RPT_VW
(
     SDS_ACCOUNT_ID,
     PODS_CUSTOMER_ID,
     SVCS_CUSTOMER_GID,
     CUSTOMER_EID,
     FIRST_NAME,
     MIDDLE_NAME,
     LAST_NAME,
     EMAIL_ADDR,
     PHONE_NBR,
     ADDR1,
     ADDR2,
     CITY,
     STATE,
     POSTAL_CD,
     POSTAL_CD_EXT,
     COUNTRY_CD,
     DO_NOT_BOOKED_FLAG,
     DO_NOT_BOOKED_REASON,
     CUSTOMER_LOYALTY_FLAG,
     DIGITAL_LOYALTY_CUSTOMER_FLAG,
     RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     RECEIVE_TEXT_NOTIFICATION_FLAG,
     RECEIVE_PUSH_NOTIFICATION_FLAG,
     REMINDER_CALL_FLAG,
     GROOMING_NEW_FLAG,
     HOTEL_NEW_FLAG,
     DDC_NEW_FLAG,
     TRAINING_NEW_FLAG,
     DIGITAL_PROFILE_CREATION_DT
) AS
SELECT SCR.SDS_ACCOUNT_ID, SCR.PODS_CUSTOMER_ID, SCX.SVCS_CUSTOMER_GID, CX.CUSTOMER_EID, SCR.FIRST_NAME, SCR.MIDDLE_NAME, SCR.LAST_NAME, SCR.EMAIL_ADDR, SCR.PHONE_NBR, SCR.ADDR1, SCR.ADDR2, SCR.CITY, SCR."STATE", SCR.POSTAL_CD, SCR.POSTAL_CD_EXT, SCR.COUNTRY_CD, SCR.DO_NOT_BOOKED_FLAG, SCR.DO_NOT_BOOKED_REASON, SCR.CUSTOMER_LOYALTY_FLAG, SCR.DIGITAL_LOYALTY_CUSTOMER_FLAG, SCR.RECEIVE_EMAIL_NOTIFICATIONS_FLAG, SCR.RECEIVE_TEXT_NOTIFICATION_FLAG, SCR.RECEIVE_PUSH_NOTIFICATION_FLAG, SCR.REMINDER_CALL_FLAG, SCR.GROOMING_NEW_FLAG, SCR.HOTEL_NEW_FLAG, SCR.DDC_NEW_FLAG, SCR.TRAINING_NEW_FLAG, PSI.PODS_CREATE_TSTMP AS DIGITAL_PROFILE_CREATION_DT FROM (((ADMIN.SDS_CUSTOMER_RPT SCR LEFT JOIN (SELECT A.CUSTOMER_EID, A.CUSTOMER_SRC_VALUE FROM (SELECT CUSTOMER_XREF.CUSTOMER_EID, CUSTOMER_XREF.CUSTOMER_SRC_VALUE, CUSTOMER_XREF.UPDATE_TSTMP, RANK() OVER (PARTITION BY CUSTOMER_XREF.CUSTOMER_SRC_VALUE  ORDER BY CUSTOMER_XREF.UPDATE_TSTMP DESC ) AS RNK FROM ADMIN.CUSTOMER_XREF WHERE ((CUSTOMER_XREF.CUSTOMER_SRC_ID = 100023) AND (CUSTOMER_XREF.ACTIVE_FLG = 1))) A WHERE (A.RNK = 1)) CX ON ((SCR.PODS_CUSTOMER_ID = INT8(CX.CUSTOMER_SRC_VALUE)))) LEFT JOIN CIDB_PRD.ADMIN.PODS_SRC_IDENTIFIER PSI ON (((PSI.PODS_CUSTOMER_ID = SCR.PODS_CUSTOMER_ID) AND (PSI.PODS_SRC_NM = 'PROF'::"VARCHAR")))) LEFT JOIN ADMIN.SVCS_CUSTOMER_XREF SCX ON (((SCX.CUSTOMER_SRC_CD = 'PRISM'::"VARCHAR") AND (SCX.SRC_CUSTOMER_ID = SCR.PODS_CUSTOMER_ID))));

\echo
\echo *****  Creating view:  "SDS_APPT_SERVICE_SPECIAL_RPT_VW"

CREATE or replace VIEW  SDS_APPT_SERVICE_SPECIAL_RPT_VW
(
     SDS_APPT_SERVICE_ID,
     SDS_APPT_ID,
     SDS_ORDER_NBR,
     PETM_POS_INVOICE_ID,
     APPT_TSTMP,
     LOCATION_ID,
     PRODUCT_ID,
     SDS_APPT_STATUS_ID,
     SDS_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SDS_APPT_CREATION_CHANNEL,
     SDS_ORDER_STATUS_ID,
     SDS_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SDS_SERVICE_CATEGORY_ID,
     SDS_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SDS_SPECIAL_ID,
     SDS_SPECIAL_NAME,
     SDS_SPECIAL_CD,
     SDS_SPECIAL_TYPE,
     AFFECTS_GROOM_PAY_FLAG,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     PODS_CUSTOMER_ID,
     SVCS_CUSTOMER_GID,
     SDS_CUSTOMER_FIRST_NAME,
     SDS_CUSTOMER_LAST_NAME,
     SVCS_PET_GID,
     PODS_PET_ID,
     PET_NAME,
     APPT_SERVICE_ITEM_QTY,
     ORIG_UNIT_PRICE_AMT,
     LIST_PRICE_AMT,
     ADJUSTMENT_AMT,
     ADJUSTMENT_PCT,
     APPLIED_PCT_DISCOUNT_AMT,
     EVALUATION_ORDER_NBR,
     FINAL_UNIT_PRICE_AMT,
     MANUAL_ADJUSTED_FLAG,
     APPLY_TO_ALL_PRODUCTS_FLAG
) AS
SELECT R.SDS_ORDER_ITEM_NBR AS SDS_APPT_SERVICE_ID, R.SDS_WORK_ORDER_NBR AS SDS_APPT_ID, R.SDS_ORDER_NBR, R.PETM_POS_INVOICE_ID, R.APPT_TSTMP, R.LOCATION_ID, R.PRODUCT_ID, R.SDS_APPT_STATUS_ID, R.SDS_APPT_STATUS_DESC, R.SVCS_APPT_STATUS_GID, R.SVCS_APPT_STATUS_DESC, R.SDS_APPT_CREATION_CHANNEL, R.SDS_ORDER_STATUS_ID, R.SDS_ORDER_STATUS_DESC, R.SVCS_ORDER_STATUS_GID, R.SVCS_ORDER_STATUS_DESC, R.SDS_SERVICE_CATEGORY_ID, R.SDS_SERVICE_CATEGORY_DESC, R.SVCS_SERVICE_CATEGORY_GID, R.SVCS_SERVICE_CATEGORY_DESC, S.SDS_SPECIAL_ID, S.SDS_SPECIAL_NAME, S.SDS_SPECIAL_CD, S.PREMIUM_DISCOUNT AS SDS_SPECIAL_TYPE, S.AFFECTS_GROOM_PAY_FLAG, R.ASSIGNED_EMPLOYEE_ID, R.ASSIGNED_EMPLOYEE_FIRST_NAME, R.ASSIGNED_EMPLOYEE_LAST_NAME, R.ASSIGNED_EMPLOYEE_DISPLAY_NAME, R.PODS_CUSTOMER_ID, R.SVCS_CUSTOMER_GID, R.CUSTOMER_FIRST_NAME AS SDS_CUSTOMER_FIRST_NAME, R.CUSTOMER_LAST_NAME AS SDS_CUSTOMER_LAST_NAME, R.SVCS_PET_GID, R.PODS_PET_ID, R.PET_NAME, R.APPT_SERVICE_ITEM_QTY, R.ORIG_UNIT_PRICE_AMT, R.LIST_PRICE_AMT, O.ADJUSTMENT_AMT, O.ADJUSTMENT_PCT, O.APPLIED_PCT_DISCOUNT_AMT, O.EVALUATION_ORDER_NBR, R.FINAL_UNIT_PRICE_AMT, O.MANUAL_ADJUSTED_FLAG, O.APPLY_TO_ALL_PRODUCTS_FLAG FROM ((ADMIN.SDS_ORDER_ITEM_RPT R JOIN ADMIN.SDS_ORDER_PRODUCT_SPECIAL O ON ((R.SDS_ORDER_ITEM_ID = O.SDS_ORDER_ITEM_ID))) JOIN ADMIN.SDS_SPECIAL S ON ((S.SDS_SPECIAL_ID = O.SDS_SPECIAL_ID))) WHERE (((O.DELETED_FLAG = '0'::NUMERIC) AND (O.HARD_DELETED_FLAG = '0'::NUMERIC)) AND (R.PRODUCT_ID NOTNULL));

\echo
\echo *****  Creating view:  "SVCS_APPT_SERVICE_SPECIAL_RPT_VW"

CREATE or replace VIEW  SVCS_APPT_SERVICE_SPECIAL_RPT_VW
(
     SVCS_SRC_CD,
     SRC_APPT_SERVICE_ID,
     SRC_APPT_ID,
     PETM_POS_INVOICE_ID,
     SRC_ORDER_ID,
     APPT_TSTMP,
     LOCATION_ID,
     PRODUCT_ID,
     SRC_APPT_STATUS_ID,
     SRC_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SVCS_APPT_CREATION_CHANNEL,
     SRC_ORDER_STATUS_ID,
     SRC_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SRC_SERVICE_CATEGORY_ID,
     SRC_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SRC_SPECIAL_ID,
     SRC_SPECIAL_NAME,
     SVCS_SPECIAL_CD,
     SVCS_SPECIAL_TYPE,
     AFFECTS_GROOM_PAY_FLAG,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     SRC_CUSTOMER_ID,
     SVCS_CUSTOMER_GID,
     SRC_CUSTOMER_FIRST_NAME,
     SRC_CUSTOMER_LAST_NAME,
     SVCS_PET_GID,
     SRC_PET_ID,
     PET_NAME,
     APPT_SERVICE_ITEM_QTY,
     LIST_PRICE_AMT,
     ADJUSTMENT_AMT,
     ADJUSTMENT_PCT,
     APPLIED_PCT_DISCOUNT_AMT,
     EVALUATION_ORDER_NBR,
     FINAL_UNIT_PRICE_AMT,
     MANUAL_ADJUSTED_FLAG,
     APPLY_TO_ALL_PRODUCTS_FLAG
) AS
(SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, R.SDS_APPT_SERVICE_ID AS SRC_APPT_SERVICE_ID, R.SDS_APPT_ID AS SRC_APPT_ID, R.PETM_POS_INVOICE_ID, R.SDS_ORDER_NBR AS SRC_ORDER_ID, R.APPT_TSTMP, R.LOCATION_ID, R.PRODUCT_ID, R.SDS_APPT_STATUS_ID AS SRC_APPT_STATUS_ID, R.SDS_APPT_STATUS_DESC AS SRC_APPT_STATUS_DESC, INT4(R.SVCS_APPT_STATUS_GID) AS SVCS_APPT_STATUS_GID, R.SVCS_APPT_STATUS_DESC, R.SDS_APPT_CREATION_CHANNEL AS SVCS_APPT_CREATION_CHANNEL, R.SDS_ORDER_STATUS_ID AS SRC_ORDER_STATUS_ID, R.SDS_ORDER_STATUS_DESC AS SRC_ORDER_STATUS_DESC, INT4(R.SVCS_ORDER_STATUS_GID) AS SVCS_ORDER_STATUS_GID, R.SVCS_ORDER_STATUS_DESC, R.SDS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, R.SDS_SERVICE_CATEGORY_DESC AS SRC_SERVICE_CATEGORY_DESC, INT4(R.SVCS_SERVICE_CATEGORY_GID) AS SVCS_SERVICE_CATEGORY_GID, R.SVCS_SERVICE_CATEGORY_DESC, (R.SDS_SPECIAL_ID)::VARCHAR(22) AS SRC_SPECIAL_ID, (R.SDS_SPECIAL_NAME)::VARCHAR(100) AS SRC_SPECIAL_NAME, R.SDS_SPECIAL_CD AS SVCS_SPECIAL_CD, R.SDS_SPECIAL_TYPE AS SVCS_SPECIAL_TYPE, R.AFFECTS_GROOM_PAY_FLAG, R.ASSIGNED_EMPLOYEE_ID, (R.ASSIGNED_EMPLOYEE_FIRST_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_FIRST_NAME, (R.ASSIGNED_EMPLOYEE_LAST_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_LAST_NAME, (R.ASSIGNED_EMPLOYEE_DISPLAY_NAME)::VARCHAR(256) AS ASSIGNED_EMPLOYEE_DISPLAY_NAME, R.PODS_CUSTOMER_ID AS SRC_CUSTOMER_ID, R.SVCS_CUSTOMER_GID, (R.SDS_CUSTOMER_FIRST_NAME)::VARCHAR(512) AS SRC_CUSTOMER_FIRST_NAME, (R.SDS_CUSTOMER_LAST_NAME)::VARCHAR(512) AS SRC_CUSTOMER_LAST_NAME, R.SVCS_PET_GID, R.PODS_PET_ID AS SRC_PET_ID, R.PET_NAME, R.APPT_SERVICE_ITEM_QTY, R.LIST_PRICE_AMT, R.ADJUSTMENT_AMT, R.ADJUSTMENT_PCT, R.APPLIED_PCT_DISCOUNT_AMT, R.EVALUATION_ORDER_NBR, R.FINAL_UNIT_PRICE_AMT, R.MANUAL_ADJUSTED_FLAG, R.APPLY_TO_ALL_PRODUCTS_FLAG FROM ADMIN.SDS_APPT_SERVICE_SPECIAL_RPT_VW R) UNION ALL (SELECT ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.SMS_APPOINTMENT_ID AS SRC_APPT_SERVICE_ID, A.SMS_APPT_SERVICE_ID AS SRC_APPT_ID, A.PETM_POS_INVOICE_ID, A.SMS_ORDER_ID AS SRC_ORDER_ID, A.SMS_APPOINTMENT_TSTMP AS APPT_TSTMP, A.LOCATION_ID, A.PRODUCT_ID, INT4(A.SMS_APPT_STATUS_ID) AS SRC_APPT_STATUS_ID, A.SMS_APPT_STATUS_DESC AS SRC_APPT_STATUS_DESC, A.SVCS_APPT_STATUS_GID, A.SVCS_APPT_STATUS_DESC, (CASE WHEN ((UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'IN-STORE'::"VARCHAR") OR (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'STORE'::"VARCHAR")) THEN 'In-Store'::"VARCHAR" WHEN ((UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'ONLINE'::"VARCHAR") OR (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'ONLINE MOBILE'::"VARCHAR")) THEN 'Digital'::"VARCHAR" WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'SRC'::"VARCHAR") THEN 'SRC'::"VARCHAR" WHEN (UPPER(BTRIM(A.SMS_APPT_CREATION_CHANNEL)) = 'OTHER'::"VARCHAR") THEN 'Other'::"VARCHAR" ELSE NULL::"VARCHAR" END)::VARCHAR(30) AS SVCS_APPT_CREATION_CHANNEL, INT4(A.SMS_ORDER_STATUS_ID) AS SRC_ORDER_STATUS_ID, A.SMS_ORDER_STATUS_DESC AS SRC_ORDER_STATUS_DESC, A.SVCS_ORDER_STATUS_GID, A.SVCS_ORDER_STATUS_DESC, A.SMS_SERVICE_CATEGORY_ID AS SRC_SERVICE_CATEGORY_ID, A.SMS_SERVICE_CATEGORY_DESC AS SRC_SERVICE_CATEGORY_DESC, A.SVCS_SERVICE_CATEGORY_GID, A.SVCS_SERVICE_CATEGORY_DESC, ("VARCHAR"(S.SMS_SPECIAL_ID))::VARCHAR(22) AS SRC_SPECIAL_ID, S.SMS_SPECIAL_DESC AS SRC_SPECIAL_NAME, (S.SMS_SPECIAL_CD)::VARCHAR(255) AS SVCS_SPECIAL_CD, (CASE WHEN (S.PREMIUM_FLAG = ('1'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 'Premium'::"VARCHAR" ELSE 'Discount'::"VARCHAR" END)::VARCHAR(255) AS SVCS_SPECIAL_TYPE, ('1'::NUMERIC(1,0))::NUMERIC(1,0) AS AFFECTS_GROOM_PAY_FLAG, A.ASSIGNED_EMPLOYEE_ID, A.ASSIGNED_EMPLOYEE_FIRST_NAME, A.ASSIGNED_EMPLOYEE_LAST_NAME, A.ASSIGNED_EMPLOYEE_DISPLAY_NAME, A.SMS_CUSTOMER_ID AS SRC_CUSTOMER_ID, A.SVCS_CUSTOMER_GID, A.SVCS_CUSTOMER_FIRST_NAME AS SRC_CUSTOMER_FIRST_NAME, A.SVCS_CUSTOMER_LAST_NAME AS SRC_CUSTOMER_LAST_NAME, A.SVCS_PET_GID, A.SMS_PET_ID AS SRC_PET_ID, (A.SMS_PET_NAME)::VARCHAR(70) AS PET_NAME, INT4(A.APPT_SERVICE_ITEM_QTY) AS APPT_SERVICE_ITEM_QTY, (A.ORIG_PRICE_AMT)::NUMERIC(18,2) AS LIST_PRICE_AMT, (RPT.SPECIAL_DISC_AMT)::NUMERIC(18,3) AS ADJUSTMENT_AMT, (NULL::"NUMERIC")::NUMERIC(18,3) AS ADJUSTMENT_PCT, (NULL::"NUMERIC")::NUMERIC(18,3) AS APPLIED_PCT_DISCOUNT_AMT, (NULL::"NUMERIC")::NUMERIC(2,0) AS EVALUATION_ORDER_NBR, (A.FINAL_PRICE_AMT)::NUMERIC(18,2) AS FINAL_UNIT_PRICE_AMT, (NULL::"NUMERIC")::NUMERIC(1,0) AS MANUAL_ADJUSTED_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS APPLY_TO_ALL_PRODUCTS_FLAG FROM ((ADMIN.SMS_APPOINTMENT_SERVICE_RPT A JOIN ADMIN.SMS_APPOINTMENT_SPECIALS_RPT RPT ON (((((A.SMS_APPOINTMENT_ID = RPT.SMS_APPOINTMENT_ID) AND (A.SMS_APPT_SERVICE_ID = RPT.SMS_APPT_SERVICE_ID)) AND (A.SMS_ORDER_ID = RPT.SMS_ORDER_ID)) AND (A.SMS_ORDER_ITEM_ID = RPT.SMS_ORDER_ITEM_ID)))) JOIN ADMIN.SMS_SPECIAL S ON ((RPT.SMS_SPECIAL_ID = S.SMS_SPECIAL_ID))));

\echo
\echo *****  Creating view:  "SALON_ACADEMY_TRAINING_RPT_VW"

CREATE or replace VIEW  SALON_ACADEMY_TRAINING_RPT_VW
(
     SALON_ACADEMY_ID,
     SA_TRAINING_ID,
     SA_ASSESSMENT_ID,
     SALON_ACADEMY_LOCATION_ID,
     EMPLOYEE_ID,
     LOCATION_ID,
     SALON_ACADEMY_DESC,
     DAY_DT,
     SALON_ACADEMY_END_DT,
     SALON_ACADEMY_TYPE_ID,
     SALON_ACADEMY_TYPE_DESC,
     SALON_ACADEMY_TRAINER_EMPLOYEE_ID,
     SALON_ACADEMY_TRAINER_NAME,
     SALON_ACADEMY_SEAT_LIMIT,
     SALON_ACADEMY_ACTIVE_FLAG,
     SALON_ACADEMY_CANCELLED_FLAG,
     SALON_ACADEMY_APPROVED_BY_DL_FLAG,
     EMPL_DL_NAME,
     EMPL_SALON_SAFETY_CERT_DT,
     EMPL_SPLASH_DT,
     EMPL_SPLASH_EXAM_PTS_DT,
     EMPL_SPLASH_OBSERV_PTS_DT,
     EMPL_DOG_ACADEMY_COMPLETED_DT,
     EMPL_SAFETY_ALL_E_LEARINING_DT,
     EMPL_SAFETY_ALL_PTS_DT,
     EMPL_SAFETY_SALON_E_LEARNING_DT,
     EMPL_SAFETY_SALON_PTS_DT,
     SA_TRAINING_STATUS_ID,
     SA_TRAINING_STATUS_DESC,
     SA_TRAINING_TYPE_ID,
     SA_TRAINING_ENROLLMENT_TSTMP,
     SA_TRAINING_CANCELLED_FLAG,
     SA_ASSESSMENT_REQUEST_TSTMP,
     SA_ASSESSMENT_SCHED_DT,
     SA_ASSESSMENT_SCHED_TIME,
     SA_ASSESSMENT_SCHED_CHANGED_TSTMP,
     SA_ASSESSMENT_STATUS,
     SA_ASSESSMENT_STATUS_REASON,
     SA_ASSESSMENT_PRE_COMPLETED_TSTMP,
     SA_ASSESSMENT_PASS_TSTMP,
     SA_ASSESSMENT_DENY_REASON_ID,
     SA_ASSESSMENT_DENY_REASON_DESC,
     SA_ASSESSMENT_FAIL_TSTMP,
     SA_ASSESSMENT_FAIL_REASON_ID,
     SA_ASSESSMENT_FAIL_REASON_DESC,
     SA_ASSESSMENT_SCORE,
     SA_TRAVEL_ID,
     SA_TRAVEL_AIRLINE_DEPART_DT,
     SA_TRAVEL_AIRLINE_RETURN_DT,
     SA_TRAVEL_HOTEL_CHECK_IN_DT,
     SA_TRAVEL_HOTEL_CHECK_OUT_DT,
     SA_TRAINING_CREATED_TSTMP,
     SA_TRAINING_CREATED_BY,
     SA_TRAINING_MODIFIED_TSTMP,
     SA_TRAINING_MODIFIED_BY,
     SA_ASSESSMENT_CREATED_TSTMP,
     SA_ASSESSMENT_CREATED_BY,
     SA_ASSESSMENT_MODIFIED_TSMP,
     SA_ASSESSMENT_MODIFIED_BY
) AS
SELECT A.SALON_ACADEMY_ID, T.SALON_ACADEMY_TRAINING_ID AS SA_TRAINING_ID, S.SALON_ACADEMY_ASSESSMENT_ID AS SA_ASSESSMENT_ID, A.LOCATION_ID AS SALON_ACADEMY_LOCATION_ID, T.EMPLOYEE_ID, T.LOCATION_ID, T.SALON_ACADEMY_CLASS AS SALON_ACADEMY_DESC, A.START_DT AS DAY_DT, A.END_DT AS SALON_ACADEMY_END_DT, A.SALON_ACADEMY_TYPE_ID, A.SALON_ACADEMY_TYPE_DESC, A.TRAINER_EMPLOYEE_ID AS SALON_ACADEMY_TRAINER_EMPLOYEE_ID, A.TRAINER_NAME AS SALON_ACADEMY_TRAINER_NAME, A.SEAT_LIMIT AS SALON_ACADEMY_SEAT_LIMIT, A.ACTIVE_FLAG AS SALON_ACADEMY_ACTIVE_FLAG, A.CANCELLED_FLAG AS SALON_ACADEMY_CANCELLED_FLAG, A.APPROVED_BY_DISTRICT_LEADER_FLAG AS SALON_ACADEMY_APPROVED_BY_DL_FLAG, T.DISTRICT_LEADER_NAME AS EMPL_DL_NAME, T.SALON_SAFETY_CERTIFICATE_DT AS EMPL_SALON_SAFETY_CERT_DT, T.SPLASH_DT AS EMPL_SPLASH_DT, T.SPLASH_EXAM_PTS_DT AS EMPL_SPLASH_EXAM_PTS_DT, T.SPLASH_OBSERV_PTS_DT AS EMPL_SPLASH_OBSERV_PTS_DT, T.DOG_ACADEMY_COMPLETED_DT AS EMPL_DOG_ACADEMY_COMPLETED_DT, T.SAFETY_ALL_E_LEARNING_DT AS EMPL_SAFETY_ALL_E_LEARINING_DT, T.SAFETY_ALL_PTS_DT AS EMPL_SAFETY_ALL_PTS_DT, T.SAFETY_SALON_E_LEARNING_DT AS EMPL_SAFETY_SALON_E_LEARNING_DT, T.SAFETY_SALON_PTS_DT AS EMPL_SAFETY_SALON_PTS_DT, T.TRAINING_STATUS_ID AS SA_TRAINING_STATUS_ID, T.TRAINING_STATUS_DESC AS SA_TRAINING_STATUS_DESC, T.TRAINING_TYPE_ID AS SA_TRAINING_TYPE_ID, T.ENROLLED_TSTMP AS SA_TRAINING_ENROLLMENT_TSTMP, T.CANCELLED_FLAG AS SA_TRAINING_CANCELLED_FLAG, S.ASSESSMENT_REQUEST_TSTMP AS SA_ASSESSMENT_REQUEST_TSTMP, S.SCHEDULED_ASSESSMENT_DT AS SA_ASSESSMENT_SCHED_DT, S.SCHEDULED_ASSESSMENT_TIME AS SA_ASSESSMENT_SCHED_TIME, S.SCHEDULE_ASSESSMENT_CHANGED_TSTMP AS SA_ASSESSMENT_SCHED_CHANGED_TSTMP, S.ASSESSMENT_STATUS AS SA_ASSESSMENT_STATUS, S.REASON_COMMENT AS SA_ASSESSMENT_STATUS_REASON, S.PRE_ASSESSMENT_COMPLETION_TSTMP AS SA_ASSESSMENT_PRE_COMPLETED_TSTMP, S.ASSESSMENT_PASS_TSTMP AS SA_ASSESSMENT_PASS_TSTMP, S.SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID AS SA_ASSESSMENT_DENY_REASON_ID, SD.SALON_ACADEMY_ASSESSMENT_DENY_REASON_DESC AS SA_ASSESSMENT_DENY_REASON_DESC, S.ASSESSMENT_FAIL_TSTMP AS SA_ASSESSMENT_FAIL_TSTMP, S.SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID AS SA_ASSESSMENT_FAIL_REASON_ID, SF.SALON_ACADEMY_ASSESSMENT_FAIL_REASON_DESC AS SA_ASSESSMENT_FAIL_REASON_DESC, C.RFX_SCORE_PCT AS SA_ASSESSMENT_SCORE, T.SALON_ACADEMY_TRAVEL_ID AS SA_TRAVEL_ID, E.AIRLINE_DEPART_DT AS SA_TRAVEL_AIRLINE_DEPART_DT, E.AIRLINE_RETURN_DT AS SA_TRAVEL_AIRLINE_RETURN_DT, E.HOTEL_CHECK_IN_DT AS SA_TRAVEL_HOTEL_CHECK_IN_DT, E.HOTEL_CHECK_OUT_DT AS SA_TRAVEL_HOTEL_CHECK_OUT_DT, T.CREATED_TSTMP AS SA_TRAINING_CREATED_TSTMP, T.CREATED_BY AS SA_TRAINING_CREATED_BY, T.MODIFIED_TSTMP AS SA_TRAINING_MODIFIED_TSTMP, T.MODIFIED_BY AS SA_TRAINING_MODIFIED_BY, S.CREATED_TSTMP AS SA_ASSESSMENT_CREATED_TSTMP, S.CREATED_BY AS SA_ASSESSMENT_CREATED_BY, S.MODIFIED_TSTMP AS SA_ASSESSMENT_MODIFIED_TSMP, S.MODIFIED_BY AS SA_ASSESSMENT_MODIFIED_BY FROM ((((((ADMIN.SALON_ACADEMY A LEFT JOIN ADMIN.SALON_ACADEMY_TRAINING T ON ((T.SALON_ACADEMY_ID = A.SALON_ACADEMY_ID))) LEFT JOIN ADMIN.SALON_ACADEMY_ASSESSMENT S ON ((S.SALON_ACADEMY_ASSESSMENT_ID = T.SALON_ACADEMY_ASSESSMENT_ID))) LEFT JOIN ADMIN.SALON_ACADEMY_ASSESSMENT_DENY_REASON SD ON ((SD.SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID = S.SALON_ACADEMY_ASSESSMENT_DENY_REASON_ID))) LEFT JOIN ADMIN.SALON_ACADEMY_ASSESSMENT_FAIL_REASON SF ON ((SF.SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID = S.SALON_ACADEMY_ASSESSMENT_FAIL_REASON_ID))) LEFT JOIN ADMIN.SALON_ACADEMY_TRAVEL E ON ((E.SALON_ACADEMY_TRAVEL_ID = T.SALON_ACADEMY_TRAVEL_ID))) LEFT JOIN (SELECT R.LOCATION_ID AS RFX_LOCATION_ID, TRANSLATE(UPPER(R.TEXT_VALUE), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ '::"VARCHAR", '0'::"VARCHAR") AS TRANSLATE, ('9999999999'::"VARCHAR")::VARCHAR(10) AS RFX_EMPLOYEE_ID, W.RFX_WALK_TSTMP AS RFX_RESPONSE_TSTMP, W.SCORE_PCT AS RFX_SCORE_PCT FROM (ADMIN.RFX_SWA_WALK_RESPONSE R JOIN ADMIN.RFX_SWA_STORE_WALK W ON ((W.RFX_WALK_ID = R.RFX_WALK_ID))) WHERE (((R.RFX_WALK_TYPE_ID IN (17, 39, 74, 121, 160)) AND (UPPER(SUBSTR(R.RFX_WALK_QUESTION_TEXT, 1, 26)) = 'PLEASE ENTER THE ASSOCIATE'::"VARCHAR")) AND (UPPER(SUBSTR(R.RFX_WALK_QUESTION_TEXT, 28, 5)) = 'S ID.'::"VARCHAR"))) C ON (((C.RFX_LOCATION_ID = T.LOCATION_ID) AND (TO_NUMBER(C.RFX_EMPLOYEE_ID, '9999999999'::"VARCHAR") = "NUMERIC"(T.EMPLOYEE_ID)))));

\echo
\echo *****  Creating view:  "SVCS_EMPLOYEE_DAY_EXT_VW"

CREATE or replace VIEW  SVCS_EMPLOYEE_DAY_EXT_VW
(
     DAY_DT,
     SVCS_SRC_CD,
     SRC_EMPLOYEE_ID,
     LOCATION_ID,
     SRC_USER_ID,
     EMPLOYEE_ID,
     SVCS_EMPLOYEE_GROUP_GID,
     SVCS_EMPLOYEE_GROUP_DESC,
     SRC_EMPLOYEE_GROUP_ID,
     SRC_EMPLOYEE_GROUP_DESC,
     SRC_EMPLOYEE_DISPLAY_NAME,
     EMPLOYEE_FIRST_NAME,
     EMPLOYEE_LAST_NAME,
     EMPLOYEE_STATUS_CD,
     EMPLOYEE_STATUS_DESC,
     EMPLOYEE_TERM_DT,
     SRC_EMPLOYEE_ACTIVE_FLAG,
     MAX_BLOCK_1_CAPACITY,
     MAX_BLOCK_2_CAPACITY,
     MAX_CHECK_IN_PER_HOUR,
     MAX_APPTS,
     MAX_CONCURRENT_APPTS
) AS
(SELECT D.DAY_DT, ('SMS'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, ("VARCHAR"(EMP.SMS_EMPLOYEE_ID))::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, ("VARCHAR"(EMP.SMS_USER_ID))::VARCHAR(22) AS SRC_USER_ID, EMP.EMPLOYEE_ID, EMPX.SVCS_EMPLOYEE_GROUP_GID, EMPX.SVCS_EMPLOYEE_GROUP_DESC, EMPX.SRC_EMPLOYEE_GROUP_ID, EMPX.SRC_EMPLOYEE_GROUP_DESC, (EMP.SMS_EMPLOYEE_NAME)::VARCHAR(255) AS SRC_EMPLOYEE_DISPLAY_NAME, (EP.EMPL_FIRST_NAME)::VARCHAR(128) AS EMPLOYEE_FIRST_NAME, (EP.EMPL_LAST_NAME)::VARCHAR(128) AS EMPLOYEE_LAST_NAME, EP.EMPL_STATUS_CD AS EMPLOYEE_STATUS_CD, ES.EMPL_STATUS_DESC AS EMPLOYEE_STATUS_DESC, EP.EMPL_TERM_DT AS EMPLOYEE_TERM_DT, (NULL::"NUMERIC")::NUMERIC(1,0) AS SRC_EMPLOYEE_ACTIVE_FLAG, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_1_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_BLOCK_2_CAPACITY, (NULL::"NUMERIC")::NUMERIC(18,0) AS MAX_CHECK_IN_PER_HOUR, EMP.MAX_APPTS, EMP.MAX_CONCURRENT_APPTS FROM ((((((ADMIN.DAYS D JOIN (SELECT MAX(SMS_GROOM_SCHEDULE.DAY_DT) AS SCHED_END_DT FROM ADMIN.SMS_GROOM_SCHEDULE) S ON ((D.DAY_DT <= S.SCHED_END_DT))) JOIN ADMIN.SMS_EMPLOYEE_DAY EMP ON ((CASE WHEN (D.DAY_DT >= "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))) THEN "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1)) ELSE D.DAY_DT END = "TIMESTAMP"(DATE(EMP.DAY_DT))))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_DAY_SDVW EP ON (((EMP.EMPLOYEE_ID = EP.EMPLOYEE_ID) AND (EMP.DAY_DT = EP.DAY_DT)))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON (((EMP.LOCATION_ID = SSR.LOCATION_ID) AND (EMP.DAY_DT >= "TIMESTAMP"(SSR.PRISM_START_DT))))) LEFT JOIN ADMIN.EMPLOYEE_STATUS ES ON ((EP.EMPL_STATUS_CD = ES.EMPL_STATUS_CD))) LEFT JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW EMPX ON (((EMP.SMS_EMPLOYEE_GROUP_ID = EMPX.SRC_EMPLOYEE_GROUP_ID) AND (EMPX.SVCS_SRC_CD = 'SMS'::"VARCHAR")))) WHERE (SSR.LOCATION_ID ISNULL)) UNION ALL (SELECT D.DAY_DT, ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, (EMP.SDS_EMPLOYEE_ID)::VARCHAR(22) AS SRC_EMPLOYEE_ID, EMP.LOCATION_ID, (EMP.SDS_USER_ID)::VARCHAR(22) AS SRC_USER_ID, EMP.EMPLOYEE_ID, EMPX.SVCS_EMPLOYEE_GROUP_GID, EMPX.SVCS_EMPLOYEE_GROUP_DESC, EMP.SDS_EMPLOYEE_GROUP_GID AS SRC_EMPLOYEE_GROUP_ID, (EMP.SDS_EMPLOYEE_GROUP_NAME)::VARCHAR(80) AS SRC_EMPLOYEE_GROUP_DESC, EMP.SDS_EMPLOYEE_DISPLAY_NAME AS SRC_EMPLOYEE_DISPLAY_NAME, EMP.EMPLOYEE_FIRST_NAME, EMP.EMPLOYEE_LAST_NAME, EMP.EMPLOYEE_STATUS_CD, EMP.EMPLOYEE_STATUS_DESC, "TIMESTAMP"(EMP.EMPLOYEE_TERM_DT) AS EMPLOYEE_TERM_DT, EMP.SDS_EMPLOYEE_ACTIVE_FLAG AS SRC_EMPLOYEE_ACTIVE_FLAG, EMP.MAX_BLOCK_1_CAPACITY, EMP.MAX_BLOCK_2_CAPACITY, EMP.MAX_CHECK_IN_PER_HOUR, NULL::INT4 AS MAX_APPTS, NULL::INT4 AS MAX_CONCURRENT_APPTS FROM (((((ADMIN.DAYS D JOIN (SELECT MAX(DATE(SDS_SERVICE_TERRITORY_MEMBER.EFF_END_TSTMP)) AS SCHED_END_DT FROM ADMIN.SDS_SERVICE_TERRITORY_MEMBER) S ON ((D.DAY_DT <= "TIMESTAMP"(S.SCHED_END_DT)))) JOIN ADMIN.SDS_EMPLOYEE_DAY EMP ON ((CASE WHEN (D.DAY_DT >= "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))) THEN "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 1)) ELSE D.DAY_DT END = "TIMESTAMP"(EMP.DAY_DT)))) LEFT JOIN ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW EMPX ON (((EMP.SDS_EMPLOYEE_GROUP_GID = EMPX.SRC_EMPLOYEE_GROUP_ID) AND (EMPX.SVCS_SRC_CD = 'PRISM'::"VARCHAR")))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR ON (((EMP.LOCATION_ID = SSR.LOCATION_ID) AND (EMP.DAY_DT >= SSR.PRISM_START_DT)))) LEFT JOIN ADMIN.SDS_STORE_ROLLOUT SSR_1 ON ((EMP.LOCATION_ID = SSR_1.LOCATION_ID))) WHERE ((EMP.EMPLOYEE_ID NOTNULL) AND ((SSR_1.LOCATION_ID ISNULL) OR (SSR.LOCATION_ID NOTNULL))));

\echo
\echo *****  Creating view:  "MSTR_TIMINGS_VW"

CREATE or replace VIEW  MSTR_TIMINGS_VW
(
     USER_NAME,
     REPORT_NAME,
     REPORT_GUID,
     OBJECT_ID,
     PROJECT_NAME,
     JOB_ID,
     RUN_DATE,
     TO_DATE,
     RUN_TIME,
     RUNDT_TIME,
     TIMING_SEQUENCE,
     START_TIME,
     END_TIME,
     REPORT_RUNTIME,
     FREQUENCY,
     STATUS,
     MAX_REC
) AS
SELECT A1.USER_NAME, A1.REPORT_NAME, A1.REPORT_GUID, (((((((((((((("SUBSTRING"(A1.REPORT_GUID, 1, 8) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 13, 4)) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 9, 4)) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 23, 2)) || "SUBSTRING"(A1.REPORT_GUID, 21, 2)) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 19, 2)) || "SUBSTRING"(A1.REPORT_GUID, 17, 2)) || "SUBSTRING"(A1.REPORT_GUID, 31, 2)) || "SUBSTRING"(A1.REPORT_GUID, 29, 2)) || "SUBSTRING"(A1.REPORT_GUID, 27, 2)) || "SUBSTRING"(A1.REPORT_GUID, 25, 2)) AS OBJECT_ID, A1.PROJECT_NAME, A1.JOB_ID, A1.RUN_DATE, TO_DATE("VARCHAR"(A1.RUN_DATE), 'YYYY-MM-DD'::"VARCHAR") AS TO_DATE, A1.RUN_TIME, (((((("SUBSTRING"("VARCHAR"(A1.RUN_DATE), 1, 10) || ' '::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 1, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 3, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 5, 2)) AS RUNDT_TIME, A1.TIMING_SEQUENCE, (((("SUBSTRING"(LPAD("VARCHAR"(A1.RUN_TIME), 6, '0'::"VARCHAR"), 1, 2) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(A1.RUN_TIME), 6, '0'::"VARCHAR"), 3, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(A1.RUN_TIME), 6, '0'::"VARCHAR"), 5, 2)) AS START_TIME, (((("SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 1, 2) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 3, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 5, 2)) AS END_TIME, (B1.RUN_TIME - A1.RUN_TIME) AS REPORT_RUNTIME, C1.FREQUENCY, CASE WHEN ("VARCHAR"(C1.FREQUENCY) ~~ LIKE_ESCAPE((('%'::"VARCHAR" || "VARCHAR"(DATE_PART('dow'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR")))) || '%'::"VARCHAR"), '\'::"VARCHAR")) THEN CASE WHEN (A1.RUN_DATE = DATE("TIMESTAMP"('now(0)'::"VARCHAR"))) THEN 'GREEN'::"VARCHAR" ELSE CASE WHEN (TO_NUMBER(((LPAD("VARCHAR"(DATE_PART('Hour'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))), 2, '0'::"VARCHAR") || LPAD("VARCHAR"(DATE_PART('Minute'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))), 2, '0'::"VARCHAR")) || LPAD("VARCHAR"(DATE_PART('Second'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))), 2, '0'::"VARCHAR")), '999999'::"VARCHAR") < TO_NUMBER(C1.END_TIME, '99999999'::"VARCHAR")) THEN 'YELLOW'::"VARCHAR" ELSE 'RED'::"VARCHAR" END END ELSE 'GREEN'::"VARCHAR" END AS STATUS, CASE WHEN (A1.TIMING_SEQUENCE = D1.MAX_TIM) THEN 1 ELSE 0 END AS MAX_REC FROM (((ADMIN.MSTR_TIMINGS A1 FULL JOIN (SELECT MSTR_TIMINGS.JOB_ID, MSTR_TIMINGS.REPORT_GUID, MSTR_TIMINGS.RUN_TIME FROM ADMIN.MSTR_TIMINGS WHERE (MSTR_TIMINGS.EVENT = 'STOP'::"VARCHAR")) B1 ON (((A1.JOB_ID = B1.JOB_ID) AND (A1.REPORT_GUID = B1.REPORT_GUID)))) JOIN ADMIN.MSTR_CUBE_TARGET_TIMINGS C1 ON ((A1.REPORT_GUID = C1.REPORT_GUID))) JOIN (SELECT MSTR_TIMINGS.REPORT_GUID, MAX(MSTR_TIMINGS.TIMING_SEQUENCE) AS MAX_TIM FROM ADMIN.MSTR_TIMINGS WHERE (MSTR_TIMINGS.EVENT = 'START'::"VARCHAR") GROUP BY MSTR_TIMINGS.REPORT_GUID) D1 ON ((A1.REPORT_GUID = D1.REPORT_GUID))) WHERE (A1.EVENT = 'START'::"VARCHAR");

\echo
\echo *****  Creating view:  "SDS_WORK_ORDER_CONTRACT_DTL_RPT_VW"

CREATE or replace VIEW  SDS_WORK_ORDER_CONTRACT_DTL_RPT_VW
(
     SVCS_SRC_CD,
     SDS_WORK_ORDER_NBR,
     LOCATION_ID,
     APPT_DT,
     APPT_TSTMP,
     APPT_CREATE_TSTMP,
     SDS_SERVICE_CONTRACT_NBR,
     SDS_SERVICE_TEXT_NBR,
     SDS_SERVICE_CONTRACT_COMPONENT_NBR,
     CONTRACT_AGREEMENT_TSTMP_UTC,
     CONTRACT_AGREEMENT_TSTMP,
     CONTRACT_AGREED_TO_BY,
     SERVICE_TEXT_TYPE_NAME,
     CONTRACT_PET_SPECIES,
     CONTRACT_TEXT_ORDER_NBR,
     CONTRACT_TEXT_TITLE,
     CONTRACT_TEXT,
     CONTRACT_ANSWER,
     READ_ONLY_FLAG
) AS
SELECT ('PRISM'::"VARCHAR")::VARCHAR(5) AS SVCS_SRC_CD, A.SDS_WORK_ORDER_NBR, A.LOCATION_ID, DATE(A.APPT_TSTMP) AS APPT_DT, A.APPT_TSTMP, A.APPT_CREATE_TSTMP, C.SDS_SERVICE_CONTRACT_NAME AS SDS_SERVICE_CONTRACT_NBR, T.SDS_SERVICE_TEXT_NAME AS SDS_SERVICE_TEXT_NBR, CC.SDS_SERVICE_CONTRACT_COMPONENT_NAME AS SDS_SERVICE_CONTRACT_COMPONENT_NBR, C.SDS_AGREEMENT_TSTMP AS CONTRACT_AGREEMENT_TSTMP_UTC, (C.SDS_AGREEMENT_TSTMP + "INTERVAL"(("VARCHAR"(TC.CONVERSION_HOUR) || 'HOUR'::"VARCHAR"))) AS CONTRACT_AGREEMENT_TSTMP, C.AGREED_TO_BY AS CONTRACT_AGREED_TO_BY, R.SDS_RECORD_TYPE_NAME AS SERVICE_TEXT_TYPE_NAME, PS.PETM_PET_SPECIES_NAME AS CONTRACT_PET_SPECIES, T.TEXT_ORDER_NBR AS CONTRACT_TEXT_ORDER_NBR, T.SERVICE_TEXT_TITLE AS CONTRACT_TEXT_TITLE, T.SERVICE_TEXT AS CONTRACT_TEXT, CC.SDS_SERVICE_CONTRACT_ANSWER AS CONTRACT_ANSWER, T.READ_ONLY_FLAG FROM ((((((((ADMIN.SDS_WORK_ORDER_RPT A LEFT JOIN ADMIN.SDS_SERVICE_CONTRACT C ON (((C.SDS_WORK_ORDER_ID = A.SDS_WORK_ORDER_ID) AND (C.DELETED_FLAG = '0'::NUMERIC)))) LEFT JOIN ADMIN.SDS_SERVICE_CONTRACT_COMPONENT CC ON (((CC.SDS_SERVICE_CONTRACT_ID = C.SDS_SERVICE_CONTRACT_ID) AND (CC.DELETED_FLAG = '0'::NUMERIC)))) LEFT JOIN ADMIN.SDS_SERVICE_TEXT T ON (((T.SDS_SERVICE_TEXT_ID = CC.SDS_SERVICE_TEXT_ID) AND (T.DELETED_FLAG = '0'::NUMERIC)))) LEFT JOIN ADMIN.SDS_RECORD_TYPE R ON ((T.SDS_RECORD_TYPE_ID = R.SDS_RECORD_TYPE_ID))) LEFT JOIN ADMIN.PETM_PET_SPECIES PS ON ((INT4(T.PET_SPECIES) = PS.PETM_PET_SPECIES_ID))) LEFT JOIN ADMIN.SITE_PROFILE S ON ((A.LOCATION_ID = S.LOCATION_ID))) LEFT JOIN ADMIN.TIMEZONE_CONVERSION TC ON ((TC.TO_TIME_ZONE_ID = S.TIME_ZONE_ID))) LEFT JOIN ADMIN.DAY_LIGHT_SAVING_DATE DL ON (((C.SDS_AGREEMENT_TSTMP >= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_START_DT)) AND (C.SDS_AGREEMENT_TSTMP <= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_END_DT))))) WHERE ((TC.FROM_TIME_ZONE_ID = 'UTC'::"VARCHAR") AND (TC.DAY_LIGHT_SAVING_FLAG = "NUMERIC"(CASE WHEN ((C.SDS_AGREEMENT_TSTMP >= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_START_DT)) AND (C.SDS_AGREEMENT_TSTMP <= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_END_DT))) THEN 1 ELSE 0 END)));

\echo
\echo *****  Creating view:  "SALES_TRANS_ORDER_RPT_VW"

CREATE or replace VIEW  SALES_TRANS_ORDER_RPT_VW
(
     DAY_DT,
     TY_LY_FLAG,
     WEEK_DT,
     FISCAL_YR,
     LOCATION_ID,
     SALES_INSTANCE_ID,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     CUST_TRANS_ID,
     ORDER_DT,
     SALES_TYPE_ID,
     DS_DC_NBR,
     DS_WEB_ORDER_NBR,
     DS_EMPLOYEE_ID,
     DS_CATLG_SRC_CD,
     GUEST_FULFILL_STORE_NBR,
     DS_ASSIST_STORE_NBR,
     DS_AFFILIATE_ID,
     DS_CHANNEL_CD,
     ORIG_ORDER_NBR,
     ORIG_ORDER_SEQ_NBR,
     DS_ORDER_RETAIL_AMT,
     DS_ORDER_SHIP_COST_AMT,
     DS_ORDER_FRT_TAX_RT,
     SHIPPING_AMT,
     SHIPPING_DISCOUNT_AMT,
     DATE_LOADED,
     CREATION_DEVICE_TYPE,
     CREATION_DEVICE_WIDTH,
     SCHED_DELIVERY_FLG,
     SUBSCRIPTION_FLG,
     AFTERPAY_FLG
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, DTL.WEEK_DT, DTL.FISCAL_YR, S.LOCATION_ID, S.SALES_INSTANCE_ID, S.ORDER_NBR, S.ORDER_SEQ_NBR, S.CUST_TRANS_ID, S.ORDER_DT, S.SALES_TYPE_ID, S.DS_DC_NBR, S.DS_WEB_ORDER_NBR, S.DS_EMPLOYEE_ID, S.DS_CATLG_SRC_CD, S.GUEST_FULFILL_STORE_NBR, S.DS_ASSIST_STORE_NBR, S.DS_AFFILIATE_ID, S.DS_CHANNEL_CD, S.ORIG_ORDER_NBR, S.ORIG_ORDER_SEQ_NBR, S.DS_ORDER_RETAIL_AMT, S.DS_ORDER_SHIP_COST_AMT, S.DS_ORDER_FRT_TAX_RT, S.SHIPPING_AMT, S.SHIPPING_DISCOUNT_AMT, S.DATE_LOADED, S.CREATION_DEVICE_TYPE, S.CREATION_DEVICE_WIDTH, CASE WHEN (O.SCHED_DELIVERY_FLG NOTNULL) THEN INT4(O.SCHED_DELIVERY_FLG) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS SCHED_DELIVERY_FLG, CASE WHEN (O.SUBSCRIPTION_FLG NOTNULL) THEN O.SUBSCRIPTION_FLG WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS SUBSCRIPTION_FLG, CASE WHEN (O.AFTERPAY_FLG NOTNULL) THEN INT4(O.AFTERPAY_FLG) WHEN (0 NOTNULL) THEN 0 ELSE NULL::INT4 END AS AFTERPAY_FLG FROM ((ADMIN.SALES_TRANS_ORDER S LEFT JOIN (SELECT O.ORDER_NBR, MAX(O.OMS_ORDER_DT) AS OMS_ORDER_DT, MAX(O.SCHED_DELIVERY_FLG) AS SCHED_DELIVERY_FLG, MAX(CASE WHEN (D.OMS_DO_TYPE_ID = 'Subscription'::"VARCHAR") THEN 1 ELSE 0 END) AS SUBSCRIPTION_FLG, MAX(O.AFTERPAY_FLG) AS AFTERPAY_FLG FROM (ADMIN.OMS_ORDER O LEFT JOIN ADMIN.OMS_DIST_ORDER D ON (((D.ORDER_NBR = O.ORDER_NBR) AND (DATE(D.OMS_ORDER_CREATED_TSTMP) = DATE(O.CREATED_TSTMP))))) GROUP BY O.ORDER_NBR) O ON ((((O.ORDER_NBR = S.ORDER_NBR) AND (S.ORDER_DT >= '2016-09-28 00:00:00'::"TIMESTAMP")) AND (S.DAY_DT >= '2016-09-28 00:00:00'::"TIMESTAMP")))) JOIN ADMIN.DAYS_TY_LY DTL ON ((S.DAY_DT = DTL.TRANS_DAY_DT)));

\echo
\echo *****  Creating view:  "WM_PO_ORDER_DTL_VW"

CREATE or replace VIEW  WM_PO_ORDER_DTL_VW
(
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     PO_NBR,
     PO_DOC_DT,
     SHIPPED_QTY,
     ORIG_ORDER_QTY,
     LOAD_TSTMP
) AS
(SELECT WM_2009_PO_ORDER_DTL.DAY_DT, WM_2009_PO_ORDER_DTL.LOCATION_ID, WM_2009_PO_ORDER_DTL.PRODUCT_ID, WM_2009_PO_ORDER_DTL.FROM_LOCATION_ID, WM_2009_PO_ORDER_DTL.PO_NBR, WM_2009_PO_ORDER_DTL.PO_DOC_DT, WM_2009_PO_ORDER_DTL.SHIPPED_QTY, WM_2009_PO_ORDER_DTL.ORIG_ORDER_QTY, WM_2009_PO_ORDER_DTL.LOAD_TSTMP FROM ADMIN.WM_2009_PO_ORDER_DTL) UNION ALL (SELECT WM_2018_PO_ORDER_DTL.DAY_DT, WM_2018_PO_ORDER_DTL.LOCATION_ID, WM_2018_PO_ORDER_DTL.PRODUCT_ID, WM_2018_PO_ORDER_DTL.FROM_LOCATION_ID, WM_2018_PO_ORDER_DTL.PO_NBR, WM_2018_PO_ORDER_DTL.PO_DOC_DT, WM_2018_PO_ORDER_DTL.SHIPPED_QTY, WM_2018_PO_ORDER_DTL.ORIG_ORDER_QTY, WM_2018_PO_ORDER_DTL.LOAD_TSTMP FROM ADMIN.WM_2018_PO_ORDER_DTL);

\echo
\echo *****  Creating view:  "STORE_FILL_RATE_VW"

CREATE or replace VIEW  STORE_FILL_RATE_VW
(
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     DP_DEMAND_QTY,
     WM_DEMAND_QTY,
     RAW_DEMAND_QTY,
     WM_SHIPPED_QTY,
     LOAD_TSTMP
) AS
(SELECT STORE_FILL_RATE_HIST.DAY_DT, STORE_FILL_RATE_HIST.LOCATION_ID, STORE_FILL_RATE_HIST.PRODUCT_ID, STORE_FILL_RATE_HIST.FROM_LOCATION_ID, STORE_FILL_RATE_HIST.DP_DEMAND_QTY, STORE_FILL_RATE_HIST.WM_DEMAND_QTY, STORE_FILL_RATE_HIST.RAW_DEMAND_QTY, STORE_FILL_RATE_HIST.WM_SHIPPED_QTY, STORE_FILL_RATE_HIST.LOAD_TSTMP FROM ADMIN.STORE_FILL_RATE_HIST) UNION ALL (SELECT STORE_FILL_RATE.DAY_DT, STORE_FILL_RATE.LOCATION_ID, STORE_FILL_RATE.PRODUCT_ID, STORE_FILL_RATE.FROM_LOCATION_ID, STORE_FILL_RATE.DP_DEMAND_QTY, STORE_FILL_RATE.WM_DEMAND_QTY, STORE_FILL_RATE.RAW_DEMAND_QTY, STORE_FILL_RATE.WM_SHIPPED_QTY, STORE_FILL_RATE.LOAD_TSTMP FROM ADMIN.STORE_FILL_RATE);

\echo
\echo *****  Creating view:  "PM_V2OAHYHXXYHLMVZ526TJ5JM7H44"

CREATE or replace VIEW  PM_V2OAHYHXXYHLMVZ526TJ5JM7H44
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VNKU7RP3LUS4XWI5WFZ23UB5S5Y"

CREATE or replace VIEW  PM_VNKU7RP3LUS4XWI5WFZ23UB5S5Y
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VSUHOHEBXVQNDCI6BIDZ35POYDU"

CREATE or replace VIEW  PM_VSUHOHEBXVQNDCI6BIDZ35POYDU
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VGRBATWA4QB7TMDWRULBEVRBZ2M"

CREATE or replace VIEW  PM_VGRBATWA4QB7TMDWRULBEVRBZ2M
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V4GOV2RARFQNMTCWVQOP7W7VPFE"

CREATE or replace VIEW  PM_V4GOV2RARFQNMTCWVQOP7W7VPFE
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V23VLG7YLVCHPXDBDDPFCELBWHI"

CREATE or replace VIEW  PM_V23VLG7YLVCHPXDBDDPFCELBWHI
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "WM_SHIPPED_QTY_VW"

CREATE or replace VIEW  WM_SHIPPED_QTY_VW
(
     SOURCE_SYSTEM,
     DAY_DT,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     LOCATION_ID,
     SHIPPED_QTY
) AS
(SELECT ('2009 WMS'::"VARCHAR")::VARCHAR(8) AS SOURCE_SYSTEM, WM_2009_PO_ORDER_DTL.DAY_DT, WM_2009_PO_ORDER_DTL.PRODUCT_ID, WM_2009_PO_ORDER_DTL.FROM_LOCATION_ID, WM_2009_PO_ORDER_DTL.LOCATION_ID, (SUM(WM_2009_PO_ORDER_DTL.SHIPPED_QTY))::NUMERIC(38,4) AS SHIPPED_QTY FROM ADMIN.WM_2009_PO_ORDER_DTL GROUP BY WM_2009_PO_ORDER_DTL.DAY_DT, WM_2009_PO_ORDER_DTL.PRODUCT_ID, WM_2009_PO_ORDER_DTL.FROM_LOCATION_ID, WM_2009_PO_ORDER_DTL.LOCATION_ID) UNION ALL (SELECT ('2018 WMS'::"VARCHAR")::VARCHAR(8) AS SOURCE_SYSTEM, WM_2018_PO_ORDER_DTL.DAY_DT, WM_2018_PO_ORDER_DTL.PRODUCT_ID, WM_2018_PO_ORDER_DTL.FROM_LOCATION_ID, WM_2018_PO_ORDER_DTL.LOCATION_ID, (SUM(WM_2018_PO_ORDER_DTL.SHIPPED_QTY))::NUMERIC(38,4) AS SHIPPED_QTY FROM ADMIN.WM_2018_PO_ORDER_DTL GROUP BY WM_2018_PO_ORDER_DTL.DAY_DT, WM_2018_PO_ORDER_DTL.PRODUCT_ID, WM_2018_PO_ORDER_DTL.FROM_LOCATION_ID, WM_2018_PO_ORDER_DTL.LOCATION_ID);

\echo
\echo *****  Creating view:  "MSTR_TIMINGS_VW_T"

CREATE or replace VIEW  MSTR_TIMINGS_VW_T
(
     USER_NAME,
     REPORT_NAME,
     REPORT_GUID,
     OBJECT_ID,
     PROJECT_NAME,
     JOB_ID,
     RUN_DATE,
     TO_DATE,
     RUN_TIME,
     RUNDT_TIME,
     TIMING_SEQUENCE,
     START_TIME,
     END_TIME,
     REPORT_RUNTIME,
     FREQUENCY,
     STATUS,
     MAX_REC
) AS
SELECT A1.USER_NAME, A1.REPORT_NAME, A1.REPORT_GUID, (((((((((((((("SUBSTRING"(A1.REPORT_GUID, 1, 8) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 13, 4)) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 9, 4)) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 23, 2)) || "SUBSTRING"(A1.REPORT_GUID, 21, 2)) || '-'::"VARCHAR") || "SUBSTRING"(A1.REPORT_GUID, 19, 2)) || "SUBSTRING"(A1.REPORT_GUID, 17, 2)) || "SUBSTRING"(A1.REPORT_GUID, 31, 2)) || "SUBSTRING"(A1.REPORT_GUID, 29, 2)) || "SUBSTRING"(A1.REPORT_GUID, 27, 2)) || "SUBSTRING"(A1.REPORT_GUID, 25, 2)) AS OBJECT_ID, A1.PROJECT_NAME, A1.JOB_ID, A1.RUN_DATE, TO_DATE("VARCHAR"(A1.RUN_DATE), 'YYYY-MM-DD'::"VARCHAR") AS TO_DATE, A1.RUN_TIME, (((((("SUBSTRING"("VARCHAR"(A1.RUN_DATE), 1, 10) || ' '::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 1, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 3, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 5, 2)) AS RUNDT_TIME, A1.TIMING_SEQUENCE, (((("SUBSTRING"(LPAD("VARCHAR"(A1.RUN_TIME), 6, '0'::"VARCHAR"), 1, 2) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(A1.RUN_TIME), 6, '0'::"VARCHAR"), 3, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(A1.RUN_TIME), 6, '0'::"VARCHAR"), 5, 2)) AS START_TIME, (((("SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 1, 2) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 3, 2)) || ':'::"VARCHAR") || "SUBSTRING"(LPAD("VARCHAR"(B1.RUN_TIME), 6, '0'::"VARCHAR"), 5, 2)) AS END_TIME, (B1.RUN_TIME - A1.RUN_TIME) AS REPORT_RUNTIME, C1.FREQUENCY, CASE WHEN ("VARCHAR"(C1.FREQUENCY) ~~ LIKE_ESCAPE((('%'::"VARCHAR" || "VARCHAR"(DATE_PART('dow'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR")))) || '%'::"VARCHAR"), '\'::"VARCHAR")) THEN CASE WHEN (A1.RUN_DATE = DATE("TIMESTAMP"('now(0)'::"VARCHAR"))) THEN 'GREEN'::"VARCHAR" ELSE CASE WHEN (TO_NUMBER(((LPAD("VARCHAR"(DATE_PART('Hour'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))), 2, '0'::"VARCHAR") || LPAD("VARCHAR"(DATE_PART('Minute'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))), 2, '0'::"VARCHAR")) || LPAD("VARCHAR"(DATE_PART('Second'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))), 2, '0'::"VARCHAR")), '999999'::"VARCHAR") < TO_NUMBER(C1.END_TIME, '99999999'::"VARCHAR")) THEN 'YELLOW'::"VARCHAR" ELSE 'RED'::"VARCHAR" END END ELSE 'GREEN'::"VARCHAR" END AS STATUS, CASE WHEN (A1.TIMING_SEQUENCE = D1.MAX_TIM) THEN 1 ELSE 0 END AS MAX_REC FROM (((ADMIN.MSTR_TIMINGS A1 FULL JOIN (SELECT MSTR_TIMINGS.JOB_ID, MSTR_TIMINGS.REPORT_GUID, MSTR_TIMINGS.RUN_TIME FROM ADMIN.MSTR_TIMINGS WHERE (MSTR_TIMINGS.EVENT = 'STOP'::"VARCHAR")) B1 ON (((A1.JOB_ID = B1.JOB_ID) AND (A1.REPORT_GUID = B1.REPORT_GUID)))) JOIN ADMIN.MSTR_CUBE_TARGET_TIMINGS C1 ON ((A1.REPORT_GUID = C1.REPORT_GUID))) JOIN (SELECT MSTR_TIMINGS.REPORT_GUID, MSTR_TIMINGS.JOB_ID, MAX(MSTR_TIMINGS.TIMING_SEQUENCE) AS MAX_TIM FROM ADMIN.MSTR_TIMINGS WHERE (MSTR_TIMINGS.EVENT = 'STOP'::"VARCHAR") GROUP BY MSTR_TIMINGS.REPORT_GUID, MSTR_TIMINGS.JOB_ID) D1 ON (((A1.JOB_ID = D1.JOB_ID) AND (A1.REPORT_GUID = D1.REPORT_GUID)))) WHERE (A1.EVENT = 'START'::"VARCHAR");

\echo
\echo *****  Creating view:  "PM_VGN2ZPJFKZ7XKMYTIO7UADCQH3Y"

CREATE or replace VIEW  PM_VGN2ZPJFKZ7XKMYTIO7UADCQH3Y
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VAOUDJ6TTSCCDU54OTSQMMNUW6Q"

CREATE or replace VIEW  PM_VAOUDJ6TTSCCDU54OTSQMMNUW6Q
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VTMX7R2TDOKGON6CLZJAIT2QHRU"

CREATE or replace VIEW  PM_VTMX7R2TDOKGON6CLZJAIT2QHRU
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VTBQZC67EH6IPIF6M5KMR7SCRRE"

CREATE or replace VIEW  PM_VTBQZC67EH6IPIF6M5KMR7SCRRE
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VGPDG6ANQB3NL4IYUGMBEB7FATQ"

CREATE or replace VIEW  PM_VGPDG6ANQB3NL4IYUGMBEB7FATQ
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VBC36PJAO2BFPXMIXOOH7XNIHWY"

CREATE or replace VIEW  PM_VBC36PJAO2BFPXMIXOOH7XNIHWY
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "WM_E_CONSOL_PERF_SMRY_VW"

CREATE or replace VIEW  WM_E_CONSOL_PERF_SMRY_VW
(
     LOCATION_ID,
     WM_CREATE_TSTMP,
     WM_WHSE,
     WM_PERF_SMRY_TRAN_ID,
     CLOCK_IN_TSTMP,
     WM_LOGIN_USER_ID,
     WM_JOB_FUNCTION_NAME,
     WM_SPVSR_LOGIN_USER_ID,
     WM_DEPT_CD,
     CLOCK_IN_STATUS,
     TOTAL_SAM,
     TOTAL_PAM,
     TOTAL_TIME,
     OSDL,
     OSIL,
     NSDL,
     SIL,
     UDIL,
     UIL,
     ADJ_OSDL,
     ADJ_OSIL,
     ADJ_UDIL,
     ADJ_NSDL,
     PAID_BRK,
     UNPAID_BRK,
     REF_OSDL,
     REF_OSIL,
     REF_UDIL,
     REF_NSDL,
     REF_ADJ_OSDL,
     REF_ADJ_OSIL,
     REF_ADJ_UDIL,
     REF_ADJ_NSDL,
     MISC_NBR_1,
     WM_MOD_TSTMP,
     WM_USER_ID,
     MISC_1,
     MISC_2,
     CLOCK_OUT_TSTMP,
     WM_SHIFT_CD,
     EVENT_CNT,
     START_TSTMP,
     END_TSTMP,
     LEVEL_1,
     LEVEL_2,
     LEVEL_3,
     LEVEL_4,
     LEVEL_5,
     WHSE_TSTMP,
     WM_OPS_CD,
     REF_SAM,
     REF_PAM,
     WM_REPORT_SHIFT_CD,
     MISC_TXT_1,
     MISC_TXT_2,
     MISC_NUM_1,
     MISC_NUM_2,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
(SELECT WM_E_CONSOL_PERF_SMRY.LOCATION_ID, WM_E_CONSOL_PERF_SMRY.WM_CREATE_TSTMP, WM_E_CONSOL_PERF_SMRY.WM_WHSE, (WM_E_CONSOL_PERF_SMRY.WM_PERF_SMRY_TRAN_ID)::NUMERIC(38,0) AS WM_PERF_SMRY_TRAN_ID, WM_E_CONSOL_PERF_SMRY.CLOCK_IN_TSTMP, WM_E_CONSOL_PERF_SMRY.WM_LOGIN_USER_ID, WM_E_CONSOL_PERF_SMRY.WM_JOB_FUNCTION_NAME, WM_E_CONSOL_PERF_SMRY.WM_SPVSR_LOGIN_USER_ID, WM_E_CONSOL_PERF_SMRY.WM_DEPT_CD, (WM_E_CONSOL_PERF_SMRY.CLOCK_IN_STATUS)::NUMERIC(38,0) AS CLOCK_IN_STATUS, WM_E_CONSOL_PERF_SMRY.TOTAL_SAM, (WM_E_CONSOL_PERF_SMRY.TOTAL_PAM)::NUMERIC(20,7) AS TOTAL_PAM, (WM_E_CONSOL_PERF_SMRY.TOTAL_TIME)::NUMERIC(20,7) AS TOTAL_TIME, (WM_E_CONSOL_PERF_SMRY.OSDL)::NUMERIC(20,7) AS OSDL, (WM_E_CONSOL_PERF_SMRY.OSIL)::NUMERIC(20,7) AS OSIL, (WM_E_CONSOL_PERF_SMRY.NSDL)::NUMERIC(20,7) AS NSDL, (WM_E_CONSOL_PERF_SMRY.SIL)::NUMERIC(20,7) AS SIL, (WM_E_CONSOL_PERF_SMRY.UDIL)::NUMERIC(20,7) AS UDIL, (WM_E_CONSOL_PERF_SMRY.UIL)::NUMERIC(20,7) AS UIL, (WM_E_CONSOL_PERF_SMRY.ADJ_OSDL)::NUMERIC(20,7) AS ADJ_OSDL, (WM_E_CONSOL_PERF_SMRY.ADJ_OSIL)::NUMERIC(20,7) AS ADJ_OSIL, (WM_E_CONSOL_PERF_SMRY.ADJ_UDIL)::NUMERIC(20,7) AS ADJ_UDIL, (WM_E_CONSOL_PERF_SMRY.ADJ_NSDL)::NUMERIC(20,7) AS ADJ_NSDL, (WM_E_CONSOL_PERF_SMRY.PAID_BRK)::NUMERIC(20,7) AS PAID_BRK, (WM_E_CONSOL_PERF_SMRY.UNPAID_BRK)::NUMERIC(20,7) AS UNPAID_BRK, (WM_E_CONSOL_PERF_SMRY.REF_OSDL)::NUMERIC(20,7) AS REF_OSDL, (WM_E_CONSOL_PERF_SMRY.REF_OSIL)::NUMERIC(20,7) AS REF_OSIL, (WM_E_CONSOL_PERF_SMRY.REF_UDIL)::NUMERIC(20,7) AS REF_UDIL, (WM_E_CONSOL_PERF_SMRY.REF_NSDL)::NUMERIC(20,7) AS REF_NSDL, (WM_E_CONSOL_PERF_SMRY.REF_ADJ_OSDL)::NUMERIC(20,7) AS REF_ADJ_OSDL, (WM_E_CONSOL_PERF_SMRY.REF_ADJ_OSIL)::NUMERIC(20,7) AS REF_ADJ_OSIL, (WM_E_CONSOL_PERF_SMRY.REF_ADJ_UDIL)::NUMERIC(20,7) AS REF_ADJ_UDIL, (WM_E_CONSOL_PERF_SMRY.REF_ADJ_NSDL)::NUMERIC(20,7) AS REF_ADJ_NSDL, (WM_E_CONSOL_PERF_SMRY.MISC_NBR_1)::NUMERIC(20,7) AS MISC_NBR_1, WM_E_CONSOL_PERF_SMRY.WM_MOD_TSTMP, WM_E_CONSOL_PERF_SMRY.WM_USER_ID, WM_E_CONSOL_PERF_SMRY.MISC_1, WM_E_CONSOL_PERF_SMRY.MISC_2, WM_E_CONSOL_PERF_SMRY.CLOCK_OUT_TSTMP, WM_E_CONSOL_PERF_SMRY.WM_SHIFT_CD, (WM_E_CONSOL_PERF_SMRY.EVENT_CNT)::NUMERIC(38,0) AS EVENT_CNT, WM_E_CONSOL_PERF_SMRY.START_TSTMP, WM_E_CONSOL_PERF_SMRY.END_TSTMP, WM_E_CONSOL_PERF_SMRY.LEVEL_1, WM_E_CONSOL_PERF_SMRY.LEVEL_2, WM_E_CONSOL_PERF_SMRY.LEVEL_3, WM_E_CONSOL_PERF_SMRY.LEVEL_4, WM_E_CONSOL_PERF_SMRY.LEVEL_5, WM_E_CONSOL_PERF_SMRY.WHSE_TSTMP, WM_E_CONSOL_PERF_SMRY.WM_OPS_CD, (WM_E_CONSOL_PERF_SMRY.REF_SAM)::NUMERIC(20,7) AS REF_SAM, (WM_E_CONSOL_PERF_SMRY.REF_PAM)::NUMERIC(20,7) AS REF_PAM, WM_E_CONSOL_PERF_SMRY.WM_REPORT_SHIFT_CD, WM_E_CONSOL_PERF_SMRY.MISC_TXT_1, WM_E_CONSOL_PERF_SMRY.MISC_TXT_2, WM_E_CONSOL_PERF_SMRY.MISC_NUM_1, WM_E_CONSOL_PERF_SMRY.MISC_NUM_2, WM_E_CONSOL_PERF_SMRY.UPDATE_TSTMP, WM_E_CONSOL_PERF_SMRY.LOAD_TSTMP FROM ADMIN.WM_E_CONSOL_PERF_SMRY) UNION (SELECT SITE_PROFILE.LOCATION_ID, E.CREATE_DATE_TIME AS WM_CREATE_TSTMP, E.WHSE AS WM_WHSE, E.PERF_SMRY_TRAN_ID AS WM_PERF_SMRY_TRAN_ID, E.CLOCK_IN_DATE AS CLOCK_IN_TSTMP, (E.LOGIN_USER_ID)::VARCHAR(50) AS WM_LOGIN_USER_ID, E.JOB_FUNCTION_NAME AS WM_JOB_FUNCTION_NAME, (E.SPVSR_LOGIN_USER_ID)::VARCHAR(50) AS WM_SPVSR_LOGIN_USER_ID, E.DEPT_CODE AS WM_DEPT_CD, E.CLOCK_IN_STATUS, E.TOTAL_SAM, E.TOTAL_PAM, E.TOTAL_TIME, E.OSDL, E.OSIL, E.NSDL, E.SIL, E.UDIL, E.UIL, E.ADJ_OSDL, E.ADJ_OSIL, E.ADJ_UDIL, E.ADJ_NSDL, E.PAID_BRK, E.UNPAID_BRK, E.REF_OSDL, E.REF_OSIL, E.REF_UDIL, E.REF_NSDL, E.REF_ADJ_OSDL, E.REF_ADJ_OSIL, E.REF_ADJ_UDIL, E.REF_ADJ_NSDL, E.MISC_NUMBER_1 AS MISC_NBR_1, E.MOD_DATE_TIME AS WM_MOD_TSTMP, (E.USER_ID)::VARCHAR(50) AS WM_USER_ID, E.MISC_1, E.MISC_2, E.CLOCK_OUT_DATE AS CLOCK_OUT_TSTMP, E.SHIFT_CODE AS WM_SHIFT_CD, E.EVENT_COUNT AS EVENT_CNT, E.START_DATE_TIME AS START_TSTMP, E.END_DATE_TIME AS END_TSTMP, E.LEVEL_1, E.LEVEL_2, E.LEVEL_3, E.LEVEL_4, E.LEVEL_5, E.DAY_DATE AS WHSE_TSTMP, E.OPS_CODE AS WM_OPS_CD, E.REF_SAM, E.REF_PAM, E.REPORT_SHIFT AS WM_REPORT_SHIFT_CD, E.MISC_TXT_1, E.MISC_TXT_2, E.MISC_NUM_1, E.MISC_NUM_2, E.UPDATE_TSTMP, E.LOAD_TSTMP FROM (ADMIN.E_CONSOL_PERF_SMRY E JOIN ADMIN.SITE_PROFILE ON ((INT4(E.WHSE) = SITE_PROFILE.STORE_NBR))) WHERE ((E.DEL_FLG = '0'::NUMERIC) AND (E.CLOCK_IN_DATE > "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 500)))));

\echo
\echo *****  Creating view:  "DP_ACCURACY_DAY_CRCY_VW"

CREATE or replace VIEW  DP_ACCURACY_DAY_CRCY_VW
(
     DAY_DT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     LOCATION_ID,
     PRODUCT_ID,
     SOURCE_VENDOR_ID,
     SOURCE_VENDOR_SUB_GROUP,
     DP_PURCH_GROUP_ID,
     EFFECTIVE_FORECAST_QTY,
     OUT_OF_STOCK_FLAG,
     ESTIMATED_LOST_SALES_QTY,
     ESTIMATED_LOST_SALES_AMT,
     EXCH_RATE_PCT,
     COUNTRY_CD
) AS
SELECT D.DAY_DT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, D.LOCATION_ID, D.PRODUCT_ID, D.SOURCE_VENDOR_ID, D.SOURCE_VENDOR_SUB_GROUP, D.DP_PURCH_GROUP_ID, D.EFFECTIVE_FORECAST_QTY, D.OUT_OF_STOCK_FLAG, D.ESTIMATED_LOST_SALES_QTY, D.ESTIMATED_LOST_SALES_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 1) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE CASE WHEN (((S.COUNTRY_CD = 'CA'::BPCHAR) AND (CTL.CURRENCY_TYPE_ID = 2)) AND (CASE WHEN (D.ESTIMATED_LOST_SALES_AMT NOTNULL) THEN D.ESTIMATED_LOST_SALES_AMT WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END <> '0'::NUMERIC)) THEN ((D.ESTIMATED_LOST_SALES_AMT / C.EXCHANGE_RATE_PCNT) / D.ESTIMATED_LOST_SALES_AMT) ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END END AS EXCH_RATE_PCT, S.COUNTRY_CD FROM (((ADMIN.DP_ACCURACY_DAY D JOIN ADMIN.SITE_PROFILE S ON ((D.LOCATION_ID = S.LOCATION_ID))) JOIN ADMIN.CURRENCY_DAY C ON (("TIMESTAMP"(D.DAY_DT) = C.DAY_DT))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "PM_VUHCLAJH76SPF375QTWAXDHJSXI"

CREATE or replace VIEW  PM_VUHCLAJH76SPF375QTWAXDHJSXI
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VGR5JCMGYBRJ6VX573MQM3B56PU"

CREATE or replace VIEW  PM_VGR5JCMGYBRJ6VX573MQM3B56PU
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VIYCU5RXHAGA44QHWTAXVOYDFDQ"

CREATE or replace VIEW  PM_VIYCU5RXHAGA44QHWTAXVOYDFDQ
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V6GZAMVNGFJZK5LSCO6BC32UCG4"

CREATE or replace VIEW  PM_V6GZAMVNGFJZK5LSCO6BC32UCG4
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VUKN42A4L3ZBGOLWOA7ZMU2OTLI"

CREATE or replace VIEW  PM_VUKN42A4L3ZBGOLWOA7ZMU2OTLI
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VGEJEWV7ZBNWHID7E3FQ7Z5HR64"

CREATE or replace VIEW  PM_VGEJEWV7ZBNWHID7E3FQ7Z5HR64
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "WM_PO_SKU_VW"

CREATE or replace VIEW  WM_PO_SKU_VW
(
     PO_NBR,
     SKU_NBR,
     EXPIRATION_DT
) AS
(SELECT L.WM_TC_PURCHASE_ORDERS_ID AS PO_NBR, LD.WM_ITEM_NAME AS SKU_NBR, MIN(L.WM_EXPIRATION_DT) AS EXPIRATION_DT FROM (ADMIN.WM_LPN L JOIN ADMIN.WM_LPN_DETAIL LD ON (((L.LOCATION_ID = LD.LOCATION_ID) AND (L.WM_LPN_ID = LD.WM_LPN_ID)))) WHERE (L.INBOUND_OUTBOUND_INDICATOR = 'I'::"VARCHAR") GROUP BY L.WM_TC_PURCHASE_ORDERS_ID, LD.WM_ITEM_NAME) UNION ALL (SELECT WM_2009_PO_SKU.PO_NBR, WM_2009_PO_SKU.SKU_NBR, WM_2009_PO_SKU.EXPIRATION_DT FROM ADMIN.WM_2009_PO_SKU);

\echo
\echo *****  Creating view:  "XX2"

CREATE or replace VIEW  XX2
(
     EMPLOYEE_ID,
     PIT_CERTIFICATION_ID
) AS
SELECT PA12.EMPLOYEE_ID, PA12.PIT_CERTIFICATION_ID FROM (SELECT PA11.PIT_CERTIFICATION_ID, PA11.EMPLOYEE_ID, COUNT(*) AS WJXBFS1 FROM (SELECT DISTINCT A13.PIT_CERTIFICATION_ID, A11.EMPLOYEE_ID, A11.ASSESSMENT_LID AS WJXBFS1, A11.ASSESSMENT_MID AS WJXBFS2 FROM ((ADMIN.EDU_RESULT_CONS A11 JOIN ADMIN.EMPLOYEE_PROFILE_RPT A14 ON (((A11.EMPLOYEE_ID = A14.EMPLOYEE_ID) AND (A11.LOCATION_ID = A14.LOCATION_ID)))) JOIN ADMIN.UDH_PIT_CERT_ASSESSMENT A13 ON (((A11.ASSESSMENT_LID = A13.PIT_ASSESSMENT_LID) AND (A11.ASSESSMENT_MID = A13.PIT_ASSESSMENT_MID)))) WHERE (((((A11.PASSED_FLAG IN (1)) AND (A14.EMPL_STATUS_CD IN (('A'::"VARCHAR")::VARCHAR(1)))) AND (A11.EMPLOYEE_ID = 618113)) AND (A13.PIT_ASSESSMENT_TYPE IN (1))) AND (A14.STORE_NBR IN (10, 12, 14, 22, 36, 38, 41)))) PA11 GROUP BY PA11.PIT_CERTIFICATION_ID, PA11.EMPLOYEE_ID) PA12 WHERE (CASE WHEN (PA12.WJXBFS1 = PA12.WJXBFS1) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE '0'::NUMERIC END = ('1'::NUMERIC(1,0))::NUMERIC(1,0));

\echo
\echo *****  Creating view:  "PM_VFX5FGZ2JUOBSFGBWHKHFJL3WLY"

CREATE or replace VIEW  PM_VFX5FGZ2JUOBSFGBWHKHFJL3WLY
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VEQNA6QJJJRNCSISM7OAOT77XXI"

CREATE or replace VIEW  PM_VEQNA6QJJJRNCSISM7OAOT77XXI
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VFF5RWUO4X6PBBTY4D4GUXRAENU"

CREATE or replace VIEW  PM_VFF5RWUO4X6PBBTY4D4GUXRAENU
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V24X3LLVNE7W4CMAZV7UQRUR2QA"

CREATE or replace VIEW  PM_V24X3LLVNE7W4CMAZV7UQRUR2QA
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VRHVWDDIPEBNHSKV7MHSV7QAL5U"

CREATE or replace VIEW  PM_VRHVWDDIPEBNHSKV7MHSV7QAL5U
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V4Z5RMYY5LHLH7S4BOYQJKU54HQ"

CREATE or replace VIEW  PM_V4Z5RMYY5LHLH7S4BOYQJKU54HQ
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "SVCS_PSH_TRAINING_CUSTOMER_R52WK_SMRY_VW"

CREATE or replace VIEW  SVCS_PSH_TRAINING_CUSTOMER_R52WK_SMRY_VW
(
     CUSTOMER_EID,
     PERIOD_END_FISCAL_MO,
     CURRENT_PERIOD_IND,
     PSH_R52WK_VISIT_MEDIAN_DAY,
     PSH_R52WK_VISIT_MEAN_DAY,
     PSH_R52WK_CUST_TYPE,
     TRAINING_R52WK_VISIT_MEDIAN_DAY,
     TRAINING_R52WK_VISIT_MEAN_DAY,
     TRAINING_R52WK_CUST_TYPE,
     PSH_OVERNIGHT_R52WK_VISIT_MEDIAN_DAY,
     PSH_OVERNIGHT_R52WK_VISIT_MEAN_DAY,
     PSH_OVERNIGHT_R52WK_CUST_TYPE,
     PSH_DAY_R52WK_VISIT_MEDIAN_DAY,
     PSH_DAY_R52WK_VISIT_MEAN_DAY,
     PSH_DAY_R52WK_CUST_TYPE,
     PSH_ADD_ONS_R52WK_VISIT_MEDIAN_DAY,
     PSH_ADD_ONS_R52WK_VISIT_MEAN_DAY,
     PSH_ADD_ONS_R52WK_CUST_TYPE,
     PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEDIAN_DAY,
     PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEAN_DAY,
     PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE,
     TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEDIAN_DAY,
     TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEAN_DAY,
     TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE,
     TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEDIAN_DAY,
     TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEAN_DAY,
     TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE,
     TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD,
     TRAINING_BEGINNER_SKU_R52WK_SALES_QTY,
     TRAINING_BEGINNER_SKU_R52WK_TXN_CNT,
     TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT,
     TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD,
     TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY,
     TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT,
     TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT,
     TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD,
     TRAINING_ADVANCED_SKU_R52WK_SALES_QTY,
     TRAINING_ADVANCED_SKU_R52WK_TXN_CNT,
     TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT,
     PSH_SUITES_SKU_R52WK_SALES_AMT_USD,
     PSH_SUITES_SKU_R52WK_SALES_QTY,
     PSH_SUITES_SKU_R52WK_TXN_CNT,
     PSH_SUITES_SKU_R52WK_VISIT_CNT,
     PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD,
     PSH_ATRIUM_SKU_R52WK_SALES_QTY,
     PSH_ATRIUM_SKU_R52WK_TXN_CNT,
     PSH_ATRIUM_SKU_R52WK_VISIT_CNT,
     PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY,
     PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT,
     PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT,
     PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY,
     PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT,
     PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT,
     PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY,
     PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT,
     PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT,
     PSH_GROUP_SKU_R52WK_SALES_AMT_USD,
     PSH_GROUP_SKU_R52WK_SALES_QTY,
     PSH_GROUP_SKU_R52WK_TXN_CNT,
     PSH_GROUP_SKU_R52WK_VISIT_CNT,
     PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD,
     PSH_EXIT_BATH_SKU_R52WK_SALES_QTY,
     PSH_EXIT_BATH_SKU_R52WK_TXN_CNT,
     PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT
) AS
WITH TXN_DAY AS (SELECT STU.CUSTOMER_EID, STU.DAY_DT, MAX(CASE WHEN (SSPR.SAP_DEPT_ID = 82) THEN 1 ELSE 0 END) AS PSH_TXN_FLAG, MAX(CASE WHEN (SSPR.SAP_DEPT_ID = 83) THEN 1 ELSE 0 END) AS TRAINING_TXN_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 824) THEN 1 ELSE 0 END) AS PSH_OVERNIGHT_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 822) THEN 1 ELSE 0 END) AS PSH_DAY_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 821) THEN 1 ELSE 0 END) AS PSH_ADDON_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 820) THEN 1 ELSE 0 END) AS PSH_ADDITIONAL_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 833) THEN 1 ELSE 0 END) AS PSH_PRIVATE_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 831) THEN 1 ELSE 0 END) AS PSH_SIX_WEEK_GROUP_FLAG, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS TRAINING_BEGINNER_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS TRAINING_BEGINNER_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS TRAINING_ADVANCED_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS TRAINING_ADVANCED_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_SUITES_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_SUITES_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_SUITES_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_SUITES_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_ATRIUM_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_ATRIUM_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_ATRIUM_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_GROUP_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_GROUP_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_GROUP_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_GROUP_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_EXIT_BATH_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_EXIT_BATH_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT FROM ((ADMIN.SALES_TRANS_SKU STU JOIN ADMIN.SKU_PROFILE_RPT SSPR ON ((STU.PRODUCT_ID = SSPR.PRODUCT_ID))) LEFT JOIN ADMIN.SVCS_PSH_TRAINING_SKU_GROUP SKU_LIST ON ((SKU_LIST.SKU_NBR = SSPR.SKU_NBR))) WHERE (((((STU.TXN_WAS_POST_VOIDED_FLAG = 0) AND (STU.SALES_TYPE_ID <> 10)) AND (STU.CUSTOMER_EID > '0'::NUMERIC)) AND ((SSPR.SAP_DEPT_ID IN (82, 83)) AND (STU.SALES_CUSTOMER_LINK_EXCL_TYPE_ID = 0))) AND (STU.DAY_DT >= (SELECT MIN(CUSTOMER.ADMIN.SALON_FISCAL_MO.PERIOD_START_DT) AS MIN FROM CUSTOMER.ADMIN.SALON_FISCAL_MO))) GROUP BY STU.CUSTOMER_EID, STU.DAY_DT) SELECT X.CUSTOMER_EID, X.PERIOD_END_FISCAL_MO, X.CURRENT_PERIOD_IND, X.PSH_R52WK_VISIT_MEDIAN_DAY, X.PSH_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_R52WK_CUST_TYPE, X.TRAINING_R52WK_VISIT_MEDIAN_DAY, X.TRAINING_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.TRAINING_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.TRAINING_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.TRAINING_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.TRAINING_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TRAINING_R52WK_CUST_TYPE, X.PSH_OVERNIGHT_R52WK_VISIT_MEDIAN_DAY, X.PSH_OVERNIGHT_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_OVERNIGHT_R52WK_CUST_TYPE, X.PSH_DAY_R52WK_VISIT_MEDIAN_DAY, X.PSH_DAY_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_DAY_R52WK_CUST_TYPE, X.PSH_ADD_ONS_R52WK_VISIT_MEDIAN_DAY, X.PSH_ADD_ONS_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_ADD_ONS_R52WK_CUST_TYPE, X.PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEDIAN_DAY, X.PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE, X.TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEDIAN_DAY, X.TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE, X.TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEDIAN_DAY, X.TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE, X.TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD, X.TRAINING_BEGINNER_SKU_R52WK_SALES_QTY, X.TRAINING_BEGINNER_SKU_R52WK_TXN_CNT, X.TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT, X.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD, X.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY, X.TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT, X.TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT, X.TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD, X.TRAINING_ADVANCED_SKU_R52WK_SALES_QTY, X.TRAINING_ADVANCED_SKU_R52WK_TXN_CNT, X.TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT, X.PSH_SUITES_SKU_R52WK_SALES_AMT_USD, X.PSH_SUITES_SKU_R52WK_SALES_QTY, X.PSH_SUITES_SKU_R52WK_TXN_CNT, X.PSH_SUITES_SKU_R52WK_VISIT_CNT, X.PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD, X.PSH_ATRIUM_SKU_R52WK_SALES_QTY, X.PSH_ATRIUM_SKU_R52WK_TXN_CNT, X.PSH_ATRIUM_SKU_R52WK_VISIT_CNT, X.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY, X.PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT, X.PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT, X.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY, X.PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT, X.PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT, X.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY, X.PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT, X.PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT, X.PSH_GROUP_SKU_R52WK_SALES_AMT_USD, X.PSH_GROUP_SKU_R52WK_SALES_QTY, X.PSH_GROUP_SKU_R52WK_TXN_CNT, X.PSH_GROUP_SKU_R52WK_VISIT_CNT, X.PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD, X.PSH_EXIT_BATH_SKU_R52WK_SALES_QTY, X.PSH_EXIT_BATH_SKU_R52WK_TXN_CNT, X.PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT FROM (SELECT TXN.CUSTOMER_EID, SFM.PERIOD_END_FISCAL_MO, SFM.CURRENT_PERIOD_IND, MEDIAN(CASE WHEN (PSH.PSH_DAYS_FROM_LAST_VISIT <= 365) THEN PSH.PSH_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (PSH.PSH_DAYS_FROM_LAST_VISIT <= 365) THEN PSH.PSH_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (PSH.PSH_DAYS_FROM_LAST_VISIT <= 365) THEN PSH.PSH_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_R52WK_VISIT_MEAN_DAY, MAX(CASE WHEN ((TXN.DAY_DT >= SFM.PERIOD_START_DT) AND (TXN.DAY_DT <= SFM.PERIOD_END_DT)) THEN PSH.PSH_CUST_TYPE ELSE NULL::INT4 END) AS PSH_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (TRAINING.TRAINING_DAYS_FROM_LAST_VISIT <= 365) THEN TRAINING.TRAINING_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS TRAINING_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (TRAINING.TRAINING_DAYS_FROM_LAST_VISIT <= 365) THEN TRAINING.TRAINING_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (TRAINING.TRAINING_DAYS_FROM_LAST_VISIT <= 365) THEN TRAINING.TRAINING_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS TRAINING_R52WK_VISIT_MEAN_DAY, MAX(TRAINING.TRAINING_CUST_TYPE) AS TRAINING_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT <= 365) THEN OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_OVERNIGHT_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT <= 365) THEN OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT <= 365) THEN OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_OVERNIGHT_R52WK_VISIT_MEAN_DAY, MAX(OVERNIGHT.OVERNIGHT_CUST_TYPE) AS PSH_OVERNIGHT_R52WK_CUST_TYPE, MEDIAN(CASE WHEN ("DAY".DAY_DAYS_FROM_LAST_VISIT <= 365) THEN "DAY".DAY_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_DAY_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN ("DAY".DAY_DAYS_FROM_LAST_VISIT <= 365) THEN "DAY".DAY_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN ("DAY".DAY_DAYS_FROM_LAST_VISIT <= 365) THEN "DAY".DAY_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_DAY_R52WK_VISIT_MEAN_DAY, MAX("DAY".DAY_CUST_TYPE) AS PSH_DAY_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (ADDONS.ADDONS_DAYS_FROM_LAST_VISIT <= 365) THEN ADDONS.ADDONS_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_ADD_ONS_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (ADDONS.ADDONS_DAYS_FROM_LAST_VISIT <= 365) THEN ADDONS.ADDONS_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (ADDONS.ADDONS_DAYS_FROM_LAST_VISIT <= 365) THEN ADDONS.ADDONS_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_ADD_ONS_R52WK_VISIT_MEAN_DAY, MAX(ADDONS.ADDONS_CUST_TYPE) AS PSH_ADD_ONS_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT <= 365) THEN ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT <= 365) THEN ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT <= 365) THEN ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEAN_DAY, MAX(ADDITIONAL.ADDITIONAL_CUST_TYPE) AS PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT <= 365) THEN PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT <= 365) THEN PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT <= 365) THEN PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEAN_DAY, MAX(PRIVATE.PRIVATE_CUST_TYPE) AS TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT <= 365) THEN SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT <= 365) THEN SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT <= 365) THEN SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEAN_DAY, MAX(SIX_WEEK.SIX_WEEK_CUST_TYPE) AS TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD) AS TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_SALES_QTY) AS TRAINING_BEGINNER_SKU_R52WK_SALES_QTY, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_TXN_CNT) AS TRAINING_BEGINNER_SKU_R52WK_TXN_CNT, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT) AS TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT) AS TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT) AS TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD) AS TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_SALES_QTY) AS TRAINING_ADVANCED_SKU_R52WK_SALES_QTY, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_TXN_CNT) AS TRAINING_ADVANCED_SKU_R52WK_TXN_CNT, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT) AS TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_SUITES_SKU_R52WK_SALES_AMT_USD) AS PSH_SUITES_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_SUITES_SKU_R52WK_SALES_QTY) AS PSH_SUITES_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_SUITES_SKU_R52WK_TXN_CNT) AS PSH_SUITES_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_SUITES_SKU_R52WK_VISIT_CNT) AS PSH_SUITES_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD) AS PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_ATRIUM_SKU_R52WK_SALES_QTY) AS PSH_ATRIUM_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_ATRIUM_SKU_R52WK_TXN_CNT) AS PSH_ATRIUM_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_ATRIUM_SKU_R52WK_VISIT_CNT) AS PSH_ATRIUM_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT) AS PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT) AS PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT) AS PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT) AS PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT) AS PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT) AS PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_GROUP_SKU_R52WK_SALES_AMT_USD) AS PSH_GROUP_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_GROUP_SKU_R52WK_SALES_QTY) AS PSH_GROUP_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_GROUP_SKU_R52WK_TXN_CNT) AS PSH_GROUP_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_GROUP_SKU_R52WK_VISIT_CNT) AS PSH_GROUP_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD) AS PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_SALES_QTY) AS PSH_EXIT_BATH_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_TXN_CNT) AS PSH_EXIT_BATH_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT) AS PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT FROM (((((((((TXN_DAY TXN LEFT JOIN (SELECT TXN_DAY.CUSTOMER_EID, TXN_DAY.DAY_DT, DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_EID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) AS PSH_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_EID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_EID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_EID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS PSH_CUST_TYPE FROM  TXN_DAY WHERE (TXN_DAY.PSH_TXN_FLAG = 1)) PSH ON (((PSH.CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = PSH.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_EID#0XF5253804" AS CUSTOMER_EID, "*RSS*"."#DAY_DT#0XF5253ACC" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF5252C34" - LAG("*RSS*"."#DAY_DT#0XF5253ACC") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF5253804"  ORDER BY "*RSS*"."#DAY_DT#0XF5253ACC" )))::ABSTIME) AS TRAINING_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF5253ACC" - LAG("*RSS*"."#DAY_DT#0XF5253ACC") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF5253804"  ORDER BY "*RSS*"."#DAY_DT#0XF5253ACC" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF5253ACC" - LAG("*RSS*"."#DAY_DT#0XF5253ACC") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF5253804"  ORDER BY "*RSS*"."#DAY_DT#0XF5253ACC" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF5253ACC" - LAG("*RSS*"."#DAY_DT#0XF5253ACC") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF5253804"  ORDER BY "*RSS*"."#DAY_DT#0XF5253ACC" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS TRAINING_CUST_TYPE FROM (SELECT STU.CUSTOMER_EID AS "#CUSTOMER_EID#0XF5253804", STU.DAY_DT AS "#DAY_DT#0XF5253ACC", STU.DAY_DT AS "#?COLUMN?#0XF5252C34" FROM TXN_DAY STU WHERE (STU.TRAINING_TXN_FLAG = 1) GROUP BY STU.CUSTOMER_EID, STU.DAY_DT) "*RSS*") TRAINING ON (((TRAINING.CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = TRAINING.DAY_DT)))) LEFT JOIN (SELECT STU.CUSTOMER_EID, STU.DAY_DT, DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_EID  ORDER BY STU.DAY_DT )))::ABSTIME) AS OVERNIGHT_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_EID  ORDER BY STU.DAY_DT )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_EID  ORDER BY STU.DAY_DT )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_EID  ORDER BY STU.DAY_DT )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS OVERNIGHT_CUST_TYPE FROM TXN_DAY STU WHERE (STU.PSH_OVERNIGHT_FLAG = 1)) OVERNIGHT ON (((OVERNIGHT.CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = OVERNIGHT.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_EID#0XF4E1A794" AS CUSTOMER_EID, "*RSS*"."#DAY_DT#0XF4E1AA5C" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF4E19BC4" - LAG("*RSS*"."#DAY_DT#0XF4E1AA5C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4E1A794"  ORDER BY "*RSS*"."#DAY_DT#0XF4E1AA5C" )))::ABSTIME) AS DAY_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4E1AA5C" - LAG("*RSS*"."#DAY_DT#0XF4E1AA5C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4E1A794"  ORDER BY "*RSS*"."#DAY_DT#0XF4E1AA5C" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4E1AA5C" - LAG("*RSS*"."#DAY_DT#0XF4E1AA5C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4E1A794"  ORDER BY "*RSS*"."#DAY_DT#0XF4E1AA5C" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4E1AA5C" - LAG("*RSS*"."#DAY_DT#0XF4E1AA5C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4E1A794"  ORDER BY "*RSS*"."#DAY_DT#0XF4E1AA5C" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS DAY_CUST_TYPE FROM (SELECT STU.CUSTOMER_EID AS "#CUSTOMER_EID#0XF4E1A794", STU.DAY_DT AS "#DAY_DT#0XF4E1AA5C", STU.DAY_DT AS "#?COLUMN?#0XF4E19BC4" FROM TXN_DAY STU WHERE (STU.PSH_DAY_FLAG = 1) GROUP BY STU.CUSTOMER_EID, STU.DAY_DT) "*RSS*") "DAY" ON ((("DAY".CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = "DAY".DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_EID#0XF4F4AF10" AS CUSTOMER_EID, "*RSS*"."#DAY_DT#0XF4F4B1D8" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF4F4A340" - LAG("*RSS*"."#DAY_DT#0XF4F4B1D8") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4F4AF10"  ORDER BY "*RSS*"."#DAY_DT#0XF4F4B1D8" )))::ABSTIME) AS ADDITIONAL_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4F4B1D8" - LAG("*RSS*"."#DAY_DT#0XF4F4B1D8") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4F4AF10"  ORDER BY "*RSS*"."#DAY_DT#0XF4F4B1D8" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4F4B1D8" - LAG("*RSS*"."#DAY_DT#0XF4F4B1D8") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4F4AF10"  ORDER BY "*RSS*"."#DAY_DT#0XF4F4B1D8" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4F4B1D8" - LAG("*RSS*"."#DAY_DT#0XF4F4B1D8") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF4F4AF10"  ORDER BY "*RSS*"."#DAY_DT#0XF4F4B1D8" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS ADDITIONAL_CUST_TYPE FROM (SELECT STU.CUSTOMER_EID AS "#CUSTOMER_EID#0XF4F4AF10", STU.DAY_DT AS "#DAY_DT#0XF4F4B1D8", STU.DAY_DT AS "#?COLUMN?#0XF4F4A340" FROM TXN_DAY STU WHERE (STU.PSH_ADDITIONAL_FLAG = 1) GROUP BY STU.CUSTOMER_EID, STU.DAY_DT) "*RSS*") ADDITIONAL ON (((ADDITIONAL.CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = ADDITIONAL.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_EID#0XF507BAAC" AS CUSTOMER_EID, "*RSS*"."#DAY_DT#0XF507BD74" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF507AEDC" - LAG("*RSS*"."#DAY_DT#0XF507BD74") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF507BAAC"  ORDER BY "*RSS*"."#DAY_DT#0XF507BD74" )))::ABSTIME) AS ADDONS_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF507BD74" - LAG("*RSS*"."#DAY_DT#0XF507BD74") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF507BAAC"  ORDER BY "*RSS*"."#DAY_DT#0XF507BD74" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF507BD74" - LAG("*RSS*"."#DAY_DT#0XF507BD74") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF507BAAC"  ORDER BY "*RSS*"."#DAY_DT#0XF507BD74" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF507BD74" - LAG("*RSS*"."#DAY_DT#0XF507BD74") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF507BAAC"  ORDER BY "*RSS*"."#DAY_DT#0XF507BD74" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS ADDONS_CUST_TYPE FROM (SELECT STU.CUSTOMER_EID AS "#CUSTOMER_EID#0XF507BAAC", STU.DAY_DT AS "#DAY_DT#0XF507BD74", STU.DAY_DT AS "#?COLUMN?#0XF507AEDC" FROM TXN_DAY STU WHERE (STU.PSH_ADDON_FLAG = 1) GROUP BY STU.CUSTOMER_EID, STU.DAY_DT) "*RSS*") ADDONS ON (((ADDONS.CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = ADDONS.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_EID#0XF51ACA18" AS CUSTOMER_EID, "*RSS*"."#DAY_DT#0XF51ACCE0" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF51ABE48" - LAG("*RSS*"."#DAY_DT#0XF51ACCE0") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF51ACA18"  ORDER BY "*RSS*"."#DAY_DT#0XF51ACCE0" )))::ABSTIME) AS PRIVATE_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF51ACCE0" - LAG("*RSS*"."#DAY_DT#0XF51ACCE0") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF51ACA18"  ORDER BY "*RSS*"."#DAY_DT#0XF51ACCE0" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF51ACCE0" - LAG("*RSS*"."#DAY_DT#0XF51ACCE0") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF51ACA18"  ORDER BY "*RSS*"."#DAY_DT#0XF51ACCE0" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF51ACCE0" - LAG("*RSS*"."#DAY_DT#0XF51ACCE0") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF51ACA18"  ORDER BY "*RSS*"."#DAY_DT#0XF51ACCE0" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS PRIVATE_CUST_TYPE FROM (SELECT STU.CUSTOMER_EID AS "#CUSTOMER_EID#0XF51ACA18", STU.DAY_DT AS "#DAY_DT#0XF51ACCE0", STU.DAY_DT AS "#?COLUMN?#0XF51ABE48" FROM TXN_DAY STU WHERE (STU.PSH_PRIVATE_FLAG = 1) GROUP BY STU.CUSTOMER_EID, STU.DAY_DT) "*RSS*") PRIVATE ON (((PRIVATE.CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = PRIVATE.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_EID#0XF46DCFB0" AS CUSTOMER_EID, "*RSS*"."#DAY_DT#0XF46DD278" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF46DC3E0" - LAG("*RSS*"."#DAY_DT#0XF46DD278") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF46DCFB0"  ORDER BY "*RSS*"."#DAY_DT#0XF46DD278" )))::ABSTIME) AS SIX_WEEK_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF46DD278" - LAG("*RSS*"."#DAY_DT#0XF46DD278") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF46DCFB0"  ORDER BY "*RSS*"."#DAY_DT#0XF46DD278" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF46DD278" - LAG("*RSS*"."#DAY_DT#0XF46DD278") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF46DCFB0"  ORDER BY "*RSS*"."#DAY_DT#0XF46DD278" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF46DD278" - LAG("*RSS*"."#DAY_DT#0XF46DD278") OVER (PARTITION BY "*RSS*"."#CUSTOMER_EID#0XF46DCFB0"  ORDER BY "*RSS*"."#DAY_DT#0XF46DD278" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS SIX_WEEK_CUST_TYPE FROM (SELECT STU.CUSTOMER_EID AS "#CUSTOMER_EID#0XF46DCFB0", STU.DAY_DT AS "#DAY_DT#0XF46DD278", STU.DAY_DT AS "#?COLUMN?#0XF46DC3E0" FROM TXN_DAY STU WHERE (STU.PSH_SIX_WEEK_GROUP_FLAG = 1) GROUP BY STU.CUSTOMER_EID, STU.DAY_DT) "*RSS*") SIX_WEEK ON (((SIX_WEEK.CUSTOMER_EID = TXN.CUSTOMER_EID) AND (TXN.DAY_DT = SIX_WEEK.DAY_DT)))) JOIN CUSTOMER.ADMIN.SALON_FISCAL_MO SFM ON (((TXN.DAY_DT >= SFM.PERIOD_START_DT) AND (TXN.DAY_DT <= SFM.PERIOD_END_DT)))) GROUP BY TXN.CUSTOMER_EID, SFM.PERIOD_END_FISCAL_MO, SFM.CURRENT_PERIOD_IND) X;

\echo
\echo *****  Creating view:  "PM_VQ7TWDMC26M46YY7BRTZFP4PUJY"

CREATE or replace VIEW  PM_VQ7TWDMC26M46YY7BRTZFP4PUJY
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V3JHXALSSMLTJQU377SK3ZTG5Q4"

CREATE or replace VIEW  PM_V3JHXALSSMLTJQU377SK3ZTG5Q4
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VWF7HYTZUB34XI47DBXX42BOSGI"

CREATE or replace VIEW  PM_VWF7HYTZUB34XI47DBXX42BOSGI
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VUJMH45OCK7E6ZP2BYKB7KRIPVA"

CREATE or replace VIEW  PM_VUJMH45OCK7E6ZP2BYKB7KRIPVA
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VUPVX67LJE34K24J6S564K2NQBM"

CREATE or replace VIEW  PM_VUPVX67LJE34K24J6S564K2NQBM
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VNXYJCIUXURYD4F7JXGJQ6ON2BY"

CREATE or replace VIEW  PM_VNXYJCIUXURYD4F7JXGJQ6ON2BY
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "PM_VTUUYFTWPV4NUESKCO7SZZ7AWTA"

CREATE or replace VIEW  PM_VTUUYFTWPV4NUESKCO7SZZ7AWTA
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VCZOC6FQORK274Y7QMON54VOBSA"

CREATE or replace VIEW  PM_VCZOC6FQORK274Y7QMON54VOBSA
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V3IGAX7PAVCO27HDIMBVXZSRM2E"

CREATE or replace VIEW  PM_V3IGAX7PAVCO27HDIMBVXZSRM2E
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V7L6Z3YYET72XFC7NIHSJDFMR74"

CREATE or replace VIEW  PM_V7L6Z3YYET72XFC7NIHSJDFMR74
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VJDR5BWSZ2QG4TYGGXPCI2D4DXQ"

CREATE or replace VIEW  PM_VJDR5BWSZ2QG4TYGGXPCI2D4DXQ
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VUTHJH745LS7X6SOQFJ4OT6GPEA"

CREATE or replace VIEW  PM_VUTHJH745LS7X6SOQFJ4OT6GPEA
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "PM_VJHHB267GEPF4P5U6EFL6MZTVR4"

CREATE or replace VIEW  PM_VJHHB267GEPF4P5U6EFL6MZTVR4
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "PM_V5473AXRQEKTPP2TQA5CFN56HZA"

CREATE or replace VIEW  PM_V5473AXRQEKTPP2TQA5CFN56HZA
(
     OMS_LPN_ID,
     OMS_LPN_LN_ID,
     OMS_LPN_NBR,
     OMS_PARENT_LPN_ID,
     LPN_TYPE_ID,
     LPN_STATUS_ID,
     OMS_TRACKING_NBR,
     BASE_CHARGE_AMT,
     DIST_CHARGE_AMT,
     FREIGHT_CHARGE_AMT,
     OMS_ASN,
     OMS_ASN_ID,
     CREATED_TSTMP,
     LAST_UPDATED_TSTMP,
     OMS_DIST_ORDER_ID,
     OMS_ORDER_ID,
     OMS_DIST_ORDER_LN_ID,
     OMS_DIST_ORDER_DTL_ID,
     PRODUCT_ID,
     ORIGINAL_PRODUCT_ID,
     SHIPPED_QTY,
     ORIG_LOCATION_ID,
     OMS_ORDER_CREATED_TSTMP,
     OMS_COMPANY_ID,
     EXCHANGE_RATE_PCNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT INT4(SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_ID) AS OMS_LPN_ID, INT4(FLOAT8(INT4(SHORTCUT_TO_OMS_LPN_DETAIL.OMS_LPN_DETAIL_ID))) AS OMS_LPN_LN_ID, SHORTCUT_TO_OMS_LPN_DDS.OMS_TC_LPN_ID AS OMS_LPN_NBR, INT4(SHORTCUT_TO_OMS_LPN_DDS.OMS_PARENT_LPN_ID) AS OMS_PARENT_LPN_ID, INT4(SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_TYPE_ID) AS LPN_TYPE_ID, INT4(SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_STATUS_ID) AS LPN_STATUS_ID, SHORTCUT_TO_OMS_LPN_DDS.OMS_TRACKING_NBR, SHORTCUT_TO_OMS_LPN_DDS.BASE_CHARGE_AMT, SHORTCUT_TO_OMS_LPN_DDS.DIST_CHARGE_AMT, SHORTCUT_TO_OMS_LPN_DDS.FREIGHT_CHARGE_AMT, SHORTCUT_TO_OMS_LPN_DDS.OMS_TC_ASN_ID AS OMS_ASN, INT4(SHORTCUT_TO_OMS_LPN_DDS.OMS_ASN_ID) AS OMS_ASN_ID, SHORTCUT_TO_OMS_LPN_DDS.OMS_CREATED_TSTMP AS CREATED_TSTMP, SHORTCUT_TO_OMS_LPN_DDS.OMS_LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP, INT4(SHORTCUT_TO_OMS_ORDERS.OMS_ORDER_ID) AS OMS_DIST_ORDER_ID, INT4(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_MASTER_ORDER_ID) AS OMS_ORDER_ID, INT4(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_LINE_ITEM_ID) AS OMS_DIST_ORDER_LN_ID, INT4(SHORTCUT_TO_OMS_LPN_DETAIL.OMS_DISTRIBUTION_ORDER_DTL_ID) AS OMS_DIST_ORDER_DTL_ID, INT8(PM_ALKP_SKU_PROFILE_1.PRODUCT_ID) AS PRODUCT_ID, INT8(PM_ALKP_SKU_PROFILE_1.PRODUCT_ID) AS ORIGINAL_PRODUCT_ID, INT4(SHORTCUT_TO_OMS_LPN_DETAIL.SHIPPED_QTY) AS SHIPPED_QTY, INT8(CASE WHEN (NOT (INT4(FLOAT8(CASE WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('64'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 8 WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('545'::NUMERIC(3,0))::NUMERIC(3,0)) THEN 6 WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('33'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 6 WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('9'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 19 ELSE 8 END)) ISNULL)) THEN PM_ALKP_SITE_PROFILE_1.LOCATION_ID ELSE NULL::INT4 END) AS ORIG_LOCATION_ID, TO_TIMESTAMP(TO_CHAR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP, 'YYYY-MM-DD'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") AS OMS_ORDER_CREATED_TSTMP, INT4(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_TC_COMPANY_ID) AS OMS_COMPANY_ID, CASE WHEN (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END AS EXCHANGE_RATE_PCNT, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (SHORTCUT_TO_OMS_LPN.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE SHORTCUT_TO_OMS_LPN.LOAD_TSTMP END AS LOAD_TSTMP FROM ((((((((((ADMIN.OMS_LPN_DDS SHORTCUT_TO_OMS_LPN_DDS JOIN ADMIN.OMS_LPN_DETAIL SHORTCUT_TO_OMS_LPN_DETAIL ON ((SHORTCUT_TO_OMS_LPN_DETAIL.OMS_LPN_ID = SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_ID))) JOIN ADMIN.OMS_ORDER_LINE_ITEM PM_A7QKQIF4RFIPU26BRCSYZZMULSQ ON (((PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_LINE_ITEM_ID = SHORTCUT_TO_OMS_LPN_DETAIL.OMS_DISTRIBUTION_ORDER_DTL_ID) AND (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_ORDER_ID = SHORTCUT_TO_OMS_LPN_DDS.OMS_ORDER_ID)))) JOIN ADMIN.OMS_ORDERS SHORTCUT_TO_OMS_ORDERS ON ((SHORTCUT_TO_OMS_ORDERS.OMS_ORDER_ID = PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_ORDER_ID))) LEFT JOIN ADMIN.OMS_FACILITY SHORTCUT_TO_OMS_FACILITY ON ((SHORTCUT_TO_OMS_FACILITY.OMS_FACILITY_ID = SHORTCUT_TO_OMS_ORDERS.OMS_O_FACILITY_ID))) JOIN ADMIN.OMS_PURCHASE_ORDERS_LINE_ITEM PM_ALDMVXXP64YAXI7MSCHTONICJRY ON (((PM_ALDMVXXP64YAXI7MSCHTONICJRY.OMS_PURCHASE_ORDERS_ID = PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_MASTER_ORDER_ID) AND (PM_ALDMVXXP64YAXI7MSCHTONICJRY.OMS_PURCHASE_ORDERS_LINE_ITEM_ID = PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_MO_LINE_ITEM_ID)))) JOIN ADMIN.OMS_PURCHASE_ORDERS PM_AHHPDWTYJCN3T2EJY24M4SORXD4 ON ((PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_PURCHASE_ORDERS_ID = PM_ALDMVXXP64YAXI7MSCHTONICJRY.OMS_PURCHASE_ORDERS_ID))) LEFT JOIN ADMIN.SKU_PROFILE PM_ALKP_SKU_PROFILE_1 ON ((PM_ALKP_SKU_PROFILE_1.SKU_NBR = INT4("NUMERIC"(SHORTCUT_TO_OMS_LPN_DETAIL.OMS_ITEM_NAME, 2490386))))) LEFT JOIN ADMIN.SITE_PROFILE PM_ALKP_SITE_PROFILE_1 ON (((PM_ALKP_SITE_PROFILE_1.LOCATION_TYPE_ID = INT4(FLOAT8(CASE WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('64'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 8 WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('545'::NUMERIC(3,0))::NUMERIC(3,0)) THEN 6 WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('33'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 6 WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('9'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 19 ELSE 8 END))) AND (PM_ALKP_SITE_PROFILE_1.LOCATION_NBR = SHORTCUT_TO_OMS_ORDERS.OMS_O_FACILITY_ALIAS_ID)))) LEFT JOIN ADMIN.CURRENCY_DAY PM_ALKP_CURRENCY_DAY_1 ON ((PM_ALKP_CURRENCY_DAY_1.DAY_DT = TO_TIMESTAMP(TO_CHAR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP, 'YYYY-MM-DD'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR")))) LEFT JOIN ADMIN.OMS_LPN SHORTCUT_TO_OMS_LPN ON (((SHORTCUT_TO_OMS_LPN.OMS_LPN_ID = INT4(SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_ID)) AND (SHORTCUT_TO_OMS_LPN.OMS_LPN_LN_ID = INT4(SHORTCUT_TO_OMS_LPN_DETAIL.OMS_LPN_DETAIL_ID))))) WHERE ((((PM_ALDMVXXP64YAXI7MSCHTONICJRY.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_LPN_DDS.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_LPN_DETAIL.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_ORDERS.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_FACILITY.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_AHHPDWTYJCN3T2EJY24M4SORXD4.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR")))) AND (((SHORTCUT_TO_OMS_LPN.OMS_LPN_ID ISNULL) AND (SHORTCUT_TO_OMS_LPN.OMS_LPN_LN_ID ISNULL)) OR (((NOT (SHORTCUT_TO_OMS_LPN.OMS_LPN_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_LPN.OMS_LPN_LN_ID ISNULL))) AND ((CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN.OMS_LPN_NBR)) ISNULL) THEN ''::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN.OMS_LPN_NBR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN_DDS.OMS_TC_LPN_ID)) ISNULL) THEN ''::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN_DDS.OMS_TC_LPN_ID)) END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.OMS_PARENT_LPN_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_LPN.OMS_PARENT_LPN_ID END) <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_PARENT_LPN_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_PARENT_LPN_ID END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.LPN_TYPE_ID ISNULL) THEN 0 ELSE INT4(SHORTCUT_TO_OMS_LPN.LPN_TYPE_ID) END) <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_TYPE_ID END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.LPN_STATUS_ID ISNULL) THEN 0 ELSE INT4(SHORTCUT_TO_OMS_LPN.LPN_STATUS_ID) END) <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_STATUS_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_LPN_STATUS_ID END) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN.OMS_TRACKING_NBR)) ISNULL) THEN ''::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN.OMS_TRACKING_NBR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN_DDS.OMS_TRACKING_NBR)) ISNULL) THEN ''::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN_DDS.OMS_TRACKING_NBR)) END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.BASE_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN.BASE_CHARGE_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.BASE_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DDS.BASE_CHARGE_AMT END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.DIST_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN.DIST_CHARGE_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.DIST_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DDS.DIST_CHARGE_AMT END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.FREIGHT_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN.FREIGHT_CHARGE_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.FREIGHT_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DDS.FREIGHT_CHARGE_AMT END) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN.OMS_ASN)) ISNULL) THEN ''::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN.OMS_ASN)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN_DDS.OMS_TC_ASN_ID)) ISNULL) THEN ''::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_LPN_DDS.OMS_TC_ASN_ID)) END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.OMS_ASN_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_LPN.OMS_ASN_ID END) <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_ASN_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_ASN_ID END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE SHORTCUT_TO_OMS_LPN.CREATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_CREATED_TSTMP END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE SHORTCUT_TO_OMS_LPN.LAST_UPDATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_LAST_UPDATED_TSTMP END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.OMS_DIST_ORDER_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_LPN.OMS_DIST_ORDER_ID END) <> CASE WHEN (SHORTCUT_TO_OMS_ORDERS.OMS_ORDER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_ORDERS.OMS_ORDER_ID END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.OMS_DIST_ORDER_LN_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_LPN.OMS_DIST_ORDER_LN_ID END) <> CASE WHEN (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_LINE_ITEM_ID ISNULL) THEN '0'::NUMERIC ELSE PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_LINE_ITEM_ID END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.OMS_DIST_ORDER_DTL_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_LPN.OMS_DIST_ORDER_DTL_ID END) <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DETAIL.OMS_DISTRIBUTION_ORDER_DTL_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DETAIL.OMS_DISTRIBUTION_ORDER_DTL_ID END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.ORIGINAL_PRODUCT_ID ISNULL) THEN '0'::INT8 ELSE SHORTCUT_TO_OMS_LPN.ORIGINAL_PRODUCT_ID END <> CASE WHEN (INT4("NUMERIC"(SHORTCUT_TO_OMS_LPN_DETAIL.OMS_ITEM_NAME, 2490386)) ISNULL) THEN 0 ELSE INT4("NUMERIC"(SHORTCUT_TO_OMS_LPN_DETAIL.OMS_ITEM_NAME, 2490386)) END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_LPN.SHIPPED_QTY ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_LPN.SHIPPED_QTY END) <> CASE WHEN (SHORTCUT_TO_OMS_LPN_DETAIL.SHIPPED_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN_DETAIL.SHIPPED_QTY END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.ORIG_LOCATION_ID ISNULL) THEN '0'::INT8 ELSE SHORTCUT_TO_OMS_LPN.ORIG_LOCATION_ID END <> CASE WHEN (INT8(INT4("NUMERIC"(SHORTCUT_TO_OMS_ORDERS.OMS_O_FACILITY_ALIAS_ID, 2490386))) ISNULL) THEN '0'::INT8 ELSE INT8(INT4("NUMERIC"(SHORTCUT_TO_OMS_ORDERS.OMS_O_FACILITY_ALIAS_ID, 2490386))) END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.OMS_ORDER_CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE SHORTCUT_TO_OMS_LPN.OMS_ORDER_CREATED_TSTMP END <> CASE WHEN (TO_TIMESTAMP(TO_CHAR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP, 'YYYY-MM-DD'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE TO_TIMESTAMP(TO_CHAR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP, 'YYYY-MM-DD'::"VARCHAR"), 'YYYY-MM-DD'::"VARCHAR") END) OR (CASE WHEN (SHORTCUT_TO_OMS_LPN.EXCHANGE_RATE_PCNT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_LPN.EXCHANGE_RATE_PCNT END <> CASE WHEN (CASE WHEN (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END ISNULL) THEN '0'::NUMERIC ELSE CASE WHEN (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END END))))) AND (CASE WHEN (CASE WHEN ((SHORTCUT_TO_OMS_LPN.OMS_LPN_ID ISNULL) AND (SHORTCUT_TO_OMS_LPN.OMS_LPN_LN_ID ISNULL)) THEN 1 ELSE 2 END = 1) THEN 0 WHEN (CASE WHEN ((SHORTCUT_TO_OMS_LPN.OMS_LPN_ID ISNULL) AND (SHORTCUT_TO_OMS_LPN.OMS_LPN_LN_ID ISNULL)) THEN 1 ELSE 2 END = 2) THEN 1 ELSE NULL::INT4 END = 1));

\echo
\echo *****  Creating view:  "PM_VLALJGHYDQB5REYACPK742FJ534"

CREATE or replace VIEW  PM_VLALJGHYDQB5REYACPK742FJ534
(
     OMS_PURCHASE_ORDERS_LINE_ITEM_ID,
     OMS_PURCHASE_ORDERS_ID,
     REF_FIELD4,
     UPDATE_TSTMP
) AS
SELECT PM_AUDMOXXZULBIPATZP2XLYMZGA7A.OMS_PURCHASE_ORDERS_LINE_ITEM_ID, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.OMS_PURCHASE_ORDERS_ID, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.REF_FIELD4, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.UPDATE_TSTMP FROM ADMIN.OMS_PO_LINE_ITEM_REF_FIELDS PM_AUDMOXXZULBIPATZP2XLYMZGA7A WHERE (PM_AUDMOXXZULBIPATZP2XLYMZGA7A.REF_FIELD4 NOTNULL);

\echo
\echo *****  Creating view:  "PM_V5Z3FXRH2F6WAQ3DENIWO4QJHAY"

CREATE or replace VIEW  PM_V5Z3FXRH2F6WAQ3DENIWO4QJHAY
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VIUJFWD52JKTYSIHMEWVVZMEAVU"

CREATE or replace VIEW  PM_VIUJFWD52JKTYSIHMEWVVZMEAVU
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VQLGKYZJX2MZA6NTCVHX4MJYW5E"

CREATE or replace VIEW  PM_VQLGKYZJX2MZA6NTCVHX4MJYW5E
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VMGYRR6H7CTGW7USZTDHS2MWZIU"

CREATE or replace VIEW  PM_VMGYRR6H7CTGW7USZTDHS2MWZIU
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V332DEH5AAEZNGWVBWIRAGLQDUE"

CREATE or replace VIEW  PM_V332DEH5AAEZNGWVBWIRAGLQDUE
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VA67ISABI5Q55PBWDCINL5PPEGY"

CREATE or replace VIEW  PM_VA67ISABI5Q55PBWDCINL5PPEGY
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "SDS_BUNDLE_SMRY_RPT_VW"

CREATE or replace VIEW  SDS_BUNDLE_SMRY_RPT_VW
(
     DAY_DT,
     SDS_BUNDLE_ID,
     LOCATION_ID,
     EMPLOYEE_ID,
     BUNDLE_PRODUCT_ID,
     PRIMARY_SERVICE_PRODUCT_ID,
     SVCS_CUSTOMER_GID,
     PODS_CUSTOMER_ID,
     SVCS_PET_GID,
     PODS_PET_ID,
     SDS_BUNDLE_NAME,
     SDS_BUNDLE_DISPLAY_NAME,
     SDS_BUNDLE_RECORD_TYPE_ID,
     SDS_BUNDLE_RECORD_TYPE_NAME,
     SDS_SPECIAL_ID,
     HAS_ADD_ON_FLAG,
     SDS_BUNDLE_PURCHASED_QTY,
     SDS_BUNDLE_RECEIVED_QTY,
     PURCHASE_PETM_POS_INVOICE_ID,
     INVOICE_PAID_FLAG,
     BUNDLE_PURCHASE_CHANNEL,
     SDS_PAYMENT_ORIGIN,
     BUNDLE_PURCHASED_TSTMP,
     BUNDLE_REFUNDED_TSTMP,
     BUNDLE_EXP_DT,
     BASE_UNIT_EXP_DT,
     FREE_UNIT_EXP_DT,
     BUNDLE_STATUS,
     EXPIRED_FLAG,
     PURCHASED_QTY,
     REDEEMED_QTY,
     BASE_REDEEMED_QTY,
     FREE_REDEEMED_QTY,
     RESERVED_QTY,
     AVAILABLE_QTY,
     REFUNDED_QTY,
     EXPIRED_QTY,
     PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT,
     SAVINGS_AMT,
     SAVINGS_PCT,
     SDS_BUNDLE_ADD_ON_ID,
     ADD_ON_PRODUCT_ID,
     SDS_ADD_ON_PRODUCT_ID,
     ADD_ON_BUNDLE_AMT
) AS
SELECT DISTINCT BW.DAY_DT, BW.SDS_BUNDLE_ID, BW.LOCATION_ID, BW.EMPLOYEE_ID, BW.BUNDLE_PRODUCT_ID, BW.PRIMARY_SERVICE_PRODUCT_ID, BW.SVCS_CUSTOMER_GID, BW.PODS_CUSTOMER_ID, BW.SVCS_PET_GID, BW.PODS_PET_ID, BW.SDS_BUNDLE_NAME, BW.SDS_BUNDLE_DISPLAY_NAME, BW.SDS_BUNDLE_RECORD_TYPE_ID, BW.SDS_BUNDLE_RECORD_TYPE_NAME, BW.SDS_SPECIAL_ID, BW.HAS_ADD_ON_FLAG, BW.SDS_BUNDLE_PURCHASED_QTY, BW.SDS_BUNDLE_RECEIVED_QTY, BW.PURCHASE_PETM_POS_INVOICE_ID, BW.INVOICE_PAID_FLAG, SALES.BUNDLE_PURCHASE_CHANNEL, BW.PAYMENT_ORIGIN AS SDS_PAYMENT_ORIGIN, BW.BUNDLE_PURCHASED_TSTMP, BW.BUNDLE_REFUNDED_TSTMP, BW.BUNDLE_EXP_DT, BW.BASE_UNIT_EXP_DT, BW.FREE_UNIT_EXP_DT, BW.BUNDLE_STATUS, BW.EXPIRED_FLAG, BW.PURCHASED_QTY, BW.REDEEMED_QTY, BW.BASE_REDEEMED_QTY, BW.FREE_REDEEMED_QTY, BW.RESERVED_QTY, BW.AVAILABLE_QTY, BW.REFUNDED_QTY, BW.EXPIRED_QTY, BW.PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT, BW.SAVINGS_AMT, BW.SAVINGS_PCT, BW.SDS_BUNDLE_ADD_ON_ID, BW.ADD_ON_PRODUCT_ID, BW.SDS_ADD_ON_PRODUCT_ID, BW.ADD_ON_BUNDLE_AMT FROM ((SELECT DATE(B.SDS_PURCHASED_TSTMP) AS DAY_DT, B.SDS_BUNDLE_ID, SP.LOCATION_ID, INT4(U.EMPLOYEE_ID) AS EMPLOYEE_ID, SKU.PRODUCT_ID AS BUNDLE_PRODUCT_ID, SKU2.PRODUCT_ID AS PRIMARY_SERVICE_PRODUCT_ID, CX.SVCS_CUSTOMER_GID, INT8(AC.PODS_CUSTOMER_ID) AS PODS_CUSTOMER_ID, PX.SVCS_PET_GID, INT8(A.PODS_PET_ID) AS PODS_PET_ID, B.SDS_BUNDLE_NAME, B.SDS_BUNDLE_DISPLAY_NAME, BC.SDS_RECORD_TYPE_ID AS SDS_BUNDLE_RECORD_TYPE_ID, RT.SDS_RECORD_TYPE_NAME AS SDS_BUNDLE_RECORD_TYPE_NAME, BC.SDS_SPECIAL_ID, CASE WHEN (BAO.SDS_BUNDLE_ADD_ON_ID NOTNULL) THEN 1 ELSE 0 END AS HAS_ADD_ON_FLAG, BC.PURCHASED_QTY AS SDS_BUNDLE_PURCHASED_QTY, BC.RECEIVED_QTY AS SDS_BUNDLE_RECEIVED_QTY, I.SDS_INVOICE_NBR AS PURCHASE_PETM_POS_INVOICE_ID, I.PAID_FLAG AS INVOICE_PAID_FLAG, I.PAYMENT_ORIGIN, B.SDS_PURCHASED_TSTMP AS BUNDLE_PURCHASED_TSTMP, (B.SDS_REFUNDED_TSTMP + "INTERVAL"(("VARCHAR"(TC.CONVERSION_HOUR) || 'HOUR'::"VARCHAR"))) AS BUNDLE_REFUNDED_TSTMP, B.SDS_BUNDLE_EXP_DT AS BUNDLE_EXP_DT, B.SDS_BASE_UNIT_EXP_DT AS BASE_UNIT_EXP_DT, B.SDS_FREE_UNIT_EXP_DT AS FREE_UNIT_EXP_DT, B.SDS_BUNDLE_STATUS AS BUNDLE_STATUS, B.EXPIRED_FLAG, B.PURCHASED_QTY, B.REDEEMED_QTY, RDM.BASE_REDEEMED_QTY, RDM.FREE_REDEEMED_QTY, B.RESERVED_QTY, B.AVAILABLE_QTY, B.REFUNDED_QTY, B.EXPIRED_QTY, B.PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT, B.SAVINGS_AMT, B.SAVINGS_PCT, BAO.SDS_BUNDLE_ADD_ON_ID, SKU3.PRODUCT_ID AS ADD_ON_PRODUCT_ID, BAO.SDS_ADD_ON_PRODUCT_ID, BAO.ORIG_UNIT_PRICE_AMT AS ADD_ON_BUNDLE_AMT FROM (((((((((((((((((((((ADMIN.SDS_BUNDLE B LEFT JOIN ADMIN.SDS_ORDER O ON ((B.SDS_ORDER_ID = O.SDS_ORDER_ID))) LEFT JOIN ADMIN.SDS_WORK_TYPE W ON ((W.SDS_WORK_TYPE_ID = B.SDS_PRIMARY_SERVICE_WORK_TYPE_ID))) LEFT JOIN ADMIN.SDS_ASSET A ON ((A.SDS_ASSET_ID = B.SDS_PET_ID))) LEFT JOIN ADMIN.SVCS_PET_XREF PX ON (((PX.SRC_PET_ID = INT8(A.PODS_PET_ID)) AND (PX.PET_SRC_CD = 'PRISM'::"VARCHAR")))) LEFT JOIN ADMIN.SDS_BUNDLE_CONFIG BC ON ((B.SDS_BUNDLE_CONFIG_ID = BC.SDS_BUNDLE_CONFIG_ID))) LEFT JOIN ADMIN.SDS_BUNDLE_ADD_ON BAO ON ((BAO.SDS_BUNDLE_ID = B.SDS_BUNDLE_ID))) LEFT JOIN ADMIN.SDS_INVOICE I ON ((I.SDS_INVOICE_ID = O.SDS_INVOICE_ID))) LEFT JOIN ADMIN.SDS_RECORD_TYPE RT ON ((RT.SDS_RECORD_TYPE_ID = BC.SDS_RECORD_TYPE_ID))) LEFT JOIN ADMIN.SDS_ACCOUNT AC ON ((AC.SDS_ACCOUNT_ID = O.SDS_ACCOUNT_ID))) LEFT JOIN ADMIN.SVCS_CUSTOMER_XREF CX ON (((CX.SRC_CUSTOMER_ID = INT8(AC.PODS_CUSTOMER_ID)) AND (CX.CUSTOMER_SRC_CD = 'PRISM'::"VARCHAR")))) LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.STORE_NBR = INT4(O.STORE_NBR)))) LEFT JOIN ADMIN.SDS_USER U ON ((U.SDS_USER_ID = O.SDS_OWNER_ID))) LEFT JOIN ADMIN.SDS_PRODUCT P ON ((P.SDS_PRODUCT_ID = B.SDS_PRODUCT_ID))) LEFT JOIN ADMIN.SKU_PROFILE SKU ON ((SKU.SKU_NBR = INT8(P.STOCK_KEEPING_UNIT)))) LEFT JOIN ADMIN.SDS_PRODUCT P2 ON ((P2.SDS_PRODUCT_ID = W.SDS_PRIMARY_SERVICE_PRODUCT_ID))) LEFT JOIN ADMIN.SKU_PROFILE SKU2 ON ((SKU2.SKU_NBR = INT8(P2.STOCK_KEEPING_UNIT)))) LEFT JOIN ADMIN.SDS_PRODUCT P3 ON ((P3.SDS_PRODUCT_ID = BAO.SDS_BULK_ADD_ON_PRODUCT_ID))) LEFT JOIN ADMIN.SKU_PROFILE SKU3 ON ((SKU3.SKU_NBR = INT8(P3.STOCK_KEEPING_UNIT)))) LEFT JOIN ADMIN.DAY_LIGHT_SAVING_DATE DL ON (((B.SDS_REFUNDED_TSTMP >= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_START_DT)) AND (B.SDS_REFUNDED_TSTMP <= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_END_DT))))) LEFT JOIN (SELECT TIMEZONE_CONVERSION.TO_TIME_ZONE_ID, TIMEZONE_CONVERSION.CONVERSION_HOUR, TIMEZONE_CONVERSION.DAY_LIGHT_SAVING_FLAG FROM ADMIN.TIMEZONE_CONVERSION WHERE (TIMEZONE_CONVERSION.FROM_TIME_ZONE_ID = 'UTC'::"VARCHAR")) TC ON (((TC.TO_TIME_ZONE_ID = SP.TIME_ZONE_ID) AND (TC.DAY_LIGHT_SAVING_FLAG = "NUMERIC"(CASE WHEN (DL.DAY_LIGHT_SAVING_START_DT ISNULL) THEN 0 ELSE 1 END))))) LEFT JOIN (SELECT SDS_REDEMPTION.SDS_BUNDLE_ID, SUM(CASE WHEN (SDS_REDEMPTION.SDS_REDEEMED_UNIT_TYPE = 'Base'::"VARCHAR") THEN 1 ELSE 0 END) AS BASE_REDEEMED_QTY, SUM(CASE WHEN (SDS_REDEMPTION.SDS_REDEEMED_UNIT_TYPE = 'Free'::"VARCHAR") THEN 1 ELSE 0 END) AS FREE_REDEEMED_QTY FROM ADMIN.SDS_REDEMPTION WHERE ((SDS_REDEMPTION.SDS_REDEMPTION_STATUS = 'Complete'::"VARCHAR") AND (SDS_REDEMPTION.DELETED_FLAG = '0'::NUMERIC)) GROUP BY SDS_REDEMPTION.SDS_BUNDLE_ID) RDM ON ((B.SDS_BUNDLE_ID = RDM.SDS_BUNDLE_ID))) WHERE ((DATE(B.SDS_PURCHASED_TSTMP) NOTNULL) AND (SP.STORE_NBR NOTNULL))) BW LEFT JOIN (SELECT DISTINCT U.DAY_DT, U.LOCATION_ID, U.TP_INVOICE_NBR, R.PRODUCT_ID, TXN.PAYMENT_DEVICE_TYPE AS BUNDLE_PURCHASE_CHANNEL FROM (((ADMIN.SALES_TRANS_UPC U JOIN ADMIN.SKU_PROFILE_RPT R ON ((U.PRODUCT_ID = R.PRODUCT_ID))) JOIN ADMIN.SVCS_SPECIAL_SALES_SKU S ON ((R.SKU_NBR = S.SKU_NBR))) JOIN ADMIN.SALES_TRANS_TXN TXN ON ((U.SALES_INSTANCE_ID = TXN.SALES_INSTANCE_ID))) WHERE (((U.VOID_TYPE_CD = 'N'::BPCHAR) AND (U.SALES_TYPE_ID = 1)) AND (U.TP_INVOICE_NBR <> 0))) SALES ON (((((INT8(BW.PURCHASE_PETM_POS_INVOICE_ID) = SALES.TP_INVOICE_NBR) AND (BW.BUNDLE_PRODUCT_ID = SALES.PRODUCT_ID)) AND (BW.LOCATION_ID = SALES.LOCATION_ID)) AND ((SALES.DAY_DT >= ADD_MONTHS(BW.BUNDLE_PURCHASED_TSTMP, -3)) AND (SALES.DAY_DT <= ADD_MONTHS(BW.BUNDLE_PURCHASED_TSTMP, 1))))));

\echo
\echo *****  Creating view:  "PM_VGJUXW4JOBBHHZ4YCV2BF3IG3K4"

CREATE or replace VIEW  PM_VGJUXW4JOBBHHZ4YCV2BF3IG3K4
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V2YPEK6EAPZDFKFKTRLQHODAMEU"

CREATE or replace VIEW  PM_V2YPEK6EAPZDFKFKTRLQHODAMEU
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VFUEGK7K3TQACBMXDW2JQXW2PZA"

CREATE or replace VIEW  PM_VFUEGK7K3TQACBMXDW2JQXW2PZA
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V3MPSGLL46AHYEVFHX7WNVY62QE"

CREATE or replace VIEW  PM_V3MPSGLL46AHYEVFHX7WNVY62QE
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VKLZNTY2RMV3YSWGLR2XZK7S7TQ"

CREATE or replace VIEW  PM_VKLZNTY2RMV3YSWGLR2XZK7S7TQ
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VJFM6K63NBX5V3UKQHCMDHWSMM4"

CREATE or replace VIEW  PM_VJFM6K63NBX5V3UKQHCMDHWSMM4
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "DD_MARKETPLACE_SETTLED_TXN_SALES_VW"

CREATE or replace VIEW  DD_MARKETPLACE_SETTLED_TXN_SALES_VW
(
     DAY_DT,
     TXN_TSTMP,
     LOCATION_ID,
     DD_DELIVERY_UUID,
     DASHPASS_ORDER_FLAG,
     TREATS_ID,
     ACTING_CARD_FIRST_SIX,
     ACTING_CARD_LAST_FOUR,
     APPROVAL_CD,
     TXN_AMT,
     SALES_INSTANCE_ID,
     EXCH_RATE_PCT,
     DD_UPDATE_TSTMP,
     DD_LOAD_TSTMP,
     SLS_LOAD_DT
) AS
SELECT D.TXN_DT AS DAY_DT, D.TXN_TSTMP, D.LOCATION_ID, D.DD_DELIVERY_UUID, D.DASHPASS_ORDER_FLAG, D.TREATS_ID, D.ACTING_CARD_FIRST_SIX, D.ACTING_CARD_LAST_FOUR, D.APPROVAL_CD, D.TXN_AMT, P.SALES_INSTANCE_ID, CASE WHEN (UPPER(BTRIM(SPR.COUNTRY_NAME)) = 'CANADA'::"VARCHAR") THEN CD.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END AS EXCH_RATE_PCT, D.UPDATE_TSTMP AS DD_UPDATE_TSTMP, D.LOAD_TSTMP AS DD_LOAD_TSTMP, P.DATE_LOADED AS SLS_LOAD_DT FROM (((ADMIN.DD_MARKETPLACE_SETTLED_TXN D JOIN ADMIN.CURRENCY_DAY CD ON (("TIMESTAMP"(D.TXN_DT) = CD.DAY_DT))) LEFT JOIN ADMIN.SITE_PROFILE_RPT SPR ON ((D.LOCATION_ID = SPR.LOCATION_ID))) LEFT JOIN ADMIN.SALES_TRANS_PAYMENT P ON ((((((("TIMESTAMP"(D.TXN_DT) = P.DAY_DT) AND (D.LOCATION_ID = P.LOCATION_ID)) AND (D.APPROVAL_CD = (P.AUTH_APPROVAL_CODE)::"VARCHAR")) AND (D.ACTING_CARD_LAST_FOUR = SUBSTR(P.TRANS_ACCT_NBR, (LENGTH(P.TRANS_ACCT_NBR) - 3), 4))) AND (P.VOID_TYPE_CD = 'N'::BPCHAR)) AND (P.DAY_DT > '2020-12-01 00:00:00'::"TIMESTAMP"))));

\echo
\echo *****  Creating view:  "SDS_BUNDLE_REDEMPTION_RPT_VW"

CREATE or replace VIEW  SDS_BUNDLE_REDEMPTION_RPT_VW
(
     SDS_REDEMPTION_ID,
     SDS_BUNDLE_ID,
     APPT_ID,
     APPT_SERVICE_ID,
     LOCATION_ID,
     PETM_POS_INVOICE_ID,
     BUNDLE_PURCHASE_TSTMP,
     BUNDLE_REDEEMED_TSTMP,
     BUNDLE_REDEMPTION_STATUS,
     APPT_TSTMP,
     APPT_CREATE_TSTMP,
     SDS_APPT_CREATION_CHANNEL,
     PRODUCT_ID,
     PRIMARY_SERVICE_FLAG,
     ORIG_UNIT_PRICE_AMT,
     LIST_PRICE_AMT,
     FINAL_UNIT_PRICE_AMT,
     TOTAL_GROOM_PAY_PRICE_AMT,
     EXCH_RATE_PCT,
     APPT_SERVICE_ITEM_QTY,
     SVCS_PET_NAME,
     SRC_PET_ID,
     SRC_PET_NAME,
     WEIGHT_IN_LBS,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     SRC_CUSTOMER_ID,
     SRC_CUSTOMER_FIRST_NAME,
     SRC_CUSTOMER_LAST_NAME,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     SDS_EMPLOYEE_GROUP_GID,
     SDS_EMPLOYEE_GROUP_NAME,
     EMPLOYEE_COMMISSION_RATE_PCT,
     EMPLOYEE_COMMISSION_AMT,
     EMPLOYEE_GROUP_COMMISSION_AMT,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SRC_ORDER_ID,
     APPT_SERVICE_CANCEL_FLAG,
     LAST_LOAD_START_TSTMP
) AS
SELECT R.SDS_REDEMPTION_ID, R.SDS_BUNDLE_ID, OI.SDS_WORK_ORDER_NBR AS APPT_ID, OI.SDS_ORDER_ITEM_NBR AS APPT_SERVICE_ID, OI.LOCATION_ID, OI.PETM_POS_INVOICE_ID, B.SDS_PURCHASED_TSTMP AS BUNDLE_PURCHASE_TSTMP, (R.SDS_REDEEMED_TSTMP + "INTERVAL"(("VARCHAR"(TC.CONVERSION_HOUR) || 'HOUR'::"VARCHAR"))) AS BUNDLE_REDEEMED_TSTMP, R.SDS_REDEMPTION_STATUS AS BUNDLE_REDEMPTION_STATUS, OI.APPT_TSTMP, OI.APPT_CREATE_TSTMP, OI.SDS_APPT_CREATION_CHANNEL, OI.PRODUCT_ID, OI.PRIMARY_SERVICE_FLAG, OI.ORIG_UNIT_PRICE_AMT, OI.LIST_PRICE_AMT, OI.FINAL_UNIT_PRICE_AMT, OI.TOTAL_GROOM_PAY_PRICE_AMT, OI.EXCH_RATE_PCT, OI.APPT_SERVICE_ITEM_QTY, OI.PET_NAME AS SVCS_PET_NAME, OI.PODS_PET_ID AS SRC_PET_ID, OI.PET_NAME AS SRC_PET_NAME, OI.WEIGHT_IN_LBS, OI.CUSTOMER_FIRST_NAME AS SVCS_CUSTOMER_FIRST_NAME, OI.CUSTOMER_LAST_NAME AS SVCS_CUSTOMER_LAST_NAME, OI.PODS_CUSTOMER_ID AS SRC_CUSTOMER_ID, OI.CUSTOMER_FIRST_NAME AS SRC_CUSTOMER_FIRST_NAME, OI.CUSTOMER_LAST_NAME AS SRC_CUSTOMER_LAST_NAME, OI.ASSIGNED_EMPLOYEE_ID, OI.ASSIGNED_EMPLOYEE_FIRST_NAME, OI.ASSIGNED_EMPLOYEE_LAST_NAME, OI.ASSIGNED_EMPLOYEE_DISPLAY_NAME, EG.SDS_EMPLOYEE_GROUP_GID, EG.SDS_EMPLOYEE_GROUP_NAME, OI.EMPLOYEE_COMMISSION_RATE_PCT, OI.EMPLOYEE_COMMISSION_AMT, EG.EMPLOYEE_GROUP_COMMISSION AS EMPLOYEE_GROUP_COMMISSION_AMT, OI.PETM_PET_BREED_ID, OI.PETM_PET_BREED_DESC, INT4(OI.SVCS_APPT_STATUS_GID) AS SVCS_APPT_STATUS_GID, OI.SVCS_APPT_STATUS_DESC, INT4(OI.SVCS_ORDER_STATUS_GID) AS SVCS_ORDER_STATUS_GID, OI.SVCS_ORDER_STATUS_DESC, OI.SDS_ORDER_NBR AS SRC_ORDER_ID, OI.APPT_SERVICE_CANCEL_FLAG, LOA.LAST_LOAD_START_TSTMP FROM (((((((ADMIN.SDS_REDEMPTION R LEFT JOIN ADMIN.SDS_ORDER_ITEM_RPT OI ON ((OI.SDS_WORK_ORDER_ID = R.SDS_WORK_ORDER_ID))) JOIN ADMIN.SDS_BUNDLE B ON ((R.SDS_BUNDLE_ID = B.SDS_BUNDLE_ID))) LEFT JOIN ADMIN.SDS_EMPLOYEE_GROUP EG ON ((EG.SDS_EMPLOYEE_GROUP_GID = OI.ASSIGNED_SDS_EMPLOYEE_GROUP_ID))) LEFT JOIN ADMIN.SITE_PROFILE SP ON ((SP.LOCATION_ID = OI.LOCATION_ID))) LEFT JOIN ADMIN.TIMEZONE_CONVERSION TC ON ((TC.TO_TIME_ZONE_ID = SP.TIME_ZONE_ID))) LEFT JOIN ADMIN.DAY_LIGHT_SAVING_DATE DL ON (((R.SDS_REDEEMED_TSTMP >= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_START_DT)) AND (R.SDS_REDEEMED_TSTMP <= "TIMESTAMP"(DL.DAY_LIGHT_SAVING_END_DT))))) LEFT JOIN ADMIN.SVCS_INFA_LOAD_CTRL LOA ON ((LOA.SVCS_SRC_CD = 'PRISM'::"VARCHAR"))) WHERE ((TC.FROM_TIME_ZONE_ID = 'UTC'::"VARCHAR") AND (TC.DAY_LIGHT_SAVING_FLAG = "NUMERIC"(CASE WHEN (DL.DAY_LIGHT_SAVING_START_DT ISNULL) THEN 0 ELSE 1 END)));

\echo
\echo *****  Creating view:  "PM_V3DKYXDUIO7A7SVYPXCPJFCL5H4"

CREATE or replace VIEW  PM_V3DKYXDUIO7A7SVYPXCPJFCL5H4
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VHEOHGN5SSDFJDB2QOT6I52F7ZI"

CREATE or replace VIEW  PM_VHEOHGN5SSDFJDB2QOT6I52F7ZI
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VUW4FSESXKJVHPEYJI357NSDD7Y"

CREATE or replace VIEW  PM_VUW4FSESXKJVHPEYJI357NSDD7Y
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VORXNOTDBIBQ5TIW6OBIPBIG274"

CREATE or replace VIEW  PM_VORXNOTDBIBQ5TIW6OBIPBIG274
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VGZYSGW5WXT3VHMVROOSBB6JW4U"

CREATE or replace VIEW  PM_VGZYSGW5WXT3VHMVROOSBB6JW4U
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VIF7GZHVZABKYTOFREGHM65WCWE"

CREATE or replace VIEW  PM_VIF7GZHVZABKYTOFREGHM65WCWE
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "PM_VEUDMDLD7BFCKEDALD5QIRW42BA"

CREATE or replace VIEW  PM_VEUDMDLD7BFCKEDALD5QIRW42BA
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "PM_V3WFQRYOGK2G4LGBN2K55SGCBB4"

CREATE or replace VIEW  PM_V3WFQRYOGK2G4LGBN2K55SGCBB4
(
     OMS_PURCHASE_ORDERS_ID,
     OMS_PURCHASE_ORDERS_LINE_ITEM_ID,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.OMS_PURCHASE_ORDERS_ID, PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.OMS_PURCHASE_ORDERS_LINE_ITEM_ID, PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.ATTRIBUTE_VALUE, PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.UPDATE_TSTMP FROM ADMIN.OMS_PO_LINE_ITEM_ATTRIBUTE PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM WHERE ((PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.ATTRIBUTE_NAME = 'Proxy_Tracking_Code'::"VARCHAR") AND (PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "PM_VUOC7O4BMBQZZFNSB4GFL5SIP3Y"

CREATE or replace VIEW  PM_VUOC7O4BMBQZZFNSB4GFL5SIP3Y
(
     OMS_CODE_ID,
     OMS_CODE_DESC,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_SYS_CODE1.OMS_CODE_ID, SHORTCUT_TO_OMS_SYS_CODE1.OMS_CODE_DESC, SHORTCUT_TO_OMS_SYS_CODE1.UPDATE_TSTMP FROM ADMIN.OMS_SYS_CODE SHORTCUT_TO_OMS_SYS_CODE1 WHERE ((SHORTCUT_TO_OMS_SYS_CODE1.OMS_REC_TYPE = 'B'::"VARCHAR") AND (SHORTCUT_TO_OMS_SYS_CODE1.OMS_CODE_TYPE = '039'::"VARCHAR"));

\echo
\echo *****  Creating view:  "PM_VVVNI735BI4NFIV5VYUSZI4KKEQ"

CREATE or replace VIEW  PM_VVVNI735BI4NFIV5VYUSZI4KKEQ
(
     OMS_PURCHASE_ORDERS_LINE_ITEM_ID,
     OMS_PURCHASE_ORDERS_ID,
     REF_FIELD3,
     UPDATE_TSTMP
) AS
SELECT PM_AUDMOXXZULBIPATZP2XLYMZGA7A.OMS_PURCHASE_ORDERS_LINE_ITEM_ID, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.OMS_PURCHASE_ORDERS_ID, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.REF_FIELD3, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.UPDATE_TSTMP FROM ADMIN.OMS_PO_LINE_ITEM_REF_FIELDS PM_AUDMOXXZULBIPATZP2XLYMZGA7A WHERE (UPPER(PM_AUDMOXXZULBIPATZP2XLYMZGA7A.REF_FIELD3) = 'TRUE'::"VARCHAR");

\echo
\echo *****  Creating view:  "PM_VB6N5WTML3KDE4PIPEC3IMXDYHE"

CREATE or replace VIEW  PM_VB6N5WTML3KDE4PIPEC3IMXDYHE
(
     OMS_CODE_ID,
     OMS_CODE_DESC,
     OMS_CODE_SHORT_DESC,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_ID, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_DESC, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_SHORT_DESC, SHORTCUT_TO_OMS_SYS_CODE.UPDATE_TSTMP FROM ADMIN.OMS_SYS_CODE SHORTCUT_TO_OMS_SYS_CODE WHERE ((SHORTCUT_TO_OMS_SYS_CODE.OMS_REC_TYPE = 'B'::"VARCHAR") AND (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_TYPE = '032'::"VARCHAR"));

\echo
\echo *****  Creating view:  "PM_VNIGSJWPRZZDYWYCZEZ6BNMDMOY"

CREATE or replace VIEW  PM_VNIGSJWPRZZDYWYCZEZ6BNMDMOY
(
     OMS_REASON_CODE_ID,
     OMS_REASON_CD,
     UPDATE_TSTMP
) AS
SELECT PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.OMS_REASON_CODE_ID, PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.OMS_REASON_CD, PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.UPDATE_TSTMP FROM ADMIN.OMS_A_CO_REASON_CODE PM_A6DBTZXV3LKGR234DF3PGY2GW4Y WHERE ((PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.OMS_REASON_CODE_TYPE = ('1'::NUMERIC(1,0))::NUMERIC(1,0)) AND (PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.MARK_FOR_DELETION_FLAG = '0'::NUMERIC));

\echo
\echo *****  Creating view:  "PM_V7VQWYYUKXKH6U6BAR22K42JNYY"

CREATE or replace VIEW  PM_V7VQWYYUKXKH6U6BAR22K42JNYY
(
     OMS_PURCHASE_ORDERS_ID,
     SCREENWIDTH,
     DEVICETYPE
) AS
SELECT DT.OMS_PURCHASE_ORDERS_ID, INT4(SW.ATTRIBUTE_VALUE) AS SCREENWIDTH, DT.ATTRIBUTE_VALUE AS DEVICETYPE FROM ((SELECT OMS_PURCHASE_ORDERS_ATTRIBUTE.OMS_PURCHASE_ORDERS_ID, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_VALUE, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME FROM ADMIN.OMS_PURCHASE_ORDERS_ATTRIBUTE WHERE (OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME IN (('DeviceType'::"VARCHAR")::VARCHAR(50)))) DT LEFT JOIN (SELECT OMS_PURCHASE_ORDERS_ATTRIBUTE.OMS_PURCHASE_ORDERS_ID, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_VALUE, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME FROM ADMIN.OMS_PURCHASE_ORDERS_ATTRIBUTE WHERE (OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME IN (('ScreenWidth'::"VARCHAR")::VARCHAR(50)))) SW ON ((DT.OMS_PURCHASE_ORDERS_ID = SW.OMS_PURCHASE_ORDERS_ID)));

\echo
\echo *****  Creating view:  "PM_VQGTBJB7U7EEUAU2FGVF5PA443Q"

CREATE or replace VIEW  PM_VQGTBJB7U7EEUAU2FGVF5PA443Q
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VYN55C5OAFKK5GTSFR5JZEE7EKU"

CREATE or replace VIEW  PM_VYN55C5OAFKK5GTSFR5JZEE7EKU
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VYPT7HXE4QONW3WQR6XGRDRST2E"

CREATE or replace VIEW  PM_VYPT7HXE4QONW3WQR6XGRDRST2E
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VUKSHNWWB4QWP2FSSMRJNVTR7UA"

CREATE or replace VIEW  PM_VUKSHNWWB4QWP2FSSMRJNVTR7UA
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VO4AYGZPWGAGFCHBQF255ND4BVM"

CREATE or replace VIEW  PM_VO4AYGZPWGAGFCHBQF255ND4BVM
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V5ESI547575P5RQXUXUF63NPYTY"

CREATE or replace VIEW  PM_V5ESI547575P5RQXUXUF63NPYTY
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "DD_MARKETPLACE_INVOICE_COMMISSION_VW"

CREATE or replace VIEW  DD_MARKETPLACE_INVOICE_COMMISSION_VW
(
     TXN_DT,
     DD_DELIVERY_UUID,
     DASHPASS_ORDER_FLAG,
     DD_INVOICE_NBR,
     COMPANY_ID,
     LOYALTY_NBR,
     CURRENCY_CD,
     TOTAL_SALES_AMT,
     TOTAL_TAX_AMT,
     TOTAL_EXCL_SALES_AMT,
     DD_COMMISSION_RATE_PCT,
     DD_COMMISSION_AMT,
     DD_PICK_AND_PACK_RATE_PCT,
     DD_PICK_AND_PACK_AMT,
     TOTAL_DD_COMMISSION_AMT,
     EXCH_RATE_PCT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT D.TXN_DT, D.DD_DELIVERY_UUID, D.DASHPASS_ORDER_FLAG, D.DD_INVOICE_NBR, D.COMPANY_ID, D.LOYALTY_NBR, D.CURRENCY_CD, D.TOTAL_SALES_AMT, D.TOTAL_TAX_AMT, D.TOTAL_EXCL_SALES_AMT, C.DD_COMMISSION_RATE_PCT, ROUND((C.DD_COMMISSION_RATE_PCT * D.TOTAL_SALES_AMT), 2) AS DD_COMMISSION_AMT, C.DD_PICK_AND_PACK_RATE_PCT, ROUND((C.DD_PICK_AND_PACK_RATE_PCT * D.TOTAL_SALES_AMT), 2) AS DD_PICK_AND_PACK_AMT, (ROUND((C.DD_COMMISSION_RATE_PCT * D.TOTAL_SALES_AMT), 2) + ROUND((C.DD_PICK_AND_PACK_RATE_PCT * D.TOTAL_SALES_AMT), 2)) AS TOTAL_DD_COMMISSION_AMT, CASE WHEN (BTRIM(D.CURRENCY_CD) = 'CAD'::"VARCHAR") THEN CD.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END AS EXCH_RATE_PCT, D.UPDATE_TSTMP, D.LOAD_TSTMP FROM ((ADMIN.DD_MARKETPLACE_INVOICE_HIST D JOIN ADMIN.CURRENCY_DAY CD ON (("TIMESTAMP"(D.TXN_DT) = CD.DAY_DT))) LEFT JOIN ADMIN.DD_MARKETPLACE_COMMISSION_RULE C ON (((D.DASHPASS_ORDER_FLAG = C.DASHPASS_ORDER_FLAG) AND ((D.TXN_DT >= C.EFF_START_DT) AND (D.TXN_DT <= C.EFF_END_DT)))));

\echo
\echo *****  Creating view:  "PM_VDJENLIDG7P2EEC5HMSS6T3AHDY"

CREATE or replace VIEW  PM_VDJENLIDG7P2EEC5HMSS6T3AHDY
(
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_PRODUCT_KEY,
     CKB_DB_PERFORMANCE_KEY,
     PRICE,
     CASE_COST,
     FACINGS,
     UNITS,
     CAPACITY,
     LINEAR,
     SQUARE,
     CUBIC,
     SALES,
     UNIT_COST,
     UNIT_PROFIT,
     PROFIT,
     LINEAR_PCT,
     SQUARE_PCT,
     CUBIC_PCT,
     LINEAR_PCT_USED,
     SQUARE_PCT_USED,
     CUBIC_PCT_USED,
     SPC_PERF_CHANGE_DESC,
     AVG_SALES_DLRS,
     AVG_MARGIN_DLRS,
     SUM_SALES_DLRS,
     SUM_MARGIN_DLRS,
     SUM_UNITS,
     NUMBER_OF_STORES,
     NUMBER_OF_WEEKS_SOLD,
     AO_CLUSTER_DBKEY,
     AO_AVG_SALES_DLRS,
     AO_AVG_MARGIN_DLRS,
     AO_AVG_UNITS,
     AO_SUM_SALES_DLRS,
     AO_SUM_MARGIN_DLRS,
     AO_SUM_UNITS,
     PREVIOUS_LOCATION_ID,
     PREVIOUS_POSITIONS,
     PREVIOUS_FACINGS,
     PREVIOUS_X,
     PREVIOUS_Y,
     PREVIOUS_CAPACITY,
     CPI_RANK,
     RECOMMENDED_FACINGS,
     ASSORTMENT_STRATEGY,
     ASSORTMENT_TACTIC,
     ASSORTMENT_REASON,
     ASSORTMENT_ACTION,
     NUMBER_OF_POSITIONS,
     CLUSTER_NAME,
     ASSORTMENT_NOTE,
     RECOMMENDED_ORIENTATION,
     RECOMMENDED_MERCH_STYLE,
     IGNORE_RECOMMENDATIONS,
     PRIORITY,
     PRIORITY_DESC,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT CKB_SPC_PERFORMANCE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PRODUCT_KEY, CKB_SPC_PERFORMANCE.CKB_DB_PERFORMANCE_KEY, CKB_SPC_PERFORMANCE.PRICE, CKB_SPC_PERFORMANCE.CASE_COST, CKB_SPC_PERFORMANCE.FACINGS, CKB_SPC_PERFORMANCE.UNITS, CKB_SPC_PERFORMANCE.CAPACITY, CKB_SPC_PERFORMANCE.LINEAR, CKB_SPC_PERFORMANCE.SQUARE, CKB_SPC_PERFORMANCE.CUBIC, CKB_SPC_PERFORMANCE.SALES, CKB_SPC_PERFORMANCE.UNIT_COST, CKB_SPC_PERFORMANCE.UNIT_PROFIT, CKB_SPC_PERFORMANCE.PROFIT, CKB_SPC_PERFORMANCE.LINEAR_PCT, CKB_SPC_PERFORMANCE.SQUARE_PCT, CKB_SPC_PERFORMANCE.CUBIC_PCT, CKB_SPC_PERFORMANCE.LINEAR_PCT_USED, CKB_SPC_PERFORMANCE.SQUARE_PCT_USED, CKB_SPC_PERFORMANCE.CUBIC_PCT_USED, CKB_SPC_PERFORMANCE.SPC_PERF_CHANGE_DESC, CKB_SPC_PERFORMANCE.AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.SUM_UNITS, CKB_SPC_PERFORMANCE.NUMBER_OF_STORES, CKB_SPC_PERFORMANCE.NUMBER_OF_WEEKS_SOLD, CKB_SPC_PERFORMANCE.AO_CLUSTER_DBKEY, CKB_SPC_PERFORMANCE.AO_AVG_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_AVG_UNITS, CKB_SPC_PERFORMANCE.AO_SUM_SALES_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_MARGIN_DLRS, CKB_SPC_PERFORMANCE.AO_SUM_UNITS, CKB_SPC_PERFORMANCE.PREVIOUS_LOCATION_ID, CKB_SPC_PERFORMANCE.PREVIOUS_POSITIONS, CKB_SPC_PERFORMANCE.PREVIOUS_FACINGS, CKB_SPC_PERFORMANCE.PREVIOUS_X, CKB_SPC_PERFORMANCE.PREVIOUS_Y, CKB_SPC_PERFORMANCE.PREVIOUS_CAPACITY, CKB_SPC_PERFORMANCE.CPI_RANK, CKB_SPC_PERFORMANCE.RECOMMENDED_FACINGS, CKB_SPC_PERFORMANCE.ASSORTMENT_STRATEGY, CKB_SPC_PERFORMANCE.ASSORTMENT_TACTIC, CKB_SPC_PERFORMANCE.ASSORTMENT_REASON, CKB_SPC_PERFORMANCE.ASSORTMENT_ACTION, CKB_SPC_PERFORMANCE.NUMBER_OF_POSITIONS, CKB_SPC_PERFORMANCE.CLUSTER_NAME, CKB_SPC_PERFORMANCE.ASSORTMENT_NOTE, CKB_SPC_PERFORMANCE.RECOMMENDED_ORIENTATION, CKB_SPC_PERFORMANCE.RECOMMENDED_MERCH_STYLE, CKB_SPC_PERFORMANCE.IGNORE_RECOMMENDATIONS, CKB_SPC_PERFORMANCE."PRIORITY", CKB_SPC_PERFORMANCE.PRIORITY_DESC, CKB_SPC_PERFORMANCE.DEL_FLAG, CKB_SPC_PERFORMANCE.LOAD_DT, CKB_SPC_PERFORMANCE.UPDATE_DT FROM ADMIN.CKB_SPC_PERFORMANCE WHERE (CKB_SPC_PERFORMANCE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V7FFDBMTWO4AIPVJLJVMMSOGCGY"

CREATE or replace VIEW  PM_V7FFDBMTWO4AIPVJLJVMMSOGCGY
(
     CKB_DB_PRODUCT_KEY,
     SKU_NBR,
     PRODUCT_ID,
     DB_STATUS,
     MANUFACTURER,
     INNER_PACK,
     PACKAGE_STYLE,
     PRODUCT_PRICE,
     CASE_COST,
     TAX_CODE,
     UNIT_MOVEMENT,
     PRODUCT_SHARE,
     CASE_MULTIPLE,
     COMBINED_PERFORMANCE_INDEX,
     TRAY_NUMBER_WIDE,
     TRAY_NUMBER_HIGH,
     TRAY_NUMBER_DEEP,
     CASE_NUMBER_WIDE,
     CASE_NUMBER_HIGH,
     CASE_NUMBER_DEEP,
     DISPLAY_WIDTH,
     DISPLAY_HEIGHT,
     DISPLAY_DEPTH,
     DISPLAY_TOTAL_NBR,
     ALTERNATE_WIDTH,
     ALTERNATE_HEIGHT,
     ALTERNATE_DEPTH,
     ALTERNATE_TOTAL_NBR,
     LOOSE_WIDTH,
     LOOSE_HEIGHT,
     LOOSE_DEPTH,
     LOOSE_TOTAL_NBR,
     NUMBER_OF_POSITIONS,
     USR_PRODUCT_FLD_1,
     USR_PRODUCT_FLD_2,
     USR_PRODUCT_FLD_3,
     USR_PRODUCT_FLD_4,
     USR_PRODUCT_FLD_5,
     STRIP_DESC,
     CA_USR_PRODUCT_FLD_1,
     CA_USR_PRODUCT_FLD_2,
     CA_USR_PRODUCT_FLD_3,
     CA_USR_PRODUCT_FLD_4,
     CA_USR_PRODUCT_FLD_5,
     AO_FLD_1,
     AO_FLD_2,
     AO_FLD_3,
     AO_FLD_4,
     AO_FLD_5,
     PRODUCT_SIZE,
     SALES_AMT_52WK,
     MARGIN_AMT_52WK,
     SALES_QTY_52WK,
     SALES_AMT_26WK,
     MARGIN_AMT_26WK,
     SALES_QTY_26WK,
     SALES_AMT_13WK,
     MARGIN_AMT_13WK,
     SALES_QTY_13WK,
     NUMBER_OF_STORES_CHAIN,
     ARTICLE_REPL,
     PRODUCT_WITH_NO_RETAIL,
     DISCONTINUED,
     PRODUCT_STATUS,
     LOAD_DT,
     UPDATE_DT,
     CASE_TOTAL_NBR,
     TRAY_TOTAL_NBR,
     MADE_IN_CANADA_FLAG,
     DEL_FLAG
) AS
SELECT CKB_SPC_PRODUCT.CKB_DB_PRODUCT_KEY, CKB_SPC_PRODUCT.SKU_NBR, CKB_SPC_PRODUCT.PRODUCT_ID, CKB_SPC_PRODUCT.DB_STATUS, CKB_SPC_PRODUCT.MANUFACTURER, CKB_SPC_PRODUCT.INNER_PACK, CKB_SPC_PRODUCT.PACKAGE_STYLE, CKB_SPC_PRODUCT.PRODUCT_PRICE, CKB_SPC_PRODUCT.CASE_COST, CKB_SPC_PRODUCT.TAX_CODE, CKB_SPC_PRODUCT.UNIT_MOVEMENT, CKB_SPC_PRODUCT.PRODUCT_SHARE, CKB_SPC_PRODUCT.CASE_MULTIPLE, CKB_SPC_PRODUCT.COMBINED_PERFORMANCE_INDEX, CKB_SPC_PRODUCT.TRAY_NUMBER_WIDE, CKB_SPC_PRODUCT.TRAY_NUMBER_HIGH, CKB_SPC_PRODUCT.TRAY_NUMBER_DEEP, CKB_SPC_PRODUCT.CASE_NUMBER_WIDE, CKB_SPC_PRODUCT.CASE_NUMBER_HIGH, CKB_SPC_PRODUCT.CASE_NUMBER_DEEP, CKB_SPC_PRODUCT.DISPLAY_WIDTH, CKB_SPC_PRODUCT.DISPLAY_HEIGHT, CKB_SPC_PRODUCT.DISPLAY_DEPTH, CKB_SPC_PRODUCT.DISPLAY_TOTAL_NBR, CKB_SPC_PRODUCT.ALTERNATE_WIDTH, CKB_SPC_PRODUCT.ALTERNATE_HEIGHT, CKB_SPC_PRODUCT.ALTERNATE_DEPTH, CKB_SPC_PRODUCT.ALTERNATE_TOTAL_NBR, CKB_SPC_PRODUCT.LOOSE_WIDTH, CKB_SPC_PRODUCT.LOOSE_HEIGHT, CKB_SPC_PRODUCT.LOOSE_DEPTH, CKB_SPC_PRODUCT.LOOSE_TOTAL_NBR, CKB_SPC_PRODUCT.NUMBER_OF_POSITIONS, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.STRIP_DESC, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_1, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_2, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_3, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_4, CKB_SPC_PRODUCT.CA_USR_PRODUCT_FLD_5, CKB_SPC_PRODUCT.AO_FLD_1, CKB_SPC_PRODUCT.AO_FLD_2, CKB_SPC_PRODUCT.AO_FLD_3, CKB_SPC_PRODUCT.AO_FLD_4, CKB_SPC_PRODUCT.AO_FLD_5, CKB_SPC_PRODUCT.PRODUCT_SIZE, CKB_SPC_PRODUCT.SALES_AMT_52WK, CKB_SPC_PRODUCT.MARGIN_AMT_52WK, CKB_SPC_PRODUCT.SALES_QTY_52WK, CKB_SPC_PRODUCT.SALES_AMT_26WK, CKB_SPC_PRODUCT.MARGIN_AMT_26WK, CKB_SPC_PRODUCT.SALES_QTY_26WK, CKB_SPC_PRODUCT.SALES_AMT_13WK, CKB_SPC_PRODUCT.MARGIN_AMT_13WK, CKB_SPC_PRODUCT.SALES_QTY_13WK, CKB_SPC_PRODUCT.NUMBER_OF_STORES_CHAIN, CKB_SPC_PRODUCT.ARTICLE_REPL, CKB_SPC_PRODUCT.PRODUCT_WITH_NO_RETAIL, CKB_SPC_PRODUCT.DISCONTINUED, CKB_SPC_PRODUCT.PRODUCT_STATUS, CKB_SPC_PRODUCT.LOAD_DT, CKB_SPC_PRODUCT.UPDATE_DT, CKB_SPC_PRODUCT.CASE_TOTAL_NBR, CKB_SPC_PRODUCT.TRAY_TOTAL_NBR, CKB_SPC_PRODUCT.MADE_IN_CANADA_FLAG, CKB_SPC_PRODUCT.DEL_FLAG FROM ADMIN.CKB_SPC_PRODUCT WHERE (CKB_SPC_PRODUCT.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VJIZWXQAX4TKLSJQUIVY436A3HQ"

CREATE or replace VIEW  PM_VJIZWXQAX4TKLSJQUIVY436A3HQ
(
     CKB_DB_POSITION_KEY,
     CKB_DB_PLANOGRAM_KEY,
     CKB_DB_FIXTURE_KEY,
     CKB_DB_PRODUCT_KEY,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     WIDTH,
     HEIGHT,
     DEPTH,
     MERCH_STYLE,
     H_FACINGS,
     V_FACINGS,
     D_FACINGS,
     ORIENTATION,
     MERCH_STYLE_WIDTH,
     MERCH_STYLE_HEIGHT,
     MERCH_STYLE_DEPTH,
     FULL_WIDTH,
     FULL_HEIGHT,
     FULL_DEPTH,
     SPC_POSITION_CHANGE_DESC,
     SPC_POSITION_LOC_ID,
     LINEAR,
     SQUARE,
     CUBIC,
     SEGMENT,
     PEG_ID_USED,
     HIDELF_PRINTING,
     LOAD_DT,
     UPDATE_DT,
     COL_NBR,
     REPLACE_DESC,
     NBR_OF_FACINGS,
     WARNING_NBR,
     DEL_FLAG
) AS
SELECT CKB_SPC_POSITION.CKB_DB_POSITION_KEY, CKB_SPC_POSITION.CKB_DB_PLANOGRAM_KEY, CKB_SPC_POSITION.CKB_DB_FIXTURE_KEY, CKB_SPC_POSITION.CKB_DB_PRODUCT_KEY, CKB_SPC_POSITION.LOCATION_X, CKB_SPC_POSITION.LOCATION_Y, CKB_SPC_POSITION.LOCATION_Z, CKB_SPC_POSITION.WIDTH, CKB_SPC_POSITION.HEIGHT, CKB_SPC_POSITION."DEPTH", CKB_SPC_POSITION.MERCH_STYLE, CKB_SPC_POSITION.H_FACINGS, CKB_SPC_POSITION.V_FACINGS, CKB_SPC_POSITION.D_FACINGS, CKB_SPC_POSITION.ORIENTATION, CKB_SPC_POSITION.MERCH_STYLE_WIDTH, CKB_SPC_POSITION.MERCH_STYLE_HEIGHT, CKB_SPC_POSITION.MERCH_STYLE_DEPTH, CKB_SPC_POSITION.FULL_WIDTH, CKB_SPC_POSITION.FULL_HEIGHT, CKB_SPC_POSITION.FULL_DEPTH, CKB_SPC_POSITION.SPC_POSITION_CHANGE_DESC, CKB_SPC_POSITION.SPC_POSITION_LOC_ID, CKB_SPC_POSITION.LINEAR, CKB_SPC_POSITION.SQUARE, CKB_SPC_POSITION.CUBIC, CKB_SPC_POSITION.SEGMENT, CKB_SPC_POSITION.PEG_ID_USED, CKB_SPC_POSITION.HIDELF_PRINTING, CKB_SPC_POSITION.LOAD_DT, CKB_SPC_POSITION.UPDATE_DT, CKB_SPC_POSITION.COL_NBR, CKB_SPC_POSITION.REPLACE_DESC, CKB_SPC_POSITION.NBR_OF_FACINGS, CKB_SPC_POSITION.WARNING_NBR, CKB_SPC_POSITION.DEL_FLAG FROM ADMIN.CKB_SPC_POSITION WHERE (CKB_SPC_POSITION.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VJFJI3G3GPGAE7AWD3PWJMMCEUU"

CREATE or replace VIEW  PM_VJFJI3G3GPGAE7AWD3PWJMMCEUU
(
     CKB_DB_SPC_FIXTURE_KEY,
     CKB_DB_PLANOGRAM_KEY,
     FIXTURE_TYPE,
     NAME,
     LOCATION_X,
     LOCATION_Y,
     LOCATION_Z,
     HEIGHT,
     WIDTH,
     DEPTH,
     SLOPE,
     ANGLE,
     ROLL,
     COLOR,
     ASSEMBLY,
     CAN_OBSCRUCT,
     NUMBER_OF_POSITIONS,
     NUMBER_OF_DIVIDENDS,
     LINEAR,
     SQUARE,
     CUBIC,
     SIGN_TYPE,
     VENDOR,
     PART_NUMBER,
     ARTICLE_NBR,
     NEW_FIXT_ARRIVAL_DT,
     LOCATION_IN_STORE,
     PRE_ASSEMBLED,
     KIT_PART_NBR,
     KIT_DESC,
     STRIP_DESC,
     STRIP_TYPE_OVERRIDE,
     DIVIDER_PART_NBR,
     STRIP_LABEL_OFFSET,
     CA_BIT_MAP_ID,
     PR_BIT_MAP_ID,
     LABOR_TYPE,
     LEFT_PUSHER_DIVIDER_NBR,
     RIGHT_PUSHER_DIVIDER_NBR,
     CENTER_PUSHER_DIVIDER_NBR,
     PUSHER_NBR,
     FRONT_FACE_FOR_PUSHER_NBR,
     AQUATIC_DIVIDER_NBR,
     TANK,
     UPDATE_DIVIDER,
     FIXTURE_BOM,
     SIGN_BOM,
     NO_LABELS_NO_STRIPS,
     SHELF_LABEL_NO_STRIPS,
     SPC_FIXTURE_LOC_ID,
     SEGMENT,
     AVAILABLE_LINEAR,
     AVAILABLE_SQUARE,
     AVAILABLE_CUBIC,
     WEIGHT_CAPACITY,
     HIDE_IF_PRINTING,
     FIXTURE_ADD_DESC,
     COMBINED_LINEAR,
     COMBINED_SQUARE,
     COMBINED_CUBIC,
     COMBINED_AVAILABLE_LINEAR,
     COMBINED_AVAILABLE_SQUARE,
     COMBINED_AVAILABLE_CUBIC,
     COMBINED_NUMBER_OF_DIVIDERS,
     COMBINED_NUMBER_OF_POSITIONS,
     CAN_ATTACH,
     ATTACHED_TO_FIXTURE,
     IS_ATTACHED,
     NUMBER_OF_ATTACHMENTS,
     BIT_MAP_ID,
     RE_ORDER_CODE,
     CA_RE_ORDER_CODE,
     PR_RE_ORDER_CODE,
     LOAD_DT,
     UPDATE_DT,
     DEL_FLAG
) AS
SELECT CKB_SPC_FIXTURE.CKB_DB_SPC_FIXTURE_KEY, CKB_SPC_FIXTURE.CKB_DB_PLANOGRAM_KEY, CKB_SPC_FIXTURE.FIXTURE_TYPE, CKB_SPC_FIXTURE."NAME", CKB_SPC_FIXTURE.LOCATION_X, CKB_SPC_FIXTURE.LOCATION_Y, CKB_SPC_FIXTURE.LOCATION_Z, CKB_SPC_FIXTURE.HEIGHT, CKB_SPC_FIXTURE.WIDTH, CKB_SPC_FIXTURE."DEPTH", CKB_SPC_FIXTURE.SLOPE, CKB_SPC_FIXTURE.ANGLE, CKB_SPC_FIXTURE.ROLL, CKB_SPC_FIXTURE.COLOR, CKB_SPC_FIXTURE.ASSEMBLY, CKB_SPC_FIXTURE.CAN_OBSCRUCT, CKB_SPC_FIXTURE.NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.NUMBER_OF_DIVIDENDS, CKB_SPC_FIXTURE.LINEAR, CKB_SPC_FIXTURE.SQUARE, CKB_SPC_FIXTURE.CUBIC, CKB_SPC_FIXTURE.SIGN_TYPE, CKB_SPC_FIXTURE.VENDOR, CKB_SPC_FIXTURE.PART_NUMBER, CKB_SPC_FIXTURE.ARTICLE_NBR, CKB_SPC_FIXTURE.NEW_FIXT_ARRIVAL_DT, CKB_SPC_FIXTURE.LOCATION_IN_STORE, CKB_SPC_FIXTURE.PRE_ASSEMBLED, CKB_SPC_FIXTURE.KIT_PART_NBR, CKB_SPC_FIXTURE.KIT_DESC, CKB_SPC_FIXTURE.STRIP_DESC, CKB_SPC_FIXTURE.STRIP_TYPE_OVERRIDE, CKB_SPC_FIXTURE.DIVIDER_PART_NBR, CKB_SPC_FIXTURE.STRIP_LABEL_OFFSET, CKB_SPC_FIXTURE.CA_BIT_MAP_ID, CKB_SPC_FIXTURE.PR_BIT_MAP_ID, CKB_SPC_FIXTURE.LABOR_TYPE, CKB_SPC_FIXTURE.LEFT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.RIGHT_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.CENTER_PUSHER_DIVIDER_NBR, CKB_SPC_FIXTURE.PUSHER_NBR, CKB_SPC_FIXTURE.FRONT_FACE_FOR_PUSHER_NBR, CKB_SPC_FIXTURE.AQUATIC_DIVIDER_NBR, CKB_SPC_FIXTURE.TANK, CKB_SPC_FIXTURE.UPDATE_DIVIDER, CKB_SPC_FIXTURE.FIXTURE_BOM, CKB_SPC_FIXTURE.SIGN_BOM, CKB_SPC_FIXTURE.NO_LABELS_NO_STRIPS, CKB_SPC_FIXTURE.SHELF_LABEL_NO_STRIPS, CKB_SPC_FIXTURE.SPC_FIXTURE_LOC_ID, CKB_SPC_FIXTURE.SEGMENT, CKB_SPC_FIXTURE.AVAILABLE_LINEAR, CKB_SPC_FIXTURE.AVAILABLE_SQUARE, CKB_SPC_FIXTURE.AVAILABLE_CUBIC, CKB_SPC_FIXTURE.WEIGHT_CAPACITY, CKB_SPC_FIXTURE.HIDE_IF_PRINTING, CKB_SPC_FIXTURE.FIXTURE_ADD_DESC, CKB_SPC_FIXTURE.COMBINED_LINEAR, CKB_SPC_FIXTURE.COMBINED_SQUARE, CKB_SPC_FIXTURE.COMBINED_CUBIC, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_LINEAR, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_SQUARE, CKB_SPC_FIXTURE.COMBINED_AVAILABLE_CUBIC, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_DIVIDERS, CKB_SPC_FIXTURE.COMBINED_NUMBER_OF_POSITIONS, CKB_SPC_FIXTURE.CAN_ATTACH, CKB_SPC_FIXTURE.ATTACHED_TO_FIXTURE, CKB_SPC_FIXTURE.IS_ATTACHED, CKB_SPC_FIXTURE.NUMBER_OF_ATTACHMENTS, CKB_SPC_FIXTURE.BIT_MAP_ID, CKB_SPC_FIXTURE.RE_ORDER_CODE, CKB_SPC_FIXTURE.CA_RE_ORDER_CODE, CKB_SPC_FIXTURE.PR_RE_ORDER_CODE, CKB_SPC_FIXTURE.LOAD_DT, CKB_SPC_FIXTURE.UPDATE_DT, CKB_SPC_FIXTURE.DEL_FLAG FROM ADMIN.CKB_SPC_FIXTURE WHERE (CKB_SPC_FIXTURE.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_V27GJD5IERHOQPDYUU4L5UIIEHM"

CREATE or replace VIEW  PM_V27GJD5IERHOQPDYUU4L5UIIEHM
(
     CKB_DB_PLANOGRAM_KEY,
     DB_STATUS,
     NAME,
     WIDTH,
     HEIGHT,
     DEPTH,
     TRAFFIC_FLOW,
     NUMBER_OF_FIXTURES,
     NUMBER_OF_SEGMENTS,
     NUMBER_OF_STORES,
     SALES,
     COST,
     MARGIN,
     CAPACITY_COST,
     CAPACITY_RETAIL,
     ANNUAL_PROFIT,
     ROLL_COST,
     ROLL_RETAIL,
     POG_TYPE_CD,
     POG_DIVISION,
     POG_DEPARTMENT,
     POG_SUB_DIVISION,
     POG_GROUP,
     POG_GROUP_ID,
     FIXTURE_TYPE_NM,
     CLUSTER_NM,
     PRESENTATION,
     CONFIGURATION,
     VERSION_COMMENTS,
     POG_CHANGE_TYPE,
     STRIP_TYPE,
     CATEGORY_ROLE,
     ANALYST,
     VERSION_REASON,
     DRIVE_AISLE,
     CALCULATED_PERCENT_CHANGE,
     PLANNED_PERCENT_CHANGE,
     FLAG_US,
     FLAG_CA,
     FLAG_PR,
     CAPACITY,
     NBR_PRD_ALLOC,
     SALES_ALLOC,
     COST_ALLOC,
     MOVEMENT_ALLOC,
     MARGIN_ALLOC,
     ANNUAL_PROFIT_ALLOC,
     POG_STATUS,
     DATE_CREATED,
     DATE_MODIFIED,
     DATE_PENDING,
     DATE_EFFECTIVE,
     DATE_FINISHED,
     PLANNER_LISTING_END_DT,
     APPROVED_DT,
     PLANNING_DT,
     DB_DATE_EFFECTIVE_FROM,
     DB_DATE_EFFECTIVE_TO,
     DB_VERSION_KEY,
     DEPATMENT,
     ROLL_COST_ALLOC,
     ROLL_RETAIL_ALLOC,
     PROFIT,
     PROFIT_ALLOC,
     PG_STATUS,
     ABBREV_NM,
     CATEGORY_NM,
     NUMBER_OF_SECTIONS,
     LINEAR,
     SQUARE,
     CUBIC,
     SUB_CATEGORY_NM,
     FLOORPLANS_CNT,
     PENDING_DATE,
     LIVE_DATE,
     FINISHED_DATE,
     PG_TYPE,
     DEL_FLAG,
     LOAD_DT,
     UPDATE_DT,
     FULL_NM,
     PLANNER_DESC,
     RECENT_MO_YR,
     LAYOUT_FILE_NM
) AS
SELECT CKB_SPC_PLANOGRAM.CKB_DB_PLANOGRAM_KEY, CKB_SPC_PLANOGRAM.DB_STATUS, CKB_SPC_PLANOGRAM."NAME", CKB_SPC_PLANOGRAM.WIDTH, CKB_SPC_PLANOGRAM.HEIGHT, CKB_SPC_PLANOGRAM."DEPTH", CKB_SPC_PLANOGRAM.TRAFFIC_FLOW, CKB_SPC_PLANOGRAM.NUMBER_OF_FIXTURES, CKB_SPC_PLANOGRAM.NUMBER_OF_SEGMENTS, CKB_SPC_PLANOGRAM.NUMBER_OF_STORES, CKB_SPC_PLANOGRAM.SALES, CKB_SPC_PLANOGRAM.COST, CKB_SPC_PLANOGRAM.MARGIN, CKB_SPC_PLANOGRAM.CAPACITY_COST, CKB_SPC_PLANOGRAM.CAPACITY_RETAIL, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT, CKB_SPC_PLANOGRAM.ROLL_COST, CKB_SPC_PLANOGRAM.ROLL_RETAIL, CKB_SPC_PLANOGRAM.POG_TYPE_CD, CKB_SPC_PLANOGRAM.POG_DIVISION, CKB_SPC_PLANOGRAM.POG_DEPARTMENT, CKB_SPC_PLANOGRAM.POG_SUB_DIVISION, CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_GROUP_ID, CKB_SPC_PLANOGRAM.FIXTURE_TYPE_NM, CKB_SPC_PLANOGRAM.CLUSTER_NM, CKB_SPC_PLANOGRAM.PRESENTATION, CKB_SPC_PLANOGRAM."CONFIGURATION", CKB_SPC_PLANOGRAM.VERSION_COMMENTS, CKB_SPC_PLANOGRAM.POG_CHANGE_TYPE, CKB_SPC_PLANOGRAM.STRIP_TYPE, CKB_SPC_PLANOGRAM.CATEGORY_ROLE, CKB_SPC_PLANOGRAM.ANALYST, CKB_SPC_PLANOGRAM.VERSION_REASON, CKB_SPC_PLANOGRAM.DRIVE_AISLE, CKB_SPC_PLANOGRAM.CALCULATED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.PLANNED_PERCENT_CHANGE, CKB_SPC_PLANOGRAM.FLAG_US, CKB_SPC_PLANOGRAM.FLAG_CA, CKB_SPC_PLANOGRAM.FLAG_PR, CKB_SPC_PLANOGRAM.CAPACITY, CKB_SPC_PLANOGRAM.NBR_PRD_ALLOC, CKB_SPC_PLANOGRAM.SALES_ALLOC, CKB_SPC_PLANOGRAM.COST_ALLOC, CKB_SPC_PLANOGRAM.MOVEMENT_ALLOC, CKB_SPC_PLANOGRAM.MARGIN_ALLOC, CKB_SPC_PLANOGRAM.ANNUAL_PROFIT_ALLOC, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.DATE_CREATED, CKB_SPC_PLANOGRAM.DATE_MODIFIED, CKB_SPC_PLANOGRAM.DATE_PENDING, CKB_SPC_PLANOGRAM.DATE_EFFECTIVE, CKB_SPC_PLANOGRAM.DATE_FINISHED, CKB_SPC_PLANOGRAM.PLANNER_LISTING_END_DT, CKB_SPC_PLANOGRAM.APPROVED_DT, CKB_SPC_PLANOGRAM.PLANNING_DT, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_FROM, CKB_SPC_PLANOGRAM.DB_DATE_EFFECTIVE_TO, CKB_SPC_PLANOGRAM.DB_VERSION_KEY, CKB_SPC_PLANOGRAM.DEPATMENT, CKB_SPC_PLANOGRAM.ROLL_COST_ALLOC, CKB_SPC_PLANOGRAM.ROLL_RETAIL_ALLOC, CKB_SPC_PLANOGRAM.PROFIT, CKB_SPC_PLANOGRAM.PROFIT_ALLOC, CKB_SPC_PLANOGRAM.PG_STATUS, CKB_SPC_PLANOGRAM.ABBREV_NM, CKB_SPC_PLANOGRAM.CATEGORY_NM, CKB_SPC_PLANOGRAM.NUMBER_OF_SECTIONS, CKB_SPC_PLANOGRAM.LINEAR, CKB_SPC_PLANOGRAM.SQUARE, CKB_SPC_PLANOGRAM.CUBIC, CKB_SPC_PLANOGRAM.SUB_CATEGORY_NM, CKB_SPC_PLANOGRAM.FLOORPLANS_CNT, CKB_SPC_PLANOGRAM.PENDING_DATE, CKB_SPC_PLANOGRAM.LIVE_DATE, CKB_SPC_PLANOGRAM.FINISHED_DATE, CKB_SPC_PLANOGRAM.PG_TYPE, CKB_SPC_PLANOGRAM.DEL_FLAG, CKB_SPC_PLANOGRAM.LOAD_DT, CKB_SPC_PLANOGRAM.UPDATE_DT, CKB_SPC_PLANOGRAM.FULL_NM, CKB_SPC_PLANOGRAM.PLANNER_DESC, CKB_SPC_PLANOGRAM.RECENT_MO_YR, CKB_SPC_PLANOGRAM.LAYOUT_FILE_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE (CKB_SPC_PLANOGRAM.DEL_FLAG = 0);

\echo
\echo *****  Creating view:  "PM_VC55B3YM2S5BOMELB5QJAEGWXFM"

CREATE or replace VIEW  PM_VC55B3YM2S5BOMELB5QJAEGWXFM
(
     POG_GROUP,
     POG_STATUS,
     FULL_NM
) AS
SELECT CKB_SPC_PLANOGRAM.POG_GROUP, CKB_SPC_PLANOGRAM.POG_STATUS, CKB_SPC_PLANOGRAM.FULL_NM FROM ADMIN.CKB_SPC_PLANOGRAM WHERE ((CKB_SPC_PLANOGRAM.DEL_FLAG = 0) AND (CKB_SPC_PLANOGRAM.POG_STATUS IN (('Approved'::"VARCHAR")::VARCHAR(50), ('Awaiting Approval'::"VARCHAR")::VARCHAR(50), ('Live'::"VARCHAR")::VARCHAR(50), ('Pending'::"VARCHAR")::VARCHAR(50))));

\echo
\echo *****  Creating view:  "SVCS_PSH_TRAINING_CUSTOMER_GID_R52WK_SMRY_VW"

CREATE or replace VIEW  SVCS_PSH_TRAINING_CUSTOMER_GID_R52WK_SMRY_VW
(
     CUSTOMER_GID,
     PERIOD_END_FISCAL_MO,
     CURRENT_PERIOD_IND,
     PSH_R52WK_VISIT_MEDIAN_DAY,
     PSH_R52WK_VISIT_MEAN_DAY,
     PSH_R52WK_CUST_TYPE,
     TRAINING_R52WK_VISIT_MEDIAN_DAY,
     TRAINING_R52WK_VISIT_MEAN_DAY,
     TRAINING_R52WK_CUST_TYPE,
     PSH_OVERNIGHT_R52WK_VISIT_MEDIAN_DAY,
     PSH_OVERNIGHT_R52WK_VISIT_MEAN_DAY,
     PSH_OVERNIGHT_R52WK_CUST_TYPE,
     PSH_DAY_R52WK_VISIT_MEDIAN_DAY,
     PSH_DAY_R52WK_VISIT_MEAN_DAY,
     PSH_DAY_R52WK_CUST_TYPE,
     PSH_ADD_ONS_R52WK_VISIT_MEDIAN_DAY,
     PSH_ADD_ONS_R52WK_VISIT_MEAN_DAY,
     PSH_ADD_ONS_R52WK_CUST_TYPE,
     PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEDIAN_DAY,
     PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEAN_DAY,
     PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE,
     TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEDIAN_DAY,
     TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEAN_DAY,
     TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE,
     TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEDIAN_DAY,
     TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEAN_DAY,
     TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE,
     TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD,
     TRAINING_BEGINNER_SKU_R52WK_SALES_QTY,
     TRAINING_BEGINNER_SKU_R52WK_TXN_CNT,
     TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT,
     TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD,
     TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY,
     TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT,
     TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT,
     TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD,
     TRAINING_ADVANCED_SKU_R52WK_SALES_QTY,
     TRAINING_ADVANCED_SKU_R52WK_TXN_CNT,
     TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT,
     PSH_SUITES_SKU_R52WK_SALES_AMT_USD,
     PSH_SUITES_SKU_R52WK_SALES_QTY,
     PSH_SUITES_SKU_R52WK_TXN_CNT,
     PSH_SUITES_SKU_R52WK_VISIT_CNT,
     PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD,
     PSH_ATRIUM_SKU_R52WK_SALES_QTY,
     PSH_ATRIUM_SKU_R52WK_TXN_CNT,
     PSH_ATRIUM_SKU_R52WK_VISIT_CNT,
     PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY,
     PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT,
     PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT,
     PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT,
     PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY,
     PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT,
     PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT,
     PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD,
     PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY,
     PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT,
     PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT,
     PSH_GROUP_SKU_R52WK_SALES_AMT_USD,
     PSH_GROUP_SKU_R52WK_SALES_QTY,
     PSH_GROUP_SKU_R52WK_TXN_CNT,
     PSH_GROUP_SKU_R52WK_VISIT_CNT,
     PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD,
     PSH_EXIT_BATH_SKU_R52WK_SALES_QTY,
     PSH_EXIT_BATH_SKU_R52WK_TXN_CNT,
     PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT,
     PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT
) AS
WITH TXN_DAY AS (SELECT STU.CUSTOMER_GID, STU.DAY_DT, MAX(CASE WHEN (SSPR.SAP_DEPT_ID = 82) THEN 1 ELSE 0 END) AS PSH_TXN_FLAG, MAX(CASE WHEN (SSPR.SAP_DEPT_ID = 83) THEN 1 ELSE 0 END) AS TRAINING_TXN_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 824) THEN 1 ELSE 0 END) AS PSH_OVERNIGHT_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 822) THEN 1 ELSE 0 END) AS PSH_DAY_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 821) THEN 1 ELSE 0 END) AS PSH_ADDON_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 820) THEN 1 ELSE 0 END) AS PSH_ADDITIONAL_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 833) THEN 1 ELSE 0 END) AS PSH_PRIVATE_FLAG, MAX(CASE WHEN (SSPR.SAP_CLASS_ID = 831) THEN 1 ELSE 0 END) AS PSH_SIX_WEEK_GROUP_FLAG, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS TRAINING_BEGINNER_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS TRAINING_BEGINNER_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Beginner'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Intermediate'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS TRAINING_ADVANCED_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS TRAINING_ADVANCED_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Advanced'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_SUITES_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_SUITES_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_SUITES_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Suites'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_SUITES_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_ATRIUM_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_ATRIUM_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Atrium'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_ATRIUM_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Kitty Cottage'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Platinum Package'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Gold Package'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Silver Package'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_GROUP_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_GROUP_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_GROUP_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Group'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_GROUP_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_EXIT_BATH_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_EXIT_BATH_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Exit Bath'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN (STU.NET_SALES_AMT * STU.EXCH_RATE_PCT) ELSE '0'::NUMERIC END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD, SUM(CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN STU.NET_SALES_QTY ELSE 0 END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN STU.SALES_INSTANCE_ID ELSE NULL::INT8 END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT, COUNT(DISTINCT CASE WHEN (SKU_LIST.SKU_GROUP_NAME = 'Boarded Guest Day Camp'::"VARCHAR") THEN STU.DAY_DT ELSE NULL::DATE END) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT FROM ((ADMIN.SALES_TRANS_SKU STU JOIN ADMIN.SKU_PROFILE_RPT SSPR ON ((STU.PRODUCT_ID = SSPR.PRODUCT_ID))) LEFT JOIN ADMIN.SVCS_PSH_TRAINING_SKU_GROUP SKU_LIST ON ((SKU_LIST.SKU_NBR = SSPR.SKU_NBR))) WHERE (((((STU.TXN_WAS_POST_VOIDED_FLAG = 0) AND (STU.SALES_TYPE_ID <> 10)) AND (STU.CUSTOMER_EID > '0'::NUMERIC)) AND ((SSPR.SAP_DEPT_ID IN (82, 83)) AND (STU.SALES_CUSTOMER_LINK_EXCL_TYPE_ID = 0))) AND (STU.DAY_DT >= (SELECT MIN(CUSTOMER.ADMIN.SALON_FISCAL_MO.PERIOD_START_DT) AS MIN FROM CUSTOMER.ADMIN.SALON_FISCAL_MO))) GROUP BY STU.CUSTOMER_GID, STU.DAY_DT) SELECT X.CUSTOMER_GID, X.PERIOD_END_FISCAL_MO, X.CURRENT_PERIOD_IND, X.PSH_R52WK_VISIT_MEDIAN_DAY, X.PSH_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_R52WK_CUST_TYPE, X.TRAINING_R52WK_VISIT_MEDIAN_DAY, X.TRAINING_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.TRAINING_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.TRAINING_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.TRAINING_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.TRAINING_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TRAINING_R52WK_CUST_TYPE, X.PSH_OVERNIGHT_R52WK_VISIT_MEDIAN_DAY, X.PSH_OVERNIGHT_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_OVERNIGHT_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_OVERNIGHT_R52WK_CUST_TYPE, X.PSH_DAY_R52WK_VISIT_MEDIAN_DAY, X.PSH_DAY_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_DAY_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_DAY_R52WK_CUST_TYPE, X.PSH_ADD_ONS_R52WK_VISIT_MEDIAN_DAY, X.PSH_ADD_ONS_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_ADD_ONS_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_ADD_ONS_R52WK_CUST_TYPE, X.PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEDIAN_DAY, X.PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE, X.TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEDIAN_DAY, X.TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE, X.TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEDIAN_DAY, X.TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEAN_DAY, CASE WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 1) THEN 'E'::"VARCHAR" WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 2) THEN 'N'::"VARCHAR" WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 3) THEN 'R'::"VARCHAR" WHEN (X.TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE = 4) THEN 'U'::"VARCHAR" ELSE NULL::"VARCHAR" END AS TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE, X.TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD, X.TRAINING_BEGINNER_SKU_R52WK_SALES_QTY, X.TRAINING_BEGINNER_SKU_R52WK_TXN_CNT, X.TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT, X.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD, X.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY, X.TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT, X.TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT, X.TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD, X.TRAINING_ADVANCED_SKU_R52WK_SALES_QTY, X.TRAINING_ADVANCED_SKU_R52WK_TXN_CNT, X.TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT, X.PSH_SUITES_SKU_R52WK_SALES_AMT_USD, X.PSH_SUITES_SKU_R52WK_SALES_QTY, X.PSH_SUITES_SKU_R52WK_TXN_CNT, X.PSH_SUITES_SKU_R52WK_VISIT_CNT, X.PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD, X.PSH_ATRIUM_SKU_R52WK_SALES_QTY, X.PSH_ATRIUM_SKU_R52WK_TXN_CNT, X.PSH_ATRIUM_SKU_R52WK_VISIT_CNT, X.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY, X.PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT, X.PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT, X.PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT, X.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY, X.PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT, X.PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT, X.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD, X.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY, X.PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT, X.PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT, X.PSH_GROUP_SKU_R52WK_SALES_AMT_USD, X.PSH_GROUP_SKU_R52WK_SALES_QTY, X.PSH_GROUP_SKU_R52WK_TXN_CNT, X.PSH_GROUP_SKU_R52WK_VISIT_CNT, X.PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD, X.PSH_EXIT_BATH_SKU_R52WK_SALES_QTY, X.PSH_EXIT_BATH_SKU_R52WK_TXN_CNT, X.PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT, X.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT FROM (SELECT TXN.CUSTOMER_GID, SFM.PERIOD_END_FISCAL_MO, SFM.CURRENT_PERIOD_IND, MEDIAN(CASE WHEN (PSH.PSH_DAYS_FROM_LAST_VISIT <= 365) THEN PSH.PSH_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (PSH.PSH_DAYS_FROM_LAST_VISIT <= 365) THEN PSH.PSH_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (PSH.PSH_DAYS_FROM_LAST_VISIT <= 365) THEN PSH.PSH_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_R52WK_VISIT_MEAN_DAY, MAX(CASE WHEN ((TXN.DAY_DT >= SFM.PERIOD_START_DT) AND (TXN.DAY_DT <= SFM.PERIOD_END_DT)) THEN PSH.PSH_CUST_TYPE ELSE NULL::INT4 END) AS PSH_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (TRAINING.TRAINING_DAYS_FROM_LAST_VISIT <= 365) THEN TRAINING.TRAINING_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS TRAINING_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (TRAINING.TRAINING_DAYS_FROM_LAST_VISIT <= 365) THEN TRAINING.TRAINING_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (TRAINING.TRAINING_DAYS_FROM_LAST_VISIT <= 365) THEN TRAINING.TRAINING_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS TRAINING_R52WK_VISIT_MEAN_DAY, MAX(TRAINING.TRAINING_CUST_TYPE) AS TRAINING_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT <= 365) THEN OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_OVERNIGHT_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT <= 365) THEN OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT <= 365) THEN OVERNIGHT.OVERNIGHT_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_OVERNIGHT_R52WK_VISIT_MEAN_DAY, MAX(OVERNIGHT.OVERNIGHT_CUST_TYPE) AS PSH_OVERNIGHT_R52WK_CUST_TYPE, MEDIAN(CASE WHEN ("DAY".DAY_DAYS_FROM_LAST_VISIT <= 365) THEN "DAY".DAY_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_DAY_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN ("DAY".DAY_DAYS_FROM_LAST_VISIT <= 365) THEN "DAY".DAY_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN ("DAY".DAY_DAYS_FROM_LAST_VISIT <= 365) THEN "DAY".DAY_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_DAY_R52WK_VISIT_MEAN_DAY, MAX("DAY".DAY_CUST_TYPE) AS PSH_DAY_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (ADDONS.ADDONS_DAYS_FROM_LAST_VISIT <= 365) THEN ADDONS.ADDONS_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_ADD_ONS_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (ADDONS.ADDONS_DAYS_FROM_LAST_VISIT <= 365) THEN ADDONS.ADDONS_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (ADDONS.ADDONS_DAYS_FROM_LAST_VISIT <= 365) THEN ADDONS.ADDONS_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_ADD_ONS_R52WK_VISIT_MEAN_DAY, MAX(ADDONS.ADDONS_CUST_TYPE) AS PSH_ADD_ONS_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT <= 365) THEN ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT <= 365) THEN ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT <= 365) THEN ADDITIONAL.ADDITIONAL_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS PSH_ADDITIONAL_SERVICES_R52WK_VISIT_MEAN_DAY, MAX(ADDITIONAL.ADDITIONAL_CUST_TYPE) AS PSH_ADDITIONAL_SERVICES_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT <= 365) THEN PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT <= 365) THEN PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT <= 365) THEN PRIVATE.PRIVATE_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS TRAINING_PRIVATE_CLASSES_R52WK_VISIT_MEAN_DAY, MAX(PRIVATE.PRIVATE_CUST_TYPE) AS TRAINING_PRIVATE_CLASSES_R52WK_CUST_TYPE, MEDIAN(CASE WHEN (SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT <= 365) THEN SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) AS TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEDIAN_DAY, (SUM(CASE WHEN (SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT <= 365) THEN SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END) / "NUMERIC"(COUNT(CASE WHEN (SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT <= 365) THEN SIX_WEEK.SIX_WEEK_DAYS_FROM_LAST_VISIT ELSE NULL::INT8 END))) AS TRAINING_6_WK_GRP_CLASS_R52WK_VISIT_MEAN_DAY, MAX(SIX_WEEK.SIX_WEEK_CUST_TYPE) AS TRAINING_6_WK_GRP_CLASS_R52WK_CUST_TYPE, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD) AS TRAINING_BEGINNER_SKU_R52WK_SALES_AMT_USD, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_SALES_QTY) AS TRAINING_BEGINNER_SKU_R52WK_SALES_QTY, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_TXN_CNT) AS TRAINING_BEGINNER_SKU_R52WK_TXN_CNT, SUM(TXN.TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT) AS TRAINING_BEGINNER_SKU_R52WK_VISIT_CNT, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY) AS TRAINING_INTERMEDIATE_SKU_R52WK_SALES_QTY, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT) AS TRAINING_INTERMEDIATE_SKU_R52WK_TXN_CNT, SUM(TXN.TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT) AS TRAINING_INTERMEDIATE_SKU_R52WK_VISIT_CNT, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD) AS TRAINING_ADVANCED_SKU_R52WK_SALES_AMT_USD, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_SALES_QTY) AS TRAINING_ADVANCED_SKU_R52WK_SALES_QTY, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_TXN_CNT) AS TRAINING_ADVANCED_SKU_R52WK_TXN_CNT, SUM(TXN.TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT) AS TRAINING_ADVANCED_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_SUITES_SKU_R52WK_SALES_AMT_USD) AS PSH_SUITES_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_SUITES_SKU_R52WK_SALES_QTY) AS PSH_SUITES_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_SUITES_SKU_R52WK_TXN_CNT) AS PSH_SUITES_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_SUITES_SKU_R52WK_VISIT_CNT) AS PSH_SUITES_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD) AS PSH_ATRIUM_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_ATRIUM_SKU_R52WK_SALES_QTY) AS PSH_ATRIUM_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_ATRIUM_SKU_R52WK_TXN_CNT) AS PSH_ATRIUM_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_ATRIUM_SKU_R52WK_VISIT_CNT) AS PSH_ATRIUM_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY) AS PSH_KITTY_COTTAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT) AS PSH_KITTY_COTTAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT) AS PSH_KITTY_COTTAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT) AS PSH_PLATINUM_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY) AS PSH_GOLD_PACKAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT) AS PSH_GOLD_PACKAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT) AS PSH_GOLD_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY) AS PSH_SILVER_PACKAGE_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT) AS PSH_SILVER_PACKAGE_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT) AS PSH_SILVER_PACKAGE_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_GROUP_SKU_R52WK_SALES_AMT_USD) AS PSH_GROUP_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_GROUP_SKU_R52WK_SALES_QTY) AS PSH_GROUP_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_GROUP_SKU_R52WK_TXN_CNT) AS PSH_GROUP_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_GROUP_SKU_R52WK_VISIT_CNT) AS PSH_GROUP_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD) AS PSH_EXIT_BATH_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_SALES_QTY) AS PSH_EXIT_BATH_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_TXN_CNT) AS PSH_EXIT_BATH_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT) AS PSH_EXIT_BATH_SKU_R52WK_VISIT_CNT, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_AMT_USD, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_SALES_QTY, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_TXN_CNT, SUM(TXN.PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT) AS PSH_BOARDED_GUEST_DAY_CAMP_SKU_R52WK_VISIT_CNT FROM (((((((((TXN_DAY TXN LEFT JOIN (SELECT TXN_DAY.CUSTOMER_GID, TXN_DAY.DAY_DT, DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_GID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) AS PSH_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_GID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_GID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((TXN_DAY.DAY_DT - LAG(TXN_DAY.DAY_DT) OVER (PARTITION BY TXN_DAY.CUSTOMER_GID  ORDER BY TXN_DAY.DAY_DT )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS PSH_CUST_TYPE FROM  TXN_DAY WHERE (TXN_DAY.PSH_TXN_FLAG = 1)) PSH ON (((PSH.CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = PSH.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_GID#0XF5222FFC" AS CUSTOMER_GID, "*RSS*"."#DAY_DT#0XF52232C4" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF522242C" - LAG("*RSS*"."#DAY_DT#0XF52232C4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF5222FFC"  ORDER BY "*RSS*"."#DAY_DT#0XF52232C4" )))::ABSTIME) AS TRAINING_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF52232C4" - LAG("*RSS*"."#DAY_DT#0XF52232C4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF5222FFC"  ORDER BY "*RSS*"."#DAY_DT#0XF52232C4" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF52232C4" - LAG("*RSS*"."#DAY_DT#0XF52232C4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF5222FFC"  ORDER BY "*RSS*"."#DAY_DT#0XF52232C4" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF52232C4" - LAG("*RSS*"."#DAY_DT#0XF52232C4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF5222FFC"  ORDER BY "*RSS*"."#DAY_DT#0XF52232C4" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS TRAINING_CUST_TYPE FROM (SELECT STU.CUSTOMER_GID AS "#CUSTOMER_GID#0XF5222FFC", STU.DAY_DT AS "#DAY_DT#0XF52232C4", STU.DAY_DT AS "#?COLUMN?#0XF522242C" FROM TXN_DAY STU WHERE (STU.TRAINING_TXN_FLAG = 1) GROUP BY STU.CUSTOMER_GID, STU.DAY_DT) "*RSS*") TRAINING ON (((TRAINING.CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = TRAINING.DAY_DT)))) LEFT JOIN (SELECT STU.CUSTOMER_GID, STU.DAY_DT, DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_GID  ORDER BY STU.DAY_DT )))::ABSTIME) AS OVERNIGHT_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_GID  ORDER BY STU.DAY_DT )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_GID  ORDER BY STU.DAY_DT )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", ((STU.DAY_DT - LAG(STU.DAY_DT) OVER (PARTITION BY STU.CUSTOMER_GID  ORDER BY STU.DAY_DT )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS OVERNIGHT_CUST_TYPE FROM TXN_DAY STU WHERE (STU.PSH_OVERNIGHT_FLAG = 1)) OVERNIGHT ON (((OVERNIGHT.CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = OVERNIGHT.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_GID#0XF4DEAB5C" AS CUSTOMER_GID, "*RSS*"."#DAY_DT#0XF4DEAE24" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF4DE9F8C" - LAG("*RSS*"."#DAY_DT#0XF4DEAE24") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4DEAB5C"  ORDER BY "*RSS*"."#DAY_DT#0XF4DEAE24" )))::ABSTIME) AS DAY_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4DEAE24" - LAG("*RSS*"."#DAY_DT#0XF4DEAE24") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4DEAB5C"  ORDER BY "*RSS*"."#DAY_DT#0XF4DEAE24" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4DEAE24" - LAG("*RSS*"."#DAY_DT#0XF4DEAE24") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4DEAB5C"  ORDER BY "*RSS*"."#DAY_DT#0XF4DEAE24" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4DEAE24" - LAG("*RSS*"."#DAY_DT#0XF4DEAE24") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4DEAB5C"  ORDER BY "*RSS*"."#DAY_DT#0XF4DEAE24" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS DAY_CUST_TYPE FROM (SELECT STU.CUSTOMER_GID AS "#CUSTOMER_GID#0XF4DEAB5C", STU.DAY_DT AS "#DAY_DT#0XF4DEAE24", STU.DAY_DT AS "#?COLUMN?#0XF4DE9F8C" FROM TXN_DAY STU WHERE (STU.PSH_DAY_FLAG = 1) GROUP BY STU.CUSTOMER_GID, STU.DAY_DT) "*RSS*") "DAY" ON ((("DAY".CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = "DAY".DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_GID#0XF4F1BAC8" AS CUSTOMER_GID, "*RSS*"."#DAY_DT#0XF4F1BD90" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF4F1AEF8" - LAG("*RSS*"."#DAY_DT#0XF4F1BD90") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4F1BAC8"  ORDER BY "*RSS*"."#DAY_DT#0XF4F1BD90" )))::ABSTIME) AS ADDITIONAL_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4F1BD90" - LAG("*RSS*"."#DAY_DT#0XF4F1BD90") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4F1BAC8"  ORDER BY "*RSS*"."#DAY_DT#0XF4F1BD90" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4F1BD90" - LAG("*RSS*"."#DAY_DT#0XF4F1BD90") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4F1BAC8"  ORDER BY "*RSS*"."#DAY_DT#0XF4F1BD90" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF4F1BD90" - LAG("*RSS*"."#DAY_DT#0XF4F1BD90") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF4F1BAC8"  ORDER BY "*RSS*"."#DAY_DT#0XF4F1BD90" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS ADDITIONAL_CUST_TYPE FROM (SELECT STU.CUSTOMER_GID AS "#CUSTOMER_GID#0XF4F1BAC8", STU.DAY_DT AS "#DAY_DT#0XF4F1BD90", STU.DAY_DT AS "#?COLUMN?#0XF4F1AEF8" FROM TXN_DAY STU WHERE (STU.PSH_ADDITIONAL_FLAG = 1) GROUP BY STU.CUSTOMER_GID, STU.DAY_DT) "*RSS*") ADDITIONAL ON (((ADDITIONAL.CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = ADDITIONAL.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_GID#0XF504CE54" AS CUSTOMER_GID, "*RSS*"."#DAY_DT#0XF504D11C" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF504C284" - LAG("*RSS*"."#DAY_DT#0XF504D11C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF504CE54"  ORDER BY "*RSS*"."#DAY_DT#0XF504D11C" )))::ABSTIME) AS ADDONS_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF504D11C" - LAG("*RSS*"."#DAY_DT#0XF504D11C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF504CE54"  ORDER BY "*RSS*"."#DAY_DT#0XF504D11C" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF504D11C" - LAG("*RSS*"."#DAY_DT#0XF504D11C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF504CE54"  ORDER BY "*RSS*"."#DAY_DT#0XF504D11C" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF504D11C" - LAG("*RSS*"."#DAY_DT#0XF504D11C") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF504CE54"  ORDER BY "*RSS*"."#DAY_DT#0XF504D11C" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS ADDONS_CUST_TYPE FROM (SELECT STU.CUSTOMER_GID AS "#CUSTOMER_GID#0XF504CE54", STU.DAY_DT AS "#DAY_DT#0XF504D11C", STU.DAY_DT AS "#?COLUMN?#0XF504C284" FROM TXN_DAY STU WHERE (STU.PSH_ADDON_FLAG = 1) GROUP BY STU.CUSTOMER_GID, STU.DAY_DT) "*RSS*") ADDONS ON (((ADDONS.CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = ADDONS.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_GID#0XF517E5B0" AS CUSTOMER_GID, "*RSS*"."#DAY_DT#0XF517E878" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF517D9E0" - LAG("*RSS*"."#DAY_DT#0XF517E878") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF517E5B0"  ORDER BY "*RSS*"."#DAY_DT#0XF517E878" )))::ABSTIME) AS PRIVATE_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF517E878" - LAG("*RSS*"."#DAY_DT#0XF517E878") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF517E5B0"  ORDER BY "*RSS*"."#DAY_DT#0XF517E878" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF517E878" - LAG("*RSS*"."#DAY_DT#0XF517E878") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF517E5B0"  ORDER BY "*RSS*"."#DAY_DT#0XF517E878" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF517E878" - LAG("*RSS*"."#DAY_DT#0XF517E878") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF517E5B0"  ORDER BY "*RSS*"."#DAY_DT#0XF517E878" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS PRIVATE_CUST_TYPE FROM (SELECT STU.CUSTOMER_GID AS "#CUSTOMER_GID#0XF517E5B0", STU.DAY_DT AS "#DAY_DT#0XF517E878", STU.DAY_DT AS "#?COLUMN?#0XF517D9E0" FROM TXN_DAY STU WHERE (STU.PSH_PRIVATE_FLAG = 1) GROUP BY STU.CUSTOMER_GID, STU.DAY_DT) "*RSS*") PRIVATE ON (((PRIVATE.CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = PRIVATE.DAY_DT)))) LEFT JOIN (SELECT "*RSS*"."#CUSTOMER_GID#0XF46AF12C" AS CUSTOMER_GID, "*RSS*"."#DAY_DT#0XF46AF3F4" AS DAY_DT, DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#?COLUMN?#0XF46AE55C" - LAG("*RSS*"."#DAY_DT#0XF46AF3F4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF46AF12C"  ORDER BY "*RSS*"."#DAY_DT#0XF46AF3F4" )))::ABSTIME) AS SIX_WEEK_DAYS_FROM_LAST_VISIT, CASE WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF46AF3F4" - LAG("*RSS*"."#DAY_DT#0XF46AF3F4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF46AF12C"  ORDER BY "*RSS*"."#DAY_DT#0XF46AF3F4" )))::ABSTIME) ISNULL) THEN 2 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF46AF3F4" - LAG("*RSS*"."#DAY_DT#0XF46AF3F4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF46AF12C"  ORDER BY "*RSS*"."#DAY_DT#0XF46AF3F4" )))::ABSTIME) <= 365) THEN 1 WHEN (DATE_PART('EPOCH'::"VARCHAR", (("*RSS*"."#DAY_DT#0XF46AF3F4" - LAG("*RSS*"."#DAY_DT#0XF46AF3F4") OVER (PARTITION BY "*RSS*"."#CUSTOMER_GID#0XF46AF12C"  ORDER BY "*RSS*"."#DAY_DT#0XF46AF3F4" )))::ABSTIME) > 365) THEN 3 ELSE NULL::INT4 END AS SIX_WEEK_CUST_TYPE FROM (SELECT STU.CUSTOMER_GID AS "#CUSTOMER_GID#0XF46AF12C", STU.DAY_DT AS "#DAY_DT#0XF46AF3F4", STU.DAY_DT AS "#?COLUMN?#0XF46AE55C" FROM TXN_DAY STU WHERE (STU.PSH_SIX_WEEK_GROUP_FLAG = 1) GROUP BY STU.CUSTOMER_GID, STU.DAY_DT) "*RSS*") SIX_WEEK ON (((SIX_WEEK.CUSTOMER_GID = TXN.CUSTOMER_GID) AND (TXN.DAY_DT = SIX_WEEK.DAY_DT)))) JOIN CUSTOMER.ADMIN.SALON_FISCAL_MO SFM ON (((TXN.DAY_DT >= SFM.PERIOD_START_DT) AND (TXN.DAY_DT <= SFM.PERIOD_END_DT)))) GROUP BY TXN.CUSTOMER_GID, SFM.PERIOD_END_FISCAL_MO, SFM.CURRENT_PERIOD_IND) X;

\echo
\echo *****  Creating view:  "PM_V3QVBAVO42JFGCKVIVIY5VZAPEI"

CREATE or replace VIEW  PM_V3QVBAVO42JFGCKVIVIY5VZAPEI
(
     DAY_DT,
     LOCATION_ID,
     SKU_NBR,
     STORE_NBR,
     NET_SALES_AMT,
     NET_SALES_QTY,
     SALES_COST,
     RETURN_COST,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT
) AS
SELECT S.DAY_DT, S.LOCATION_ID, S.SKU_NBR, S.STORE_NBR, S.NET_SALES_AMT, S.NET_SALES_QTY, S.SALES_COST, S.RETURN_COST, S.SPECIAL_SALES_AMT, S.SPECIAL_SALES_QTY, S.EXCH_RATE_PCT, S.UPDATE_DT FROM ADMIN.SALES_DAY_SKU_STORE_RPT S, (SELECT DISTINCT SALES_DAY_SKU_STORE_RPT.DAY_DT, SALES_DAY_SKU_STORE_RPT.PRODUCT_ID, SALES_DAY_SKU_STORE_RPT.LOCATION_ID FROM ADMIN.SALES_DAY_SKU_STORE_RPT WHERE (DATE(SALES_DAY_SKU_STORE_RPT.UPDATE_DT) > DATE('2021-04-19 00:00:00'::"VARCHAR"))) Z WHERE (((S.DAY_DT = Z.DAY_DT) AND (S.PRODUCT_ID = Z.PRODUCT_ID)) AND (S.LOCATION_ID = Z.LOCATION_ID));

\echo
\echo *****  Creating view:  "PM_VRSJC7SYW4T62HDRZNFDK3373BQ"

CREATE or replace VIEW  PM_VRSJC7SYW4T62HDRZNFDK3373BQ
(
     DAY_DT,
     LOCATION_ID,
     SKU_NBR,
     STORE_NBR,
     NET_SALES_AMT,
     NET_SALES_QTY,
     SALES_COST,
     RETURN_COST,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     EXCH_RATE_PCT,
     UPDATE_DT
) AS
SELECT S.DAY_DT, S.LOCATION_ID, S.SKU_NBR, S.STORE_NBR, S.NET_SALES_AMT, S.NET_SALES_QTY, S.SALES_COST, S.RETURN_COST, S.SPECIAL_SALES_AMT, S.SPECIAL_SALES_QTY, S.EXCH_RATE_PCT, S.UPDATE_DT FROM ADMIN.SALES_DAY_SKU_STORE_RPT S, (SELECT DISTINCT SALES_DAY_SKU_STORE_RPT.DAY_DT, SALES_DAY_SKU_STORE_RPT.PRODUCT_ID, SALES_DAY_SKU_STORE_RPT.LOCATION_ID FROM ADMIN.SALES_DAY_SKU_STORE_RPT WHERE (DATE(SALES_DAY_SKU_STORE_RPT.UPDATE_DT) > DATE('2021-04-19 00:00:00'::"VARCHAR"))) Z WHERE (((S.DAY_DT = Z.DAY_DT) AND (S.PRODUCT_ID = Z.PRODUCT_ID)) AND (S.LOCATION_ID = Z.LOCATION_ID));

\echo
\echo *****  Creating view:  "PM_VVT7Y4EW5QM7JYUVUGNOYSAHGT4"

CREATE or replace VIEW  PM_VVT7Y4EW5QM7JYUVUGNOYSAHGT4
(
     LOCATION_ID,
     STORE_NBR
) AS
SELECT SITE_PROFILE_RPT.LOCATION_ID, SITE_PROFILE_RPT.STORE_NBR FROM ADMIN.SITE_PROFILE_RPT WHERE (SITE_PROFILE_RPT.STORE_TYPE_ID <> '100'::BPCHAR);

\echo
\echo *****  Creating view:  "INCIDENT_CLAIMS_INVESTIGATIONS_VW"

CREATE or replace VIEW  INCIDENT_CLAIMS_INVESTIGATIONS_VW
(
     SRC_CD,
     CLAIM_NBR,
     LOCATION_ID,
     DAY_DT,
     INCIDENT_TSTMP,
     CLAIM_OPEN_DT,
     REPORTED_TO_MANAGER_DT,
     CLAIM_CLOSE_DT,
     CLOSED_ISSUE_DT,
     CASE_RECEIVED_TSTMP,
     ACTION_RESPONSE_DUE_TSTMP,
     ACTION_RESPONDED_TSTMP,
     INCIDENT_TYPE,
     CLAIM_TYPE_RAW,
     CLAIM_STATUS,
     CLAIM_SUB_STATUS,
     STORE_DC_AREA,
     SPECIFIC_STORE_AREA,
     CLAIM_INCIDENT_DESC,
     GENERAL_CAUSE,
     DETAIL_CAUSE,
     CAUSE_RAW,
     GENERAL_NATURE,
     DETAIL_NATURE,
     GENERAL_PART,
     DETAIL_PART,
     DETAIL_PART_POSITION,
     MAJOR_COVERAGE,
     CLAIMANT_NAME,
     EMPLOYEE_ID,
     RESPONSIBLE_EMPLOYEE_ID,
     RESPONSIBLE_EMPLOYEE_NAME,
     EMPLOYEE_HIRED_DT,
     EMPLOYEE_TENURE,
     EMPLOYEE_SHIFT_START_TSTMP,
     EMPLOYEE_DEPT,
     EMPLOYEE_JOB_TITLE,
     ACADEMY_TRAINED,
     WORK_RELATED_ACCIDENT_FLAG,
     CLAIMANT_ACTIVITY_AT_INCIDENT,
     HUMAN_INJURY_ESCALATION,
     LOST_TIME_FLAG,
     SEEK_TREATMENT_FLAG,
     CALLED_911_FLAG,
     EMPLOYEE_GO_TO_HOSPITAL_FLAG,
     EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG,
     EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG,
     REPORTED_TO_TPA_DT,
     TPA_CARRIER,
     TPA_CLAIM_NBR,
     ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG,
     ANIMAL_INCIDENT_TYPE,
     ANIMAL_CARE_CUSTODY,
     ADOPTION_GROUP,
     PET_BREED_TYPE,
     PET_BREED,
     NET_INCURRED_AMT,
     SCORECARD_EXCEPTION_FLAG,
     PET_INCIDENT_TYPE,
     PET_INCIDENT_TYPE_REPORTED,
     PET_INCIDENT_REASON_GROUP,
     PET_INCIDENT_REASON,
     PET_INCIDENT_REASON_LEGACY_CD,
     PET_INCIDENT_REASON_LEGACY,
     PET_CAUSE_LEGACY,
     PET_SYMPTOMS,
     NOTIFICATION_SOURCE,
     BRAND_RISK_DEPT,
     PET_ESCALATION_FACTORS,
     DAY_CAMP_CAPACITY_CNT,
     PET_IN_PLAYTIME_CNT,
     PET_IN_TRAINING_CLASS_CNT,
     INCIDENT_DURING_PETSMART_ACADEMY_FLAG,
     PET_POLICY_VIOLATION,
     OTHER_POLICY_VIOLATION,
     PET_SERVICE_PERFORMED,
     GROOM_SERVICE_DURING_PET_INCIDENT,
     HOTEL_SERVICE_DURING_PET_INCIDENT,
     PET_TAKEN_TO_VET,
     INJURY_CONFIRMED_BY_VET_FLAG,
     FULL_RECOVERY_EXPECTED_FLAG,
     MATTED_PET_RELEASE_FLAG,
     PET_SHAVE_AUTH_SIGNED_FLAG,
     PET_SERVICE_CARD_SIGNED_FLAG,
     HEALTH_CHART_COMPLETED_DURING_STAY_FLAG,
     SAFETY_CERTIFIED_DT,
     PET_SAFETY_EQUIPMENT_USED,
     PET_SAFETY_PRIORITY,
     PET_SAFETY_GENERAL_CAUSE,
     PET_SAFETY_DETAIL_CAUSE,
     PET_SAFETY_GENERAL_NATURE,
     PET_SAFETY_DETAIL_NATURE,
     PET_SAFETY_GENERAL_PART,
     PET_SAFETY_DETAIL_PART,
     PET_GENDER,
     PET_AGE,
     PET_WEIGHT,
     PET_NEUTERED_SPAYED_FLAG,
     PET_ORIGIN,
     PET_PRODUCT_UPC_ID,
     PET_PRODUCT_UPC_LONG_CD,
     PET_PRODUCT_LOT_CD,
     PET_PRODUCT_SKU_SHORT_CD,
     PET_PRODUCT_PURCH_DT,
     PET_PRODUCT_BEST_BY_DT,
     PET_EXPENSE_TYPE,
     BANFIELD_AMT,
     P_CARD_AMT,
     CASH_AMT,
     CHECK_AMT,
     PET_PARENT_VET_EXP_AMT,
     GIFT_CARD_AMT,
     FLOWERS_AMT,
     COMPED_PRODUCTS_AMT,
     COMPED_SERVICES_AMT,
     OTHER_SETTLEMENT_AMT,
     PS_DEPT_CD,
     PET_INCIDENT_CASE_NBR,
     INVESTIGATION_INCIDENT_DESC,
     EMPLOYEE_SHIFT_END_TSTMP,
     EMPLOYEE_JOB_TITLE_OLD,
     EMPLOYEE_TENURE_IN_CURRENT_ROLE,
     LEADER_COMPLETING_INVESTIGATION,
     LEADER_JOB_TITLE,
     SERVICES_LEADER_PRESENT_FLAG,
     SERVICES_LEADER_NAME,
     SERVICES_LEADER_SIGN_OFF_FLAG,
     SERVICES_LEADER_SIGN_OFF_DT,
     STORE_LEADER_SIGN_OFF_FLAG,
     STORE_LEADER_SIGN_OFF_DT,
     SIMILAR_INCIDENTS_LAST_12_MO_FLAG,
     PRIOR_PET_INCIDENTS_FLAG,
     INVESTIGATION_EMPLOYEE_GO_TO_HOSPITAL_FLAG,
     HOP_COMPLETED_BY,
     EMPLOYEE_RETRAINING_DT,
     TEAM_RETRAINING_DT,
     UNSAFE_CONDITION_ACT_PRIOR_TO_INCIDENT_FLAG,
     UNSAFE_CONDITION_CONTRIBUTED_FLAG,
     UNSAFE_CONDITION_DESC,
     UNSAFE_ACT_CONTRIBUTED_FLAG,
     UNSAFE_ACT_DESC,
     DEVIATION_FROM_CURRENT_POLICY_PROCEDURE_FLAG,
     DEVIATION_DESC,
     PERSONAL_PROTECTIVE_EQUIP_REQUIRED_FLAG,
     PERSONAL_PROTECTIVE_EQUIP_WORN_FLAG,
     EQUIPMENT_DESC,
     EQUIPMENT_FUNCTIONING_PROPERLY_FLAG,
     EQUIPMENT_FUNCTIONING_IMPROPERLY_DESC,
     MACHINE_TOOL_SUBSTANCE_OBJECT_INVOLVED_FLAG,
     MACHINE_TOOL_SUBSTANCE_OBJECT_DESC,
     ADDITIONAL_CONTRIBUTING_CONDITIONS,
     PREVENTION_STRATEGY,
     LEADERSHIP_SUPPORT_STRATEGY,
     WITNESS_1_FIRST_NAME,
     WITNESS_1_JOB_TITLE,
     WITNESS_1_LAST_NAME,
     WITNESS_2_FIRST_NAME,
     WITNESS_2_JOB_TITLE,
     WITNESS_2_LAST_NAME,
     WITNESS_3_FIRST_NAME,
     WITNESS_3_JOB_TITLE,
     WITNESS_3_LAST_NAME,
     ACTION_PLAN_1_DESC,
     ACTION_PLAN_1_OWNER,
     ACTION_PLAN_1_OWNER_JOB_TITLE,
     ACTION_PLAN_1_OWNER_PHONE_NBR,
     ACTION_PLAN_1_DEADLINE_DT,
     ACTION_PLAN_1_COMPLETION_DT,
     ACTION_PLAN_1_STATUS,
     ACTION_PLAN_2_DESC,
     ACTION_PLAN_2_OWNER,
     ACTION_PLAN_2_OWNER_JOB_TITLE,
     ACTION_PLAN_2_OWNER_PHONE_NBR,
     ACTION_PLAN_2_DEADLINE_DT,
     ACTION_PLAN_2_COMPLETION_DT,
     ACTION_PLAN_2_STATUS,
     ACTION_PLAN_3_DESC,
     ACTION_PLAN_3_OWNER,
     ACTION_PLAN_3_OWNER_JOB_TITLE,
     ACTION_PLAN_3_OWNER_PHONE_NBR,
     ACTION_PLAN_3_DEADLINE_DT,
     ACTION_PLAN_3_COMPLETION_DT,
     ACTION_PLAN_3_STATUS,
     WC_CA_CASE_MANAGER,
     WC_CA_CLASSIFICATION
) AS
(SELECT C.SRC_CD, C.CLAIM_NBR, C.LOCATION_ID, DATE(C.INCIDENT_TSTMP) AS DAY_DT, C.INCIDENT_TSTMP, "TIMESTAMP"(C.CLAIM_OPEN_DT) AS CLAIM_OPEN_DT, C.REPORTED_TO_MANAGER_DT, C.CLAIM_CLOSE_DT, C.CLOSED_ISSUE_DT, C.CASE_RECEIVED_TSTMP, C.ACTION_RESPONSE_DUE_TSTMP, C.ACTION_RESPONDED_TSTMP, C.INCIDENT_TYPE, C.CLAIM_TYPE_RAW, C.CLAIM_STATUS, C.CLAIM_SUB_STATUS, C.STORE_DC_AREA, C.SPECIFIC_STORE_AREA, (SUBSTR(C.CLAIM_INCIDENT_DESC, 1, 15000))::VARCHAR(15000) AS CLAIM_INCIDENT_DESC, C.GENERAL_CAUSE, C.DETAIL_CAUSE, C.CAUSE_RAW, C.GENERAL_NATURE, C.DETAIL_NATURE, C.GENERAL_PART, C.DETAIL_PART, C.DETAIL_PART_POSITION, C.MAJOR_COVERAGE, C.CLAIMANT_NAME, C.EMPLOYEE_ID, C.RESPONSIBLE_EMPLOYEE_ID, C.RESPONSIBLE_EMPLOYEE_NAME, C.EMPLOYEE_HIRED_DT, C.EMPLOYEE_TENURE, C.EMPLOYEE_SHIFT_START_TSTMP, C.EMPLOYEE_DEPT, C.EMPLOYEE_JOB_TITLE, C.ACADEMY_TRAINED, C.WORK_RELATED_ACCIDENT_FLAG, C.CLAIMANT_ACTIVITY_AT_INCIDENT, C.HUMAN_INJURY_ESCALATION, C.LOST_TIME_FLAG, C.SEEK_TREATMENT_FLAG, C.CALLED_911_FLAG, C.EMPLOYEE_GO_TO_HOSPITAL_FLAG, C.EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG, C.EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG, "TIMESTAMP"(C.REPORTED_TO_TPA_DT) AS REPORTED_TO_TPA_DT, C.TPA_CARRIER, C.TPA_CLAIM_NBR, C.ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG, C.ANIMAL_INCIDENT_TYPE, C.ANIMAL_CARE_CUSTODY, C.ADOPTION_GROUP, C.PET_BREED_TYPE, C.PET_BREED, C.NET_INCURRED_AMT, C.SCORECARD_EXCEPTION_FLAG, C.PET_INCIDENT_TYPE, C.PET_INCIDENT_TYPE_REPORTED, C.PET_INCIDENT_REASON_GROUP, C.PET_INCIDENT_REASON, C.PET_INCIDENT_REASON_LEGACY_CD, C.PET_INCIDENT_REASON_LEGACY, C.PET_CAUSE_LEGACY, C.PET_SYMPTOMS, C.NOTIFICATION_SOURCE, CASE WHEN (C.BRAND_RISK_DEPT NOTNULL) THEN C.BRAND_RISK_DEPT WHEN (CASE WHEN (C.PET_INCIDENT_TYPE_REPORTED = 'Core'::"VARCHAR") THEN 'Core/Other'::"VARCHAR" WHEN (C.PET_INCIDENT_TYPE_REPORTED = 'PetsHotel'::"VARCHAR") THEN 'PetsHotel (non-Day Camp)'::"VARCHAR" ELSE C.PET_INCIDENT_TYPE_REPORTED END NOTNULL) THEN CASE WHEN (C.PET_INCIDENT_TYPE_REPORTED = 'Core'::"VARCHAR") THEN 'Core/Other'::"VARCHAR" WHEN (C.PET_INCIDENT_TYPE_REPORTED = 'PetsHotel'::"VARCHAR") THEN 'PetsHotel (non-Day Camp)'::"VARCHAR" ELSE C.PET_INCIDENT_TYPE_REPORTED END ELSE NULL::"VARCHAR" END AS BRAND_RISK_DEPT, C.PET_ESCALATION_FACTORS, C.DAY_CAMP_CAPACITY_CNT, C.PET_IN_PLAYTIME_CNT, C.PET_IN_TRAINING_CLASS_CNT, C.INCIDENT_DURING_PETSMART_ACADEMY_FLAG, C.PET_POLICY_VIOLATION, C.OTHER_POLICY_VIOLATION, C.PET_SERVICE_PERFORMED, C.GROOM_SERVICE_DURING_PET_INCIDENT, C.HOTEL_SERVICE_DURING_PET_INCIDENT, C.PET_TAKEN_TO_VET, C.INJURY_CONFIRMED_BY_VET_FLAG, C.FULL_RECOVERY_EXPECTED_FLAG, C.MATTED_PET_RELEASE_FLAG, C.PET_SHAVE_AUTH_SIGNED_FLAG, C.PET_SERVICE_CARD_SIGNED_FLAG, C.HEALTH_CHART_COMPLETED_DURING_STAY_FLAG, C.SAFETY_CERTIFIED_DT, C.PET_SAFETY_EQUIPMENT_USED, C.PET_SAFETY_PRIORITY, C.PET_SAFETY_GENERAL_CAUSE, C.PET_SAFETY_DETAIL_CAUSE, C.PET_SAFETY_GENERAL_NATURE, C.PET_SAFETY_DETAIL_NATURE, C.PET_SAFETY_GENERAL_PART, C.PET_SAFETY_DETAIL_PART, C.PET_GENDER, C.PET_AGE, C.PET_WEIGHT, C.PET_NEUTERED_SPAYED_FLAG, C.PET_ORIGIN, C.PET_PRODUCT_UPC_ID, C.PET_PRODUCT_UPC_LONG_CD, C.PET_PRODUCT_LOT_CD, C.PET_PRODUCT_SKU_SHORT_CD, C.PET_PRODUCT_PURCH_DT, C.PET_PRODUCT_BEST_BY_DT, C.PET_EXPENSE_TYPE, C.BANFIELD_AMT, C.P_CARD_AMT, C.CASH_AMT, C.CHECK_AMT, C.PET_PARENT_VET_EXP_AMT, C.GIFT_CARD_AMT, C.FLOWERS_AMT, C.COMPED_PRODUCTS_AMT, C.COMPED_SERVICES_AMT, C.OTHER_SETTLEMENT_AMT, C.PS_DEPT_CD, I.PET_INCIDENT_CASE_NBR, (SUBSTR(I.INVESTIGATION_INCIDENT_DESC, 1, 15000))::VARCHAR(15000) AS INVESTIGATION_INCIDENT_DESC, I.EMPLOYEE_SHIFT_END_TSTMP, I.EMPLOYEE_JOB_TITLE AS EMPLOYEE_JOB_TITLE_OLD, I.EMPLOYEE_TENURE_IN_CURRENT_ROLE, I.LEADER_COMPLETING_INVESTIGATION, I.LEADER_JOB_TITLE, I.SERVICES_LEADER_PRESENT_FLAG, I.SERVICES_LEADER_NAME, I.SERVICES_LEADER_SIGN_OFF_FLAG, I.SERVICES_LEADER_SIGN_OFF_DT, I.STORE_LEADER_SIGN_OFF_FLAG, I.STORE_LEADER_SIGN_OFF_DT, I.SIMILAR_INCIDENTS_LAST_12_MO_FLAG, I.PRIOR_PET_INCIDENTS_FLAG, I.EMPLOYEE_GO_TO_HOSPITAL_FLAG AS INVESTIGATION_EMPLOYEE_GO_TO_HOSPITAL_FLAG, I.HOP_COMPLETED_BY, I.EMPLOYEE_RETRAINING_DT, I.TEAM_RETRAINING_DT, I.UNSAFE_CONDITION_ACT_PRIOR_TO_INCIDENT_FLAG, I.UNSAFE_CONDITION_CONTRIBUTED_FLAG, I.UNSAFE_CONDITION_DESC, I.UNSAFE_ACT_CONTRIBUTED_FLAG, I.UNSAFE_ACT_DESC, I.DEVIATION_FROM_CURRENT_POLICY_PROCEDURE_FLAG, I.DEVIATION_DESC, I.PERSONAL_PROTECTIVE_EQUIP_REQUIRED_FLAG, I.PERSONAL_PROTECTIVE_EQUIP_WORN_FLAG, I.EQUIPMENT_DESC, I.EQUIPMENT_FUNCTIONING_PROPERLY_FLAG, I.EQUIPMENT_FUNCTIONING_IMPROPERLY_DESC, I.MACHINE_TOOL_SUBSTANCE_OBJECT_INVOLVED_FLAG, I.MACHINE_TOOL_SUBSTANCE_OBJECT_DESC, I.ADDITIONAL_CONTRIBUTING_CONDITIONS, (SUBSTR(I.PREVENTION_STRATEGY, 1, 20000))::VARCHAR(20000) AS PREVENTION_STRATEGY, I.LEADERSHIP_SUPPORT_STRATEGY, I.WITNESS_1_FIRST_NAME, I.WITNESS_1_JOB_TITLE, I.WITNESS_1_LAST_NAME, I.WITNESS_2_FIRST_NAME, I.WITNESS_2_JOB_TITLE, I.WITNESS_2_LAST_NAME, I.WITNESS_3_FIRST_NAME, I.WITNESS_3_JOB_TITLE, I.WITNESS_3_LAST_NAME, I.ACTION_PLAN_1_DESC, I.ACTION_PLAN_1_OWNER, I.ACTION_PLAN_1_OWNER_JOB_TITLE, I.ACTION_PLAN_1_OWNER_PHONE_NBR, I.ACTION_PLAN_1_DEADLINE_DT, I.ACTION_PLAN_1_COMPLETION_DT, I.ACTION_PLAN_1_STATUS, I.ACTION_PLAN_2_DESC, I.ACTION_PLAN_2_OWNER, I.ACTION_PLAN_2_OWNER_JOB_TITLE, I.ACTION_PLAN_2_OWNER_PHONE_NBR, I.ACTION_PLAN_2_DEADLINE_DT, I.ACTION_PLAN_2_COMPLETION_DT, I.ACTION_PLAN_2_STATUS, I.ACTION_PLAN_3_DESC, I.ACTION_PLAN_3_OWNER, I.ACTION_PLAN_3_OWNER_JOB_TITLE, I.ACTION_PLAN_3_OWNER_PHONE_NBR, I.ACTION_PLAN_3_DEADLINE_DT, I.ACTION_PLAN_3_COMPLETION_DT, I.ACTION_PLAN_3_STATUS, (NULL::"VARCHAR")::VARCHAR(50) AS WC_CA_CASE_MANAGER, (NULL::"VARCHAR")::VARCHAR(20) AS WC_CA_CLASSIFICATION FROM (ADMIN.INCIDENT_CLAIMS C LEFT JOIN ADMIN.INCIDENT_INVESTIGATIONS I ON (((C.SRC_CD = I.SRC_CD) AND (C.CLAIM_NBR = I.CLAIM_NBR))))) UNION ALL (SELECT DISTINCT ('WCCA'::"VARCHAR")::VARCHAR(5) AS SRC_CD, (CA.CLAIM_NBR)::VARCHAR(80) AS CLAIM_NBR, CA.LOCATION_ID, DATE(CA.DAY_DT) AS DAY_DT, CASE WHEN (VW.TIME_OF_INCIDENT NOTNULL) THEN TO_TIMESTAMP(((TO_CHAR(CA.DAY_DT, 'MMDDYYYY'::"VARCHAR") || ' '::"VARCHAR") || VW.TIME_OF_INCIDENT), 'MMDDYYYY HH12:MI:SS AM'::"VARCHAR") ELSE CA.DAY_DT END AS INCIDENT_TSTMP, VW.OPENED_DT AS CLAIM_OPEN_DT, NULL::DATE AS REPORTED_TO_MANAGER_DT, NULL::DATE AS CLAIM_CLOSE_DT, NULL::DATE AS CLOSED_ISSUE_DT, NULL::"TIMESTAMP" AS CASE_RECEIVED_TSTMP, NULL::"TIMESTAMP" AS ACTION_RESPONSE_DUE_TSTMP, NULL::"TIMESTAMP" AS ACTION_RESPONDED_TSTMP, ('Associate Injury'::"VARCHAR")::VARCHAR(255) AS INCIDENT_TYPE, (NULL::"VARCHAR")::VARCHAR(255) AS CLAIM_TYPE_RAW, (VW.CLAIM_STATUS)::VARCHAR(50) AS CLAIM_STATUS, (SS.CLAIM_SUB_STATUS_DESC)::VARCHAR(50) AS CLAIM_SUB_STATUS, (NULL::"VARCHAR")::VARCHAR(50) AS STORE_DC_AREA, VW.ACCIDENT_LOCATION AS SPECIFIC_STORE_AREA, VW.EVENT_DESC AS CLAIM_INCIDENT_DESC, (NULL::"VARCHAR")::VARCHAR(255) AS GENERAL_CAUSE, (NULL::"VARCHAR")::VARCHAR(255) AS DETAIL_CAUSE, (NULL::"VARCHAR")::VARCHAR(255) AS CAUSE_RAW, VW.NATYRE_OF_INJURY_DESC AS GENERAL_NATURE, (NULL::"VARCHAR")::VARCHAR(100) AS DETAIL_NATURE, VW.BODY_PART AS GENERAL_PART, (NULL::"VARCHAR")::VARCHAR(100) AS DETAIL_PART, (NULL::"VARCHAR")::VARCHAR(50) AS DETAIL_PART_POSITION, (CA.LINE_TYPE_CD)::VARCHAR(255) AS MAJOR_COVERAGE, (((VW.CLAIMANT_LAST_NAME || ','::"VARCHAR") || VW.CLAIMANT_FIRST_NAME))::VARCHAR(255) AS CLAIMANT_NAME, VW.EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(50) AS RESPONSIBLE_EMPLOYEE_ID, (NULL::"VARCHAR")::VARCHAR(50) AS RESPONSIBLE_EMPLOYEE_NAME, NULL::DATE AS EMPLOYEE_HIRED_DT, (NULL::"VARCHAR")::VARCHAR(10) AS EMPLOYEE_TENURE, NULL::"TIMESTAMP" AS EMPLOYEE_SHIFT_START_TSTMP, ('0'::"VARCHAR")::VARCHAR(150) AS EMPLOYEE_DEPT, VW.EMPLOYEE_JOB_TITLE, (NULL::"VARCHAR")::VARCHAR(50) AS ACADEMY_TRAINED, (NULL::"NUMERIC")::NUMERIC(1,0) AS WORK_RELATED_ACCIDENT_FLAG, VW.CLAIMANT_ACTIVITY_AT_INCIDENT, (NULL::"VARCHAR")::VARCHAR(255) AS HUMAN_INJURY_ESCALATION, (NULL::"NUMERIC")::NUMERIC(1,0) AS LOST_TIME_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS SEEK_TREATMENT_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS CALLED_911_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS EMPLOYEE_GO_TO_HOSPITAL_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS EMPLOYEE_ADMITTED_TO_HOSPITAL_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS EMPLOYEE_TRANSPORTED_BY_AMBULANCE_FLAG, VW.REPORTED_TO_CMS_DT AS REPORTED_TO_TPA_DT, ('CANADA'::"VARCHAR")::VARCHAR(100) AS TPA_CARRIER, (NULL::"VARCHAR")::VARCHAR(255) AS TPA_CLAIM_NBR, CA.ANIMAL_IND AS ANIMAL_INVOLVED_IN_THE_INCIDENT_FLAG, VW.ANIMAL_INCIDENT_TYPE, VW.ANIMAL_CARE_CUSTODY, (NULL::"VARCHAR")::VARCHAR(50) AS ADOPTION_GROUP, VW.PET_BREED_TYPE, (NULL::"VARCHAR")::VARCHAR(100) AS PET_BREED, (CA.INCURRED_TOTAL_AMT)::NUMERIC(12,2) AS NET_INCURRED_AMT, (NULL::"NUMERIC")::NUMERIC(1,0) AS SCORECARD_EXCEPTION_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS PET_INCIDENT_TYPE, (NULL::"VARCHAR")::VARCHAR(255) AS PET_INCIDENT_TYPE_REPORTED, (NULL::"VARCHAR")::VARCHAR(150) AS PET_INCIDENT_REASON_GROUP, (NULL::"VARCHAR")::VARCHAR(150) AS PET_INCIDENT_REASON, (NULL::"VARCHAR")::VARCHAR(50) AS PET_INCIDENT_REASON_LEGACY_CD, (NULL::"VARCHAR")::VARCHAR(100) AS PET_INCIDENT_REASON_LEGACY, (NULL::"VARCHAR")::VARCHAR(100) AS PET_CAUSE_LEGACY, (NULL::"VARCHAR")::VARCHAR(150) AS PET_SYMPTOMS, (NULL::"VARCHAR")::VARCHAR(150) AS NOTIFICATION_SOURCE, (NULL::"VARCHAR")::VARCHAR(255) AS BRAND_RISK_DEPT, (NULL::"VARCHAR")::VARCHAR(255) AS PET_ESCALATION_FACTORS, (NULL::"NUMERIC")::NUMERIC(5,0) AS DAY_CAMP_CAPACITY_CNT, (NULL::"NUMERIC")::NUMERIC(18,0) AS PET_IN_PLAYTIME_CNT, (NULL::"NUMERIC")::NUMERIC(18,0) AS PET_IN_TRAINING_CLASS_CNT, (NULL::"NUMERIC")::NUMERIC(1,0) AS INCIDENT_DURING_PETSMART_ACADEMY_FLAG, (NULL::"VARCHAR")::VARCHAR(255) AS PET_POLICY_VIOLATION, (NULL::"VARCHAR")::VARCHAR(255) AS OTHER_POLICY_VIOLATION, (NULL::"VARCHAR")::VARCHAR(100) AS PET_SERVICE_PERFORMED, (NULL::"VARCHAR")::VARCHAR(100) AS GROOM_SERVICE_DURING_PET_INCIDENT, (NULL::"VARCHAR")::VARCHAR(100) AS HOTEL_SERVICE_DURING_PET_INCIDENT, (NULL::"VARCHAR")::VARCHAR(20) AS PET_TAKEN_TO_VET, (NULL::"NUMERIC")::NUMERIC(1,0) AS INJURY_CONFIRMED_BY_VET_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS FULL_RECOVERY_EXPECTED_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS MATTED_PET_RELEASE_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PET_SHAVE_AUTH_SIGNED_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PET_SERVICE_CARD_SIGNED_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS HEALTH_CHART_COMPLETED_DURING_STAY_FLAG, NULL::DATE AS SAFETY_CERTIFIED_DT, (NULL::"VARCHAR")::VARCHAR(150) AS PET_SAFETY_EQUIPMENT_USED, (NULL::"VARCHAR")::VARCHAR(20) AS PET_SAFETY_PRIORITY, (NULL::"VARCHAR")::VARCHAR(100) AS PET_SAFETY_GENERAL_CAUSE, (NULL::"VARCHAR")::VARCHAR(100) AS PET_SAFETY_DETAIL_CAUSE, (NULL::"VARCHAR")::VARCHAR(100) AS PET_SAFETY_GENERAL_NATURE, (NULL::"VARCHAR")::VARCHAR(100) AS PET_SAFETY_DETAIL_NATURE, (NULL::"VARCHAR")::VARCHAR(100) AS PET_SAFETY_GENERAL_PART, (NULL::"VARCHAR")::VARCHAR(100) AS PET_SAFETY_DETAIL_PART, (NULL::"VARCHAR")::VARCHAR(20) AS PET_GENDER, (NULL::"VARCHAR")::VARCHAR(100) AS PET_AGE, (NULL::"VARCHAR")::VARCHAR(100) AS PET_WEIGHT, (NULL::"NUMERIC")::NUMERIC(1,0) AS PET_NEUTERED_SPAYED_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS PET_ORIGIN, NULL::INT8 AS PET_PRODUCT_UPC_ID, (NULL::"VARCHAR")::VARCHAR(50) AS PET_PRODUCT_UPC_LONG_CD, (NULL::"VARCHAR")::VARCHAR(50) AS PET_PRODUCT_LOT_CD, (NULL::"VARCHAR")::VARCHAR(50) AS PET_PRODUCT_SKU_SHORT_CD, NULL::DATE AS PET_PRODUCT_PURCH_DT, NULL::DATE AS PET_PRODUCT_BEST_BY_DT, (NULL::"VARCHAR")::VARCHAR(150) AS PET_EXPENSE_TYPE, (NULL::"NUMERIC")::NUMERIC(12,2) AS BANFIELD_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS P_CARD_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS CASH_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS CHECK_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS PET_PARENT_VET_EXP_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS GIFT_CARD_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS FLOWERS_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS COMPED_PRODUCTS_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS COMPED_SERVICES_AMT, (NULL::"NUMERIC")::NUMERIC(12,2) AS OTHER_SETTLEMENT_AMT, (NULL::"VARCHAR")::VARCHAR(10) AS PS_DEPT_CD, (NULL::"VARCHAR")::VARCHAR(50) AS PET_INCIDENT_CASE_NBR, (NULL::"VARCHAR")::VARCHAR(15000) AS INVESTIGATION_INCIDENT_DESC, NULL::"TIMESTAMP" AS EMPLOYEE_SHIFT_END_TSTMP, (NULL::"VARCHAR")::VARCHAR(50) AS EMPLOYEE_JOB_TITLE_OLD, (NULL::"VARCHAR")::VARCHAR(50) AS EMPLOYEE_TENURE_IN_CURRENT_ROLE, (NULL::"VARCHAR")::VARCHAR(50) AS LEADER_COMPLETING_INVESTIGATION, (NULL::"VARCHAR")::VARCHAR(50) AS LEADER_JOB_TITLE, (NULL::"NUMERIC")::NUMERIC(1,0) AS SERVICES_LEADER_PRESENT_FLAG, (NULL::"VARCHAR")::VARCHAR(50) AS SERVICES_LEADER_NAME, (NULL::"NUMERIC")::NUMERIC(1,0) AS SERVICES_LEADER_SIGN_OFF_FLAG, NULL::DATE AS SERVICES_LEADER_SIGN_OFF_DT, (NULL::"NUMERIC")::NUMERIC(1,0) AS STORE_LEADER_SIGN_OFF_FLAG, NULL::DATE AS STORE_LEADER_SIGN_OFF_DT, (NULL::"NUMERIC")::NUMERIC(1,0) AS SIMILAR_INCIDENTS_LAST_12_MO_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PRIOR_PET_INCIDENTS_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS INVESTIGATION_EMPLOYEE_GO_TO_HOSPITAL_FLAG, (NULL::"VARCHAR")::VARCHAR(50) AS HOP_COMPLETED_BY, NULL::DATE AS EMPLOYEE_RETRAINING_DT, NULL::DATE AS TEAM_RETRAINING_DT, (NULL::"NUMERIC")::NUMERIC(1,0) AS UNSAFE_CONDITION_ACT_PRIOR_TO_INCIDENT_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS UNSAFE_CONDITION_CONTRIBUTED_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS UNSAFE_CONDITION_DESC, (NULL::"NUMERIC")::NUMERIC(1,0) AS UNSAFE_ACT_CONTRIBUTED_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS UNSAFE_ACT_DESC, (NULL::"NUMERIC")::NUMERIC(1,0) AS DEVIATION_FROM_CURRENT_POLICY_PROCEDURE_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS DEVIATION_DESC, (NULL::"NUMERIC")::NUMERIC(1,0) AS PERSONAL_PROTECTIVE_EQUIP_REQUIRED_FLAG, (NULL::"NUMERIC")::NUMERIC(1,0) AS PERSONAL_PROTECTIVE_EQUIP_WORN_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS EQUIPMENT_DESC, (NULL::"NUMERIC")::NUMERIC(1,0) AS EQUIPMENT_FUNCTIONING_PROPERLY_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS EQUIPMENT_FUNCTIONING_IMPROPERLY_DESC, (NULL::"NUMERIC")::NUMERIC(1,0) AS MACHINE_TOOL_SUBSTANCE_OBJECT_INVOLVED_FLAG, (NULL::"VARCHAR")::VARCHAR(100) AS MACHINE_TOOL_SUBSTANCE_OBJECT_DESC, (NULL::"VARCHAR")::VARCHAR(100) AS ADDITIONAL_CONTRIBUTING_CONDITIONS, (NULL::"VARCHAR")::VARCHAR(20000) AS PREVENTION_STRATEGY, (NULL::"VARCHAR")::VARCHAR(1000) AS LEADERSHIP_SUPPORT_STRATEGY, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_1_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_1_JOB_TITLE, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_1_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_2_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_2_JOB_TITLE, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_2_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_3_FIRST_NAME, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_3_JOB_TITLE, (NULL::"VARCHAR")::VARCHAR(50) AS WITNESS_3_LAST_NAME, (NULL::"VARCHAR")::VARCHAR(500) AS ACTION_PLAN_1_DESC, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_1_OWNER, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_1_OWNER_JOB_TITLE, (NULL::"VARCHAR")::VARCHAR(20) AS ACTION_PLAN_1_OWNER_PHONE_NBR, NULL::DATE AS ACTION_PLAN_1_DEADLINE_DT, NULL::DATE AS ACTION_PLAN_1_COMPLETION_DT, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_1_STATUS, (NULL::"VARCHAR")::VARCHAR(500) AS ACTION_PLAN_2_DESC, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_2_OWNER, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_2_OWNER_JOB_TITLE, (NULL::"VARCHAR")::VARCHAR(20) AS ACTION_PLAN_2_OWNER_PHONE_NBR, NULL::DATE AS ACTION_PLAN_2_DEADLINE_DT, NULL::DATE AS ACTION_PLAN_2_COMPLETION_DT, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_2_STATUS, (NULL::"VARCHAR")::VARCHAR(500) AS ACTION_PLAN_3_DESC, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_3_OWNER, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_3_OWNER_JOB_TITLE, (NULL::"VARCHAR")::VARCHAR(20) AS ACTION_PLAN_3_OWNER_PHONE_NBR, NULL::DATE AS ACTION_PLAN_3_DEADLINE_DT, NULL::DATE AS ACTION_PLAN_3_COMPLETION_DT, (NULL::"VARCHAR")::VARCHAR(50) AS ACTION_PLAN_3_STATUS, VW.CASE_MANAGER AS WC_CA_CASE_MANAGER, VW.CLASSIFICATION AS WC_CA_CLASSIFICATION FROM ((ADMIN.IC_WC_CLAIMS CA JOIN (SELECT P.CLAIM_NBR, LTRIM(SUBSTR(P.EMPLOYEE_NAME, (INSTR(P.EMPLOYEE_NAME, ','::"VARCHAR") + 1), 22)) AS CLAIMANT_FIRST_NAME, SUBSTR(P.EMPLOYEE_NAME, 1, (INSTR(P.EMPLOYEE_NAME, ','::"VARCHAR") - 1)) AS CLAIMANT_LAST_NAME, P."DESCRIPTION" AS EVENT_DESC, P.REPORTED_DT AS REPORTED_TO_CMS_DT, P.INJURED_DT, P.OPENED_DT, P.BODY_PART, P.NATYRE_OF_INJURY_DESC, P.ACCIDENT_LOCATION, P.CASE_MANAGER, P.CLAIM_STATUS, P.CLASSIFICATION, P.EMPLOYEE_JOB_TITLE, INT4(CASE WHEN (LENGTH(TRANSLATE(P.EMPLOYEE_ID, '0123456789'::"VARCHAR", ''::"VARCHAR")) > 0) THEN NULL::"VARCHAR" ELSE P.EMPLOYEE_ID END) AS EMPLOYEE_ID, P.CLAIMANT_ACTIVITY_AT_INCIDENT, P.ANIMAL_INCIDENT_TYPE, P.PET_BREED_TYPE, P.TIME_OF_INCIDENT, P.ANIMAL_CARE_CUSTODY, P.LOAD_DT, ROW_NUMBER() OVER (PARTITION BY P.CLAIM_NBR  ORDER BY P.LOAD_DT DESC ) AS RNO FROM ADMIN.IC_CA_CLAIMS P) VW ON (((CA.CLAIM_NBR = VW.CLAIM_NBR) AND (CA.SOURCE_TYPE_ID = ('2'::NUMERIC(1,0))::NUMERIC(1,0))))) LEFT JOIN ADMIN.IC_WC_CLAIM_SUB_STATUS SS ON ((SS.CLAIM_SUB_STATUS_CD = CA.CLAIM_SUB_STATUS_CD))) WHERE (VW.RNO = 1));

\echo
\echo *****  Creating view:  "IC_CLAIM_DETAIL_VW"

CREATE or replace VIEW  IC_CLAIM_DETAIL_VW
(
     CLAIM_NBR,
     CAUSE_CD,
     CLAIMANT_FIRST_NAME,
     CLAIMANT_LAST_NAME,
     EVENT_DESC,
     DEPARTMENT_CD,
     LENGTH_OF_SERVICE_YY,
     REPORTED_TO_CLIENT_DT,
     REPORTED_TO_CMS_DT,
     CAUSE_DESC,
     CAUSE_GROUP_ID,
     CAUSE_GROUP_DESC,
     DISPLAY_NAME,
     DISPLAY_GROUP,
     CLIENT_MAX_LOAD_DT,
     DETAIL_MAX_LOAD_DT
) AS
SELECT P.CLAIM_NBR, NULL::VARCHAR(1) AS CAUSE_CD, LTRIM(SUBSTR(P.EMPLOYEE_NAME, (INSTR(P.EMPLOYEE_NAME, ','::"VARCHAR") + 1), 22)) AS CLAIMANT_FIRST_NAME, SUBSTR(P.EMPLOYEE_NAME, 1, (INSTR(P.EMPLOYEE_NAME, ','::"VARCHAR") - 1)) AS CLAIMANT_LAST_NAME, P."DESCRIPTION" AS EVENT_DESC, ('0'::"VARCHAR")::VARCHAR(1) AS DEPARTMENT_CD, NULL::NUMERIC(1,0) AS LENGTH_OF_SERVICE_YY, NULL::"TIMESTAMP" AS REPORTED_TO_CLIENT_DT, FIRST_VALUE(P.REPORTED_DT) OVER (PARTITION BY P.CLAIM_NBR  ORDER BY P.REPORTED_DT ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS REPORTED_TO_CMS_DT, NULL::VARCHAR(1) AS CAUSE_DESC, NULL::INT2 AS CAUSE_GROUP_ID, NULL::VARCHAR(1) AS CAUSE_GROUP_DESC, NULL::VARCHAR(1) AS DISPLAY_NAME, NULL::VARCHAR(1) AS DISPLAY_GROUP, P.LOAD_DT AS CLIENT_MAX_LOAD_DT, NULL::"TIMESTAMP" AS DETAIL_MAX_LOAD_DT FROM (ADMIN.IC_CA_CLAIMS P JOIN (SELECT IC_CA_CLAIMS.CLAIM_NBR, MAX(IC_CA_CLAIMS.LOAD_DT) AS MAXDATE FROM ADMIN.IC_CA_CLAIMS GROUP BY IC_CA_CLAIMS.CLAIM_NBR) TP ON (((P.CLAIM_NBR = TP.CLAIM_NBR) AND (P.LOAD_DT = TP.MAXDATE))));

\echo
\echo *****  Creating view:  "OMS_ORDER_LN_SALES_VW"

CREATE or replace VIEW  OMS_ORDER_LN_SALES_VW
(
     CREATED_TSTMP,
     OMS_ORDER_DT,
     OMS_ORDER_ID,
     OMS_ORDER_NBR,
     ORDER_NBR,
     ORDER_CHANNEL,
     ORDER_CREATION_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     PRODUCT_ID,
     SCHED_DELIVERY_FLG,
     ADD_ON_FLAG,
     CANCELLED_FLG,
     OMS_DO_TYPE_ID,
     SHIP_POSTAL_CD,
     SHIP_COUNTRY_CD,
     SHIP_STATE,
     BILL_POSTAL_CD,
     BILL_COUNTRY_CD,
     OMS_ORDER_STATUS_ID,
     OMS_ORDER_LN_STATUS_ID,
     FULF_LOCATION_ID,
     FULF_LOCATION_NBR,
     FULF_STORE_NAME,
     FULF_LOCATION_TYPE,
     FULF_LOCATION_TYPE_DESC,
     FULF_LOC_GROUP_ID,
     FULF_LOC_GROUP_DESC,
     CREATION_DEVICE_TYPE,
     CREATION_DEVICE_WIDTH,
     SHIPPED_DT,
     AGING_DAYS,
     ORIG_ORDER_QTY,
     ALLOCATED_QTY,
     CANCELLED_QTY,
     UNIT_MONETARY_VALUE_AMT,
     ORIG_SHIP_CHARGE_AMT,
     SHIP_CHARGE_AMT,
     HEADER_DISC_AMT,
     LN_DISC_AMT,
     UNIT_TAX_AMT,
     NET_SALES_QTY,
     NET_SALES_AMT,
     SALES_QTY,
     SALES_AMT,
     NET_SALES_TAX_AMT,
     DISCOUNT_AMT,
     RETURN_QTY,
     RETURN_AMT,
     NET_MARGIN_AMT,
     PURCH_COST_AMT,
     SALES_COST,
     EXCH_RATE_PCT,
     NET_ORDER_SALES_DISC_AMT,
     NET_ORDER_MARGIN_DISC_AMT,
     NET_SALES_SHIP_AMT,
     MARGIN_PRE_AMT,
     MA_VF_AMT,
     MA_VF_PRODUCT_AMT,
     MA_SALES_VF_AMT,
     EXCHANGE_RATE_PCNT,
     PICK_DECL_QTY,
     ORDER_AGE,
     RX_TYPE,
     AFTERPAY_FLG,
     LOAD_TSTMP
) AS
SELECT OMS_ORDER_LN_SALES.CREATED_TSTMP, OMS_ORDER_LN_SALES.OMS_ORDER_DT, OMS_ORDER_LN_SALES.OMS_ORDER_ID, OMS_ORDER_LN_SALES.OMS_ORDER_NBR, OMS_ORDER_LN_SALES.ORDER_NBR, OMS_ORDER_LN_SALES.ORDER_CHANNEL, OMS_ORDER_LN_SALES.ORDER_CREATION_CHANNEL, OMS_ORDER_LN_SALES.ORDER_FULFILLMENT_CHANNEL, OMS_ORDER_LN_SALES.PRODUCT_ID, OMS_ORDER_LN_SALES.SCHED_DELIVERY_FLG, OMS_ORDER_LN_SALES.ADD_ON_FLAG, OMS_ORDER_LN_SALES.CANCELLED_FLG, OMS_ORDER_LN_SALES.OMS_DO_TYPE_ID, OMS_ORDER_LN_SALES.SHIP_POSTAL_CD, OMS_ORDER_LN_SALES.SHIP_COUNTRY_CD, OMS_ORDER_LN_SALES.SHIP_STATE, OMS_ORDER_LN_SALES.BILL_POSTAL_CD, OMS_ORDER_LN_SALES.BILL_COUNTRY_CD, OMS_ORDER_LN_SALES.OMS_ORDER_STATUS_ID, OMS_ORDER_LN_SALES.OMS_ORDER_LN_STATUS_ID, OMS_ORDER_LN_SALES.FULF_LOCATION_ID, OMS_ORDER_LN_SALES.FULF_LOCATION_NBR, OMS_ORDER_LN_SALES.FULF_STORE_NAME, OMS_ORDER_LN_SALES.FULF_LOCATION_TYPE, OMS_ORDER_LN_SALES.FULF_LOCATION_TYPE_DESC, OMS_ORDER_LN_SALES.FULF_LOC_GROUP_ID, OMS_ORDER_LN_SALES.FULF_LOC_GROUP_DESC, OMS_ORDER_LN_SALES.CREATION_DEVICE_TYPE, OMS_ORDER_LN_SALES.CREATION_DEVICE_WIDTH, OMS_ORDER_LN_SALES.SHIPPED_DT, OMS_ORDER_LN_SALES.AGING_DAYS, OMS_ORDER_LN_SALES.ORIG_ORDER_QTY, OMS_ORDER_LN_SALES.ALLOCATED_QTY, OMS_ORDER_LN_SALES.CANCELLED_QTY, OMS_ORDER_LN_SALES.UNIT_MONETARY_VALUE_AMT, OMS_ORDER_LN_SALES.ORIG_SHIP_CHARGE_AMT, OMS_ORDER_LN_SALES.SHIP_CHARGE_AMT, OMS_ORDER_LN_SALES.HEADER_DISC_AMT, OMS_ORDER_LN_SALES.LN_DISC_AMT, OMS_ORDER_LN_SALES.UNIT_TAX_AMT, OMS_ORDER_LN_SALES.NET_SALES_QTY, OMS_ORDER_LN_SALES.NET_SALES_AMT, OMS_ORDER_LN_SALES.SALES_QTY, OMS_ORDER_LN_SALES.SALES_AMT, OMS_ORDER_LN_SALES.NET_SALES_TAX_AMT, OMS_ORDER_LN_SALES.DISCOUNT_AMT, OMS_ORDER_LN_SALES.RETURN_QTY, OMS_ORDER_LN_SALES.RETURN_AMT, OMS_ORDER_LN_SALES.NET_MARGIN_AMT, OMS_ORDER_LN_SALES.PURCH_COST_AMT, OMS_ORDER_LN_SALES.SALES_COST, OMS_ORDER_LN_SALES.EXCH_RATE_PCT, OMS_ORDER_LN_SALES.NET_ORDER_SALES_DISC_AMT, OMS_ORDER_LN_SALES.NET_ORDER_MARGIN_DISC_AMT, OMS_ORDER_LN_SALES.NET_SALES_SHIP_AMT, OMS_ORDER_LN_SALES.MARGIN_PRE_AMT, OMS_ORDER_LN_SALES.MA_VF_AMT, OMS_ORDER_LN_SALES.MA_VF_PRODUCT_AMT, OMS_ORDER_LN_SALES.MA_SALES_VF_AMT, OMS_ORDER_LN_SALES.EXCHANGE_RATE_PCNT, OMS_ORDER_LN_SALES.PICK_DECL_QTY, OMS_ORDER_LN_SALES.ORDER_AGE, OMS_ORDER_LN_SALES.RX_TYPE, OMS_ORDER_LN_SALES.AFTERPAY_FLG, OMS_ORDER_LN_SALES.LOAD_TSTMP FROM ADMIN.OMS_ORDER_LN_SALES;

\echo
\echo *****  Creating view:  "PM_VL7JEG25TQHAT65ICESQG6Z6NXY"

CREATE or replace VIEW  PM_VL7JEG25TQHAT65ICESQG6Z6NXY
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "ALLIVET_ORDER_RPT_VW"

CREATE or replace VIEW  ALLIVET_ORDER_RPT_VW
(
     ALLIVET_ORDER_DT,
     ALLIVET_ORDER_NBR,
     ALLIVET_ORDER_LN_NBR,
     ORDER_STATUS,
     PRODUCT_ID,
     PETSMART_ORDER_NBR,
     PETSMART_SKU_NBR,
     ALLIVET_SKU_NBR,
     SUB_TOTAL_AMT,
     FREIGHT_COST,
     TOTAL_AMT,
     SHIP_METHOD_CD,
     ORDER_VOIDED_FLAG,
     ORDER_ONHOLD_FLAG,
     ORDER_OPEN_DT,
     ORDER_VOIDED_DT,
     ORDER_HOLD_DT,
     ORDER_COMPLETED_DT,
     ORDER_SHIPPED_FLAG,
     INTERNAL_NOTES,
     PUBLIC_NOTES,
     AUTOSHIP_DISCOUNT_AMT,
     ORDER_MERCHANT_NOTES,
     RISKORDER_FLAG,
     RISK_REASON,
     ORIG_SHIP_METHOD_CD,
     SHIP_HOLD_FLAG,
     ORDER_QTY,
     ITEM_DESC,
     EXT_PRICE,
     HOW_TO_GET_RX,
     VET_CD,
     PET_CD,
     ORDER_DETAIL_ONHOLD_FLAG,
     ONHOLD_TO_FILL_FLAG
) AS
SELECT O.ALLIVET_ORDER_DT, O.ALLIVET_ORDER_NBR, O.ALLIVET_ORDER_LN_NBR, O.ORDER_STATUS, O.PRODUCT_ID, O.PETSMART_ORDER_NBR, O.PETSMART_SKU_NBR, O.ALLIVET_SKU_NBR, O.SUB_TOTAL_AMT, O.FREIGHT_COST, O.TOTAL_AMT, O.SHIP_METHOD_CD, O.ORDER_VOIDED_FLAG, O.ORDER_ONHOLD_FLAG, S.OPEN_DT AS ORDER_OPEN_DT, S.VOID_DT AS ORDER_VOIDED_DT, S.RX_HOLD_DT AS ORDER_HOLD_DT, S.COMPLETE_DT AS ORDER_COMPLETED_DT, O.ORDER_SHIPPED_FLAG, O.INTERNAL_NOTES, O.PUBLIC_NOTES, O.AUTOSHIP_DISCOUNT_AMT, O.ORDER_MERCHANT_NOTES, O.RISKORDER_FLAG, O.RISK_REASON, O.ORIG_SHIP_METHOD_CD, O.SHIP_HOLD_FLAG, O.ORDER_QTY, O.ITEM_DESC, O.EXT_PRICE, O.HOW_TO_GET_RX, O.VET_CD, O.PET_CD, O.ORDER_DETAIL_ONHOLD_FLAG, O.ONHOLD_TO_FILL_FLAG FROM (ADMIN.ALLIVET_ORDER_DAY O LEFT JOIN ADMIN.ALLIVET_ORDER_STATUS_DAY S ON ((O.ALLIVET_ORDER_NBR = S.ALLIVET_ORDER_NBR)));

\echo
\echo *****  Creating view:  "MD_FUTURE_FORECAST_VW"

CREATE or replace VIEW  MD_FUTURE_FORECAST_VW
(
     LOCATION_ID,
     PRODUCT_ID,
     WEEK_DT,
     FORECAST_SALES_QTY
) AS
SELECT FCST.LOCATION_ID, FCST.PRODUCT_ID, FCST.WEEK_DT, FCST.FORECAST_SALES_QTY FROM (SELECT E.LOCATION_ID, E.PRODUCT_ID, F.WEEK_DT, F.EFFECTIVE_FORECAST_QTY AS FORECAST_SALES_QTY FROM (ADMIN.MD_EVENTS_PARAMETERS_HIST E JOIN ADMIN.DP_FORECAST_WEEK_HIST F ON ((((E.LOCATION_ID = F.LOCATION_ID) AND (E.PRODUCT_ID = F.PRODUCT_ID)) AND ((F.WEEK_DT >= E.MD_CAMPAIGN_START_DT) AND (F.WEEK_DT <= E.MD_CAMPAIGN_END_DT))))) WHERE ((E.SNAPSHOT_DT = (SELECT MAX(MD_EVENTS_PARAMETERS_HIST.SNAPSHOT_DT) AS MAX FROM ADMIN.MD_EVENTS_PARAMETERS_HIST)) AND (F.SNAPSHOT_DT = (SELECT MAX(DP_FORECAST_WEEK_HIST.SNAPSHOT_DT) AS MAX FROM ADMIN.DP_FORECAST_WEEK_HIST)))) FCST;

\echo
\echo *****  Creating view:  "PET_TRAINING_SCHEDULE_VW"

CREATE or replace VIEW  PET_TRAINING_SCHEDULE_VW
(
     TRAINING_SCHED_STORE_CLASS_ID,
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     SCHED_CLASS_START_TSTMP,
     CLASS_TIME_INTERVAL,
     TRAINING_CLASS_TYPE_ID,
     TRAINING_CLASS_TYPE_NAME,
     TRAINING_CLASS_TYPE_SHORT_DESC,
     CLASS_ACTIVE_FLAG,
     CLASS_FULL_FLAG,
     CLASS_TRAINER,
     CLASS_TRAINER_FIRST_NAME,
     CLASS_TRAINER_LAST_NAME,
     CLASS_TRAINER_ACTIVE_FLAG
) AS
SELECT TSSC.TRAINING_SCHED_STORE_CLASS_ID, DATE(TSSC.START_TSTMP) AS DAY_DT, S.LOCATION_ID, R.PRODUCT_ID, TSSC.START_TSTMP AS SCHED_CLASS_START_TSTMP, CASE WHEN ((DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) >= 8) AND (DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) <= 11)) THEN 1 WHEN ((DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) >= 12) AND (DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) <= 15)) THEN 2 WHEN ((DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) >= 15) AND (DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) <= 18)) THEN 3 WHEN ((DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) >= 18) AND (DATE_PART('HOUR'::"VARCHAR", TSSC.START_TSTMP) <= 21)) THEN 4 ELSE NULL::INT4 END AS CLASS_TIME_INTERVAL, TSCT.TRAINING_CLASS_TYPE_ID, TSCT.TRAINING_CLASS_TYPE_NAME, TSCT.TRAINING_CLASS_TYPE_SHORT_DESC, TSSC.ACTIVE_FLAG AS CLASS_ACTIVE_FLAG, TSSC.FULL_FLAG AS CLASS_FULL_FLAG, TSSCD.TRAINING_SCHED_TRAINER_ID AS CLASS_TRAINER, TT.FIRST_NAME AS CLASS_TRAINER_FIRST_NAME, TT.LAST_NAME AS CLASS_TRAINER_LAST_NAME, TT.ACTIVE_FLAG AS CLASS_TRAINER_ACTIVE_FLAG FROM ((((((ADMIN.TRAINING_SCHED_STORE_CLASS TSSC LEFT JOIN ADMIN.TRAINING_CLASS_TYPE TSCT ON ((TSSC.TRAINING_SCHED_CLASS_TYPE_ID = TSCT.TRAINING_CLASS_TYPE_ID))) LEFT JOIN (SELECT TSSCD.TRAINING_SCHED_STORE_CLASS_ID, TSSCD.TRAINING_SCHED_TRAINER_ID, RANK() OVER (PARTITION BY TSSCD.TRAINING_SCHED_STORE_CLASS_ID  ORDER BY TSSCD.CLASS_TSTMP DESC ) AS RANK_CLASS FROM ADMIN.TRAINING_SCHED_STORE_CLASS_DETAIL TSSCD) TSSCD ON (((TSSC.TRAINING_SCHED_STORE_CLASS_ID = TSSCD.TRAINING_SCHED_STORE_CLASS_ID) AND (TSSCD.RANK_CLASS = 1)))) LEFT JOIN ADMIN.TRAINING_SCHED_TRAINER TT ON ((TSSCD.TRAINING_SCHED_TRAINER_ID = TT.TRAINING_SCHED_TRAINER_ID))) JOIN ADMIN.SITE_PROFILE_RPT S ON ((TSSC.STORE_NBR = S.STORE_NBR))) JOIN ADMIN.UPC U ON ((TSCT.UPC_ID = INT8(U.UPC_CD)))) JOIN ADMIN.SKU_PROFILE_RPT R ON ((R.PRIMARY_UPC_ID = U.UPC_ID)));

\echo
\echo *****  Creating view:  "SALES_TRANS_SKU_CUST_TY2LY_CRCY_VW"

CREATE or replace VIEW  SALES_TRANS_SKU_CUST_TY2LY_CRCY_VW
(
     DAY_DT,
     SALES_INSTANCE_ID_DIST_KEY,
     PRODUCT_ID,
     SALES_INSTANCE_ID,
     TY_LY_FLAG,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     CUSTOMER_EID,
     CUSTOMER_GID,
     LOYALTY_NBR,
     LUID,
     LOYALTY_REDEMPTION_ID,
     LOAD_TSTMP,
     SALES_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     COMP_FLAG,
     SALES_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     TRANS_TSTMP,
     CUST_TRANS_ID,
     SPECIAL_SALES_FLAG,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     NET_SALES_AMT,
     NET_SALES_COST,
     NET_SALES_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     NET_MARGIN_AMT,
     EXCH_RATE_PCT,
     UPDATE_TSTMP
) AS
SELECT DATE(DTL.DAY_DT) AS DAY_DT, U.SALES_INSTANCE_ID_DIST_KEY, U.PRODUCT_ID, U.SALES_INSTANCE_ID, DTL.TY_LY_FLAG, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, U.CUSTOMER_EID, U.CUSTOMER_GID, U.LOYALTY_NBR, U.LUID, U.LOYALTY_REDEMPTION_ID, U.LOAD_TSTMP, U.DAY_DT AS SALES_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, U.LOCATION_ID, CASE WHEN ((DTL.COMP_IND = 1) AND ((DTL.DAY_DT >= "TIMESTAMP"((DATE(SP.COMP_EFF_DT) + 364))) AND (DTL.DAY_DT <= SP.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, U.SALES_TYPE_ID, U.VOID_TYPE_CD, U.TXN_WAS_POST_VOIDED_FLAG, U.ORDER_NBR, U.ORDER_SEQ_NBR, U.ORDER_CHANNEL, U.ORDER_ASSIST_LOCATION_ID, U.TRANS_TSTMP, U.CUST_TRANS_ID, U.SPECIAL_SALES_FLAG, U.SALES_AMT, U.SALES_COST, U.SALES_QTY, U.SPECIAL_SALES_AMT, U.SPECIAL_SALES_QTY, U.RETURN_AMT, U.RETURN_COST, U.RETURN_QTY, U.SPECIAL_RETURN_AMT, U.SPECIAL_RETURN_QTY, U.SPECIAL_SRVC_AMT, U.CLEARANCE_AMT, U.CLEARANCE_QTY, U.CLEARANCE_RETURN_AMT, U.CLEARANCE_RETURN_QTY, U.DISCOUNT_AMT, U.DISCOUNT_QTY, U.DISCOUNT_RETURN_AMT, U.DISCOUNT_RETURN_QTY, U.POS_COUPON_AMT, U.POS_COUPON_QTY, U.POS_COUPON_ALLOC_AMT, U.POS_COUPON_ALLOC_QTY, U.NET_SALES_AMT, U.NET_SALES_COST, U.NET_SALES_QTY, U.MA_SALES_AMT, U.MA_SALES_QTY, U.MA_TRANS_AMT, U.MA_TRANS_COST, U.MA_TRANS_QTY, U.NET_MARGIN_AMT, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE U.EXCH_RATE_PCT END AS EXCH_RATE_PCT, U.UPDATE_TSTMP FROM ((((ADMIN.SALES_TRANS_SKU U JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(U.DAY_DT) = CASE WHEN (DTL.TY_LY_FLAG = 'LY'::"VARCHAR") THEN "TIMESTAMP"((DATE(DTL.TRANS_DAY_DT) - 364)) ELSE DTL.TRANS_DAY_DT END))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((U.LOCATION_ID = SP.LOCATION_ID))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "SALES_TRANS_SKU_TY2LY_VW"

CREATE or replace VIEW  SALES_TRANS_SKU_TY2LY_VW
(
     DAY_DT,
     SALES_INSTANCE_ID_DIST_KEY,
     PRODUCT_ID,
     SALES_INSTANCE_ID,
     TY_LY_FLAG,
     CUSTOMER_EID,
     CUSTOMER_GID,
     LOYALTY_NBR,
     LUID,
     LOYALTY_REDEMPTION_ID,
     SALES_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     COMP_FLAG,
     SALES_TYPE_ID,
     VOID_TYPE_CD,
     TXN_WAS_POST_VOIDED_FLAG,
     ORDER_NBR,
     ORDER_SEQ_NBR,
     ORDER_CHANNEL,
     ORDER_ASSIST_LOCATION_ID,
     TRANS_TSTMP,
     CUST_TRANS_ID,
     SPECIAL_SALES_FLAG,
     SALES_AMT,
     SALES_COST,
     SALES_QTY,
     SPECIAL_SALES_AMT,
     SPECIAL_SALES_QTY,
     RETURN_AMT,
     RETURN_COST,
     RETURN_QTY,
     SPECIAL_RETURN_AMT,
     SPECIAL_RETURN_QTY,
     SPECIAL_SRVC_AMT,
     CLEARANCE_AMT,
     CLEARANCE_QTY,
     CLEARANCE_RETURN_AMT,
     CLEARANCE_RETURN_QTY,
     DISCOUNT_AMT,
     DISCOUNT_QTY,
     DISCOUNT_RETURN_AMT,
     DISCOUNT_RETURN_QTY,
     POS_COUPON_AMT,
     POS_COUPON_QTY,
     POS_COUPON_ALLOC_AMT,
     POS_COUPON_ALLOC_QTY,
     NET_SALES_AMT,
     NET_SALES_COST,
     NET_SALES_QTY,
     MA_SALES_AMT,
     MA_SALES_QTY,
     MA_TRANS_AMT,
     MA_TRANS_COST,
     MA_TRANS_QTY,
     NET_MARGIN_AMT,
     EXCH_RATE_PCT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT DATE(DTL.DAY_DT) AS DAY_DT, U.SALES_INSTANCE_ID_DIST_KEY, U.PRODUCT_ID, U.SALES_INSTANCE_ID, DTL.TY_LY_FLAG, U.CUSTOMER_EID, U.CUSTOMER_GID, U.LOYALTY_NBR, U.LUID, U.LOYALTY_REDEMPTION_ID, U.DAY_DT AS SALES_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, U.LOCATION_ID, CASE WHEN ((DTL.COMP_IND = 1) AND ((DTL.DAY_DT >= "TIMESTAMP"((DATE(SP.COMP_EFF_DT) + 364))) AND (DTL.DAY_DT <= SP.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, U.SALES_TYPE_ID, U.VOID_TYPE_CD, U.TXN_WAS_POST_VOIDED_FLAG, U.ORDER_NBR, U.ORDER_SEQ_NBR, U.ORDER_CHANNEL, U.ORDER_ASSIST_LOCATION_ID, U.TRANS_TSTMP, U.CUST_TRANS_ID, U.SPECIAL_SALES_FLAG, U.SALES_AMT, U.SALES_COST, U.SALES_QTY, U.SPECIAL_SALES_AMT, U.SPECIAL_SALES_QTY, U.RETURN_AMT, U.RETURN_COST, U.RETURN_QTY, U.SPECIAL_RETURN_AMT, U.SPECIAL_RETURN_QTY, U.SPECIAL_SRVC_AMT, U.CLEARANCE_AMT, U.CLEARANCE_QTY, U.CLEARANCE_RETURN_AMT, U.CLEARANCE_RETURN_QTY, U.DISCOUNT_AMT, U.DISCOUNT_QTY, U.DISCOUNT_RETURN_AMT, U.DISCOUNT_RETURN_QTY, U.POS_COUPON_AMT, U.POS_COUPON_QTY, U.POS_COUPON_ALLOC_AMT, U.POS_COUPON_ALLOC_QTY, U.NET_SALES_AMT, U.NET_SALES_COST, U.NET_SALES_QTY, U.MA_SALES_AMT, U.MA_SALES_QTY, U.MA_TRANS_AMT, U.MA_TRANS_COST, U.MA_TRANS_QTY, U.NET_MARGIN_AMT, U.EXCH_RATE_PCT, U.UPDATE_TSTMP, U.LOAD_TSTMP FROM (((ADMIN.SALES_TRANS_SKU U JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(U.DAY_DT) = CASE WHEN (DTL.TY_LY_FLAG = 'LY'::"VARCHAR") THEN "TIMESTAMP"((DATE(DTL.TRANS_DAY_DT) - 364)) ELSE DTL.TRANS_DAY_DT END))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((U.LOCATION_ID = SP.LOCATION_ID)));

\echo
\echo *****  Creating view:  "PM_VWHUTUCBG5DXCVOA2BD6C33L4XA"

CREATE or replace VIEW  PM_VWHUTUCBG5DXCVOA2BD6C33L4XA
(
     OMS_DIST_ORDER_ID,
     OMS_DIST_ORDER_LN_ID,
     ORDER_CAPTURE_CHANNEL,
     ORDER_AUTO_SHIPMENT_FLAG,
     ORDER_ITEM_FULFILLMENT_CHANNEL,
     ORDER_ITEM_DELIVERY_METHOD,
     ORDER_ITEM_SCHED_DELIVERY_FLAG,
     ORDER_ITEM_ADD_ON_FLAG,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID, SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID, SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL AS ORDER_CAPTURE_CHANNEL, INT4(("VARCHAR"(CASE WHEN (UPPER(SHORTCUT_TO_OMS_DIST_ORDER.OMS_DO_TYPE_ID) = 'SUBSCRIPTION'::"VARCHAR") THEN 1 ELSE 0 END) || ''::"VARCHAR")) AS ORDER_AUTO_SHIPMENT_FLAG, CASE WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('64'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'STR'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('545'::NUMERIC(3,0))::NUMERIC(3,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('33'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('9'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 'VENDOR'::"VARCHAR" ELSE 'STR'::"VARCHAR" END AS ORDER_ITEM_FULFILLMENT_CHANNEL, SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL AS ORDER_ITEM_DELIVERY_METHOD, SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG AS ORDER_ITEM_SCHED_DELIVERY_FLAG, SHORTCUT_TO_OMS_DIST_ORDER_LN.ADD_ON_FLAG AS ORDER_ITEM_ADD_ON_FLAG, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.LOAD_TSTMP END AS LOAD_TSTMP FROM (((ADMIN.OMS_DIST_ORDER SHORTCUT_TO_OMS_DIST_ORDER LEFT JOIN (ADMIN.OMS_ORDERS SHORTCUT_TO_OMS_ORDERS LEFT JOIN ADMIN.OMS_FACILITY SHORTCUT_TO_OMS_FACILITY ON ((SHORTCUT_TO_OMS_FACILITY.OMS_FACILITY_ID = SHORTCUT_TO_OMS_ORDERS.OMS_O_FACILITY_ID))) ON ((INT4(SHORTCUT_TO_OMS_ORDERS.OMS_ORDER_ID) = SHORTCUT_TO_OMS_DIST_ORDER.OMS_DIST_ORDER_ID))) JOIN ADMIN.OMS_DIST_ORDER_LN SHORTCUT_TO_OMS_DIST_ORDER_LN ON ((SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID = SHORTCUT_TO_OMS_DIST_ORDER.OMS_DIST_ORDER_ID))) LEFT JOIN ADMIN.OMS_DIST_ORDER_LN_ATTR PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q ON (((PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.OMS_DIST_ORDER_ID = SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID) AND (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.OMS_DIST_ORDER_LN_ID = SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID)))) WHERE (((SHORTCUT_TO_OMS_DIST_ORDER_LN.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_DIST_ORDER.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR")))) AND (CASE WHEN (CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.OMS_DIST_ORDER_ID ISNULL) THEN 'I'::"VARCHAR" WHEN ((NOT (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.OMS_DIST_ORDER_ID ISNULL)) AND (((((CASE WHEN (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_CAPTURE_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_CAPTURE_CHANNEL END) OR (CASE WHEN (CASE WHEN (UPPER(SHORTCUT_TO_OMS_DIST_ORDER.OMS_DO_TYPE_ID) = 'SUBSCRIPTION'::"VARCHAR") THEN 1 ELSE 0 END ISNULL) THEN -1 ELSE CASE WHEN (UPPER(SHORTCUT_TO_OMS_DIST_ORDER.OMS_DO_TYPE_ID) = 'SUBSCRIPTION'::"VARCHAR") THEN 1 ELSE 0 END END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_AUTO_SHIPMENT_FLAG ISNULL) THEN -1 ELSE INT4(PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_AUTO_SHIPMENT_FLAG) END)) OR (CASE WHEN (CASE WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('64'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'STR'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('545'::NUMERIC(3,0))::NUMERIC(3,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('33'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('9'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 'VENDOR'::"VARCHAR" ELSE 'STR'::"VARCHAR" END ISNULL) THEN ' '::"VARCHAR" ELSE CASE WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('64'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'STR'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('545'::NUMERIC(3,0))::NUMERIC(3,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('33'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('9'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 'VENDOR'::"VARCHAR" ELSE 'STR'::"VARCHAR" END END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_FULFILLMENT_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_FULFILLMENT_CHANNEL END)) OR (CASE WHEN (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_DELIVERY_METHOD ISNULL) THEN ' '::"VARCHAR" ELSE PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_DELIVERY_METHOD END)) OR (CASE WHEN (SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG ISNULL) THEN -1 ELSE INT4(SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG) END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_SCHED_DELIVERY_FLAG ISNULL) THEN -1 ELSE INT4(PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_SCHED_DELIVERY_FLAG) END))) THEN 'U'::"VARCHAR" ELSE 'R'::"VARCHAR" END = 'I'::"VARCHAR") THEN 0 WHEN (CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.OMS_DIST_ORDER_ID ISNULL) THEN 'I'::"VARCHAR" WHEN ((NOT (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.OMS_DIST_ORDER_ID ISNULL)) AND (((((CASE WHEN (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_CAPTURE_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_CAPTURE_CHANNEL END) OR (CASE WHEN (CASE WHEN (UPPER(SHORTCUT_TO_OMS_DIST_ORDER.OMS_DO_TYPE_ID) = 'SUBSCRIPTION'::"VARCHAR") THEN 1 ELSE 0 END ISNULL) THEN -1 ELSE CASE WHEN (UPPER(SHORTCUT_TO_OMS_DIST_ORDER.OMS_DO_TYPE_ID) = 'SUBSCRIPTION'::"VARCHAR") THEN 1 ELSE 0 END END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_AUTO_SHIPMENT_FLAG ISNULL) THEN -1 ELSE INT4(PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_AUTO_SHIPMENT_FLAG) END)) OR (CASE WHEN (CASE WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('64'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'STR'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('545'::NUMERIC(3,0))::NUMERIC(3,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('33'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('9'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 'VENDOR'::"VARCHAR" ELSE 'STR'::"VARCHAR" END ISNULL) THEN ' '::"VARCHAR" ELSE CASE WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('64'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'STR'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('545'::NUMERIC(3,0))::NUMERIC(3,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('33'::NUMERIC(2,0))::NUMERIC(2,0)) THEN 'DC'::"VARCHAR" WHEN (SHORTCUT_TO_OMS_FACILITY.FACILITY_TYPE_BITS = ('9'::NUMERIC(1,0))::NUMERIC(1,0)) THEN 'VENDOR'::"VARCHAR" ELSE 'STR'::"VARCHAR" END END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_FULFILLMENT_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_FULFILLMENT_CHANNEL END)) OR (CASE WHEN (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL ISNULL) THEN ' '::"VARCHAR" ELSE SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_DELIVERY_METHOD ISNULL) THEN ' '::"VARCHAR" ELSE PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_DELIVERY_METHOD END)) OR (CASE WHEN (SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG ISNULL) THEN -1 ELSE INT4(SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG) END <> CASE WHEN (PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_SCHED_DELIVERY_FLAG ISNULL) THEN -1 ELSE INT4(PM_ANADLFM3IQS3QRXYBIZJ2A5L65Q.ORDER_ITEM_SCHED_DELIVERY_FLAG) END))) THEN 'U'::"VARCHAR" ELSE 'R'::"VARCHAR" END = 'U'::"VARCHAR") THEN 1 ELSE 3 END = 1));

\echo
\echo *****  Creating view:  "VERTEX_TAX_INVOICE_VW"

CREATE or replace VIEW  VERTEX_TAX_INVOICE_VW
(
     LOCATION_ID,
     DUPLICATE_INVOICE_FLAG,
     ORPHAN_INVOICE_FLAG,
     DOCUMENT_NUMBER,
     EXEMPT_AMOUNT,
     GROSS_AMOUNT,
     IMPOSITION_NAME,
     JURISDICTION_ID,
     JURISDICTION_NAME,
     JURISDICTION_TYPE,
     LOCATION_CODE,
     POSTING_DATE,
     REASON_CODE,
     SITUS_CITYNAME,
     SITUS_MAINDIVISION,
     SITUS_SUBDIVISION,
     SITUS_TAXAREA_ID,
     TAX_AMOUNT,
     TAX_CODE,
     TAX_DATE,
     TAX_RATE,
     TAX_RESULTTYPE,
     TAX_TYPE,
     TAXABILITY_RULEID,
     TAXABLE_AMOUNT,
     TRANSACTION_ID,
     TRANSACTION_TYPE,
     NONTAXABLE_AMOUNT,
     FILING_CATEGORY,
     FIRST_FISCAL_MO,
     LAST_FISCAL_MO,
     FIRST_POSTING_DT,
     LAST_POSTING_DT,
     INVOICE_WITH_DUPLICATE_FLAG
) AS
SELECT VTI.LOCATION_ID, VTI.DUPLICATE_INVOICE_FLAG, VTI.ORPHAN_INVOICE_FLAG, VTI.DOCUMENT_NUMBER, VTI.EXEMPT_AMOUNT, VTI.GROSS_AMOUNT, VTI.IMPOSITION_NAME, VTI.JURISDICTION_ID, VTI.JURISDICTION_NAME, VTI.JURISDICTION_TYPE, VTI.LOCATION_CODE, VTI.POSTING_DATE, CASE WHEN (VTI.REASON_CODE NOTNULL) THEN VTI.REASON_CODE WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END AS REASON_CODE, VTI.SITUS_CITYNAME, VTI.SITUS_MAINDIVISION, CASE WHEN (VTI.SITUS_SUBDIVISION NOTNULL) THEN VTI.SITUS_SUBDIVISION WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END AS SITUS_SUBDIVISION, VTI.SITUS_TAXAREA_ID, VTI.TAX_AMOUNT, CASE WHEN (VTI.TAX_CODE NOTNULL) THEN VTI.TAX_CODE WHEN ('' NOTNULL) THEN ''::"VARCHAR" ELSE NULL::"VARCHAR" END AS TAX_CODE, VTI.TAX_DATE, VTI.TAX_RATE, VTI.TAX_RESULTTYPE, VTI.TAX_TYPE, VTI.TAXABILITY_RULEID, VTI.TAXABLE_AMOUNT, VTI.TRANSACTION_ID, VTI.TRANSACTION_TYPE, VTI.NONTAXABLE_AMOUNT, VTI.FILING_CATEGORY, A.FIRST_FISCAL_MO, A.LAST_FISCAL_MO, A.FIRST_POSTING_DT, A.LAST_POSTING_DT, A.INVOICE_WITH_DUPLICATE_FLAG FROM (ADMIN.VERTEX_TAX_INVOICE VTI LEFT JOIN (SELECT VTI.DOCUMENT_NUMBER, MIN(D.FISCAL_MO) AS FIRST_FISCAL_MO, MAX(D.FISCAL_MO) AS LAST_FISCAL_MO, MIN(VTI.POSTING_DATE) AS FIRST_POSTING_DT, MAX(VTI.POSTING_DATE) AS LAST_POSTING_DT, MAX(VTI.DUPLICATE_INVOICE_FLAG) AS INVOICE_WITH_DUPLICATE_FLAG FROM (ADMIN.VERTEX_TAX_INVOICE VTI JOIN ADMIN.DAYS D ON ((D.DAY_DT = "TIMESTAMP"(VTI.POSTING_DATE)))) GROUP BY VTI.DOCUMENT_NUMBER) A ON ((A.DOCUMENT_NUMBER = VTI.DOCUMENT_NUMBER)));

\echo
\echo *****  Creating view:  "PM_VX6C423B7AFKNIEH43J6IF7XKRE"

CREATE or replace VIEW  PM_VX6C423B7AFKNIEH43J6IF7XKRE
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "SDS_BUNDLE_REDEMPTION_SMRY_RPT_VW"

CREATE or replace VIEW  SDS_BUNDLE_REDEMPTION_SMRY_RPT_VW
(
     DAY_DT,
     SDS_BUNDLE_ID,
     SDS_BUNDLE_NAME,
     SDS_BUNDLE_DISPLAY_NAME,
     SDS_BUNDLE_RECORD_TYPE_ID,
     SDS_BUNDLE_RECORD_TYPE_NAME,
     SDS_BUNDLE_PURCHASED_QTY,
     SDS_BUNDLE_RECEIVED_QTY,
     BUNDLE_LOCATION_ID,
     BUNDLE_PRODUCT_ID,
     BUNDLE_REDEMPTION_STATUS,
     BUNDLE_PURCHASE_CHANNEL,
     BUNDLE_STATUS,
     BUNDLE_PURCHASED_TSTMP,
     BUNDLE_REDEEMED_TSTMP,
     BUNDLE_REFUNDED_TSTMP,
     BUNDLE_EXP_DT,
     PODS_PET_ID,
     PODS_CUSTOMER_ID,
     SRC_PET_ID,
     SRC_PET_NAME,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     WEIGHT_IN_LBS,
     SRC_CUSTOMER_ID,
     SRC_CUSTOMER_FIRST_NAME,
     SRC_CUSTOMER_LAST_NAME,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     SDS_EMPLOYEE_GROUP_GID,
     SDS_EMPLOYEE_GROUP_NAME,
     EMPLOYEE_COMMISSION_AMT,
     EMPLOYEE_COMMISSION_RATE_PCT,
     EMPLOYEE_GROUP_COMMISSION_AMT,
     PRIMARY_SERVICE_PRODUCT_ID,
     SDS_SPECIAL_ID,
     PURCHASE_PETM_POS_INVOICE_ID,
     SDS_REDEMPTION_ID,
     REDEEMED_LOCATION_ID,
     REDEEMED_PETM_POS_INVOICE_ID,
     REDEEMED_PRODUCT_ID,
     REDEEMED_QTY,
     BASE_REDEEMED_QTY,
     FREE_REDEEMED_QTY,
     SDS_APPT_CREATION_CHANNEL,
     APPT_ID,
     APPT_SERVICE_ID,
     APPT_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_SERVICE_ITEM_QTY,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SRC_ORDER_ID,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     HAS_ADD_ON_FLAG,
     PRIMARY_SERVICE_FLAG,
     INVOICE_PAID_FLAG,
     EXPIRED_FLAG,
     APPT_SERVICE_CANCEL_FLAG,
     ADDON2_PRODUCT_ID,
     ADDON3_PRODUCT_ID,
     ADDON4_PRODUCT_ID,
     PACKAGE_UNIT_NBR,
     SDS_PAYMENT_ORIGIN,
     PURCHASED_QTY,
     RESERVED_QTY,
     AVAILABLE_QTY,
     REFUNDED_QTY,
     EXPIRED_QTY,
     TTL_ADDON_QTY,
     TTL_ADDON_AMT,
     ORIG_UNIT_PRICE_AMT,
     LIST_PRICE_AMT,
     FINAL_UNIT_PRICE_AMT,
     TOTAL_GROOM_PAY_PRICE_AMT,
     PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT,
     SAVINGS_AMT,
     EXCH_RATE_PCT,
     SAVINGS_PCT,
     UNIT_EXP_DT,
     LAST_LOAD_START_TSTMP
) AS
WITH CROSS_SEQ (PACKAGE_UNIT_NBR) AS (SELECT DISTINCT DAYS.FISCAL_DAY_OF_YR_NBR AS PACKAGE_UNIT_NBR FROM ADMIN.DAYS WHERE (DAYS.FISCAL_DAY_OF_YR_NBR NOTNULL)), REDEEM_RANKED AS (SELECT SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_REDEMPTION_ID, ROW_NUMBER() OVER (PARTITION BY SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_BUNDLE_ID  ORDER BY SDS_BUNDLE_REDEMPTION_RPT_VW.BUNDLE_REDEEMED_TSTMP NULLS LAST ) AS REDEEMED_UNIT_NBR, SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_BUNDLE_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.APPT_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.APPT_SERVICE_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.LOCATION_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.PETM_POS_INVOICE_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.BUNDLE_PURCHASE_TSTMP, SDS_BUNDLE_REDEMPTION_RPT_VW.BUNDLE_REDEEMED_TSTMP, SDS_BUNDLE_REDEMPTION_RPT_VW.BUNDLE_REDEMPTION_STATUS, SDS_BUNDLE_REDEMPTION_RPT_VW.APPT_TSTMP, SDS_BUNDLE_REDEMPTION_RPT_VW.APPT_CREATE_TSTMP, SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_APPT_CREATION_CHANNEL, SDS_BUNDLE_REDEMPTION_RPT_VW.PRODUCT_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.PRIMARY_SERVICE_FLAG, SDS_BUNDLE_REDEMPTION_RPT_VW.ORIG_UNIT_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.LIST_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.FINAL_UNIT_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.TOTAL_GROOM_PAY_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.EXCH_RATE_PCT, SDS_BUNDLE_REDEMPTION_RPT_VW.APPT_SERVICE_ITEM_QTY, SDS_BUNDLE_REDEMPTION_RPT_VW.SVCS_PET_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.SRC_PET_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.SRC_PET_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.SVCS_CUSTOMER_FIRST_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.SVCS_CUSTOMER_LAST_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.SRC_CUSTOMER_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.SRC_CUSTOMER_FIRST_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.SRC_CUSTOMER_LAST_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.ASSIGNED_EMPLOYEE_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.ASSIGNED_EMPLOYEE_FIRST_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.ASSIGNED_EMPLOYEE_LAST_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.ASSIGNED_EMPLOYEE_DISPLAY_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_EMPLOYEE_GROUP_GID, SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_EMPLOYEE_GROUP_NAME, SDS_BUNDLE_REDEMPTION_RPT_VW.EMPLOYEE_COMMISSION_RATE_PCT, SDS_BUNDLE_REDEMPTION_RPT_VW.EMPLOYEE_COMMISSION_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.EMPLOYEE_GROUP_COMMISSION_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.PETM_PET_BREED_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.PETM_PET_BREED_DESC, SDS_BUNDLE_REDEMPTION_RPT_VW.WEIGHT_IN_LBS, SDS_BUNDLE_REDEMPTION_RPT_VW.SVCS_APPT_STATUS_GID, SDS_BUNDLE_REDEMPTION_RPT_VW.SVCS_APPT_STATUS_DESC, SDS_BUNDLE_REDEMPTION_RPT_VW.SVCS_ORDER_STATUS_GID, SDS_BUNDLE_REDEMPTION_RPT_VW.SVCS_ORDER_STATUS_DESC, SDS_BUNDLE_REDEMPTION_RPT_VW.SRC_ORDER_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.APPT_SERVICE_CANCEL_FLAG, SDS_BUNDLE_REDEMPTION_RPT_VW.LAST_LOAD_START_TSTMP FROM ADMIN.SDS_BUNDLE_REDEMPTION_RPT_VW WHERE (SDS_BUNDLE_REDEMPTION_RPT_VW.PRIMARY_SERVICE_FLAG = ('1'::NUMERIC(1,0))::NUMERIC(1,0))), REDEEM_ADDONS AS (SELECT AA.SDS_REDEMPTION_ID, AA.SDS_BUNDLE_ID, MAX(CASE WHEN (AA.REDEEMED_UNIT_NBR = 1) THEN AA.PRODUCT_ID ELSE NULL::INT4 END) AS ADDON2_PRODUCT_ID, MAX(CASE WHEN (AA.REDEEMED_UNIT_NBR = 2) THEN AA.PRODUCT_ID ELSE NULL::INT4 END) AS ADDON3_PRODUCT_ID, MAX(CASE WHEN (AA.REDEEMED_UNIT_NBR = 3) THEN AA.PRODUCT_ID ELSE NULL::INT4 END) AS ADDON4_PRODUCT_ID, COUNT(AA.REDEEMED_UNIT_NBR) AS TTL_ADDON_QTY, SUM(AA.FINAL_UNIT_PRICE_AMT) AS TTL_ADDON_AMT, MAX(AA.EXCH_RATE_PCT) AS EXCH_RATE_PCT, MAX(AA.APPT_SERVICE_ITEM_QTY) AS APPT_SERVICE_ITEM_QTY, MAX(AA.EMPLOYEE_COMMISSION_RATE_PCT) AS EMPLOYEE_COMMISSION_RATE_PCT, MAX(AA.EMPLOYEE_COMMISSION_AMT) AS EMPLOYEE_COMMISSION_AMT FROM (SELECT SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_REDEMPTION_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_BUNDLE_ID, ROW_NUMBER() OVER (PARTITION BY SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_BUNDLE_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_REDEMPTION_ID  ORDER BY SDS_BUNDLE_REDEMPTION_RPT_VW.FINAL_UNIT_PRICE_AMT DESC ) AS REDEEMED_UNIT_NBR, SDS_BUNDLE_REDEMPTION_RPT_VW.SDS_APPT_CREATION_CHANNEL, SDS_BUNDLE_REDEMPTION_RPT_VW.PRODUCT_ID, SDS_BUNDLE_REDEMPTION_RPT_VW.PRIMARY_SERVICE_FLAG, SDS_BUNDLE_REDEMPTION_RPT_VW.ORIG_UNIT_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.LIST_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.FINAL_UNIT_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.TOTAL_GROOM_PAY_PRICE_AMT, SDS_BUNDLE_REDEMPTION_RPT_VW.EXCH_RATE_PCT, SDS_BUNDLE_REDEMPTION_RPT_VW.APPT_SERVICE_ITEM_QTY, SDS_BUNDLE_REDEMPTION_RPT_VW.EMPLOYEE_COMMISSION_RATE_PCT, SDS_BUNDLE_REDEMPTION_RPT_VW.EMPLOYEE_COMMISSION_AMT FROM ADMIN.SDS_BUNDLE_REDEMPTION_RPT_VW WHERE (SDS_BUNDLE_REDEMPTION_RPT_VW.PRIMARY_SERVICE_FLAG = '0'::NUMERIC)) AA GROUP BY AA.SDS_REDEMPTION_ID, AA.SDS_BUNDLE_ID) SELECT DISTINCT BS.DAY_DT, BS.SDS_BUNDLE_ID, BS.SDS_BUNDLE_NAME, BS.SDS_BUNDLE_DISPLAY_NAME, BS.SDS_BUNDLE_RECORD_TYPE_ID, BS.SDS_BUNDLE_RECORD_TYPE_NAME, BS.SDS_BUNDLE_PURCHASED_QTY, BS.SDS_BUNDLE_RECEIVED_QTY, BS.LOCATION_ID AS BUNDLE_LOCATION_ID, BS.BUNDLE_PRODUCT_ID, CASE WHEN (RR.BUNDLE_REDEMPTION_STATUS NOTNULL) THEN RR.BUNDLE_REDEMPTION_STATUS WHEN ('Not Redeemed' NOTNULL) THEN 'Not Redeemed'::"VARCHAR" ELSE NULL::"VARCHAR" END AS BUNDLE_REDEMPTION_STATUS, BS.BUNDLE_PURCHASE_CHANNEL, BS.BUNDLE_STATUS, BS.BUNDLE_PURCHASED_TSTMP, RR.BUNDLE_REDEEMED_TSTMP, BS.BUNDLE_REFUNDED_TSTMP, BS.BUNDLE_EXP_DT, BS.PODS_PET_ID, BS.PODS_CUSTOMER_ID, RR.SRC_PET_ID, RR.SRC_PET_NAME, BS.SVCS_PET_GID, RR.SVCS_PET_NAME, RR.PETM_PET_BREED_ID, RR.PETM_PET_BREED_DESC, RR.WEIGHT_IN_LBS, RR.SRC_CUSTOMER_ID, RR.SRC_CUSTOMER_FIRST_NAME, RR.SRC_CUSTOMER_LAST_NAME, BS.SVCS_CUSTOMER_GID, RR.SVCS_CUSTOMER_FIRST_NAME, RR.SVCS_CUSTOMER_LAST_NAME, RR.ASSIGNED_EMPLOYEE_ID, RR.ASSIGNED_EMPLOYEE_FIRST_NAME, RR.ASSIGNED_EMPLOYEE_LAST_NAME, RR.ASSIGNED_EMPLOYEE_DISPLAY_NAME, RR.SDS_EMPLOYEE_GROUP_GID, RR.SDS_EMPLOYEE_GROUP_NAME, ROUND(CASE WHEN (BS.SDS_BUNDLE_RECORD_TYPE_NAME = 'Training'::"VARCHAR") THEN CASE WHEN ((BS.PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT * RR.EMPLOYEE_COMMISSION_RATE_PCT) NOTNULL) THEN (BS.PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT * RR.EMPLOYEE_COMMISSION_RATE_PCT) WHEN (0 NOTNULL) THEN '0'::NUMERIC ELSE NULL::"NUMERIC" END WHEN (RR.EMPLOYEE_COMMISSION_AMT NOTNULL) THEN RR.EMPLOYEE_COMMISSION_AMT WHEN (RA.EMPLOYEE_COMMISSION_AMT NOTNULL) THEN RA.EMPLOYEE_COMMISSION_AMT ELSE '0'::NUMERIC END, 2) AS EMPLOYEE_COMMISSION_AMT, CASE WHEN (RR.EMPLOYEE_COMMISSION_RATE_PCT NOTNULL) THEN RR.EMPLOYEE_COMMISSION_RATE_PCT WHEN (RA.EMPLOYEE_COMMISSION_RATE_PCT NOTNULL) THEN RA.EMPLOYEE_COMMISSION_RATE_PCT ELSE "NUMERIC"(NULL::INT4) END AS EMPLOYEE_COMMISSION_RATE_PCT, RR.EMPLOYEE_GROUP_COMMISSION_AMT, BS.PRIMARY_SERVICE_PRODUCT_ID, BS.SDS_SPECIAL_ID, BS.PURCHASE_PETM_POS_INVOICE_ID, CASE WHEN (RR.SDS_REDEMPTION_ID NOTNULL) THEN RR.SDS_REDEMPTION_ID WHEN ('Not Redeemed' NOTNULL) THEN 'Not Redeemed'::"VARCHAR" ELSE NULL::"VARCHAR" END AS SDS_REDEMPTION_ID, RR.LOCATION_ID AS REDEEMED_LOCATION_ID, RR.PETM_POS_INVOICE_ID AS REDEEMED_PETM_POS_INVOICE_ID, RR.PRODUCT_ID AS REDEEMED_PRODUCT_ID, BS.REDEEMED_QTY, BS.BASE_REDEEMED_QTY, BS.FREE_REDEEMED_QTY, RR.SDS_APPT_CREATION_CHANNEL, RR.APPT_ID, RR.APPT_SERVICE_ID, RR.APPT_TSTMP, RR.APPT_CREATE_TSTMP, CASE WHEN (RR.APPT_SERVICE_ITEM_QTY NOTNULL) THEN RR.APPT_SERVICE_ITEM_QTY WHEN (RA.APPT_SERVICE_ITEM_QTY NOTNULL) THEN RA.APPT_SERVICE_ITEM_QTY ELSE NULL::INT4 END AS APPT_SERVICE_ITEM_QTY, RR.SVCS_APPT_STATUS_GID, RR.SVCS_APPT_STATUS_DESC, RR.SVCS_ORDER_STATUS_GID, RR.SVCS_ORDER_STATUS_DESC, RR.SRC_ORDER_ID, B.CURRENCY_TYPE_ID, B.CURRENCY_TYPE_DESC, BS.HAS_ADD_ON_FLAG, RR.PRIMARY_SERVICE_FLAG, BS.INVOICE_PAID_FLAG, BS.EXPIRED_FLAG, RR.APPT_SERVICE_CANCEL_FLAG, RA.ADDON2_PRODUCT_ID, RA.ADDON3_PRODUCT_ID, RA.ADDON4_PRODUCT_ID, CS.PACKAGE_UNIT_NBR, BS.SDS_PAYMENT_ORIGIN, BS.PURCHASED_QTY, BS.RESERVED_QTY, BS.AVAILABLE_QTY, BS.REFUNDED_QTY, BS.EXPIRED_QTY, RA.TTL_ADDON_QTY, RA.TTL_ADDON_AMT, RR.ORIG_UNIT_PRICE_AMT, RR.LIST_PRICE_AMT, RR.FINAL_UNIT_PRICE_AMT, RR.TOTAL_GROOM_PAY_PRICE_AMT, BS.PRIMARY_SERVICE_ORIG_UNIT_PRICE_AMT, BS.SAVINGS_AMT, CASE WHEN (B.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE CASE WHEN (RR.EXCH_RATE_PCT NOTNULL) THEN RR.EXCH_RATE_PCT WHEN (RA.EXCH_RATE_PCT NOTNULL) THEN RA.EXCH_RATE_PCT ELSE NULL::"NUMERIC" END END AS EXCH_RATE_PCT, BS.SAVINGS_PCT, CASE WHEN ("NUMERIC"(CS.PACKAGE_UNIT_NBR) > BS.PURCHASED_QTY) THEN BS.FREE_UNIT_EXP_DT ELSE BS.BASE_UNIT_EXP_DT END AS UNIT_EXP_DT, LOA.LAST_LOAD_START_TSTMP FROM (((((ADMIN.SDS_BUNDLE_SMRY_RPT_VW BS JOIN CROSS_SEQ CS ON (("NUMERIC"(CS.PACKAGE_UNIT_NBR) <= BS.PURCHASED_QTY))) LEFT JOIN REDEEM_RANKED RR ON (((RR.SDS_BUNDLE_ID = BS.SDS_BUNDLE_ID) AND (RR.REDEEMED_UNIT_NBR = CS.PACKAGE_UNIT_NBR)))) LEFT JOIN REDEEM_ADDONS RA ON (((BS.SDS_BUNDLE_ID = RA.SDS_BUNDLE_ID) AND (RR.SDS_REDEMPTION_ID = RA.SDS_REDEMPTION_ID)))) LEFT JOIN ADMIN.SVCS_INFA_LOAD_CTRL LOA ON ((LOA.SVCS_SRC_CD = 'PRISM'::"VARCHAR"))) CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP B);

\echo
\echo *****  Creating view:  "DD_MARKETPLACE_SETTLED_TXN_SALES_CRCY_VW"

CREATE or replace VIEW  DD_MARKETPLACE_SETTLED_TXN_SALES_CRCY_VW
(
     DAY_DT,
     TXN_TSTMP,
     LOCATION_ID,
     DD_DELIVERY_UUID,
     DASHPASS_ORDER_FLAG,
     TREATS_ID,
     ACTING_CARD_FIRST_SIX,
     ACTING_CARD_LAST_FOUR,
     APPROVAL_CD,
     TXN_AMT,
     SALES_INSTANCE_ID,
     DD_UPDATE_TSTMP,
     DD_LOAD_TSTMP,
     SLS_LOAD_DT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT
) AS
SELECT DD_MARKETPLACE_SETTLED_TXN_SALES_VW.DAY_DT, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.TXN_TSTMP, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.LOCATION_ID, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.DD_DELIVERY_UUID, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.DASHPASS_ORDER_FLAG, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.TREATS_ID, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.ACTING_CARD_FIRST_SIX, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.ACTING_CARD_LAST_FOUR, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.APPROVAL_CD, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.TXN_AMT, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.SALES_INSTANCE_ID, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.DD_UPDATE_TSTMP, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.DD_LOAD_TSTMP, DD_MARKETPLACE_SETTLED_TXN_SALES_VW.SLS_LOAD_DT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE DD_MARKETPLACE_SETTLED_TXN_SALES_VW.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM (ADMIN.DD_MARKETPLACE_SETTLED_TXN_SALES_VW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "DD_MARKETPLACE_INVOICE_COMMISSION_CRCY_VW"

CREATE or replace VIEW  DD_MARKETPLACE_INVOICE_COMMISSION_CRCY_VW
(
     TXN_DT,
     DD_DELIVERY_UUID,
     DASHPASS_ORDER_FLAG,
     DD_INVOICE_NBR,
     COMPANY_ID,
     LOYALTY_NBR,
     CURRENCY_CD,
     TOTAL_SALES_AMT,
     TOTAL_TAX_AMT,
     TOTAL_EXCL_SALES_AMT,
     DD_COMMISSION_RATE_PCT,
     DD_COMMISSION_AMT,
     DD_PICK_AND_PACK_RATE_PCT,
     DD_PICK_AND_PACK_AMT,
     TOTAL_DD_COMMISSION_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT DD_MARKETPLACE_INVOICE_COMMISSION_VW.TXN_DT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.DD_DELIVERY_UUID, DD_MARKETPLACE_INVOICE_COMMISSION_VW.DASHPASS_ORDER_FLAG, DD_MARKETPLACE_INVOICE_COMMISSION_VW.DD_INVOICE_NBR, DD_MARKETPLACE_INVOICE_COMMISSION_VW.COMPANY_ID, DD_MARKETPLACE_INVOICE_COMMISSION_VW.LOYALTY_NBR, DD_MARKETPLACE_INVOICE_COMMISSION_VW.CURRENCY_CD, DD_MARKETPLACE_INVOICE_COMMISSION_VW.TOTAL_SALES_AMT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.TOTAL_TAX_AMT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.TOTAL_EXCL_SALES_AMT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.DD_COMMISSION_RATE_PCT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.DD_COMMISSION_AMT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.DD_PICK_AND_PACK_RATE_PCT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.DD_PICK_AND_PACK_AMT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.TOTAL_DD_COMMISSION_AMT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE DD_MARKETPLACE_INVOICE_COMMISSION_VW.EXCH_RATE_PCT END AS EXCH_RATE_PCT, DD_MARKETPLACE_INVOICE_COMMISSION_VW.UPDATE_TSTMP, DD_MARKETPLACE_INVOICE_COMMISSION_VW.LOAD_TSTMP FROM (ADMIN.DD_MARKETPLACE_INVOICE_COMMISSION_VW CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "DD_MARKETPLACE_DEMAND_SKU_TZ_PRE_VW"

CREATE or replace VIEW  DD_MARKETPLACE_DEMAND_SKU_TZ_PRE_VW
(
     DD_DELIVERY_UUID,
     MERCHANT_STORE_ID,
     ITEM_MERCHANT_SUPPLIED_ID,
     STORE_NAME,
     BUSINESS_NAME,
     ITEM_NAME,
     ITEM_CATEGORY,
     ITEM_PRICE,
     ITEM_QUANTITY,
     ITEM_TAX_AMOUNT,
     TOTAL_ITEM_PRICE,
     FINAL_STATUS,
     CURRENCY_CD,
     DASHPASS_FLAG,
     DELIVERY_CREATED_DATE_UTC,
     DELIVERY_CREATED_TIMESTAMP_UTC,
     STORE_TRANSACTION_DATE_UTC,
     STORE_TRANSACTION_TIMESTAMP_UTC,
     LOAD_TSTMP,
     TIME_ZONE_ID,
     LOCATION_ID,
     SITE_NAME,
     TXN_TSTMP
) AS
SELECT T.DD_DELIVERY_UUID, T.MERCHANT_STORE_ID, T.ITEM_MERCHANT_SUPPLIED_ID, T.STORE_NAME, T.BUSINESS_NAME, T.ITEM_NAME, T.ITEM_CATEGORY, T.ITEM_PRICE, T.ITEM_QUANTITY, T.ITEM_TAX_AMOUNT, T.TOTAL_ITEM_PRICE, T.FINAL_STATUS, T.CURRENCY_CD, T.DASHPASS_FLAG, T.DELIVERY_CREATED_DATE_UTC, T.DELIVERY_CREATED_TIMESTAMP_UTC, T.STORE_TRANSACTION_DATE_UTC, T.STORE_TRANSACTION_TIMESTAMP_UTC, T.LOAD_TSTMP, S.TIME_ZONE_ID, S.LOCATION_ID, S.STORE_NAME AS SITE_NAME, ("TIMESTAMP"(SUBSTR("VARCHAR"(T.DELIVERY_CREATED_DATE_UTC), 1, 19)) - "INTERVAL"(("VARCHAR"(TC.CONVERSION_HOUR) || ' HOUR'::"VARCHAR"))) AS TXN_TSTMP FROM (((ADMIN.DD_MARKETPLACE_DEMAND_SKU_PRE T LEFT JOIN ADMIN.SITE_PROFILE S ON (((T.MERCHANT_STORE_ID = S.STORE_NBR) AND (S.TIME_ZONE_ID <> '0'::"VARCHAR")))) LEFT JOIN ADMIN.DAY_LIGHT_SAVING_DATE DL ON (((T.DELIVERY_CREATED_DATE_UTC >= DL.DAY_LIGHT_SAVING_START_DT) AND (T.DELIVERY_CREATED_DATE_UTC <= DL.DAY_LIGHT_SAVING_END_DT)))) LEFT JOIN ADMIN.TIMEZONE_CONVERSION TC ON ((((S.TIME_ZONE_ID = TC.FROM_TIME_ZONE_ID) AND (TC.TO_TIME_ZONE_ID = 'UTC'::"VARCHAR")) AND ("NUMERIC"(CASE WHEN (DL.DAY_LIGHT_SAVING_START_DT NOTNULL) THEN 1 ELSE 0 END) = TC.DAY_LIGHT_SAVING_FLAG))));

\echo
\echo *****  Creating view:  "PM_VT4YOL5UVZRX2MMHNXUVN4Z4DVY"

CREATE or replace VIEW  PM_VT4YOL5UVZRX2MMHNXUVN4Z4DVY
(
     SDS_ORDER_ITEM_ID,
     SDS_WORK_ORDER_ID,
     SDS_PRODUCT_ID,
     SDS_ORDER_ITEM_NBR,
     ORDER_ITEM_QTY,
     UNIT_PRICE,
     LIST_PRICE,
     PRICE_MANUAL_ADJ_REASON,
     TOTAL_GROOM_PAY_ELIGIBLE_PRICE,
     CHANGED_COMMISSION_TO_SERVICE_RESOURCE_ID,
     CHANGED_TO_COMMISSION_PCT,
     RESOURCE_COMMISSION_AMT,
     SERVICE_TSTMP,
     END_TSTMP,
     SDS_LAST_MODIFIED_TSTMP,
     SDS_CREATED_TSTMP,
     PREPAID_FLAG,
     ORIG_UNIT_PRICE
) AS
SELECT SHORTCUT_TO_SDS_ORDER_ITEM.SDS_ORDER_ITEM_ID, SHORTCUT_TO_SDS_ORDER_ITEM.SDS_WORK_ORDER_ID, SHORTCUT_TO_SDS_ORDER_ITEM.SDS_PRODUCT_ID, SHORTCUT_TO_SDS_ORDER_ITEM.SDS_ORDER_ITEM_NBR, SHORTCUT_TO_SDS_ORDER_ITEM.ORDER_ITEM_QTY, SHORTCUT_TO_SDS_ORDER_ITEM.UNIT_PRICE, SHORTCUT_TO_SDS_ORDER_ITEM.LIST_PRICE, SHORTCUT_TO_SDS_ORDER_ITEM.PRICE_MANUAL_ADJ_REASON, SHORTCUT_TO_SDS_ORDER_ITEM.TOTAL_GROOM_PAY_ELIGIBLE_PRICE, SHORTCUT_TO_SDS_ORDER_ITEM.CHANGED_COMMISSION_TO_SERVICE_RESOURCE_ID, SHORTCUT_TO_SDS_ORDER_ITEM.CHANGED_TO_COMMISSION_PCT, SHORTCUT_TO_SDS_ORDER_ITEM.RESOURCE_COMMISSION_AMT, SHORTCUT_TO_SDS_ORDER_ITEM.SERVICE_TSTMP, SHORTCUT_TO_SDS_ORDER_ITEM.END_TSTMP, SHORTCUT_TO_SDS_ORDER_ITEM.SDS_LAST_MODIFIED_TSTMP, SHORTCUT_TO_SDS_ORDER_ITEM.SDS_CREATED_TSTMP, SHORTCUT_TO_SDS_ORDER_ITEM.PREPAID_FLAG, SHORTCUT_TO_SDS_ORDER_ITEM.ORIG_UNIT_PRICE FROM ADMIN.SDS_ORDER_ITEM SHORTCUT_TO_SDS_ORDER_ITEM WHERE ((SHORTCUT_TO_SDS_ORDER_ITEM.HARD_DELETED_FLAG = '0'::NUMERIC) AND (SHORTCUT_TO_SDS_ORDER_ITEM.DELETED_FLAG = '0'::NUMERIC));

\echo
\echo *****  Creating view:  "PM_VZYDTQWKWXUEGAPJMQRQJYZWT2U"

CREATE or replace VIEW  PM_VZYDTQWKWXUEGAPJMQRQJYZWT2U
(
     SRC_EMPLOYEE_GROUP_ID,
     SVCS_EMPLOYEE_GROUP_GID,
     SVCS_EMPLOYEE_GROUP_DESC
) AS
SELECT PM_A4AETILSLC7G3JXMUT66DZVB3OY.SRC_EMPLOYEE_GROUP_ID, PM_A4AETILSLC7G3JXMUT66DZVB3OY.SVCS_EMPLOYEE_GROUP_GID, PM_A4AETILSLC7G3JXMUT66DZVB3OY.SVCS_EMPLOYEE_GROUP_DESC FROM ADMIN.SVCS_EMPLOYEE_GROUP_XREF_RPT_VW PM_A4AETILSLC7G3JXMUT66DZVB3OY WHERE (PM_A4AETILSLC7G3JXMUT66DZVB3OY.SVCS_SRC_CD = 'PRISM'::"VARCHAR");

\echo
\echo *****  Creating view:  "PM_VPSTMAVPVJPDIOG2CINA2INVYJI"

CREATE or replace VIEW  PM_VPSTMAVPVJPDIOG2CINA2INVYJI
(
     SRC_APPT_ID,
     SRC_APPT_SERVICE_ID,
     COMMISSION_PCT,
     COMMISSION_AMT
) AS
SELECT PM_AMWVKA4DPIX7USYWE34YV7TAFKU.SRC_APPT_ID, PM_AMWVKA4DPIX7USYWE34YV7TAFKU.SRC_APPT_SERVICE_ID, PM_AMWVKA4DPIX7USYWE34YV7TAFKU.COMMISSION_PCT, PM_AMWVKA4DPIX7USYWE34YV7TAFKU.COMMISSION_AMT FROM ADMIN.SVCS_APPT_SERVICE_COMMISSION PM_AMWVKA4DPIX7USYWE34YV7TAFKU WHERE (PM_AMWVKA4DPIX7USYWE34YV7TAFKU.ACTIVE_FLAG = ('1'::NUMERIC(1,0))::NUMERIC(1,0));

\echo
\echo *****  Creating view:  "PM_VDWCZBFDDM5Z4W2J4A6AARKNJSI"

CREATE or replace VIEW  PM_VDWCZBFDDM5Z4W2J4A6AARKNJSI
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "SITE_TRAFFIC_TY2LY_COMP_VW"

CREATE or replace VIEW  SITE_TRAFFIC_TY2LY_COMP_VW
(
     DAY_DT,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     LOCATION_ID,
     PERIOD_START_TSTMP,
     PERIOD_END_TSTMP,
     TY_LY_FLAG,
     COMP_FLAG,
     TRAFFIC_COMP_FLAG,
     ACCURACY_FLAG,
     ORBIT_ID,
     CUST_ENTRY_CNT,
     CUST_EXIT_CNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT DATE(DTL.DAY_DT) AS DAY_DT, DATE(D.WEEK_DT) AS WEEK_DT, D.FISCAL_WK, D.FISCAL_MO, D.FISCAL_YR, ST.LOCATION_ID, ST.PERIOD_START_TSTMP, ST.PERIOD_END_TSTMP, DTL.TY_LY_FLAG, CASE WHEN ((DTL.COMP_IND = 1) AND ((DTL.DAY_DT >= "TIMESTAMP"((DATE(SP.COMP_EFF_DT) + 364))) AND (DTL.DAY_DT <= SP.COMP_END_DT))) THEN 1 ELSE 0 END AS COMP_FLAG, CASE WHEN ((DTL.DAY_DT >= TRFFC_START.TRAFFIC_COMP_START_DT) AND (DTL.DAY_DT <= SP.COMP_END_DT)) THEN 1 ELSE 0 END AS TRAFFIC_COMP_FLAG, ST.ACCURACY_FLAG, ST.ORBIT_ID, ST.CUST_ENTRY_CNT, ST.CUST_EXIT_CNT, ST.UPDATE_TSTMP, ST.LOAD_TSTMP FROM ((((ADMIN.SITE_TRAFFIC ST JOIN ADMIN.DAYS_TY_LY DTL ON (("TIMESTAMP"(ST.DAY_DT) = CASE WHEN (DTL.TY_LY_FLAG = 'LY'::"VARCHAR") THEN "TIMESTAMP"((DATE(DTL.TRANS_DAY_DT) - 364)) ELSE DTL.TRANS_DAY_DT END))) JOIN ADMIN.DAYS D ON ((DTL.DAY_DT = D.DAY_DT))) JOIN ADMIN.SITE_PROFILE_RPT SP ON ((ST.LOCATION_ID = SP.LOCATION_ID))) LEFT JOIN (SELECT PRE.LOCATION_ID, DTL.DAY_DT AS TRAFFIC_COMP_START_DT FROM (((SELECT ST.LOCATION_ID, MIN(CASE WHEN (ST.CUST_EXIT_CNT <> 0) THEN ST.DAY_DT ELSE NULL::DATE END) AS START_DT FROM ADMIN.SITE_TRAFFIC ST GROUP BY ST.LOCATION_ID) PRE JOIN ADMIN.DAYS D ON (("TIMESTAMP"(PRE.START_DT) = D.DAY_DT))) JOIN ADMIN.DAYS_TY_LY DTL ON ((("TIMESTAMP"(CASE WHEN (D.DAY_OF_WK_NBR = 1) THEN PRE.START_DT ELSE ((PRE.START_DT - INT4(D.DAY_OF_WK_NBR)) + 8) END) = DTL.TRANS_DAY_DT) AND (DTL.TY_LY_FLAG = 'LY'::"VARCHAR"))))) TRFFC_START ON ((ST.LOCATION_ID = TRFFC_START.LOCATION_ID)));

\echo
\echo *****  Creating view:  "PM_VAMHNCAI5EDQHNWJMSMRUFYRBYQ"

CREATE or replace VIEW  PM_VAMHNCAI5EDQHNWJMSMRUFYRBYQ
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "PM_VCGC5FXXMS2KI475RDJPUWWTZBQ"

CREATE or replace VIEW  PM_VCGC5FXXMS2KI475RDJPUWWTZBQ
(
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     SHIPPED_QTY,
     ORIG_ORDER_QTY,
     PROJ_ORDER_QTY
) AS
SELECT W.DAY_DT, W.LOCATION_ID, W.PRODUCT_ID, W.FROM_LOCATION_ID, W.SHIPPED_QTY, W.ORIG_ORDER_QTY, D.PROJ_ORDER_QTY FROM (ADMIN.WM_PO_ORDER_DTL_VW W LEFT JOIN ((SELECT DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID, (SUM(DP_ORDER_PROJ_DAY.PROJ_ORDER_QTY))::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_ORDER_PROJ_DAY WHERE (DP_ORDER_PROJ_DAY.DAY_DT >= '2020-01-01 00:00:00'::"TIMESTAMP") GROUP BY DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID) UNION ALL (SELECT "TIMESTAMP"(DP_DEMAND_DAY.DAY_DT) AS DAY_DT, DP_DEMAND_DAY.LOCATION_ID, DP_DEMAND_DAY.FROM_LOCATION_ID, DP_DEMAND_DAY.PRODUCT_ID, (DP_DEMAND_DAY.PROPOSED_QTY)::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_DEMAND_DAY)) D ON ((((((D.LOCATION_ID = W.LOCATION_ID) AND (D.PRODUCT_ID = W.PRODUCT_ID)) AND (D.FROM_LOCATION_ID = W.FROM_LOCATION_ID)) AND (D.DAY_DT = "TIMESTAMP"(W.PO_DOC_DT))) AND ((SUBSTR(W.PO_NBR, 1, 1))::VARCHAR(1) IN (('6'::"VARCHAR")::VARCHAR(1), ('8'::"VARCHAR")::VARCHAR(1))))));

\echo
\echo *****  Creating view:  "PM_VWZI3H267XW647HY7TKNP44JAXE"

CREATE or replace VIEW  PM_VWZI3H267XW647HY7TKNP44JAXE
(
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     SHIPPED_QTY,
     ORIG_ORDER_QTY,
     PROJ_ORDER_QTY
) AS
SELECT W.DAY_DT, W.LOCATION_ID, W.PRODUCT_ID, W.FROM_LOCATION_ID, W.SHIPPED_QTY, W.ORIG_ORDER_QTY, D.PROJ_ORDER_QTY FROM (ADMIN.WM_PO_ORDER_DTL_VW W LEFT JOIN ((SELECT DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID, (SUM(DP_ORDER_PROJ_DAY.PROJ_ORDER_QTY))::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_ORDER_PROJ_DAY WHERE (DP_ORDER_PROJ_DAY.DAY_DT >= '2020-01-01 00:00:00'::"TIMESTAMP") GROUP BY DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID) UNION ALL (SELECT "TIMESTAMP"(DP_DEMAND_DAY.DAY_DT) AS DAY_DT, DP_DEMAND_DAY.LOCATION_ID, DP_DEMAND_DAY.FROM_LOCATION_ID, DP_DEMAND_DAY.PRODUCT_ID, (DP_DEMAND_DAY.PROPOSED_QTY)::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_DEMAND_DAY)) D ON ((((((D.LOCATION_ID = W.LOCATION_ID) AND (D.PRODUCT_ID = W.PRODUCT_ID)) AND (D.FROM_LOCATION_ID = W.FROM_LOCATION_ID)) AND (D.DAY_DT = "TIMESTAMP"(W.PO_DOC_DT))) AND ((SUBSTR(W.PO_NBR, 1, 1))::VARCHAR(1) IN (('6'::"VARCHAR")::VARCHAR(1), ('8'::"VARCHAR")::VARCHAR(1))))));

\echo
\echo *****  Creating view:  "EMPLOYEE_SUPERVISOR_VW"

CREATE or replace VIEW  EMPLOYEE_SUPERVISOR_VW
(
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_LAST_NAME,
     EMPL_STATUS_CD,
     EMPL_SUBGROUP_DESC,
     PS_PERSONNEL_AREA_DESC,
     COST_CENTER_CD,
     SUPERVISOR_1_EMPL_ID,
     SUPERVISOR_1_EMPL_FIRST_NAME,
     SUPERVISOR_1_EMPL_LAST_NAME,
     SUPERVISOR_1_EMPL_SUBGROUP_DESC,
     SUPERVISOR_2_EMPL_ID,
     SUPERVISOR_2_EMPL_FIRST_NAME,
     SUPERVISOR_2_EMPL_LAST_NAME,
     SUPERVISOR_2_EMPL_SUBGROUP_DESC,
     SUPERVISOR_3_EMPL_ID,
     SUPERVISOR_3_EMPL_FIRST_NAME,
     SUPERVISOR_3_EMPL_LAST_NAME,
     SUPERVISOR_3_EMPL_SUBGROUP_DESC,
     SUPERVISOR_4_EMPL_ID,
     SUPERVISOR_4_EMPL_FIRST_NAME,
     SUPERVISOR_4_EMPL_LAST_NAME,
     SUPERVISOR_4_EMPL_SUBGROUP_DESC,
     SUPERVISOR_5_EMPL_ID,
     SUPERVISOR_5_EMPL_FIRST_NAME,
     SUPERVISOR_5_EMPL_LAST_NAME,
     SUPERVISOR_5_EMPL_SUBGROUP_DESC,
     SUPERVISOR_6_EMPL_ID,
     SUPERVISOR_6_EMPL_FIRST_NAME,
     SUPERVISOR_6_EMPL_LAST_NAME,
     SUPERVISOR_6_EMPL_SUBGROUP_DESC,
     SUPERVISOR_7_EMPL_ID,
     SUPERVISOR_7_EMPL_FIRST_NAME,
     SUPERVISOR_7_EMPL_LAST_NAME,
     SUPERVISOR_7_EMPL_SUBGROUP_DESC,
     SUPERVISOR_8_EMPL_ID,
     SUPERVISOR_8_EMPL_FIRST_NAME,
     SUPERVISOR_8_EMPL_LAST_NAME,
     SUPERVISOR_8_EMPL_SUBGROUP_DESC,
     SUPERVISOR_9_EMPL_ID,
     SUPERVISOR_9_EMPL_FIRST_NAME,
     SUPERVISOR_9_EMPL_LAST_NAME,
     SUPERVISOR_9_EMPL_SUBGROUP_DESC,
     SUPERVISOR_10_EMPL_ID,
     SUPERVISOR_10_EMPL_FIRST_NAME,
     SUPERVISOR_10_EMPL_LAST_NAME,
     SUPERVISOR_10_EMPL_SUBGROUP_DESC,
     SUPERVISOR_11_EMPL_ID,
     SUPERVISOR_11_EMPL_FIRST_NAME,
     SUPERVISOR_11_EMPL_LAST_NAME,
     SUPERVISOR_11_EMPL_SUBGROUP_DESC,
     SUPERVISOR_12_EMPL_ID,
     SUPERVISOR_12_EMPL_FIRST_NAME,
     SUPERVISOR_12_EMPL_LAST_NAME,
     SUPERVISOR_12_EMPL_SUBGROUP_DESC
) AS
SELECT E1.EMPLOYEE_ID, E1.EMPL_FIRST_NAME, E1.EMPL_LAST_NAME, E1.EMPL_STATUS_CD, E1.EMPL_SUBGROUP_DESC, E1.PS_PERSONNEL_AREA_DESC, P1.COST_CENTER_CD, E2.EMPLOYEE_ID AS SUPERVISOR_1_EMPL_ID, E2.EMPL_FIRST_NAME AS SUPERVISOR_1_EMPL_FIRST_NAME, E2.EMPL_LAST_NAME AS SUPERVISOR_1_EMPL_LAST_NAME, E2.EMPL_SUBGROUP_DESC AS SUPERVISOR_1_EMPL_SUBGROUP_DESC, E3.EMPLOYEE_ID AS SUPERVISOR_2_EMPL_ID, E3.EMPL_FIRST_NAME AS SUPERVISOR_2_EMPL_FIRST_NAME, E3.EMPL_LAST_NAME AS SUPERVISOR_2_EMPL_LAST_NAME, E3.EMPL_SUBGROUP_DESC AS SUPERVISOR_2_EMPL_SUBGROUP_DESC, E4.EMPLOYEE_ID AS SUPERVISOR_3_EMPL_ID, E4.EMPL_FIRST_NAME AS SUPERVISOR_3_EMPL_FIRST_NAME, E4.EMPL_LAST_NAME AS SUPERVISOR_3_EMPL_LAST_NAME, E4.EMPL_SUBGROUP_DESC AS SUPERVISOR_3_EMPL_SUBGROUP_DESC, E5.EMPLOYEE_ID AS SUPERVISOR_4_EMPL_ID, E5.EMPL_FIRST_NAME AS SUPERVISOR_4_EMPL_FIRST_NAME, E5.EMPL_LAST_NAME AS SUPERVISOR_4_EMPL_LAST_NAME, E5.EMPL_SUBGROUP_DESC AS SUPERVISOR_4_EMPL_SUBGROUP_DESC, E6.EMPLOYEE_ID AS SUPERVISOR_5_EMPL_ID, E6.EMPL_FIRST_NAME AS SUPERVISOR_5_EMPL_FIRST_NAME, E6.EMPL_LAST_NAME AS SUPERVISOR_5_EMPL_LAST_NAME, E6.EMPL_SUBGROUP_DESC AS SUPERVISOR_5_EMPL_SUBGROUP_DESC, E7.EMPLOYEE_ID AS SUPERVISOR_6_EMPL_ID, E7.EMPL_FIRST_NAME AS SUPERVISOR_6_EMPL_FIRST_NAME, E7.EMPL_LAST_NAME AS SUPERVISOR_6_EMPL_LAST_NAME, E7.EMPL_SUBGROUP_DESC AS SUPERVISOR_6_EMPL_SUBGROUP_DESC, E8.EMPLOYEE_ID AS SUPERVISOR_7_EMPL_ID, E8.EMPL_FIRST_NAME AS SUPERVISOR_7_EMPL_FIRST_NAME, E8.EMPL_LAST_NAME AS SUPERVISOR_7_EMPL_LAST_NAME, E8.EMPL_SUBGROUP_DESC AS SUPERVISOR_7_EMPL_SUBGROUP_DESC, E9.EMPLOYEE_ID AS SUPERVISOR_8_EMPL_ID, E9.EMPL_FIRST_NAME AS SUPERVISOR_8_EMPL_FIRST_NAME, E9.EMPL_LAST_NAME AS SUPERVISOR_8_EMPL_LAST_NAME, E9.EMPL_SUBGROUP_DESC AS SUPERVISOR_8_EMPL_SUBGROUP_DESC, E10.EMPLOYEE_ID AS SUPERVISOR_9_EMPL_ID, E10.EMPL_FIRST_NAME AS SUPERVISOR_9_EMPL_FIRST_NAME, E10.EMPL_LAST_NAME AS SUPERVISOR_9_EMPL_LAST_NAME, E10.EMPL_SUBGROUP_DESC AS SUPERVISOR_9_EMPL_SUBGROUP_DESC, E11.EMPLOYEE_ID AS SUPERVISOR_10_EMPL_ID, E11.EMPL_FIRST_NAME AS SUPERVISOR_10_EMPL_FIRST_NAME, E11.EMPL_LAST_NAME AS SUPERVISOR_10_EMPL_LAST_NAME, E11.EMPL_SUBGROUP_DESC AS SUPERVISOR_10_EMPL_SUBGROUP_DESC, E12.EMPLOYEE_ID AS SUPERVISOR_11_EMPL_ID, E12.EMPL_FIRST_NAME AS SUPERVISOR_11_EMPL_FIRST_NAME, E12.EMPL_LAST_NAME AS SUPERVISOR_11_EMPL_LAST_NAME, E12.EMPL_SUBGROUP_DESC AS SUPERVISOR_11_EMPL_SUBGROUP_DESC, E13.EMPLOYEE_ID AS SUPERVISOR_12_EMPL_ID, E13.EMPL_FIRST_NAME AS SUPERVISOR_12_EMPL_FIRST_NAME, E13.EMPL_LAST_NAME AS SUPERVISOR_12_EMPL_LAST_NAME, E13.EMPL_SUBGROUP_DESC AS SUPERVISOR_12_EMPL_SUBGROUP_DESC FROM (((((((((((((ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E1 LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E2 ON (((E1.PS_SUPERVISOR_ID = E2.EMPLOYEE_ID) AND (E1.PS_SUPERVISOR_ID <> E1.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E3 ON (((E2.PS_SUPERVISOR_ID = E3.EMPLOYEE_ID) AND (E2.PS_SUPERVISOR_ID <> E2.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E4 ON (((E3.PS_SUPERVISOR_ID = E4.EMPLOYEE_ID) AND (E3.PS_SUPERVISOR_ID <> E3.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E5 ON (((E4.PS_SUPERVISOR_ID = E5.EMPLOYEE_ID) AND (E4.PS_SUPERVISOR_ID <> E4.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E6 ON (((E5.PS_SUPERVISOR_ID = E6.EMPLOYEE_ID) AND (E5.PS_SUPERVISOR_ID <> E5.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E7 ON (((E6.PS_SUPERVISOR_ID = E7.EMPLOYEE_ID) AND (E6.PS_SUPERVISOR_ID <> E6.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E8 ON (((E7.PS_SUPERVISOR_ID = E8.EMPLOYEE_ID) AND (E7.PS_SUPERVISOR_ID <> E7.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E9 ON (((E8.PS_SUPERVISOR_ID = E9.EMPLOYEE_ID) AND (E8.PS_SUPERVISOR_ID <> E8.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E10 ON (((E9.PS_SUPERVISOR_ID = E10.EMPLOYEE_ID) AND (E9.PS_SUPERVISOR_ID <> E9.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E11 ON (((E10.PS_SUPERVISOR_ID = E11.EMPLOYEE_ID) AND (E10.PS_SUPERVISOR_ID <> E10.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E12 ON (((E11.PS_SUPERVISOR_ID = E12.EMPLOYEE_ID) AND (E11.PS_SUPERVISOR_ID <> E11.EMPLOYEE_ID)))) LEFT JOIN ADMIN.EMPLOYEE_PROFILE_RPT_SDVW E13 ON (((E12.PS_SUPERVISOR_ID = E13.EMPLOYEE_ID) AND (E12.PS_SUPERVISOR_ID <> E12.EMPLOYEE_ID)))) LEFT JOIN ADMIN.PS_DEPARTMENT P1 ON ((E1.PS_DEPT_CD = P1.PS_DEPT_CD)));

\echo
\echo *****  Creating view:  "CUST_CALL_LOG_HIST_VW"

CREATE or replace VIEW  CUST_CALL_LOG_HIST_VW
(
     CUST_CALL_LOG_ID,
     PODS_CUSTOMER_ID,
     CUSTOMER_EID,
     CUSTOMER_FIRST_NAME,
     CUSTOMER_LAST_NAME,
     PODS_PET_ID,
     PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     PET_STATUS,
     PET_LAST_APPT_DT,
     LOCATION_ID,
     LOAD_FISCAL_MO,
     ORIGINAL_SERVICE_TYPE,
     LAST_SERVICE_TYPE,
     ORIGINAL_LIST_NAME,
     LAST_LIST_NAME,
     LAST_CALL_RESULT_ID,
     LAST_CALL_REASON_ID,
     UPDATE_USER_ID,
     LAST_UPDATE_TSTMP,
     LOAD_TSTMP,
     DROP_TSTMP
) AS
WITH TAG_RANK_CUST_CALL_LOG AS (SELECT C.SALON_LAPSED_CUST_CALL_LOG_ID, C.PODS_CUSTOMER_ID, C.CUSTOMER_FIRST_NAME, C.CUSTOMER_LAST_NAME, C.PODS_PET_ID, C.PET_NAME, C.PETM_PET_SPECIES_ID, C.PETM_PET_SPECIES_DESC, C.PETM_PET_BREED_ID, C.PETM_PET_BREED_DESC, C.PET_STATUS, C.PET_LAST_APPT_DT, C.LOCATION_ID, D.FISCAL_MO, C.LIST_NAME, C.CALL_RESULT_ID, C.CALL_REASON_ID, RANK() OVER (PARTITION BY C.SALON_LAPSED_CUST_CALL_LOG_ID  ORDER BY C.SYS_END_TSTMP DESC ) AS DESC_RANK, RANK() OVER (PARTITION BY C.SALON_LAPSED_CUST_CALL_LOG_ID  ORDER BY C.SYS_END_TSTMP ) AS ASC_RANK, C.UPDATE_USER_ID, C.UPDATE_TSTMP, C.LOAD_TSTMP, C.SYS_END_TSTMP FROM (ADMIN.SALON_LAPSED_CUST_CALL_LOG_HIST C JOIN ADMIN.DAYS D ON ((D.DAY_DT = "TIMESTAMP"(DATE(C.LOAD_TSTMP)))))), RANKED_CUST_CALL_LOG AS (SELECT TRC.SALON_LAPSED_CUST_CALL_LOG_ID, TRC.PODS_CUSTOMER_ID, TRC.CUSTOMER_FIRST_NAME, TRC.CUSTOMER_LAST_NAME, TRC.PODS_PET_ID, TRC.PET_NAME, TRC.PETM_PET_SPECIES_ID, TRC.PETM_PET_SPECIES_DESC, TRC.PETM_PET_BREED_ID, TRC.PETM_PET_BREED_DESC, TRC.PET_STATUS, TRC.PET_LAST_APPT_DT, TRC.LOCATION_ID, TRC.FISCAL_MO, TRC.LIST_NAME, TRC.CALL_RESULT_ID, TRC.CALL_REASON_ID, TRC.DESC_RANK, TRC.ASC_RANK, TRC.UPDATE_USER_ID, TRC.UPDATE_TSTMP, TRC.LOAD_TSTMP, TRC.SYS_END_TSTMP FROM TAG_RANK_CUST_CALL_LOG TRC WHERE ((TRC.DESC_RANK = 1) OR (TRC.ASC_RANK = 1))) SELECT RA.SALON_LAPSED_CUST_CALL_LOG_ID AS CUST_CALL_LOG_ID, RA.PODS_CUSTOMER_ID, MAX(X.CUSTOMER_EID) AS CUSTOMER_EID, MAX(RA.CUSTOMER_FIRST_NAME) AS CUSTOMER_FIRST_NAME, MAX(RA.CUSTOMER_LAST_NAME) AS CUSTOMER_LAST_NAME, MAX(RD.PODS_PET_ID) AS PODS_PET_ID, MAX(RD.PET_NAME) AS PET_NAME, MAX(RD.PETM_PET_SPECIES_ID) AS PETM_PET_SPECIES_ID, MAX(RD.PETM_PET_SPECIES_DESC) AS PETM_PET_SPECIES_DESC, MAX(RD.PETM_PET_BREED_ID) AS PETM_PET_BREED_ID, MAX(RD.PETM_PET_BREED_DESC) AS PETM_PET_BREED_DESC, MAX(RD.PET_STATUS) AS PET_STATUS, MAX(RD.PET_LAST_APPT_DT) AS PET_LAST_APPT_DT, RA.LOCATION_ID, RA.FISCAL_MO AS LOAD_FISCAL_MO, CASE WHEN (MAX(RA.LIST_NAME) ~~ LIKE_ESCAPE('FSG%'::"VARCHAR", '\'::"VARCHAR")) THEN 'FSG'::"VARCHAR" WHEN (MAX(RA.LIST_NAME) ~~ LIKE_ESCAPE('BB%'::"VARCHAR", '\'::"VARCHAR")) THEN 'BB'::"VARCHAR" ELSE 'N/A'::"VARCHAR" END AS ORIGINAL_SERVICE_TYPE, CASE WHEN (MAX(RD.LIST_NAME) ~~ LIKE_ESCAPE('FSG%'::"VARCHAR", '\'::"VARCHAR")) THEN 'FSG'::"VARCHAR" WHEN (MAX(RD.LIST_NAME) ~~ LIKE_ESCAPE('BB%'::"VARCHAR", '\'::"VARCHAR")) THEN 'BB'::"VARCHAR" ELSE 'N/A'::"VARCHAR" END AS LAST_SERVICE_TYPE, MAX(RA.LIST_NAME) AS ORIGINAL_LIST_NAME, MAX(RD.LIST_NAME) AS LAST_LIST_NAME, MAX(RD.CALL_RESULT_ID) AS LAST_CALL_RESULT_ID, MAX(RD.CALL_REASON_ID) AS LAST_CALL_REASON_ID, CASE WHEN (MAX(RD.UPDATE_USER_ID) NOTNULL) THEN MAX(RD.UPDATE_USER_ID) WHEN ('Default' NOTNULL) THEN 'Default'::"VARCHAR" ELSE NULL::"VARCHAR" END AS UPDATE_USER_ID, MAX(RD.UPDATE_TSTMP) AS LAST_UPDATE_TSTMP, MAX(RA.LOAD_TSTMP) AS LOAD_TSTMP, MAX(RD.SYS_END_TSTMP) AS DROP_TSTMP FROM ((RANKED_CUST_CALL_LOG RA JOIN RANKED_CUST_CALL_LOG RD ON ((RA.SALON_LAPSED_CUST_CALL_LOG_ID = RD.SALON_LAPSED_CUST_CALL_LOG_ID))) LEFT JOIN ADMIN.CUSTOMER_XREF X ON ((((INT8(X.CUSTOMER_SRC_VALUE) = RA.PODS_CUSTOMER_ID) AND (X.ACTIVE_FLG = 1)) AND (X.CUSTOMER_SRC_ID = 100023)))) WHERE ((RA.ASC_RANK = 1) AND (RD.DESC_RANK = 1)) GROUP BY RA.SALON_LAPSED_CUST_CALL_LOG_ID, RA.PODS_CUSTOMER_ID, RA.LOCATION_ID, RA.FISCAL_MO;

\echo
\echo *****  Creating view:  "PM_VL24KOHBV7DR6RCS67I5CMV7KVY"

CREATE or replace VIEW  PM_VL24KOHBV7DR6RCS67I5CMV7KVY
(
     OMS_ROLE_ID,
     OMS_ROLE_NAME,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_ROLE.OMS_ROLE_ID, SHORTCUT_TO_OMS_ROLE.OMS_ROLE_NAME, SHORTCUT_TO_OMS_ROLE.UPDATE_TSTMP FROM ADMIN.OMS_ROLE SHORTCUT_TO_OMS_ROLE WHERE (SHORTCUT_TO_OMS_ROLE.OMS_ROLE_NAME IN (('Store Manager'::"VARCHAR")::VARCHAR(100), ('CSR'::"VARCHAR")::VARCHAR(100), ('Store Associate'::"VARCHAR")::VARCHAR(100), ('CSR Supervisor'::"VARCHAR")::VARCHAR(100)));

\echo
\echo *****  Creating view:  "PM_VVDW4ITRKHNQPT26O3MANLIVH6I"

CREATE or replace VIEW  PM_VVDW4ITRKHNQPT26O3MANLIVH6I
(
     OMS_ORDER_DISCOUNT_ID,
     OMS_ORDER_ID,
     OMS_COMPANY_ID,
     OMS_ORDER_LN_ID,
     OMS_DISCOUNT_TYPE_ID,
     DISCOUNT_ID,
     REASON_CODE,
     SHORT_DESC,
     CODE_DESC,
     DISCOUNT_AMT,
     DISCOUNT_VALUE,
     DISCOUNT_COMMENTS,
     LAST_UPDATED_SRC,
     CREATED_DT,
     ORDER_NBR,
     OMS_ORDER_CREATED_TSTMP,
     USER_FIRST_NAME,
     USER_LAST_NAME,
     ROLE_NAME,
     DELETE_FLG,
     EXCHANGE_RATE_PCNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT INT4(PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_DISCOUNT_DETAIL_ID) AS OMS_ORDER_DISCOUNT_ID, INT4(PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_ID) AS OMS_ORDER_ID, INT4(PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID) AS OMS_COMPANY_ID, INT4(CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID END) AS OMS_ORDER_LN_ID, INT4(PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_DISCOUNT_TYPE_ID) AS OMS_DISCOUNT_TYPE_ID, PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_EXT_DISCOUNT_ID AS DISCOUNT_ID, PM_AM3BYDAT2CI7LA7N7XM35VZROTM.OMS_REASON_CD AS REASON_CODE, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_SHORT_DESC AS SHORT_DESC, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_DESC AS CODE_DESC, PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_AMT, CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE END AS DISCOUNT_VALUE, PM_AM3BYDAT2CI7LA7N7XM35VZROTM.COMMENTS AS DISCOUNT_COMMENTS, PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_LAST_UPDATED_SOURCE AS LAST_UPDATED_SRC, PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_CREATED_TSTMP AS CREATED_DT, CASE WHEN ((SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 1, 1) || ''::"VARCHAR") = 'X'::"VARCHAR") THEN INT8("NUMERIC"(SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2, LENGTH(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)), 2490386)) WHEN (LOWER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID) <> UPPER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)) THEN '0'::INT8 ELSE INT8("NUMERIC"(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2490386)) END AS ORDER_NBR, PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP AS OMS_ORDER_CREATED_TSTMP, SHORTCUT_TO_OMS_UCL_USER.USER_FIRST_NAME, SHORTCUT_TO_OMS_UCL_USER.USER_LAST_NAME, PM_VL24KOHBV7DR6RCS67I5CMV7KVY.OMS_ROLE_NAME AS ROLE_NAME, INT4(PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.MARK_FOR_DELETION_FLAG) AS DELETE_FLG, CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END AS EXCHANGE_RATE_PCNT, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (SHORTCUT_TO_OMS_ORDER_DISCOUNT.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE SHORTCUT_TO_OMS_ORDER_DISCOUNT.LOAD_TSTMP END AS LOAD_TSTMP FROM (((((((((ADMIN.OMS_A_DISCOUNT_DETAIL PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4 JOIN ADMIN.OMS_A_DISCOUNT_TYPE PM_AM245UKQSELWPH7Z4GQGNHWPUKE ON ((PM_AM245UKQSELWPH7Z4GQGNHWPUKE.OMS_DISCOUNT_TYPE_ID = PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_DISCOUNT_TYPE_ID))) JOIN ADMIN.OMS_PURCHASE_ORDERS PM_AHHPDWTYJCN3T2EJY24M4SORXD4 ON ((PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_PURCHASE_ORDERS_ID = PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_ID))) LEFT JOIN ADMIN.OMS_OBJECT_REASON_CODES PM_AM3BYDAT2CI7LA7N7XM35VZROTM ON ((PM_AM3BYDAT2CI7LA7N7XM35VZROTM.OMS_REASON_CODES_GROUP_ID = PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_REASON_ID))) LEFT JOIN ADMIN.OMS_SYS_CODE SHORTCUT_TO_OMS_SYS_CODE ON (((SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_ID = PM_AM3BYDAT2CI7LA7N7XM35VZROTM.OMS_REASON_CD) AND (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_TYPE = PM_AM3BYDAT2CI7LA7N7XM35VZROTM.OMS_REASON_TYPE)))) LEFT JOIN ADMIN.OMS_UCL_USER SHORTCUT_TO_OMS_UCL_USER ON ((SHORTCUT_TO_OMS_UCL_USER.USER_NAME = PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_LAST_UPDATED_SOURCE))) LEFT JOIN ADMIN.OMS_ACCESS_CONTROL SHORTCUT_TO_OMS_ACCESS_CONTROL ON ((SHORTCUT_TO_OMS_ACCESS_CONTROL.OMS_UCL_USER_ID = SHORTCUT_TO_OMS_UCL_USER.OMS_UCL_USER_ID))) LEFT JOIN ADMIN.PM_VL24KOHBV7DR6RCS67I5CMV7KVY ON ((PM_VL24KOHBV7DR6RCS67I5CMV7KVY.OMS_ROLE_ID = SHORTCUT_TO_OMS_ACCESS_CONTROL.OMS_ROLE_ID))) LEFT JOIN ADMIN.CURRENCY_DAY PM_ALKP_CURRENCY_DAY_1 ON ((PM_ALKP_CURRENCY_DAY_1.DAY_DT = DATE_TRUNC('days'::"VARCHAR", PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP)))) LEFT JOIN ADMIN.OMS_ORDER_DISCOUNT SHORTCUT_TO_OMS_ORDER_DISCOUNT ON (((SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_DISCOUNT_ID = INT4(PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_DISCOUNT_DETAIL_ID)) AND (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_ID = INT4(PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_ID))))) WHERE (((PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_AM245UKQSELWPH7Z4GQGNHWPUKE.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_AHHPDWTYJCN3T2EJY24M4SORXD4.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_AM3BYDAT2CI7LA7N7XM35VZROTM.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_SYS_CODE.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_UCL_USER.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_ACCESS_CONTROL.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_VL24KOHBV7DR6RCS67I5CMV7KVY.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR")))) AND (CASE WHEN (CASE WHEN ((SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_DISCOUNT_ID ISNULL) AND (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_ID ISNULL)) THEN 1 WHEN (((NOT (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_DISCOUNT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_ID ISNULL))) AND (((((((((((((((((((PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_COMPANY_ID)) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID END <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_LN_ID))) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_DISCOUNT_TYPE_ID <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_DISCOUNT_TYPE_ID))) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_EXT_DISCOUNT_ID <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_ID)) OR (PM_AM3BYDAT2CI7LA7N7XM35VZROTM.OMS_REASON_CD <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.REASON_CODE)) OR (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_SHORT_DESC <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.SHORT_DESC)) OR (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_DESC <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.CODE_DESC)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_AMT <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_AMT)) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_VALUE)) OR (PM_AM3BYDAT2CI7LA7N7XM35VZROTM.COMMENTS <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_COMMENTS)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_LAST_UPDATED_SOURCE <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.LAST_UPDATED_SRC)) OR (DATE_TRUNC('days'::"VARCHAR", PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_CREATED_TSTMP) <> DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.CREATED_DT)))) OR (CASE WHEN ((SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 1, 1) || ''::"VARCHAR") = 'X'::"VARCHAR") THEN INT8("NUMERIC"(SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2, LENGTH(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)), 2490386)) WHEN (LOWER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID) <> UPPER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)) THEN '0'::INT8 ELSE INT8("NUMERIC"(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2490386)) END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.ORDER_NBR)) OR (PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_UCL_USER.USER_FIRST_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.USER_FIRST_NAME)) OR (SHORTCUT_TO_OMS_UCL_USER.USER_LAST_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.USER_LAST_NAME)) OR (PM_VL24KOHBV7DR6RCS67I5CMV7KVY.OMS_ROLE_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.ROLE_NAME)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.MARK_FOR_DELETION_FLAG <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.DELETE_FLG))) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.EXCHANGE_RATE_PCNT))) THEN 2 ELSE 3 END = 1) THEN 0 WHEN (CASE WHEN ((SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_DISCOUNT_ID ISNULL) AND (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_ID ISNULL)) THEN 1 WHEN (((NOT (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_DISCOUNT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_ID ISNULL))) AND (((((((((((((((((((PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_COMPANY_ID)) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID END <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_LN_ID))) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_DISCOUNT_TYPE_ID <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_DISCOUNT_TYPE_ID))) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_EXT_DISCOUNT_ID <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_ID)) OR (PM_AM3BYDAT2CI7LA7N7XM35VZROTM.OMS_REASON_CD <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.REASON_CODE)) OR (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_SHORT_DESC <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.SHORT_DESC)) OR (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_DESC <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.CODE_DESC)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_AMT <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_AMT)) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_VALUE)) OR (PM_AM3BYDAT2CI7LA7N7XM35VZROTM.COMMENTS <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_COMMENTS)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_LAST_UPDATED_SOURCE <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.LAST_UPDATED_SRC)) OR (DATE_TRUNC('days'::"VARCHAR", PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_CREATED_TSTMP) <> DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.CREATED_DT)))) OR (CASE WHEN ((SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 1, 1) || ''::"VARCHAR") = 'X'::"VARCHAR") THEN INT8("NUMERIC"(SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2, LENGTH(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)), 2490386)) WHEN (LOWER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID) <> UPPER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)) THEN '0'::INT8 ELSE INT8("NUMERIC"(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2490386)) END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.ORDER_NBR)) OR (PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_UCL_USER.USER_FIRST_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.USER_FIRST_NAME)) OR (SHORTCUT_TO_OMS_UCL_USER.USER_LAST_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.USER_LAST_NAME)) OR (PM_VL24KOHBV7DR6RCS67I5CMV7KVY.OMS_ROLE_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.ROLE_NAME)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.MARK_FOR_DELETION_FLAG <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.DELETE_FLG))) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.EXCHANGE_RATE_PCNT))) THEN 2 ELSE 3 END = 2) THEN 1 WHEN (CASE WHEN ((SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_DISCOUNT_ID ISNULL) AND (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_ID ISNULL)) THEN 1 WHEN (((NOT (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_DISCOUNT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_ID ISNULL))) AND (((((((((((((((((((PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_COMPANY_ID)) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_ENTITY_LINE_ID END <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_LN_ID))) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_DISCOUNT_TYPE_ID <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_DISCOUNT_TYPE_ID))) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_EXT_DISCOUNT_ID <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_ID)) OR (PM_AM3BYDAT2CI7LA7N7XM35VZROTM.OMS_REASON_CD <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.REASON_CODE)) OR (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_SHORT_DESC <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.SHORT_DESC)) OR (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_DESC <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.CODE_DESC)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_AMT <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_AMT)) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE ISNULL) THEN '0'::NUMERIC ELSE PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.DISCOUNT_VALUE END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_VALUE)) OR (PM_AM3BYDAT2CI7LA7N7XM35VZROTM.COMMENTS <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.DISCOUNT_COMMENTS)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_LAST_UPDATED_SOURCE <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.LAST_UPDATED_SRC)) OR (DATE_TRUNC('days'::"VARCHAR", PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_CREATED_TSTMP) <> DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.CREATED_DT)))) OR (CASE WHEN ((SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 1, 1) || ''::"VARCHAR") = 'X'::"VARCHAR") THEN INT8("NUMERIC"(SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2, LENGTH(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)), 2490386)) WHEN (LOWER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID) <> UPPER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)) THEN '0'::INT8 ELSE INT8("NUMERIC"(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2490386)) END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.ORDER_NBR)) OR (PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_UCL_USER.USER_FIRST_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.USER_FIRST_NAME)) OR (SHORTCUT_TO_OMS_UCL_USER.USER_LAST_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.USER_LAST_NAME)) OR (PM_VL24KOHBV7DR6RCS67I5CMV7KVY.OMS_ROLE_NAME <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.ROLE_NAME)) OR (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.MARK_FOR_DELETION_FLAG <> "NUMERIC"(SHORTCUT_TO_OMS_ORDER_DISCOUNT.DELETE_FLG))) OR (CASE WHEN (PM_ACTCJDIQGAPQOHLXMTWIEHZX3Y4.OMS_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END <> SHORTCUT_TO_OMS_ORDER_DISCOUNT.EXCHANGE_RATE_PCNT))) THEN 2 ELSE 3 END = 3) THEN 3 ELSE NULL::INT4 END = 1));

\echo
\echo *****  Creating view:  "PM_VN7DMMYQP33NMEVMY2YCJILNGCM"

CREATE or replace VIEW  PM_VN7DMMYQP33NMEVMY2YCJILNGCM
(
     PRODUCT_ID,
     LOCATION_ID,
     SKU_LINK_TYPE_CD,
     SKU_LINK_EFF_DT,
     LINK_PRODUCT_ID,
     LINK_LOCATION_ID,
     SKU_LINK_END_DT,
     LOAD_DT
) AS
SELECT SHORTCUT_TO_DP_SKU_LINK.PRODUCT_ID, SHORTCUT_TO_DP_SKU_LINK.LOCATION_ID, SHORTCUT_TO_DP_SKU_LINK.SKU_LINK_TYPE_CD, SHORTCUT_TO_DP_SKU_LINK.SKU_LINK_EFF_DT, SHORTCUT_TO_DP_SKU_LINK.LINK_PRODUCT_ID, SHORTCUT_TO_DP_SKU_LINK.LINK_LOCATION_ID, SHORTCUT_TO_DP_SKU_LINK.SKU_LINK_END_DT, SHORTCUT_TO_DP_SKU_LINK.LOAD_DT FROM ADMIN.DP_SKU_LINK SHORTCUT_TO_DP_SKU_LINK WHERE ((SHORTCUT_TO_DP_SKU_LINK.SKU_LINK_TYPE_CD IN (('SUB'::"VARCHAR")::VARCHAR(3))) AND (SHORTCUT_TO_DP_SKU_LINK.SKU_LINK_EFF_DT >= (SELECT MIN(DP_SKU_LINK_PRE.SKU_LINK_EFF_DT) AS MIN FROM ADMIN.DP_SKU_LINK_PRE)));

\echo
\echo *****  Creating view:  "PM_VYE7OXKASRI5DGX5SGITJETHABA"

CREATE or replace VIEW  PM_VYE7OXKASRI5DGX5SGITJETHABA
(
     PRODUCT_ID,
     LOCATION_ID,
     SKU_LINK_TYPE_CD,
     SKU_LINK_EFF_DT,
     LINK_PRODUCT_ID,
     LINK_LOCATION_ID,
     SKU_LINK_END_DT,
     LOAD_DT
) AS
SELECT SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID, SHORTCUT_TO_SITE_PROFILE.LOCATION_ID, SHORTCUT_TO_SAP_SKU_LINK_TYPE1.EDW_SKU_LINK_TYPE_CD AS SKU_LINK_TYPE_CD, SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_EFF_DT, SHORTCUT_TO_SKU_PROFILE1.PRODUCT_ID AS LINK_PRODUCT_ID, SHORTCUT_TO_SITE_PROFILE1.LOCATION_ID AS LINK_LOCATION_ID, SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_END_DT, CASE WHEN (CASE WHEN ((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT <> TO_TIMESTAMP('01-01-1900'::"VARCHAR", 'DD-MM-YYYY'::"VARCHAR"))) THEN 'DELETE'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_END_DT <> PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT)) THEN 'UPDATE'::"VARCHAR" ELSE ''::"VARCHAR" END = 'INSERT'::"VARCHAR") THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LOAD_DT END AS LOAD_DT FROM (ADMIN.PM_VN7DMMYQP33NMEVMY2YCJILNGCM FULL JOIN (ADMIN.SAP_SKU_LINK_TYPE SHORTCUT_TO_SAP_SKU_LINK_TYPE1 JOIN (ADMIN.SKU_PROFILE SHORTCUT_TO_SKU_PROFILE1 JOIN (ADMIN.SITE_PROFILE SHORTCUT_TO_SITE_PROFILE1 JOIN (ADMIN.SKU_PROFILE SHORTCUT_TO_SKU_PROFILE JOIN (ADMIN.SITE_PROFILE SHORTCUT_TO_SITE_PROFILE JOIN ADMIN.DP_SKU_LINK_PRE SHORTCUT_TO_DP_SKU_LINK_PRE ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.TO_STORE_NBR = SHORTCUT_TO_SITE_PROFILE.STORE_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.TO_SKU_NBR = SHORTCUT_TO_SKU_PROFILE.SKU_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.FROM_STORE_NBR = SHORTCUT_TO_SITE_PROFILE1.STORE_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.FROM_SKU_NBR = SHORTCUT_TO_SKU_PROFILE1.SKU_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_TYPE_CD = SHORTCUT_TO_SAP_SKU_LINK_TYPE1.SAP_SKU_LINK_TYPE_CD))) ON (((((((SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID) AND (SHORTCUT_TO_SITE_PROFILE.LOCATION_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LOCATION_ID)) AND (SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_EFF_DT = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_EFF_DT)) AND (SHORTCUT_TO_SITE_PROFILE1.LOCATION_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LINK_LOCATION_ID)) AND (SHORTCUT_TO_SKU_PROFILE1.PRODUCT_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LINK_PRODUCT_ID)) AND (SHORTCUT_TO_SAP_SKU_LINK_TYPE1.EDW_SKU_LINK_TYPE_CD = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_TYPE_CD)))) WHERE ((CASE WHEN ((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT <> '1900-01-01 00:00:00'::"TIMESTAMP")) THEN 'DELETE'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_END_DT <> PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT)) THEN 'UPDATE'::"VARCHAR" ELSE ''::"VARCHAR" END IN (('INSERT'::"VARCHAR")::VARCHAR(6), ('UPDATE'::"VARCHAR")::VARCHAR(6))) AND (CASE WHEN (CASE WHEN ((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT <> TO_TIMESTAMP('01-01-1900'::"VARCHAR", 'DD-MM-YYYY'::"VARCHAR"))) THEN 'DELETE'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_END_DT <> PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT)) THEN 'UPDATE'::"VARCHAR" ELSE ''::"VARCHAR" END = 'INSERT'::"VARCHAR") THEN 0 ELSE 1 END = 1));

\echo
\echo *****  Creating view:  "PM_VBD6I6IFKABD3WO3KMMNZ2TE25U"

CREATE or replace VIEW  PM_VBD6I6IFKABD3WO3KMMNZ2TE25U
(
     PRODUCT_ID,
     LOCATION_ID,
     SKU_LINK_TYPE_CD,
     SKU_LINK_EFF_DT,
     LINK_PRODUCT_ID,
     LINK_LOCATION_ID,
     SKU_LINK_END_DT,
     LOAD_DT
) AS
SELECT PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID, PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LOCATION_ID, PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_TYPE_CD, PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_EFF_DT, PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LINK_PRODUCT_ID, PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LINK_LOCATION_ID, TO_TIMESTAMP('01-01-1900'::"VARCHAR", 'DD-MM-YYYY'::"VARCHAR") AS SKU_LINK_END_DT, PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LOAD_DT FROM (ADMIN.PM_VN7DMMYQP33NMEVMY2YCJILNGCM FULL JOIN (ADMIN.SAP_SKU_LINK_TYPE SHORTCUT_TO_SAP_SKU_LINK_TYPE1 JOIN (ADMIN.SKU_PROFILE SHORTCUT_TO_SKU_PROFILE1 JOIN (ADMIN.SITE_PROFILE SHORTCUT_TO_SITE_PROFILE1 JOIN (ADMIN.SKU_PROFILE SHORTCUT_TO_SKU_PROFILE JOIN (ADMIN.SITE_PROFILE SHORTCUT_TO_SITE_PROFILE JOIN ADMIN.DP_SKU_LINK_PRE SHORTCUT_TO_DP_SKU_LINK_PRE ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.TO_STORE_NBR = SHORTCUT_TO_SITE_PROFILE.STORE_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.TO_SKU_NBR = SHORTCUT_TO_SKU_PROFILE.SKU_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.FROM_STORE_NBR = SHORTCUT_TO_SITE_PROFILE1.STORE_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.FROM_SKU_NBR = SHORTCUT_TO_SKU_PROFILE1.SKU_NBR))) ON ((SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_TYPE_CD = SHORTCUT_TO_SAP_SKU_LINK_TYPE1.SAP_SKU_LINK_TYPE_CD))) ON (((((((SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID) AND (SHORTCUT_TO_SITE_PROFILE.LOCATION_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LOCATION_ID)) AND (SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_EFF_DT = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_EFF_DT)) AND (SHORTCUT_TO_SITE_PROFILE1.LOCATION_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LINK_LOCATION_ID)) AND (SHORTCUT_TO_SKU_PROFILE1.PRODUCT_ID = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.LINK_PRODUCT_ID)) AND (SHORTCUT_TO_SAP_SKU_LINK_TYPE1.EDW_SKU_LINK_TYPE_CD = PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_TYPE_CD)))) WHERE ((CASE WHEN ((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT <> TO_TIMESTAMP('01-01-1900'::"VARCHAR", 'DD-MM-YYYY'::"VARCHAR"))) THEN 'DELETE'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_SKU_PROFILE.PRODUCT_ID ISNULL)) AND (NOT (PM_VN7DMMYQP33NMEVMY2YCJILNGCM.PRODUCT_ID ISNULL))) AND (SHORTCUT_TO_DP_SKU_LINK_PRE.SKU_LINK_END_DT <> PM_VN7DMMYQP33NMEVMY2YCJILNGCM.SKU_LINK_END_DT)) THEN 'UPDATE'::"VARCHAR" ELSE ''::"VARCHAR" END = 'DELETE'::"VARCHAR") AND (1 = 1));

\echo
\echo *****  Creating view:  "PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4"

CREATE or replace VIEW  PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4
(
     OMS_INVOICE_ID,
     OMS_INVOICE_NBR,
     OMS_TC_COMPANY_ID,
     OMS_ENTITY_ID,
     OMS_INVOICE_TYPE,
     OMS_INVOICE_CREATION_TSTMP,
     OMS_INVOICE_STATUS_ID,
     PUBLISHED_FLAG,
     CURRENCY_CD,
     HEADER_TAX_AMT,
     HEADER_CHARGE_AMT,
     HEADER_DISCOUNT_AMT,
     INVOICE_AMT,
     INVOICE_AMT_PROCESSED,
     OMS_CREATED_SOURCE,
     OMS_CREATED_SOURCE_TYPE_ID,
     OMS_LAST_UPDATED_TSTMP,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_NBR, SHORTCUT_TO_OMS_A_INVOICE.OMS_TC_COMPANY_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_ENTITY_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_STATUS_ID, SHORTCUT_TO_OMS_A_INVOICE.PUBLISHED_FLAG, SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD, SHORTCUT_TO_OMS_A_INVOICE.HEADER_TAX_AMT, SHORTCUT_TO_OMS_A_INVOICE.HEADER_CHARGE_AMT, SHORTCUT_TO_OMS_A_INVOICE.HEADER_DISCOUNT_AMT, SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT, SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT_PROCESSED, SHORTCUT_TO_OMS_A_INVOICE.OMS_CREATED_SOURCE, SHORTCUT_TO_OMS_A_INVOICE.OMS_CREATED_SOURCE_TYPE_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_LAST_UPDATED_TSTMP, SHORTCUT_TO_OMS_A_INVOICE.UPDATE_TSTMP FROM ADMIN.OMS_A_INVOICE SHORTCUT_TO_OMS_A_INVOICE WHERE (SHORTCUT_TO_OMS_A_INVOICE.UPDATE_TSTMP > "TIMESTAMP"(DATE('now(0)'::"VARCHAR")));

\echo
\echo *****  Creating view:  "PM_VDX2UAEDJ3KFKQANY6PR3HXKFXQ"

CREATE or replace VIEW  PM_VDX2UAEDJ3KFKQANY6PR3HXKFXQ
(
     OMS_INVOICE_ID,
     OMS_INVOICE_NBR,
     OMS_ORDER_ID,
     OMS_COMPANY_ID,
     OMS_INVOICE_TYPE_ID,
     INVOICE_CREATE_TSTMP,
     INVOICE_LAST_UPD_TSTMP,
     CREATED_SOURCE_TYPE,
     CREATED_SOURCE,
     INVOICE_STATUS_ID,
     INVOICE_PUBLISHED_FLAG,
     INVOICE_TAX_AMT,
     INVOICE_CHARGE_AMT,
     INVOICE_DISC_AMT,
     INVOICE_TOTAL_AMT,
     INVOICE_AMT_PROCESSED,
     CURRENCY_CD,
     EXCHANGE_RATE_PCNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT INT8(PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_ID) AS OMS_INVOICE_ID, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_NBR, INT4(PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_ENTITY_ID) AS OMS_ORDER_ID, INT4(PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_TC_COMPANY_ID) AS OMS_COMPANY_ID, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE_ID, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_CREATION_TSTMP AS INVOICE_CREATE_TSTMP, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_LAST_UPDATED_TSTMP AS INVOICE_LAST_UPD_TSTMP, INT4(PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_CREATED_SOURCE_TYPE_ID) AS CREATED_SOURCE_TYPE, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_CREATED_SOURCE AS CREATED_SOURCE, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_STATUS_ID AS INVOICE_STATUS_ID, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.PUBLISHED_FLAG AS INVOICE_PUBLISHED_FLAG, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.HEADER_TAX_AMT AS INVOICE_TAX_AMT, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.HEADER_CHARGE_AMT AS INVOICE_CHARGE_AMT, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.HEADER_DISCOUNT_AMT AS INVOICE_DISC_AMT, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.INVOICE_AMT AS INVOICE_TOTAL_AMT, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.INVOICE_AMT_PROCESSED, PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.CURRENCY_CD, CASE WHEN (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.CURRENCY_CD <> 'USD'::"VARCHAR") THEN PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END AS EXCHANGE_RATE_PCNT, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (SHORTCUT_TO_OMS_INVOICE.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE SHORTCUT_TO_OMS_INVOICE.LOAD_TSTMP END AS LOAD_TSTMP FROM (((ADMIN.PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4 JOIN (SELECT DISTINCT PM_AR6OENHKW5JKI3VW7XH3JRSKDLU.OMS_PURCHASE_ORDERS_ID AS PM_A0 FROM ADMIN.OMS_EDW_LOAD_CTRL_PRE PM_AR6OENHKW5JKI3VW7XH3JRSKDLU) PM_A7GKUNIUZHG2ETZJKOD4VLTS55Y ON ((PM_A7GKUNIUZHG2ETZJKOD4VLTS55Y.PM_A0 = PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_ENTITY_ID))) LEFT JOIN ADMIN.CURRENCY_DAY PM_ALKP_CURRENCY_DAY_1 ON ((PM_ALKP_CURRENCY_DAY_1.DAY_DT = CASE WHEN (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_LAST_UPDATED_TSTMP ISNULL) THEN DATE_TRUNC('days'::"VARCHAR", PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_CREATION_TSTMP) ELSE DATE_TRUNC('days'::"VARCHAR", PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_LAST_UPDATED_TSTMP) END))) LEFT JOIN ADMIN.OMS_INVOICE SHORTCUT_TO_OMS_INVOICE ON ((SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID = INT8(PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_ID)))) WHERE (((SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL) OR ((NOT (SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL)) AND ((PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_NBR <> SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_NBR) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_TC_COMPANY_ID <> "NUMERIC"(SHORTCUT_TO_OMS_INVOICE.OMS_COMPANY_ID)) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_ENTITY_ID <> "NUMERIC"(SHORTCUT_TO_OMS_INVOICE.OMS_ORDER_ID)) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_TYPE <> SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_TYPE_ID) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_CREATION_TSTMP <> SHORTCUT_TO_OMS_INVOICE.INVOICE_CREATE_TSTMP) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_LAST_UPDATED_TSTMP <> SHORTCUT_TO_OMS_INVOICE.INVOICE_LAST_UPD_TSTMP) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_CREATED_SOURCE <> SHORTCUT_TO_OMS_INVOICE.CREATED_SOURCE) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_CREATED_SOURCE_TYPE_ID <> "NUMERIC"(SHORTCUT_TO_OMS_INVOICE.CREATED_SOURCE_TYPE)) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.OMS_INVOICE_STATUS_ID <> SHORTCUT_TO_OMS_INVOICE.INVOICE_STATUS_ID) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.PUBLISHED_FLAG <> SHORTCUT_TO_OMS_INVOICE.INVOICE_PUBLISHED_FLAG) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.HEADER_TAX_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_TAX_AMT) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.HEADER_CHARGE_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_CHARGE_AMT) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.HEADER_DISCOUNT_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_DISC_AMT) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.INVOICE_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_TOTAL_AMT) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.INVOICE_AMT_PROCESSED <> SHORTCUT_TO_OMS_INVOICE.INVOICE_AMT_PROCESSED) OR (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.CURRENCY_CD <> SHORTCUT_TO_OMS_INVOICE.CURRENCY_CD) OR (CASE WHEN (PM_VAN6PNLEUT2WZVVW3CQCCOJ4CA4.CURRENCY_CD <> 'USD'::"VARCHAR") THEN PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END <> SHORTCUT_TO_OMS_INVOICE.EXCHANGE_RATE_PCNT)))) AND (CASE WHEN (CASE WHEN (SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL) THEN 1 ELSE 2 END = 1) THEN 0 WHEN (CASE WHEN (SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL) THEN 1 ELSE 2 END = 2) THEN 1 ELSE NULL::INT4 END = 1));

\echo
\echo *****  Creating view:  "PM_V75NE2MGILJHQMCXRW3EDCS62CA"

CREATE or replace VIEW  PM_V75NE2MGILJHQMCXRW3EDCS62CA
(
     OMS_INVOICE_ID,
     OMS_INVOICE_LN_ID,
     OMS_INVOICE_NBR,
     OMS_INVOICE_LN_NBR,
     OMS_ORDER_ID,
     OMS_ORDER_NBR,
     OMS_ORDER_LN_ID,
     OMS_DIST_ORDER_ID,
     OMS_CO_LN_NBR,
     ORDERED_QTY,
     INVOICED_QTY,
     UNIT_PRICE_AMT,
     LINE_TOTAL_CHARGE_AMT,
     LINE_TOTAL_DISC_AMT,
     LINE_TOTAL_TAX_AMT,
     INVOICE_TOTAL_AMT,
     INVOICE_AMT_PROCESSED,
     CURRENCY_CD,
     EXCHANGE_RATE_PCNT,
     INVOICE_CREATE_TSTMP,
     INVOICE_LAST_UPD_TSTMP,
     INVOICE_STATUS_ID,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT INT8(SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_ID) AS OMS_INVOICE_ID, INT8(SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_INVOICE_LINE_ID) AS OMS_INVOICE_LN_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_NBR, SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_INVOICE_LINE_NBR AS OMS_INVOICE_LN_NBR, INT4(SHORTCUT_TO_OMS_A_INVOICE.OMS_ENTITY_ID) AS OMS_ORDER_ID, PM_AR6OENHKW5JKI3VW7XH3JRSKDLU.OMS_TC_PURCHASE_ORDERS_ID AS OMS_ORDER_NBR, INT4(SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ORDER_LINE_ID) AS OMS_ORDER_LN_ID, CASE WHEN (INT4(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_ORDER_ID) ISNULL) THEN -9999 ELSE INT4(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_ORDER_ID) END AS OMS_DIST_ORDER_ID, SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ENTITY_LINE_NBR AS OMS_CO_LN_NBR, SHORTCUT_TO_OMS_A_INVOICE_LINE.ORDERED_QTY, SHORTCUT_TO_OMS_A_INVOICE_LINE.INVOICED_QTY, SHORTCUT_TO_OMS_A_INVOICE_LINE.UNIT_PRICE_AMT, SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_CHARGE_AMT AS LINE_TOTAL_CHARGE_AMT, SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_DISCOUNT_AMT AS LINE_TOTAL_DISC_AMT, SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_TAX_AMT AS LINE_TOTAL_TAX_AMT, SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT AS INVOICE_TOTAL_AMT, SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT_PROCESSED, SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD, CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD <> 'USD'::"VARCHAR") THEN PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END AS EXCHANGE_RATE_PCNT, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP AS INVOICE_CREATE_TSTMP, SHORTCUT_TO_OMS_A_INVOICE.OMS_LAST_UPDATED_TSTMP AS INVOICE_LAST_UPD_TSTMP, INT4(SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_STATUS_ID) AS INVOICE_STATUS_ID, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE SHORTCUT_TO_OMS_INVOICE_LN.LOAD_TSTMP END AS LOAD_TSTMP FROM ((((((ADMIN.OMS_ORDER_LINE_ITEM PM_A7QKQIF4RFIPU26BRCSYZZMULSQ LEFT JOIN (ADMIN.OMS_A_INVOICE SHORTCUT_TO_OMS_A_INVOICE JOIN ADMIN.OMS_A_INVOICE_LINE SHORTCUT_TO_OMS_A_INVOICE_LINE ON ((SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_INVOICE_ID = SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_ID))) ON (((SHORTCUT_TO_OMS_A_INVOICE.OMS_ENTITY_ID = PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_MASTER_ORDER_ID) AND (SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ORDER_LINE_ID = PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_MO_LINE_ITEM_ID)))) LEFT JOIN ADMIN.OMS_ORDERS SHORTCUT_TO_OMS_ORDERS_DDS ON ((SHORTCUT_TO_OMS_ORDERS_DDS.OMS_ORDER_ID = PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_ORDER_ID))) LEFT JOIN ADMIN.OMS_LPN_DDS SHORTCUT_TO_OMS_LPN_DDS ON (((NULL::"VARCHAR" = SHORTCUT_TO_OMS_A_INVOICE.OMS_SHIPMENT_NBR) AND (SHORTCUT_TO_OMS_LPN_DDS.OMS_ORDER_ID = SHORTCUT_TO_OMS_ORDERS_DDS.OMS_ORDER_ID)))) JOIN ADMIN.OMS_EDW_LOAD_CTRL_PRE PM_AR6OENHKW5JKI3VW7XH3JRSKDLU ON (((PM_AR6OENHKW5JKI3VW7XH3JRSKDLU.OMS_PURCHASE_ORDERS_ID = SHORTCUT_TO_OMS_A_INVOICE.OMS_ENTITY_ID) AND (PM_AR6OENHKW5JKI3VW7XH3JRSKDLU.OMS_PURCHASE_ORDERS_LINE_ITEM_ID = SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ORDER_LINE_ID)))) LEFT JOIN ADMIN.OMS_INVOICE_LN SHORTCUT_TO_OMS_INVOICE_LN ON ((((SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_ID = INT8(SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_ID)) AND (SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_LN_ID = INT8(SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_INVOICE_LINE_ID))) AND (SHORTCUT_TO_OMS_INVOICE_LN.OMS_DIST_ORDER_ID = INT4(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_ORDER_ID))))) LEFT JOIN ADMIN.CURRENCY_DAY PM_ALKP_CURRENCY_DAY_1 ON ((PM_ALKP_CURRENCY_DAY_1.DAY_DT = TO_TIMESTAMP(CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP ISNULL) THEN TO_CHAR(SHORTCUT_TO_OMS_A_INVOICE.OMS_LAST_UPDATED_TSTMP, 'YYYY-MM-DD'::"VARCHAR") ELSE TO_CHAR(SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP, 'YYYY-MM-DD'::"VARCHAR") END, 'YYYY-MM-DD'::"VARCHAR")))) WHERE (((((PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_LPN_DDS.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_A_INVOICE_LINE.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_ORDERS_DDS.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (SHORTCUT_TO_OMS_A_INVOICE.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR")))) AND ((((((CASE WHEN (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.CANCELLED_FLAG ISNULL) THEN '0'::"VARCHAR" ELSE PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.CANCELLED_FLAG END = '0'::"VARCHAR") AND (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE ISNULL) THEN NULL::INT4 WHEN ((((SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE = ('10'::NUMERIC(2,0))::NUMERIC(2,0)) OR (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE = ('20'::NUMERIC(2,0))::NUMERIC(2,0))) OR (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE = ('30'::NUMERIC(2,0))::NUMERIC(2,0))) OR (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE = ('40'::NUMERIC(2,0))::NUMERIC(2,0))) THEN 1 ELSE 0 END <> 0)) AND (CASE WHEN (INSTR(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_PURCHASE_ORDER_LINE_NBR, ':'::"VARCHAR") > 0) THEN SUBSTR(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_PURCHASE_ORDER_LINE_NBR, 1, (INSTR(PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_PURCHASE_ORDER_LINE_NBR, ':'::"VARCHAR") - 1)) WHEN (PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_PURCHASE_ORDER_LINE_NBR ISNULL) THEN SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ENTITY_LINE_NBR ELSE PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_PURCHASE_ORDER_LINE_NBR END = SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ENTITY_LINE_NBR)) AND (CASE WHEN (CASE WHEN (SHORTCUT_TO_OMS_ORDERS_DDS.OMS_DELIVERY_OPTIONS_ID ISNULL) THEN '01'::"VARCHAR" ELSE SHORTCUT_TO_OMS_ORDERS_DDS.OMS_DELIVERY_OPTIONS_ID END ISNULL) THEN NULL::INT4 WHEN ((CASE WHEN (SHORTCUT_TO_OMS_ORDERS_DDS.OMS_DELIVERY_OPTIONS_ID ISNULL) THEN '01'::"VARCHAR" ELSE SHORTCUT_TO_OMS_ORDERS_DDS.OMS_DELIVERY_OPTIONS_ID END = '01'::"VARCHAR") OR (CASE WHEN (SHORTCUT_TO_OMS_ORDERS_DDS.OMS_DELIVERY_OPTIONS_ID ISNULL) THEN '01'::"VARCHAR" ELSE SHORTCUT_TO_OMS_ORDERS_DDS.OMS_DELIVERY_OPTIONS_ID END = '03'::"VARCHAR")) THEN 1 ELSE 0 END <> 0)) AND (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP >= CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE = ('10'::NUMERIC(2,0))::NUMERIC(2,0)) THEN CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_LAST_UPDATED_TSTMP ISNULL) THEN PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_LAST_UPDATED_TSTMP ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_LAST_UPDATED_TSTMP END ELSE TO_TIMESTAMP('01-OCT-16'::"VARCHAR", 'DD-MON-YY'::"VARCHAR") END)) AND (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP <= CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE = ('10'::NUMERIC(2,0))::NUMERIC(2,0)) THEN (CASE WHEN (SHORTCUT_TO_OMS_LPN_DDS.OMS_LAST_UPDATED_TSTMP ISNULL) THEN PM_A7QKQIF4RFIPU26BRCSYZZMULSQ.OMS_LAST_UPDATED_TSTMP ELSE SHORTCUT_TO_OMS_LPN_DDS.OMS_LAST_UPDATED_TSTMP END + "INTERVAL"(('1'::"VARCHAR" || ' minutes'::"VARCHAR"))) ELSE "TIMESTAMP"('now(0)'::"VARCHAR") END))) AND ((SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_LN_ID ISNULL) OR ((NOT (SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_LN_ID ISNULL)) AND ((CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_INVOICE_LINE_NBR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_INVOICE_LINE_NBR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_LN_NBR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_LN_NBR)) END) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_INVOICE_LN.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_INVOICE_LN.CURRENCY_CD)) END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE_LINE.ORDERED_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE_LINE.ORDERED_QTY END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.ORDERED_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.ORDERED_QTY END) OR ("NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_STATUS_ID ISNULL) THEN 0 ELSE INT4(SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_STATUS_ID) END) <> CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_STATUS_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_STATUS_ID END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE_LINE.INVOICED_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE_LINE.INVOICED_QTY END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.INVOICED_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.INVOICED_QTY END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE_LINE.UNIT_PRICE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE_LINE.UNIT_PRICE_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.UNIT_PRICE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.UNIT_PRICE_AMT END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_CHARGE_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.LINE_TOTAL_CHARGE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.LINE_TOTAL_CHARGE_AMT END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_DISCOUNT_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_DISCOUNT_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.LINE_TOTAL_DISC_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.LINE_TOTAL_DISC_AMT END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_TAX_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE_LINE.LINE_TAX_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.LINE_TOTAL_TAX_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.LINE_TOTAL_TAX_AMT END) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ENTITY_LINE_NBR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_A_INVOICE_LINE.OMS_ENTITY_LINE_NBR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_INVOICE_LN.OMS_CO_LN_NBR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_INVOICE_LN.OMS_CO_LN_NBR)) END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_TOTAL_AMT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_TOTAL_AMT END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT_PROCESSED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT_PROCESSED END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_AMT_PROCESSED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_AMT_PROCESSED END) OR (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_CREATE_TSTMP ISNULL) THEN TO_TIMESTAMP('1999-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR") ELSE SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_CREATE_TSTMP END) OR (CASE WHEN (CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD <> 'USD'::"VARCHAR") THEN PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END ISNULL) THEN '0'::NUMERIC ELSE CASE WHEN (SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD <> 'USD'::"VARCHAR") THEN PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END END <> CASE WHEN (SHORTCUT_TO_OMS_INVOICE_LN.EXCHANGE_RATE_PCNT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_INVOICE_LN.EXCHANGE_RATE_PCNT END) OR (SHORTCUT_TO_OMS_A_INVOICE.OMS_LAST_UPDATED_TSTMP <> SHORTCUT_TO_OMS_INVOICE_LN.INVOICE_LAST_UPD_TSTMP))))) AND (CASE WHEN (CASE WHEN ((SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_ID ISNULL) AND (SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_LN_ID ISNULL)) THEN 1 ELSE 2 END = 1) THEN 0 WHEN (CASE WHEN ((SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_ID ISNULL) AND (SHORTCUT_TO_OMS_INVOICE_LN.OMS_INVOICE_LN_ID ISNULL)) THEN 1 ELSE 2 END = 2) THEN 1 ELSE NULL::INT4 END = 1));

\echo
\echo *****  Creating view:  "PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI"

CREATE or replace VIEW  PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI
(
     OMS_INVOICE_ID,
     OMS_INVOICE_NBR,
     OMS_TC_COMPANY_ID,
     OMS_ENTITY_ID,
     OMS_INVOICE_TYPE,
     OMS_INVOICE_CREATION_TSTMP,
     OMS_INVOICE_STATUS_ID,
     PUBLISHED_FLAG,
     CURRENCY_CD,
     HEADER_TAX_AMT,
     HEADER_CHARGE_AMT,
     HEADER_DISCOUNT_AMT,
     INVOICE_AMT,
     INVOICE_AMT_PROCESSED,
     OMS_CREATED_SOURCE,
     OMS_CREATED_SOURCE_TYPE_ID,
     OMS_LAST_UPDATED_TSTMP,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_NBR, SHORTCUT_TO_OMS_A_INVOICE.OMS_TC_COMPANY_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_ENTITY_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_TYPE, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_CREATION_TSTMP, SHORTCUT_TO_OMS_A_INVOICE.OMS_INVOICE_STATUS_ID, SHORTCUT_TO_OMS_A_INVOICE.PUBLISHED_FLAG, SHORTCUT_TO_OMS_A_INVOICE.CURRENCY_CD, SHORTCUT_TO_OMS_A_INVOICE.HEADER_TAX_AMT, SHORTCUT_TO_OMS_A_INVOICE.HEADER_CHARGE_AMT, SHORTCUT_TO_OMS_A_INVOICE.HEADER_DISCOUNT_AMT, SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT, SHORTCUT_TO_OMS_A_INVOICE.INVOICE_AMT_PROCESSED, SHORTCUT_TO_OMS_A_INVOICE.OMS_CREATED_SOURCE, SHORTCUT_TO_OMS_A_INVOICE.OMS_CREATED_SOURCE_TYPE_ID, SHORTCUT_TO_OMS_A_INVOICE.OMS_LAST_UPDATED_TSTMP, SHORTCUT_TO_OMS_A_INVOICE.UPDATE_TSTMP FROM ADMIN.OMS_A_INVOICE SHORTCUT_TO_OMS_A_INVOICE WHERE (SHORTCUT_TO_OMS_A_INVOICE.UPDATE_TSTMP > "TIMESTAMP"(DATE('now(0)'::"VARCHAR")));

\echo
\echo *****  Creating view:  "PM_VWS53KLZIC37YW673G7IDMOVXSY"

CREATE or replace VIEW  PM_VWS53KLZIC37YW673G7IDMOVXSY
(
     OMS_INVOICE_ID,
     OMS_INVOICE_NBR,
     OMS_ORDER_ID,
     OMS_COMPANY_ID,
     OMS_INVOICE_TYPE_ID,
     INVOICE_CREATE_TSTMP,
     INVOICE_LAST_UPD_TSTMP,
     CREATED_SOURCE_TYPE,
     CREATED_SOURCE,
     INVOICE_STATUS_ID,
     INVOICE_PUBLISHED_FLAG,
     INVOICE_TAX_AMT,
     INVOICE_CHARGE_AMT,
     INVOICE_DISC_AMT,
     INVOICE_TOTAL_AMT,
     INVOICE_AMT_PROCESSED,
     CURRENCY_CD,
     EXCHANGE_RATE_PCNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT INT8(PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_ID) AS OMS_INVOICE_ID, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_NBR, INT4(PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_ENTITY_ID) AS OMS_ORDER_ID, INT4(PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_TC_COMPANY_ID) AS OMS_COMPANY_ID, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_TYPE AS OMS_INVOICE_TYPE_ID, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_CREATION_TSTMP AS INVOICE_CREATE_TSTMP, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_LAST_UPDATED_TSTMP AS INVOICE_LAST_UPD_TSTMP, INT4(PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_CREATED_SOURCE_TYPE_ID) AS CREATED_SOURCE_TYPE, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_CREATED_SOURCE AS CREATED_SOURCE, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_STATUS_ID AS INVOICE_STATUS_ID, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.PUBLISHED_FLAG AS INVOICE_PUBLISHED_FLAG, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.HEADER_TAX_AMT AS INVOICE_TAX_AMT, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.HEADER_CHARGE_AMT AS INVOICE_CHARGE_AMT, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.HEADER_DISCOUNT_AMT AS INVOICE_DISC_AMT, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.INVOICE_AMT AS INVOICE_TOTAL_AMT, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.INVOICE_AMT_PROCESSED, PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.CURRENCY_CD, CASE WHEN (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.CURRENCY_CD <> 'USD'::"VARCHAR") THEN PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END AS EXCHANGE_RATE_PCNT, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (SHORTCUT_TO_OMS_INVOICE.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE SHORTCUT_TO_OMS_INVOICE.LOAD_TSTMP END AS LOAD_TSTMP FROM (((ADMIN.PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI JOIN (SELECT DISTINCT PM_AR6OENHKW5JKI3VW7XH3JRSKDLU.OMS_PURCHASE_ORDERS_ID AS PM_A0 FROM ADMIN.OMS_EDW_LOAD_CTRL_PRE PM_AR6OENHKW5JKI3VW7XH3JRSKDLU) PM_ANJ6APV2LGA5JSJHBYP7LMQEBWU ON ((PM_ANJ6APV2LGA5JSJHBYP7LMQEBWU.PM_A0 = PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_ENTITY_ID))) LEFT JOIN ADMIN.CURRENCY_DAY PM_ALKP_CURRENCY_DAY_1 ON ((PM_ALKP_CURRENCY_DAY_1.DAY_DT = CASE WHEN (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_LAST_UPDATED_TSTMP ISNULL) THEN DATE_TRUNC('days'::"VARCHAR", PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_CREATION_TSTMP) ELSE DATE_TRUNC('days'::"VARCHAR", PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_LAST_UPDATED_TSTMP) END))) LEFT JOIN ADMIN.OMS_INVOICE SHORTCUT_TO_OMS_INVOICE ON ((SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID = INT8(PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_ID)))) WHERE (((SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL) OR ((NOT (SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL)) AND ((CASE WHEN (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.CURRENCY_CD <> 'USD'::"VARCHAR") THEN PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT ELSE ('1'::NUMERIC(1,0))::NUMERIC(1,0) END <> SHORTCUT_TO_OMS_INVOICE.EXCHANGE_RATE_PCNT) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.CURRENCY_CD <> SHORTCUT_TO_OMS_INVOICE.CURRENCY_CD) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.INVOICE_AMT_PROCESSED <> SHORTCUT_TO_OMS_INVOICE.INVOICE_AMT_PROCESSED) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.INVOICE_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_TOTAL_AMT) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.HEADER_DISCOUNT_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_DISC_AMT) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.HEADER_CHARGE_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_CHARGE_AMT) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.HEADER_TAX_AMT <> SHORTCUT_TO_OMS_INVOICE.INVOICE_TAX_AMT) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.PUBLISHED_FLAG <> SHORTCUT_TO_OMS_INVOICE.INVOICE_PUBLISHED_FLAG) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_STATUS_ID <> SHORTCUT_TO_OMS_INVOICE.INVOICE_STATUS_ID) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_CREATED_SOURCE_TYPE_ID <> "NUMERIC"(SHORTCUT_TO_OMS_INVOICE.CREATED_SOURCE_TYPE)) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_CREATED_SOURCE <> SHORTCUT_TO_OMS_INVOICE.CREATED_SOURCE) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_LAST_UPDATED_TSTMP <> SHORTCUT_TO_OMS_INVOICE.INVOICE_LAST_UPD_TSTMP) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_CREATION_TSTMP <> SHORTCUT_TO_OMS_INVOICE.INVOICE_CREATE_TSTMP) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_TYPE <> SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_TYPE_ID) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_ENTITY_ID <> "NUMERIC"(SHORTCUT_TO_OMS_INVOICE.OMS_ORDER_ID)) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_INVOICE_NBR <> SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_NBR) OR (PM_V7BJMAGI5MTBCWVUR5I5FYXFIAI.OMS_TC_COMPANY_ID <> "NUMERIC"(SHORTCUT_TO_OMS_INVOICE.OMS_COMPANY_ID))))) AND (CASE WHEN (CASE WHEN (SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL) THEN 1 ELSE 2 END = 1) THEN 0 WHEN (CASE WHEN (SHORTCUT_TO_OMS_INVOICE.OMS_INVOICE_ID ISNULL) THEN 1 ELSE 2 END = 2) THEN 1 ELSE NULL::INT4 END = 1));

\echo
\echo *****  Creating view:  "PM_VTDXSMUWGANE6S5KNJS4CUXOLCY"

CREATE or replace VIEW  PM_VTDXSMUWGANE6S5KNJS4CUXOLCY
(
     OMS_TC_PURCHASE_ORDERS_ID,
     OMS_TC_PO_LINE_ID,
     OMS_CREATED_TSTMP,
     UPDATE_TSTMP
) AS
SELECT DISTINCT OMS_ASN_DETAIL.OMS_TC_PURCHASE_ORDERS_ID, OMS_ASN_DETAIL.OMS_TC_PO_LINE_ID, OMS_ASN_DETAIL.OMS_CREATED_TSTMP, OMS_ASN_DETAIL.UPDATE_TSTMP FROM ADMIN.OMS_ASN_DETAIL;

\echo
\echo *****  Creating view:  "PM_VGLEZEQLTQV4P24MXWEQFTTBJWM"

CREATE or replace VIEW  PM_VGLEZEQLTQV4P24MXWEQFTTBJWM
(
     OMS_REC_TYPE,
     OMS_CODE_TYPE,
     OMS_CODE_ID,
     OMS_CODE_DESC,
     OMS_CODE_SHORT_DESC,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_SYS_CODE.OMS_REC_TYPE, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_TYPE, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_ID, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_DESC, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_SHORT_DESC, SHORTCUT_TO_OMS_SYS_CODE.UPDATE_TSTMP FROM ADMIN.OMS_SYS_CODE SHORTCUT_TO_OMS_SYS_CODE WHERE ((SHORTCUT_TO_OMS_SYS_CODE.OMS_REC_TYPE = 'B'::"VARCHAR") AND (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_TYPE = '032'::"VARCHAR"));

\echo
\echo *****  Creating view:  "PM_V6IFZOMUEJKMMKZUHZJWNUNQUJE"

CREATE or replace VIEW  PM_V6IFZOMUEJKMMKZUHZJWNUNQUJE
(
     OMS_RETURN_ORDER_ID,
     OMS_RETURN_ORDER_LN_ID,
     OMS_COMPANY_ID,
     PRODUCT_ID,
     OMS_ORDER_LN_ID,
     ORIG_ORDER_QTY,
     RETURN_ORDER_QTY,
     ORIG_LINE_TOTAL,
     RETURN_LINE_TOTAL,
     LAST_UPDATED_TSTMP,
     OMS_RETURN_ORDER_LN_NBR,
     OMS_RETURN_ORDER_NBR,
     OMS_ORDER_ID,
     ORDER_NBR,
     OMS_ORDER_CREATED_TSTMP,
     OMS_ORDER_RETURNED_TSTMP,
     RETURN_REASON_ID,
     RETURN_DESC,
     RETURN_SHORT_DESC,
     GOODS_EXPECTED_FLG,
     PRODUCT_RETURNED_TSTMP,
     EXCHANGE_RATE_PCNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT INT4(PM_AYTWX6WJQ6REZP5PXOSCO6E5I6Q.OMS_RETURN_ORDERS_ID) AS OMS_RETURN_ORDER_ID, INT4(PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.OMS_RETURN_ORDERS_LINE_ITEM_ID) AS OMS_RETURN_ORDER_LN_ID, INT4(PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_TC_COMPANY_ID) AS OMS_COMPANY_ID, PM_ALKP_SKU_PROFILE_1.PRODUCT_ID, INT4(PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_ORIGINAL_PO_LINE_ITEM_ID) AS OMS_ORDER_LN_ID, INT4(PM_ALDMVXXP64YAXI7MSCHTONICJRY.ORDER_QTY) AS ORIG_ORDER_QTY, INT4(PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.ORDER_QTY) AS RETURN_ORDER_QTY, PM_ALDMVXXP64YAXI7MSCHTONICJRY.LINE_TOTAL_AMT AS ORIG_LINE_TOTAL, PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.LINE_TOTAL_AMT AS RETURN_LINE_TOTAL, PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP, PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_TC_PO_LINE_ID AS OMS_RETURN_ORDER_LN_NBR, PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_TC_PURCHASE_ORDERS_ID AS OMS_RETURN_ORDER_NBR, INT4(PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_PARENT_PURCHASE_ORDERS_ID) AS OMS_ORDER_ID, CASE WHEN ((SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 1, 1) || ''::"VARCHAR") = 'X'::"VARCHAR") THEN INT8("NUMERIC"(SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2, LENGTH(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)), 2490386)) WHEN (LOWER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID) <> UPPER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)) THEN '0'::INT8 ELSE INT8("NUMERIC"(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2490386)) END AS ORDER_NBR, PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP AS OMS_ORDER_CREATED_TSTMP, PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_CREATED_TSTMP AS OMS_ORDER_RETURNED_TSTMP, PM_VGLEZEQLTQV4P24MXWEQFTTBJWM.OMS_CODE_ID AS RETURN_REASON_ID, PM_VGLEZEQLTQV4P24MXWEQFTTBJWM.OMS_CODE_DESC AS RETURN_DESC, PM_VGLEZEQLTQV4P24MXWEQFTTBJWM.OMS_CODE_SHORT_DESC AS RETURN_SHORT_DESC, INT4(CASE WHEN (PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.RECEIVABLE_FLAG ISNULL) THEN '0'::NUMERIC ELSE PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.RECEIVABLE_FLAG END) AS GOODS_EXPECTED_FLG, PM_VTDXSMUWGANE6S5KNJS4CUXOLCY.OMS_CREATED_TSTMP AS PRODUCT_RETURNED_TSTMP, CASE WHEN (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END AS EXCHANGE_RATE_PCNT, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.LOAD_TSTMP END AS LOAD_TSTMP FROM ((((((((((ADMIN.OMS_RLM_RETURN_ORDERS PM_AYTWX6WJQ6REZP5PXOSCO6E5I6Q JOIN ADMIN.OMS_RLM_RETURN_ORDERS_LINE_ITEM PM_ACIOAX7H4PJSG45RFNGVFPHVZGU ON ((PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.OMS_RETURN_ORDERS_ID = PM_AYTWX6WJQ6REZP5PXOSCO6E5I6Q.OMS_RETURN_ORDERS_ID))) JOIN ADMIN.OMS_PURCHASE_ORDERS PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE ON ((PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_PURCHASE_ORDERS_ID = PM_AYTWX6WJQ6REZP5PXOSCO6E5I6Q.OMS_RETURN_ORDERS_ID))) JOIN ADMIN.OMS_PURCHASE_ORDERS_LINE_ITEM PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE ON (((PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_PURCHASE_ORDERS_ID = PM_AYTWX6WJQ6REZP5PXOSCO6E5I6Q.OMS_RETURN_ORDERS_ID) AND (PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_PURCHASE_ORDERS_LINE_ITEM_ID = PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.OMS_RETURN_ORDERS_LINE_ITEM_ID)))) JOIN ADMIN.OMS_PURCHASE_ORDERS PM_AHHPDWTYJCN3T2EJY24M4SORXD4 ON ((PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_PURCHASE_ORDERS_ID = PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_PARENT_PURCHASE_ORDERS_ID))) JOIN ADMIN.OMS_PURCHASE_ORDERS_LINE_ITEM PM_ALDMVXXP64YAXI7MSCHTONICJRY ON (((PM_ALDMVXXP64YAXI7MSCHTONICJRY.OMS_PURCHASE_ORDERS_ID = PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_PARENT_PURCHASE_ORDERS_ID) AND (PM_ALDMVXXP64YAXI7MSCHTONICJRY.OMS_PURCHASE_ORDERS_LINE_ITEM_ID = PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_ORIGINAL_PO_LINE_ITEM_ID)))) LEFT JOIN ADMIN.PM_VGLEZEQLTQV4P24MXWEQFTTBJWM ON ((PM_VGLEZEQLTQV4P24MXWEQFTTBJWM.OMS_CODE_ID = PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.OMS_RETURN_REASON_ID))) LEFT JOIN ADMIN.PM_VTDXSMUWGANE6S5KNJS4CUXOLCY ON (((PM_VTDXSMUWGANE6S5KNJS4CUXOLCY.OMS_TC_PURCHASE_ORDERS_ID = PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_TC_PURCHASE_ORDERS_ID) AND (PM_VTDXSMUWGANE6S5KNJS4CUXOLCY.OMS_TC_PO_LINE_ID = PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_TC_PO_LINE_ID)))) LEFT JOIN ADMIN.SKU_PROFILE PM_ALKP_SKU_PROFILE_1 ON ((PM_ALKP_SKU_PROFILE_1.SKU_NBR = INT4("NUMERIC"(PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.SKU, 2490386))))) LEFT JOIN ADMIN.CURRENCY_DAY PM_ALKP_CURRENCY_DAY_1 ON ((PM_ALKP_CURRENCY_DAY_1.DAY_DT = DATE_TRUNC('days'::"VARCHAR", PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP)))) LEFT JOIN ADMIN.OMS_RETURN_ORDER_LN PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU ON (((PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_ID = INT4(PM_AYTWX6WJQ6REZP5PXOSCO6E5I6Q.OMS_RETURN_ORDERS_ID)) AND (PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_LN_ID = INT4(PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.OMS_RETURN_ORDERS_LINE_ITEM_ID))))) WHERE ((((PM_AHHPDWTYJCN3T2EJY24M4SORXD4.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_ALDMVXXP64YAXI7MSCHTONICJRY.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) OR (PM_AYTWX6WJQ6REZP5PXOSCO6E5I6Q.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR")))) AND ((PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_LN_ID ISNULL) OR ((NOT (PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_LN_ID ISNULL)) AND ((PM_VTDXSMUWGANE6S5KNJS4CUXOLCY.OMS_CREATED_TSTMP <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.PRODUCT_RETURNED_TSTMP) OR (CASE WHEN (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.EXCHANGE_RATE_PCNT) OR (CASE WHEN (PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.RECEIVABLE_FLAG ISNULL) THEN '0'::NUMERIC ELSE PM_ACIOAX7H4PJSG45RFNGVFPHVZGU.RECEIVABLE_FLAG END <> "NUMERIC"(PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.GOODS_EXPECTED_FLG)) OR (PM_VGLEZEQLTQV4P24MXWEQFTTBJWM.OMS_CODE_SHORT_DESC <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.RETURN_SHORT_DESC) OR (PM_VGLEZEQLTQV4P24MXWEQFTTBJWM.OMS_CODE_DESC <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.RETURN_DESC) OR (PM_VGLEZEQLTQV4P24MXWEQFTTBJWM.OMS_CODE_ID <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.RETURN_REASON_ID) OR (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_CREATED_TSTMP <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_ORDER_RETURNED_TSTMP) OR (PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_CREATED_TSTMP <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_ORDER_CREATED_TSTMP) OR (CASE WHEN ((SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 1, 1) || ''::"VARCHAR") = 'X'::"VARCHAR") THEN INT8("NUMERIC"(SUBSTR(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2, LENGTH(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)), 2490386)) WHEN (LOWER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID) <> UPPER(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID)) THEN '0'::INT8 ELSE INT8("NUMERIC"(PM_AHHPDWTYJCN3T2EJY24M4SORXD4.OMS_TC_PURCHASE_ORDERS_ID, 2490386)) END <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.ORDER_NBR) OR (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_PARENT_PURCHASE_ORDERS_ID <> "NUMERIC"(PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_ORDER_ID)) OR (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_TC_PURCHASE_ORDERS_ID <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_NBR) OR (PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_TC_PO_LINE_ID <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_LN_NBR) OR (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_LAST_UPDATED_TSTMP <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.LAST_UPDATED_TSTMP) OR (PM_ALDMVXXP64YAXI7MSCHTONICJRY.LINE_TOTAL_AMT <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.ORIG_LINE_TOTAL) OR (PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.LINE_TOTAL_AMT <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.RETURN_LINE_TOTAL) OR (PM_ALDMVXXP64YAXI7MSCHTONICJRY.ORDER_QTY <> "NUMERIC"(PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.ORIG_ORDER_QTY)) OR (PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.ORDER_QTY <> "NUMERIC"(PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.RETURN_ORDER_QTY)) OR (PM_AHTI6MDJXPE7W6HYNKAWQTYC6SE.OMS_ORIGINAL_PO_LINE_ITEM_ID <> "NUMERIC"(PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_ORDER_LN_ID)) OR (PM_ALKP_SKU_PROFILE_1.PRODUCT_ID <> PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.PRODUCT_ID) OR (PM_ADUFFFFO4NDOA3UMGCGZRZEEYEE.OMS_TC_COMPANY_ID <> "NUMERIC"(PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_COMPANY_ID)))))) AND (CASE WHEN (CASE WHEN (PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_LN_ID ISNULL) THEN 1 ELSE 2 END = 1) THEN 0 WHEN (CASE WHEN (PM_ARIL2P2CPBG3S6N6TGVCNLC6WIU.OMS_RETURN_ORDER_LN_ID ISNULL) THEN 1 ELSE 2 END = 2) THEN 1 ELSE 3 END = 1));

\echo
\echo *****  Creating view:  "MEDALLIA_SURVEY_SKU_VW_100622"

CREATE or replace VIEW  MEDALLIA_SURVEY_SKU_VW_100622
(
     MEDALLIA_SURVEY_RESPONSE_TSTMP,
     MEDALLIA_SURVEY_ID,
     MEDALLIA_SURVEY_CREATION_TSTMP,
     SURVEY_TYPE,
     MEDALLIA_TXN_ID,
     TRANSACTION_TSTMP,
     SALES_INSTANCE_ID,
     TXN_SEGMENT,
     PAYMENT_DEVICE_TYPE,
     LOCATION_ID,
     STORE_NBR,
     PRODUCT_ID,
     REGISTER_NBR,
     TRANSACTION_NBR,
     CASHIER_NBR,
     SALES_COACH_ID,
     CUSTOMER_EID,
     CUSTOMER_LOYALTY_NBR,
     CUSTOMER_FIRST_TIME_PURCHASE_FLAG,
     ORDER_CHANNEL,
     ORDER_NBR,
     RETURN_TXN_FLAG,
     TRAINING_START_DT,
     PREV_PURCHASE_DT,
     TOTAL_PURCHASED_ITEM_QTY,
     COUPON_AMT,
     PRICE_OVERRIDE_AMT,
     TOTAL_PAID_AMT,
     SALON_BOOKING_CHANNEL,
     MEDALLIA_SALON_EMPL_GROUP_ID,
     SALON_EMPLOYEE_ID_1,
     SALON_EMPLOYEE_ID_2,
     SALON_EMPLOYEE_ID_3,
     SALON_EMPLOYEE_ID_4,
     MEDALLIA_PET_GROUP_ID,
     PET_ID_1,
     PET_ID_2,
     PET_ID_3,
     PET_ID_4,
     SMS_EMPLOYEE_GROUP_DESC,
     AUTO_COMPLETED_FLAG,
     AUTO_COMPLETED_DATE,
     LATEST_SUBMIT_DATE,
     MEDALLIA_SURVEY_QUESTION_ID,
     MEDALLIA_SURVEY_ANSWER_TXT,
     MEDALLIA_SURVEY_ANSWER_NBR,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT M.MEDALLIA_SURVEY_RESPONSE_TSTMP, M.MEDALLIA_SURVEY_ID, M.MEDALLIA_SURVEY_CREATION_TSTMP, M.SURVEY_TYPE, M.MEDALLIA_TXN_ID, M.TRANSACTION_TSTMP, M.SALES_INSTANCE_ID, M.TXN_SEGMENT, M.PAYMENT_DEVICE_TYPE, M.LOCATION_ID, M.STORE_NBR, S.PRODUCT_ID, M.REGISTER_NBR, M.TRANSACTION_NBR, M.CASHIER_NBR, M.SALES_COACH_ID, M.CUSTOMER_EID, M.CUSTOMER_LOYALTY_NBR, M.CUSTOMER_FIRST_TIME_PURCHASE_FLAG, M.ORDER_CHANNEL, M.ORDER_NBR, M.RETURN_TXN_FLAG, M.TRAINING_START_DT, M.PREV_PURCHASE_DT, M.TOTAL_PURCHASED_ITEM_QTY, M.COUPON_AMT, M.PRICE_OVERRIDE_AMT, M.TOTAL_PAID_AMT, M.SALON_BOOKING_CHANNEL, M.MEDALLIA_SALON_EMPL_GROUP_ID, M.SALON_EMPLOYEE_ID_1, M.SALON_EMPLOYEE_ID_2, M.SALON_EMPLOYEE_ID_3, M.SALON_EMPLOYEE_ID_4, M.MEDALLIA_PET_GROUP_ID, M.PET_ID_1, M.PET_ID_2, M.PET_ID_3, M.PET_ID_4, M.SMS_EMPLOYEE_GROUP_DESC, M.AUTO_COMPLETED_FLAG, M.AUTO_COMPLETED_DATE, M.LATEST_SUBMIT_DATE, M.MEDALLIA_SURVEY_QUESTION_ID, M.MEDALLIA_SURVEY_ANSWER_TXT, M.MEDALLIA_SURVEY_ANSWER_NBR, M.UPDATE_TSTMP, M.LOAD_TSTMP FROM (ADMIN.MEDALLIA_SURVEY M JOIN ADMIN.SALES_TRANS_SKU S ON (((S.DAY_DT = DATE(M.TRANSACTION_TSTMP)) AND (S.SALES_INSTANCE_ID = M.SALES_INSTANCE_ID))));

\echo
\echo *****  Creating view:  "PM_VTTTFYXJF4O4W2A3VURVXPF4JEA"

CREATE or replace VIEW  PM_VTTTFYXJF4O4W2A3VURVXPF4JEA
(
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     SHIPPED_QTY,
     ORIG_ORDER_QTY,
     PROJ_ORDER_QTY
) AS
SELECT W.DAY_DT, W.LOCATION_ID, W.PRODUCT_ID, W.FROM_LOCATION_ID, W.SHIPPED_QTY, W.ORIG_ORDER_QTY, D.PROJ_ORDER_QTY FROM (ADMIN.WM_PO_ORDER_DTL_VW W LEFT JOIN ((SELECT DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID, (SUM(DP_ORDER_PROJ_DAY.PROJ_ORDER_QTY))::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_ORDER_PROJ_DAY WHERE (DP_ORDER_PROJ_DAY.DAY_DT >= '2020-01-01 00:00:00'::"TIMESTAMP") GROUP BY DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID) UNION ALL (SELECT "TIMESTAMP"(DP_DEMAND_DAY.DAY_DT) AS DAY_DT, DP_DEMAND_DAY.LOCATION_ID, DP_DEMAND_DAY.FROM_LOCATION_ID, DP_DEMAND_DAY.PRODUCT_ID, (DP_DEMAND_DAY.PROPOSED_QTY)::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_DEMAND_DAY)) D ON ((((((D.LOCATION_ID = W.LOCATION_ID) AND (D.PRODUCT_ID = W.PRODUCT_ID)) AND (D.FROM_LOCATION_ID = W.FROM_LOCATION_ID)) AND (D.DAY_DT = "TIMESTAMP"(W.PO_DOC_DT))) AND ((SUBSTR(W.PO_NBR, 1, 1))::VARCHAR(1) IN (('6'::"VARCHAR")::VARCHAR(1), ('8'::"VARCHAR")::VARCHAR(1))))));

\echo
\echo *****  Creating view:  "PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA"

CREATE or replace VIEW  PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA
(
     OMS_ORDER_ID,
     OMS_LINE_ITEM_ID,
     TOTAL_MONETARY_VALUE,
     UNIT_MONETARY_VALUE,
     UNIT_TAX_AMT,
     MV_CURRENCY_CD,
     SHIPPED_QTY,
     RECEIVED_QTY,
     OMS_CREATED_SOURCE,
     OMS_CREATED_TSTMP,
     OMS_LAST_UPDATED_TSTMP,
     OMS_DO_DTL_STATUS_ID,
     ALLOCATED_QTY,
     UNIT_COST_AMT,
     UNIT_PRICE_AMT,
     USER_CANCELED_QTY,
     OMS_DELIVERY_END_TSTMP,
     OMS_DELIVERY_START_TSTMP,
     OMS_EVENT_CD,
     OMS_REASON_CD,
     PARTIAL_FILL_FLAG,
     ORDER_QTY,
     ORIG_ORDER_QTY,
     RETAIL_PRICE_AMT,
     OMS_TC_ORDER_LINE_ID,
     OMS_PICKUP_END_TSTMP,
     OMS_PURCHASE_ORDER_LINE_NBR,
     OMS_PICKUP_START_TSTMP,
     CANCELLED_FLAG,
     OMS_ITEM_NAME,
     OMS_TC_PURCHASE_ORDERS_ID,
     FREIGHT_REVENUE_CURRENCY_CD,
     FREIGHT_REVENUE_AMT,
     ADJUSTED_ORDER_QTY,
     EV_RELEASED_TSTMP,
     EV_ALLOCATED_TSTMP,
     EV_SHIPPED_TSTMP,
     EV_PICKEDUP_TSTMP,
     OMS_MASTER_ORDER_ID,
     OMS_MO_LINE_ITEM_ID,
     OMS_DO_CREATED_TSTMP,
     ORDER_NBR,
     OMS_ORDER_CREATED_TSTMP,
     OMS_O_FACILITY_ALIAS_ID,
     O_FACILITY_TYPE_ID,
     ORDER_CREATION_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CHANNEL,
     SCHED_DELIVERY_FLG,
     SUBSCRIPTION_ORDER_FLG,
     ADD_ON_FLAG,
     ISPU_PXY_FIRST_NAME,
     ISPU_PXY_LAST_NAME,
     ISPU_PXY_ADD_LINE1,
     ISPU_PXY_ADD_LINE2,
     ISPU_PXY_ADD_LINE3,
     ISPU_PXY_CITY,
     ISPU_PXY_STATE,
     ISPU_PXY_POSTAL_CD,
     ISPU_PXY_COUNTRY,
     ISPU_PXY_EMAIL,
     ISUP_PXY_PHONE,
     OMS_TC_COMPANY_ID,
     RX_ORDER_FLG,
     CANCEL_DTTM,
     LOAD_TSTMP
) AS
SELECT ORDER_LINE_ITEM.OMS_ORDER_ID, ORDER_LINE_ITEM.OMS_LINE_ITEM_ID, MAX(ORDER_LINE_ITEM.TOTAL_MONETARY_VALUE) AS TOTAL_MONETARY_VALUE, MAX(ORDER_LINE_ITEM.UNIT_MONETARY_VALUE) AS UNIT_MONETARY_VALUE, MAX(ORDER_LINE_ITEM.UNIT_TAX_AMT) AS UNIT_TAX_AMT, MAX(ORDERS.MV_CURRENCY_CD) AS MV_CURRENCY_CD, MAX(ORDER_LINE_ITEM.SHIPPED_QTY) AS SHIPPED_QTY, MAX(ORDER_LINE_ITEM.RECEIVED_QTY) AS RECEIVED_QTY, MAX(ORDER_LINE_ITEM.OMS_CREATED_SOURCE) AS OMS_CREATED_SOURCE, MAX(ORDER_LINE_ITEM.OMS_CREATED_TSTMP) AS OMS_CREATED_TSTMP, MAX(ORDER_LINE_ITEM.OMS_LAST_UPDATED_TSTMP) AS OMS_LAST_UPDATED_TSTMP, MAX(ORDER_LINE_ITEM.OMS_DO_DTL_STATUS_ID) AS OMS_DO_DTL_STATUS_ID, MAX(ORDER_LINE_ITEM.ALLOCATED_QTY) AS ALLOCATED_QTY, MAX(ORDER_LINE_ITEM.UNIT_COST_AMT) AS UNIT_COST_AMT, MAX(ORDER_LINE_ITEM.UNIT_PRICE_AMT) AS UNIT_PRICE_AMT, MAX(ORDER_LINE_ITEM.USER_CANCELED_QTY) AS USER_CANCELED_QTY, MAX(ORDER_LINE_ITEM.OMS_DELIVERY_END_TSTMP) AS OMS_DELIVERY_END_TSTMP, MAX(ORDER_LINE_ITEM.OMS_DELIVERY_START_TSTMP) AS OMS_DELIVERY_START_TSTMP, MAX(ORDER_LINE_ITEM.OMS_EVENT_CD) AS OMS_EVENT_CD, MAX(ORDER_LINE_ITEM.OMS_REASON_CD) AS OMS_REASON_CD, MAX(ORDER_LINE_ITEM.PARTIAL_FILL_FLAG) AS PARTIAL_FILL_FLAG, MAX(ORDER_LINE_ITEM.ORDER_QTY) AS ORDER_QTY, MAX(ORDER_LINE_ITEM.ORIG_ORDER_QTY) AS ORIG_ORDER_QTY, MAX(ORDER_LINE_ITEM.RETAIL_PRICE_AMT) AS RETAIL_PRICE_AMT, MAX(ORDER_LINE_ITEM.OMS_TC_ORDER_LINE_ID) AS OMS_TC_ORDER_LINE_ID, MAX(ORDER_LINE_ITEM.OMS_PICKUP_END_TSTMP) AS OMS_PICKUP_END_TSTMP, MAX(ORDER_LINE_ITEM.OMS_PURCHASE_ORDER_LINE_NBR) AS OMS_PURCHASE_ORDER_LINE_NBR, MAX(ORDER_LINE_ITEM.OMS_PICKUP_START_TSTMP) AS OMS_PICKUP_START_TSTMP, MAX(ORDER_LINE_ITEM.CANCELLED_FLAG) AS CANCELLED_FLAG, MAX(ORDER_LINE_ITEM.OMS_ITEM_NAME) AS OMS_ITEM_NAME, MAX(OMS_MASTER_ORDER.OMS_TC_PURCHASE_ORDERS_ID) AS OMS_TC_PURCHASE_ORDERS_ID, MAX(ORDER_LINE_ITEM.FREIGHT_REVENUE_CURRENCY_CD) AS FREIGHT_REVENUE_CURRENCY_CD, MAX(ORDER_LINE_ITEM.FREIGHT_REVENUE_AMT) AS FREIGHT_REVENUE_AMT, MAX(ORDER_LINE_ITEM.ADJUSTED_ORDER_QTY) AS ADJUSTED_ORDER_QTY, MAX(PM_ASARBDBYJMEMGKWZUNLXJPJDMNU.EV_RELEASED_TSTMP) AS EV_RELEASED_TSTMP, MAX(PM_ASARBDBYJMEMGKWZUNLXJPJDMNU.EV_ALLOCATED_TSTMP) AS EV_ALLOCATED_TSTMP, MAX(PM_ASARBDBYJMEMGKWZUNLXJPJDMNU.EV_SHIPPED_TSTMP) AS EV_SHIPPED_TSTMP, MAX(ORDER_EVENT.OMS_CREATED_TSTMP) AS EV_PICKEDUP_TSTMP, MAX(ORDER_LINE_ITEM.OMS_MASTER_ORDER_ID) AS OMS_MASTER_ORDER_ID, MAX(ORDER_LINE_ITEM.OMS_MO_LINE_ITEM_ID) AS OMS_MO_LINE_ITEM_ID, MAX(ORDERS.OMS_CREATED_TSTMP) AS OMS_DO_CREATED_TSTMP, MAX(OMS_MASTER_ORDER.ORDER_NBR) AS ORDER_NBR, MAX(OMS_MASTER_ORDER.PO_OMS_CREATED_TSTMP) AS OMS_ORDER_CREATED_TSTMP, MAX(ORDERS.OMS_O_FACILITY_ALIAS_ID) AS OMS_O_FACILITY_ALIAS_ID, MAX(FACILITY.FACILITY_TYPE_BITS) AS O_FACILITY_TYPE_ID, MAX(OMS_MASTER_ORDER.ORDER_CREATION_CHANNEL) AS ORDER_CREATION_CHANNEL, MAX(OMS_MASTER_ORDER.ORDER_FULFILLMENT_CHANNEL) AS ORDER_FULFILLMENT_CHANNEL, MAX(OMS_MASTER_ORDER.ORDER_CHANNEL) AS ORDER_CHANNEL, MAX(PO_LINE_ITEM_REF_FIELDS.SCHED_DELIVERY_FLG) AS SCHED_DELIVERY_FLG, MAX(PO_LINE_ITEM_REF_FIELDS.SUBSCRIPTION_ORDER_FLG) AS SUBSCRIPTION_ORDER_FLG, MAX(PO_LINE_ITEM_REF_FIELDS.ADD_ON_FLAG) AS ADD_ON_FLAG, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_FIRST_NAME) AS ISPU_PXY_FIRST_NAME, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_LAST_NAME) AS ISPU_PXY_LAST_NAME, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_ADD_LINE1) AS ISPU_PXY_ADD_LINE1, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_ADD_LINE2) AS ISPU_PXY_ADD_LINE2, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_ADD_LINE3) AS ISPU_PXY_ADD_LINE3, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_CITY) AS ISPU_PXY_CITY, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_STATE) AS ISPU_PXY_STATE, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_POSTAL_CD) AS ISPU_PXY_POSTAL_CD, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_COUNTRY) AS ISPU_PXY_COUNTRY, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISPU_PXY_EMAIL) AS ISPU_PXY_EMAIL, MAX(PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.ISUP_PXY_PHONE) AS ISUP_PXY_PHONE, MAX(ORDER_LINE_ITEM.OMS_TC_COMPANY_ID) AS OMS_TC_COMPANY_ID, MAX(PO_LINE_ITEM_REF_FIELDS.RX_ORDER_FLG) AS RX_ORDER_FLG, MAX(CASE WHEN ((ORDER_LINE_ITEM.CANCELLED_FLAG = '1'::"VARCHAR") AND (ORDER_LINE_ITEM.OMS_DO_DTL_STATUS_ID = ('200'::NUMERIC(3,0))::NUMERIC(3,0))) THEN ORDER_LINE_ITEM.OMS_LAST_UPDATED_TSTMP ELSE NULL::"TIMESTAMP" END) AS CANCEL_DTTM, MAX(DATE('now(0)'::"VARCHAR")) AS LOAD_TSTMP FROM (((((((ADMIN.OMS_ORDER_LINE_ITEM ORDER_LINE_ITEM JOIN ADMIN.OMS_EDW_LOAD_CTRL_PRE OMS_MASTER_ORDER ON (((OMS_MASTER_ORDER.OMS_PURCHASE_ORDERS_ID = ORDER_LINE_ITEM.OMS_MASTER_ORDER_ID) AND (OMS_MASTER_ORDER.OMS_PURCHASE_ORDERS_LINE_ITEM_ID = ORDER_LINE_ITEM.OMS_MO_LINE_ITEM_ID)))) JOIN ADMIN.OMS_ORDERS ORDERS ON (((ORDERS.OMS_ORDER_ID = ORDER_LINE_ITEM.OMS_ORDER_ID) AND ((ORDER_LINE_ITEM.UPDATE_TSTMP > "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))) OR (ORDERS.UPDATE_TSTMP > "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))))) LEFT JOIN ADMIN.OMS_FACILITY FACILITY ON ((FACILITY.OMS_FACILITY_ID = ORDERS.OMS_O_FACILITY_ID))) LEFT JOIN (SELECT ORDER_EVENT.OMS_ORDER_ID, ORDER_EVENT.OMS_LINE_ITEM_ID, MAX(CASE WHEN (ORDER_EVENT.NEW_VALUE = 'Released'::"VARCHAR") THEN ORDER_EVENT.OMS_CREATED_TSTMP ELSE NULL::"TIMESTAMP" END) AS EV_RELEASED_TSTMP, MAX(CASE WHEN ((ORDER_EVENT.NEW_VALUE = 'DC Allocated'::"VARCHAR") OR (ORDER_EVENT.NEW_VALUE = 'Partially DC Allocated'::"VARCHAR")) THEN ORDER_EVENT.OMS_CREATED_TSTMP ELSE NULL::"TIMESTAMP" END) AS EV_ALLOCATED_TSTMP, MAX(CASE WHEN (((ORDER_EVENT.NEW_VALUE = 'Shipped'::"VARCHAR") OR (ORDER_EVENT.NEW_VALUE = 'Partially Shipped'::"VARCHAR")) OR (ORDER_EVENT.NEW_VALUE = 'Delivered'::"VARCHAR")) THEN ORDER_EVENT.OMS_CREATED_TSTMP ELSE NULL::"TIMESTAMP" END) AS EV_SHIPPED_TSTMP FROM ADMIN.OMS_ORDER_EVENT ORDER_EVENT WHERE (ORDER_EVENT.FIELD_NAME = 'LINE ITEM: STATUS'::"VARCHAR") GROUP BY ORDER_EVENT.OMS_ORDER_ID, ORDER_EVENT.OMS_LINE_ITEM_ID) PM_ASARBDBYJMEMGKWZUNLXJPJDMNU ON (((PM_ASARBDBYJMEMGKWZUNLXJPJDMNU.OMS_ORDER_ID = ORDER_LINE_ITEM.OMS_ORDER_ID) AND (PM_ASARBDBYJMEMGKWZUNLXJPJDMNU.OMS_LINE_ITEM_ID = ORDER_LINE_ITEM.OMS_LINE_ITEM_ID)))) LEFT JOIN ADMIN.OMS_ORDER_EVENT ORDER_EVENT ON ((((ORDER_EVENT.OMS_ORDER_ID = ORDERS.OMS_ORDER_ID) AND (ORDER_EVENT.FIELD_NAME = 'REF_NUM1'::"VARCHAR")) AND (ORDER_EVENT.NEW_VALUE = 'No'::"VARCHAR")))) LEFT JOIN (SELECT PO_LINE_ITEM_REF_FIELDS.OMS_PURCHASE_ORDERS_ID, PO_LINE_ITEM_REF_FIELDS.OMS_PURCHASE_ORDERS_LINE_ITEM_ID, MAX(CASE WHEN ((PO_LINE_ITEM_REF_FIELDS.REF_FIELD3 ISNULL) OR (UPPER(PO_LINE_ITEM_REF_FIELDS.REF_FIELD3) = 'FALSE'::"VARCHAR")) THEN 0 ELSE 1 END) OVER (PARTITION BY PO_LINE_ITEM_REF_FIELDS.OMS_PURCHASE_ORDERS_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SUBSCRIPTION_ORDER_FLG, MAX(CASE WHEN (PO_LINE_ITEM_REF_FIELDS.REF_FIELD1 ISNULL) THEN 0 ELSE ROUND(FLOAT8(PO_LINE_ITEM_REF_FIELDS.REF_FIELD1)) END) OVER (PARTITION BY PO_LINE_ITEM_REF_FIELDS.OMS_PURCHASE_ORDERS_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SCHED_DELIVERY_FLG, MAX(CASE WHEN (PO_LINE_ITEM_REF_FIELDS.REF_FIELD4 NOTNULL) THEN 1 ELSE 0 END) OVER (PARTITION BY PO_LINE_ITEM_REF_FIELDS.OMS_PURCHASE_ORDERS_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS RX_ORDER_FLG, CASE WHEN (UPPER(PO_LINE_ITEM_REF_FIELDS.REF_FIELD3) = 'TRUE'::"VARCHAR") THEN 1 ELSE 0 END AS ADD_ON_FLAG FROM ADMIN.OMS_PO_LINE_ITEM_REF_FIELDS PO_LINE_ITEM_REF_FIELDS) PO_LINE_ITEM_REF_FIELDS ON (((PO_LINE_ITEM_REF_FIELDS.OMS_PURCHASE_ORDERS_ID = ORDER_LINE_ITEM.OMS_MASTER_ORDER_ID) AND (PO_LINE_ITEM_REF_FIELDS.OMS_PURCHASE_ORDERS_LINE_ITEM_ID = ORDER_LINE_ITEM.OMS_MO_LINE_ITEM_ID)))) LEFT JOIN (SELECT ORDER_LINE_ITEM_ATTRIBUTE.OMS_ORDER_ID, ORDER_LINE_ITEM_ATTRIBUTE.OMS_LINE_ITEM_ID, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_FirstName'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_FIRST_NAME, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_LastName'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_LAST_NAME, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_Add_Line1'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_ADD_LINE1, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_Add_Line2'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_ADD_LINE2, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_Add_Line3'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_ADD_LINE3, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_City'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_CITY, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_State'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_STATE, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_PostalCd'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_POSTAL_CD, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_Country'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_COUNTRY, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_Email'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISPU_PXY_EMAIL, MAX(CASE WHEN (ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_NAME = 'Proxy_Phone'::"VARCHAR") THEN ORDER_LINE_ITEM_ATTRIBUTE.ATTRIBUTE_VALUE ELSE NULL::"VARCHAR" END) AS ISUP_PXY_PHONE FROM ADMIN.OMS_ORDER_LINE_ITEM_ATTRIBUTE ORDER_LINE_ITEM_ATTRIBUTE GROUP BY ORDER_LINE_ITEM_ATTRIBUTE.OMS_ORDER_ID, ORDER_LINE_ITEM_ATTRIBUTE.OMS_LINE_ITEM_ID) PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA ON (((PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.OMS_ORDER_ID = ORDER_LINE_ITEM.OMS_ORDER_ID) AND (PM_AHIP4OT6NYZ3CWRW7ROARHVMCBA.OMS_LINE_ITEM_ID = ORDER_LINE_ITEM.OMS_LINE_ITEM_ID)))) GROUP BY ORDER_LINE_ITEM.OMS_ORDER_ID, ORDER_LINE_ITEM.OMS_LINE_ITEM_ID;

\echo
\echo *****  Creating view:  "PM_VIFMDPYVZTZHXSMFTUUB2CFU734"

CREATE or replace VIEW  PM_VIFMDPYVZTZHXSMFTUUB2CFU734
(
     LOCATION_ID,
     LOCATION_TYPE_ID,
     LOCATION_NBR
) AS
SELECT MAX(SITE_PROFILE.LOCATION_ID) AS LOCATION_ID, SITE_PROFILE.LOCATION_TYPE_ID, CASE WHEN (SITE_PROFILE.LOCATION_TYPE_ID = 19) THEN LTRIM(SITE_PROFILE.LOCATION_NBR, '0'::"VARCHAR") ELSE SITE_PROFILE.LOCATION_NBR END AS LOCATION_NBR FROM ADMIN.SITE_PROFILE GROUP BY SITE_PROFILE.LOCATION_TYPE_ID, CASE WHEN (SITE_PROFILE.LOCATION_TYPE_ID = 19) THEN LTRIM(SITE_PROFILE.LOCATION_NBR, '0'::"VARCHAR") ELSE SITE_PROFILE.LOCATION_NBR END;

\echo
\echo *****  Creating view:  "PM_VDWLKCWTN3OKJT3YTG2IIVISZFA"

CREATE or replace VIEW  PM_VDWLKCWTN3OKJT3YTG2IIVISZFA
(
     LOCATION_ID,
     LOCATION_TYPE_ID,
     LOCATION_NBR
) AS
SELECT MAX(SITE_PROFILE.LOCATION_ID) AS LOCATION_ID, SITE_PROFILE.LOCATION_TYPE_ID, CASE WHEN (SITE_PROFILE.LOCATION_TYPE_ID = 19) THEN LTRIM(SITE_PROFILE.LOCATION_NBR, '0'::"VARCHAR") ELSE SITE_PROFILE.LOCATION_NBR END AS LOCATION_NBR FROM ADMIN.SITE_PROFILE GROUP BY SITE_PROFILE.LOCATION_TYPE_ID, CASE WHEN (SITE_PROFILE.LOCATION_TYPE_ID = 19) THEN LTRIM(SITE_PROFILE.LOCATION_NBR, '0'::"VARCHAR") ELSE SITE_PROFILE.LOCATION_NBR END;

\echo
\echo *****  Creating view:  "PM_VVFRGZQCVYM4WM26QBCEIV3BA6Y"

CREATE or replace VIEW  PM_VVFRGZQCVYM4WM26QBCEIV3BA6Y
(
     OMS_DIST_ORDER_ID,
     OMS_DIST_ORDER_LN_ID,
     TOTAL_MONETARY_VALUE_AMT,
     UNIT_MONETARY_VALUE_AMT,
     UNIT_TAX_AMT,
     MV_CURRENCY_CD,
     SHIPPED_QTY,
     RECEIVED_QTY,
     CREATED_SOURCE,
     CREATED_TSTMP,
     LAST_UPDATED_TSTMP,
     OMS_DIST_ORDER_LN_STATUS_ID,
     ALLOCATED_QTY,
     UNIT_COST_AMT,
     UNIT_PRICE_AMT,
     USER_CANCELED_QTY,
     DELIVERY_END_DT,
     DELIVERY_START_DT,
     EVENT_CD,
     REASON_CODE,
     PARTL_FILL_FLG,
     ORDER_QTY,
     ORIG_ORDER_QTY,
     RETAIL_PRICE,
     OMS_DIST_ORDER_LN_NBR,
     PICKUP_END_DTTM,
     OMS_ORDER_LN_NBR,
     PICKUP_START_DTTM,
     CANCELLED_FLG,
     PRODUCT_ID,
     OMS_ORDER_NBR,
     FREIGHT_REVENUE_CURRENCY_CD,
     FREIGHT_REVENUE,
     ADJUSTED_ORDER_QTY,
     EV_RELEASED_TSTMP,
     EV_ALLOCATED_TSTMP,
     EV_SHIPPED_TSTMP,
     EV_PICKEDUP_TSTMP,
     OMS_ORDER_ID,
     OMS_ORDER_LN_ID,
     OMS_DO_CREATED_TSTMP,
     ORDER_NBR,
     OMS_ORDER_CREATED_TSTMP,
     ORIG_LOCATION_ID,
     ORDER_CREATION_CHANNEL,
     ORDER_FULFILLMENT_CHANNEL,
     ORDER_CHANNEL,
     SCHED_DELIVERY_FLG,
     SUBSCRIPTION_ORDER_FLG,
     ADD_ON_FLAG,
     ISPU_PXY_FIRST_NAME,
     ISPU_PXY_LAST_NAME,
     ISPU_PXY_ADD_LINE1,
     ISPU_PXY_ADD_LINE2,
     ISPU_PXY_ADD_LINE3,
     ISPU_PXY_CITY,
     ISPU_PXY_STATE,
     ISPU_PXY_POSTAL_CD,
     ISPU_PXY_COUNTRY,
     ISPU_PXY_EMAIL,
     ISUP_PXY_PHONE,
     OMS_COMPANY_ID,
     EXCHANGE_RATE_PCNT,
     RX_ORDER_FLG,
     CANCEL_TSTMP,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_ID) AS OMS_DIST_ORDER_ID, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LINE_ITEM_ID) AS OMS_DIST_ORDER_LN_ID, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.TOTAL_MONETARY_VALUE AS TOTAL_MONETARY_VALUE_AMT, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_MONETARY_VALUE AS UNIT_MONETARY_VALUE_AMT, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_TAX_AMT, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.MV_CURRENCY_CD, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SHIPPED_QTY) AS SHIPPED_QTY, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RECEIVED_QTY) AS RECEIVED_QTY, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_SOURCE AS CREATED_SOURCE, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_TSTMP AS CREATED_TSTMP, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_DTL_STATUS_ID) AS OMS_DIST_ORDER_LN_STATUS_ID, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ALLOCATED_QTY) AS ALLOCATED_QTY, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_COST_AMT, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_PRICE_AMT, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.USER_CANCELED_QTY) AS USER_CANCELED_QTY, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_END_TSTMP AS DELIVERY_END_DT, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_START_TSTMP AS DELIVERY_START_DT, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_EVENT_CD AS EVENT_CD, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_REASON_CD AS REASON_CODE, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.PARTIAL_FILL_FLAG AS PARTL_FILL_FLG, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_QTY) AS ORDER_QTY, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORIG_ORDER_QTY) AS ORIG_ORDER_QTY, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RETAIL_PRICE_AMT AS RETAIL_PRICE, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_ORDER_LINE_ID AS OMS_DIST_ORDER_LN_NBR, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_END_TSTMP AS PICKUP_END_DTTM, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PURCHASE_ORDER_LINE_NBR AS OMS_ORDER_LN_NBR, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_START_TSTMP AS PICKUP_START_DTTM, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCELLED_FLAG AS CANCELLED_FLG, INT8(PM_ALKP_SKU_PROFILE_1.PRODUCT_ID) AS PRODUCT_ID, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_PURCHASE_ORDERS_ID AS OMS_ORDER_NBR, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_CURRENCY_CD, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_AMT AS FREIGHT_REVENUE, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADJUSTED_ORDER_QTY) AS ADJUSTED_ORDER_QTY, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_RELEASED_TSTMP, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_ALLOCATED_TSTMP, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_SHIPPED_TSTMP, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_PICKEDUP_TSTMP, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MASTER_ORDER_ID) AS OMS_ORDER_ID, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MO_LINE_ITEM_ID) AS OMS_ORDER_LN_ID, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_CREATED_TSTMP, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_NBR, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_CREATED_TSTMP, INT8(CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID = '2956'::"VARCHAR") THEN PM_ALKP_SITE_PROFILE_1.LOCATION_ID WHEN (NOT (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID ISNULL)) THEN PM_ALKP_SITE_PROFILE_2_1.LOCATION_ID ELSE NULL::INT4 END) AS ORIG_LOCATION_ID, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CREATION_CHANNEL, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_FULFILLMENT_CHANNEL, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CHANNEL, CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG = 0)) THEN 0 ELSE 1 END AS SCHED_DELIVERY_FLG, CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG = 0)) THEN 0 ELSE 1 END AS SUBSCRIPTION_ORDER_FLG, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADD_ON_FLAG, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_FIRST_NAME, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_LAST_NAME, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE1, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE2, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE3, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_CITY, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_STATE, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_POSTAL_CD, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_COUNTRY, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_EMAIL, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISUP_PXY_PHONE, INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID) AS OMS_COMPANY_ID, CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END AS EXCHANGE_RATE_PCNT, CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG = 0)) THEN 0 ELSE 1 END AS RX_ORDER_FLG, PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCEL_DTTM AS CANCEL_TSTMP, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (SHORTCUT_TO_OMS_DIST_ORDER_LN.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE SHORTCUT_TO_OMS_DIST_ORDER_LN.LOAD_TSTMP END AS LOAD_TSTMP FROM (ADMIN.OMS_DIST_ORDER_LN SHORTCUT_TO_OMS_DIST_ORDER_LN RIGHT JOIN ((((ADMIN.PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA LEFT JOIN ADMIN.SKU_PROFILE PM_ALKP_SKU_PROFILE_1 ON ((PM_ALKP_SKU_PROFILE_1.SKU_NBR = INT4("NUMERIC"(LTRIM(RTRIM(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ITEM_NAME)), 2490386))))) LEFT JOIN ADMIN.PM_VIFMDPYVZTZHXSMFTUUB2CFU734 PM_ALKP_SITE_PROFILE_1 ON (((PM_ALKP_SITE_PROFILE_1.LOCATION_NBR = PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID) AND (PM_ALKP_SITE_PROFILE_1.LOCATION_TYPE_ID = 15)))) LEFT JOIN ADMIN.PM_VDWLKCWTN3OKJT3YTG2IIVISZFA PM_ALKP_SITE_PROFILE_2_1 ON (((PM_ALKP_SITE_PROFILE_2_1.LOCATION_NBR = CASE WHEN (INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.O_FACILITY_TYPE_ID) = 9) THEN LTRIM(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID, '0'::"VARCHAR") ELSE PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID END) AND (PM_ALKP_SITE_PROFILE_2_1.LOCATION_TYPE_ID = CASE WHEN (INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.O_FACILITY_TYPE_ID) = 64) THEN 8 WHEN (INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.O_FACILITY_TYPE_ID) = 545) THEN 6 WHEN (INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.O_FACILITY_TYPE_ID) = 33) THEN 6 WHEN (INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.O_FACILITY_TYPE_ID) = 9) THEN 19 ELSE 8 END)))) LEFT JOIN ADMIN.CURRENCY_DAY PM_ALKP_CURRENCY_DAY_1 ON ((PM_ALKP_CURRENCY_DAY_1.DAY_DT = DATE_TRUNC('days'::"VARCHAR", PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_CREATED_TSTMP)))) ON (((INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_ID) = SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID) AND (INT4(PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LINE_ITEM_ID) = SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID)))) WHERE ((CASE WHEN (CASE WHEN ((SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL) AND (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL))) AND (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SHORTCUT_TO_OMS_DIST_ORDER_LN.TOTAL_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.TOTAL_MONETARY_VALUE) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_MONETARY_VALUE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_TAX_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_TAX_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.MV_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.MV_CURRENCY_CD)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.SHIPPED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SHIPPED_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.RECEIVED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RECEIVED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_SOURCE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_SOURCE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.LAST_UPDATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LAST_UPDATED_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_STATUS_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_DTL_STATUS_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ALLOCATED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ALLOCATED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_COST_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_COST_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_PRICE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_PRICE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.USER_CANCELED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.USER_CANCELED_QTY)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_END_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_END_TSTMP)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_START_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EVENT_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_EVENT_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.REASON_CODE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_REASON_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PARTL_FILL_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.PARTIAL_FILL_FLAG)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORIG_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RETAIL_PRICE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RETAIL_PRICE_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_ORDER_LINE_ID)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_END_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_END_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PURCHASE_ORDER_LINE_NBR)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_START_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCELLED_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCELLED_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PRODUCT_ID <> PM_ALKP_SKU_PROFILE_1.PRODUCT_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_PURCHASE_ORDERS_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_CURRENCY_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ADJUSTED_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADJUSTED_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_RELEASED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_RELEASED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_ALLOCATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_ALLOCATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_SHIPPED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_SHIPPED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_PICKEDUP_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_PICKEDUP_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MASTER_ORDER_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MO_LINE_ITEM_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DO_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_NBR)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_LOCATION_ID <> INT8(CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID = '2956'::"VARCHAR") THEN PM_ALKP_SITE_PROFILE_1.LOCATION_ID WHEN (NOT (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID ISNULL)) THEN PM_ALKP_SITE_PROFILE_2_1.LOCATION_ID ELSE NULL::INT4 END))) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CREATION_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_FULFILLMENT_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SUBSCRIPTION_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ADD_ON_FLAG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADD_ON_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_FIRST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_FIRST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_LAST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_LAST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE1 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE1)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE2 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE2)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE3 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE3)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_CITY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_CITY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_STATE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_STATE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_POSTAL_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_POSTAL_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_COUNTRY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_COUNTRY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_EMAIL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_EMAIL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISUP_PXY_PHONE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISUP_PXY_PHONE)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_COMPANY_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EXCHANGE_RATE_PCNT <> CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RX_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCEL_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCEL_DTTM))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END ISNULL) THEN NULL::INT4 WHEN ((CASE WHEN ((SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL) AND (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL))) AND (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SHORTCUT_TO_OMS_DIST_ORDER_LN.TOTAL_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.TOTAL_MONETARY_VALUE) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_MONETARY_VALUE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_TAX_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_TAX_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.MV_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.MV_CURRENCY_CD)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.SHIPPED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SHIPPED_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.RECEIVED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RECEIVED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_SOURCE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_SOURCE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.LAST_UPDATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LAST_UPDATED_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_STATUS_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_DTL_STATUS_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ALLOCATED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ALLOCATED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_COST_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_COST_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_PRICE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_PRICE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.USER_CANCELED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.USER_CANCELED_QTY)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_END_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_END_TSTMP)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_START_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EVENT_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_EVENT_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.REASON_CODE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_REASON_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PARTL_FILL_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.PARTIAL_FILL_FLAG)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORIG_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RETAIL_PRICE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RETAIL_PRICE_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_ORDER_LINE_ID)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_END_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_END_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PURCHASE_ORDER_LINE_NBR)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_START_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCELLED_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCELLED_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PRODUCT_ID <> PM_ALKP_SKU_PROFILE_1.PRODUCT_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_PURCHASE_ORDERS_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_CURRENCY_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ADJUSTED_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADJUSTED_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_RELEASED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_RELEASED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_ALLOCATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_ALLOCATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_SHIPPED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_SHIPPED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_PICKEDUP_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_PICKEDUP_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MASTER_ORDER_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MO_LINE_ITEM_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DO_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_NBR)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_LOCATION_ID <> INT8(CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID = '2956'::"VARCHAR") THEN PM_ALKP_SITE_PROFILE_1.LOCATION_ID WHEN (NOT (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID ISNULL)) THEN PM_ALKP_SITE_PROFILE_2_1.LOCATION_ID ELSE NULL::INT4 END))) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CREATION_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_FULFILLMENT_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SUBSCRIPTION_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ADD_ON_FLAG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADD_ON_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_FIRST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_FIRST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_LAST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_LAST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE1 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE1)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE2 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE2)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE3 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE3)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_CITY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_CITY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_STATE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_STATE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_POSTAL_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_POSTAL_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_COUNTRY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_COUNTRY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_EMAIL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_EMAIL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISUP_PXY_PHONE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISUP_PXY_PHONE)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_COMPANY_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EXCHANGE_RATE_PCNT <> CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RX_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCEL_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCEL_DTTM))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'INSERT'::"VARCHAR") OR (CASE WHEN ((SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL) AND (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL))) AND (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SHORTCUT_TO_OMS_DIST_ORDER_LN.TOTAL_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.TOTAL_MONETARY_VALUE) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_MONETARY_VALUE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_TAX_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_TAX_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.MV_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.MV_CURRENCY_CD)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.SHIPPED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SHIPPED_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.RECEIVED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RECEIVED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_SOURCE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_SOURCE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.LAST_UPDATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LAST_UPDATED_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_STATUS_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_DTL_STATUS_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ALLOCATED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ALLOCATED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_COST_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_COST_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_PRICE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_PRICE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.USER_CANCELED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.USER_CANCELED_QTY)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_END_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_END_TSTMP)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_START_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EVENT_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_EVENT_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.REASON_CODE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_REASON_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PARTL_FILL_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.PARTIAL_FILL_FLAG)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORIG_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RETAIL_PRICE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RETAIL_PRICE_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_ORDER_LINE_ID)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_END_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_END_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PURCHASE_ORDER_LINE_NBR)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_START_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCELLED_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCELLED_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PRODUCT_ID <> PM_ALKP_SKU_PROFILE_1.PRODUCT_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_PURCHASE_ORDERS_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_CURRENCY_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ADJUSTED_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADJUSTED_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_RELEASED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_RELEASED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_ALLOCATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_ALLOCATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_SHIPPED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_SHIPPED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_PICKEDUP_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_PICKEDUP_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MASTER_ORDER_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MO_LINE_ITEM_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DO_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_NBR)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_LOCATION_ID <> INT8(CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID = '2956'::"VARCHAR") THEN PM_ALKP_SITE_PROFILE_1.LOCATION_ID WHEN (NOT (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID ISNULL)) THEN PM_ALKP_SITE_PROFILE_2_1.LOCATION_ID ELSE NULL::INT4 END))) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CREATION_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_FULFILLMENT_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SUBSCRIPTION_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ADD_ON_FLAG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADD_ON_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_FIRST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_FIRST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_LAST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_LAST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE1 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE1)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE2 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE2)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE3 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE3)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_CITY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_CITY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_STATE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_STATE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_POSTAL_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_POSTAL_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_COUNTRY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_COUNTRY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_EMAIL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_EMAIL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISUP_PXY_PHONE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISUP_PXY_PHONE)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_COMPANY_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EXCHANGE_RATE_PCNT <> CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RX_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCEL_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCEL_DTTM))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'UPDATE'::"VARCHAR")) THEN 1 ELSE 0 END <> 0) AND (CASE WHEN (CASE WHEN ((SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL) AND (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL))) AND (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SHORTCUT_TO_OMS_DIST_ORDER_LN.TOTAL_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.TOTAL_MONETARY_VALUE) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_MONETARY_VALUE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_TAX_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_TAX_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.MV_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.MV_CURRENCY_CD)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.SHIPPED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SHIPPED_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.RECEIVED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RECEIVED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_SOURCE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_SOURCE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.LAST_UPDATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LAST_UPDATED_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_STATUS_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_DTL_STATUS_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ALLOCATED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ALLOCATED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_COST_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_COST_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_PRICE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_PRICE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.USER_CANCELED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.USER_CANCELED_QTY)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_END_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_END_TSTMP)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_START_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EVENT_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_EVENT_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.REASON_CODE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_REASON_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PARTL_FILL_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.PARTIAL_FILL_FLAG)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORIG_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RETAIL_PRICE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RETAIL_PRICE_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_ORDER_LINE_ID)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_END_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_END_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PURCHASE_ORDER_LINE_NBR)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_START_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCELLED_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCELLED_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PRODUCT_ID <> PM_ALKP_SKU_PROFILE_1.PRODUCT_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_PURCHASE_ORDERS_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_CURRENCY_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ADJUSTED_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADJUSTED_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_RELEASED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_RELEASED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_ALLOCATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_ALLOCATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_SHIPPED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_SHIPPED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_PICKEDUP_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_PICKEDUP_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MASTER_ORDER_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MO_LINE_ITEM_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DO_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_NBR)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_LOCATION_ID <> INT8(CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID = '2956'::"VARCHAR") THEN PM_ALKP_SITE_PROFILE_1.LOCATION_ID WHEN (NOT (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID ISNULL)) THEN PM_ALKP_SITE_PROFILE_2_1.LOCATION_ID ELSE NULL::INT4 END))) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CREATION_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_FULFILLMENT_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SUBSCRIPTION_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ADD_ON_FLAG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADD_ON_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_FIRST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_FIRST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_LAST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_LAST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE1 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE1)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE2 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE2)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE3 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE3)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_CITY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_CITY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_STATE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_STATE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_POSTAL_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_POSTAL_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_COUNTRY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_COUNTRY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_EMAIL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_EMAIL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISUP_PXY_PHONE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISUP_PXY_PHONE)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_COMPANY_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EXCHANGE_RATE_PCNT <> CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RX_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCEL_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCEL_DTTM))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'INSERT'::"VARCHAR") THEN 0 WHEN (CASE WHEN ((SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL) AND (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_ID ISNULL))) AND (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SHORTCUT_TO_OMS_DIST_ORDER_LN.TOTAL_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.TOTAL_MONETARY_VALUE) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_MONETARY_VALUE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_MONETARY_VALUE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_TAX_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_TAX_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.MV_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.MV_CURRENCY_CD)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.SHIPPED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SHIPPED_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.RECEIVED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RECEIVED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_SOURCE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_SOURCE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.LAST_UPDATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_LAST_UPDATED_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_STATUS_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_DTL_STATUS_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ALLOCATED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ALLOCATED_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_COST_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_COST_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.UNIT_PRICE_AMT <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.UNIT_PRICE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.USER_CANCELED_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.USER_CANCELED_QTY)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_END_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_END_TSTMP)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.DELIVERY_START_DT) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DELIVERY_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EVENT_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_EVENT_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.REASON_CODE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_REASON_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PARTL_FILL_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.PARTIAL_FILL_FLAG)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_QTY)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORIG_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RETAIL_PRICE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RETAIL_PRICE_AMT)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DIST_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_ORDER_LINE_ID)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_END_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_END_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PURCHASE_ORDER_LINE_NBR)) OR ("TIMESTAMP"(SHORTCUT_TO_OMS_DIST_ORDER_LN.PICKUP_START_DTTM) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_PICKUP_START_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCELLED_FLG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCELLED_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.PRODUCT_ID <> PM_ALKP_SKU_PROFILE_1.PRODUCT_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_PURCHASE_ORDERS_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE_CURRENCY_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_CURRENCY_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.FREIGHT_REVENUE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.FREIGHT_REVENUE_AMT)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.ADJUSTED_ORDER_QTY) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADJUSTED_ORDER_QTY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_RELEASED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_RELEASED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_ALLOCATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_ALLOCATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_SHIPPED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_SHIPPED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EV_PICKEDUP_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.EV_PICKEDUP_TSTMP)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MASTER_ORDER_ID)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_LN_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_MO_LINE_ITEM_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_DO_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_DO_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_NBR <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_NBR)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_ORDER_CREATED_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_ORDER_CREATED_TSTMP)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORIG_LOCATION_ID <> INT8(CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID = '2956'::"VARCHAR") THEN PM_ALKP_SITE_PROFILE_1.LOCATION_ID WHEN (NOT (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_O_FACILITY_ALIAS_ID ISNULL)) THEN PM_ALKP_SITE_PROFILE_2_1.LOCATION_ID ELSE NULL::INT4 END))) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CREATION_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CREATION_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_FULFILLMENT_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_FULFILLMENT_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ORDER_CHANNEL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ORDER_CHANNEL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SCHED_DELIVERY_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SCHED_DELIVERY_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.SUBSCRIPTION_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.SUBSCRIPTION_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ADD_ON_FLAG <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ADD_ON_FLAG)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_FIRST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_FIRST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_LAST_NAME <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_LAST_NAME)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE1 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE1)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE2 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE2)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_ADD_LINE3 <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_ADD_LINE3)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_CITY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_CITY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_STATE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_STATE)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_POSTAL_CD <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_POSTAL_CD)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_COUNTRY <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_COUNTRY)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISPU_PXY_EMAIL <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISPU_PXY_EMAIL)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.ISUP_PXY_PHONE <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.ISUP_PXY_PHONE)) OR ("NUMERIC"(SHORTCUT_TO_OMS_DIST_ORDER_LN.OMS_COMPANY_ID) <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.EXCHANGE_RATE_PCNT <> CASE WHEN (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.OMS_TC_COMPANY_ID = ('8840'::NUMERIC(4,0))::NUMERIC(4,0)) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE PM_ALKP_CURRENCY_DAY_1.EXCHANGE_RATE_PCNT END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.RX_ORDER_FLG <> CASE WHEN ((PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG ISNULL) OR (PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.RX_ORDER_FLG = 0)) THEN 0 ELSE 1 END)) OR (SHORTCUT_TO_OMS_DIST_ORDER_LN.CANCEL_TSTMP <> PM_VHYDMJWV7UHOL3LHONNQ2NNIIDA.CANCEL_DTTM))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'UPDATE'::"VARCHAR") THEN 1 ELSE 3 END = 1));

\echo
\echo *****  Creating view:  "SVCS_PSH_STORE_OCCUPANCY_DAY_VW"

CREATE or replace VIEW  SVCS_PSH_STORE_OCCUPANCY_DAY_VW
(
     DAY_DT,
     LOCATION_ID,
     ROOM_TYPE,
     SAP_CLASS_ID,
     SAP_CLASS_DESC,
     TOTAL_CAPACITY_CNT,
     ROOM_RESERVATION_CNT,
     GUEST_RESERVATION_CNT
) AS
SELECT S0.DAY_DT, S0.LOCATION_ID, S0.ROOM_TYPE, MAX(CASE WHEN (S0.SAP_CLASS_ID ISNULL) THEN CASE WHEN (S0.ROOM_TYPE = 'Day Camp Addon'::"VARCHAR") THEN 821 ELSE 824 END ELSE S0.SAP_CLASS_ID END) AS SAP_CLASS_ID, MAX(CASE WHEN (S0.SAP_CLASS_ID ISNULL) THEN CASE WHEN (S0.ROOM_TYPE = 'Day Camp Addon'::"VARCHAR") THEN 'PSH Add Ons'::"VARCHAR" ELSE 'Overnight'::"VARCHAR" END ELSE S0.SAP_CLASS_DESC END) AS SAP_CLASS_DESC, CASE WHEN (MAX(S0.ROOM_CAPACITY_CNT) NOTNULL) THEN MAX(S0.ROOM_CAPACITY_CNT) WHEN (0 NOTNULL) THEN 0 WHEN (NULL::UNKNOWN NOTNULL) THEN NULL::INT4 ELSE NULL::INT4 END AS TOTAL_CAPACITY_CNT, COUNT(DISTINCT S0.TP_ROOM_NUMBER) AS ROOM_RESERVATION_CNT, CASE WHEN (SUM(S0.PETCOUNT) NOTNULL) THEN SUM(S0.PETCOUNT) WHEN (0 NOTNULL) THEN '0'::NUMERIC WHEN (NULL::UNKNOWN NOTNULL) THEN NULL::"NUMERIC" ELSE NULL::"NUMERIC" END AS GUEST_RESERVATION_CNT FROM (SELECT S0.DAY_DT, S0.LOCATION_ID, S0.ROOM_TYPE, T4.SAP_CLASS_ID, T4.SAP_CLASS_DESC, T3.TP_ROOM_NUMBER, S0.ROOM_CAPACITY_CNT, T3.PETCOUNT, T3.INVOICE_STATE_ID, T3.FOLIO_STATUS_FLAG, T3.DAY_DT AS DAY_DT_1 FROM ((SELECT S0.DAY_DT, S0.LOCATION_ID, S0.ROOM_TYPE, CASE WHEN (MAX(S0.ROOM_TYPE) = 'Atrium Large'::"VARCHAR") THEN MAX(S0.ATRIUM_LARGE_QTY) WHEN (MAX(S0.ROOM_TYPE) = 'Atrium Medium'::"VARCHAR") THEN MAX(S0.ATRIUM_MEDIUM_QTY) WHEN (MAX(S0.ROOM_TYPE) = 'Kitty Apartment'::"VARCHAR") THEN MAX(S0.KITTY_APARTMENT_QTY) WHEN (MAX(S0.ROOM_TYPE) = 'Suite'::"VARCHAR") THEN MAX(S0.SUITE_QTY) WHEN (MAX(S0.ROOM_TYPE) = 'Atrium Upper'::"VARCHAR") THEN MAX(S0.ATRIUM_UPPER_QTY) WHEN (MAX(S0.ROOM_TYPE) = 'Atrium Lower'::"VARCHAR") THEN MAX(S0.ATRIUM_LOWER_QTY) WHEN (MAX(S0.ROOM_TYPE) = 'Stay and Play Large'::"VARCHAR") THEN MAX(S0.STAY_PLAY_LARGE_QTY) WHEN (MAX(S0.ROOM_TYPE) = 'Stay and Play Medium'::"VARCHAR") THEN MAX(S0.STAY_PLAY_MEDIUM_QTY) ELSE 0 END AS ROOM_CAPACITY_CNT FROM (SELECT T1.DAY_DT, T0.LOCATION_ID, S1.ROOM_TYPE, T0.ATRIUM_LARGE_QTY, T0.ATRIUM_MEDIUM_QTY, T0.KITTY_APARTMENT_QTY, T0.SUITE_QTY, T0.ATRIUM_UPPER_QTY, T0.ATRIUM_LOWER_QTY, T0.STAY_PLAY_LARGE_QTY, T0.STAY_PLAY_MEDIUM_QTY FROM ((ADMIN.TP_HOTEL_CAPACITY_ROOM T0 CROSS JOIN ADMIN.DAYS T1) CROSS JOIN (SELECT MAX(T2.ROOM_TYPE_DESC) AS ROOM_TYPE FROM ADMIN.TP_SKU_ROOM_TYPE T2 GROUP BY T2.ROOM_TYPE_ID) S1) WHERE ((T1.DAY_DT > "TIMESTAMP"(DATE(TO_TIMESTAMP('2002-01-01'::"VARCHAR", 'YYYY-MM-DD'::"VARCHAR")))) AND (T1.DAY_DT < "TIMESTAMP"((DATE('now(0)'::"VARCHAR") + 365))))) S0 GROUP BY S0.DAY_DT, S0.LOCATION_ID, S0.ROOM_TYPE) S0 LEFT JOIN ((ADMIN.TP_INVOICE_SERVICE_DAY T3 JOIN ADMIN.SKU_PROFILE_RPT T4 ON ((T3.PRODUCT_ID = T4.PRODUCT_ID))) JOIN ADMIN.TP_SKU_ROOM_TYPE T5 ON ((T3.PRODUCT_ID = T5.PRODUCT_ID))) ON ((((S0.DAY_DT = "TIMESTAMP"(T3.DAY_DT)) AND (S0.LOCATION_ID = T3.LOCATION_ID)) AND (S0.ROOM_TYPE = T5.ROOM_TYPE_DESC)))) WHERE ((((T3.FOLIO_STATUS_FLAG IN ('I'::BPCHAR, 'A'::BPCHAR)) AND (T3.INVOICE_STATE_ID <> 4)) AND (T4.SAP_CLASS_ID IN (824, 822, 821))) OR (T3.DAY_DT ISNULL))) S0 GROUP BY S0.DAY_DT, S0.LOCATION_ID, S0.ROOM_TYPE;

\echo
\echo *****  Creating view:  "SALES_DAY_VENDOR_SKU_TYLY_VW"

CREATE or replace VIEW  SALES_DAY_VENDOR_SKU_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     VENDOR_ID,
     PRODUCT_ID,
     SKU_NBR,
     BRAND_CLASSIFICATION_ID,
     BRAND_CLASSIFICATION_NAME,
     BRAND_CD,
     BRAND_NAME,
     FIRST_INV_DT,
     SAP_CATEGORY_ID,
     SAP_CATEGORY_DESC,
     SAP_CLASS_ID,
     SAP_CLASS_DESC,
     SAP_DEPT_ID,
     SAP_DEPT_DESC,
     SAP_DIVISION_ID,
     SAP_DIVISION_DESC,
     VP_ID,
     VP_DESC,
     NET_MARGIN_AMT,
     NET_SALES_AMT,
     NET_SALES_QTY,
     GROSS_MARGIN_AMT
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, SDSR.VENDOR_ID, SPR.PRODUCT_ID, SPR.SKU_NBR, SPR.BRAND_CLASSIFICATION_ID, SPR.BRAND_CLASSIFICATION_NAME, SPR.BRAND_CD, SPR.BRAND_NAME, SPR.FIRST_INV_DT, SPR.SAP_CATEGORY_ID, SPR.SAP_CATEGORY_DESC, SPR.SAP_CLASS_ID, SPR.SAP_CLASS_DESC, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, SPR.SAP_DIVISION_ID, SPR.SAP_DIVISION_DESC, SPR.VP_ID, SPR.VP_DESC, SUM((SDSR.NET_MARGIN_AMT * SDSR.EXCH_RATE_PCT)) AS NET_MARGIN_AMT, SUM((SDSR.NET_SALES_AMT * SDSR.EXCH_RATE_PCT)) AS NET_SALES_AMT, SUM(SDSR.NET_SALES_QTY) AS NET_SALES_QTY, SUM(((((SDSR.SALES_AMT - SDSR.SPECIAL_SALES_AMT) + SDSR.CLEARANCE_AMT) - SDSR.SALES_COST) * SDSR.EXCH_RATE_PCT)) AS GROSS_MARGIN_AMT FROM ((((ADMIN.SALES_DAY_SKU_STORE_RPT SDSR JOIN ADMIN.DAYS D ON ((SDSR.DAY_DT = D.DAY_DT))) JOIN ADMIN.DAYS_TY_LY DTL ON ((D.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SKU_PROFILE_RPT SPR ON ((SDSR.PRODUCT_ID = SPR.PRODUCT_ID))) JOIN ADMIN.VENDOR_PROFILE_RPT VPR ON ((SDSR.VENDOR_ID = VPR.VENDOR_ID))) WHERE ((D.FISCAL_YR >= (SELECT (DAYS.FISCAL_YR - 2) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) AND (VPR.VENDOR_TYPE_ID = 2)) GROUP BY DTL.DAY_DT, DTL.TY_LY_FLAG, SDSR.VENDOR_ID, SPR.PRODUCT_ID, SPR.SKU_NBR, SPR.BRAND_CLASSIFICATION_ID, SPR.BRAND_CLASSIFICATION_NAME, SPR.BRAND_CD, SPR.BRAND_NAME, SPR.FIRST_INV_DT, SPR.SAP_CATEGORY_ID, SPR.SAP_CATEGORY_DESC, SPR.SAP_CLASS_ID, SPR.SAP_CLASS_DESC, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, SPR.SAP_DIVISION_ID, SPR.SAP_DIVISION_DESC, SPR.VP_ID, SPR.VP_DESC;

\echo
\echo *****  Creating view:  "VENDOR_CBX_SAP_REL_VW"

CREATE or replace VIEW  VENDOR_CBX_SAP_REL_VW
(
     CBX_VENDOR_ID,
     SAP_VENDOR_ID,
     VENDOR_NAME
) AS
(SELECT INT8((10000000 + INT4(SUBSTR(A.CBX_VENDOR_ID, 2)))) AS CBX_VENDOR_ID, B.VENDOR_ID AS SAP_VENDOR_ID, A.CBX_VENDOR_NAME AS VENDOR_NAME FROM (ADMIN.VENDOR_CBX_SAP_REL A JOIN ADMIN.VENDOR_PROFILE_RPT B ON ((INT8(A.SAP_VENDOR_ID) = B.VENDOR_ID))) WHERE (B.VENDOR_TYPE_ID = 2)) UNION (SELECT VENDOR_PROFILE_RPT.VENDOR_ID AS CBX_VENDOR_ID, VENDOR_PROFILE_RPT.VENDOR_ID AS SAP_VENDOR_ID, (VENDOR_PROFILE_RPT.VENDOR_NAME)::VARCHAR(500) AS VENDOR_NAME FROM ADMIN.VENDOR_PROFILE_RPT WHERE ((VENDOR_PROFILE_RPT.VENDOR_ID <> ALL (SELECT DISTINCT VENDOR_CBX_SAP_REL.SAP_VENDOR_ID FROM ADMIN.VENDOR_CBX_SAP_REL)) AND (VENDOR_PROFILE_RPT.VENDOR_TYPE_ID = 2)));

\echo
\echo *****  Creating view:  "VENDOR_SKU_DAY_COUNT_TYLY_VW"

CREATE or replace VIEW  VENDOR_SKU_DAY_COUNT_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     VENDOR_ID,
     VP_ID,
     VP_DESC,
     SAP_DIVISION_ID,
     SAP_DIVISION_DESC,
     SAP_DEPT_ID,
     SAP_DEPT_DESC,
     SAP_CLASS_ID,
     SAP_CLASS_DESC,
     SAP_CATEGORY_ID,
     SAP_CATEGORY_DESC,
     BRAND_CLASSIFICATION_ID,
     BRAND_CLASSIFICATION_NAME,
     BRAND_CD,
     BRAND_NAME,
     SKU_CNT
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, B.VENDOR_ID, SPR.VP_ID, SPR.VP_DESC, SPR.SAP_DIVISION_ID, SPR.SAP_DIVISION_DESC, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, SPR.SAP_CLASS_ID, SPR.SAP_CLASS_DESC, SPR.SAP_CATEGORY_ID, SPR.SAP_CATEGORY_DESC, SPR.BRAND_CLASSIFICATION_ID, SPR.BRAND_CLASSIFICATION_NAME, SPR.BRAND_CD, SPR.BRAND_NAME, COUNT(DISTINCT A.PRODUCT_ID) AS SKU_CNT FROM ((((SELECT MIN(D.DAY_DT) AS DAY_DT, PLF.PRODUCT_ID FROM ((ADMIN.PO_LN_FACT PLF JOIN ADMIN.PO_HDR_FACT PHF ON ((PLF.PO_NBR = PHF.PO_NBR))) JOIN ADMIN.DAYS D ON ((PHF.PO_DOC_DT = D.DAY_DT))) WHERE (D.FISCAL_YR >= (SELECT (DAYS.FISCAL_YR - 2) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) GROUP BY PLF.PRODUCT_ID) A JOIN (SELECT DISTINCT PLF.PRODUCT_ID, VPR.VENDOR_ID FROM (ADMIN.PO_LN_FACT PLF JOIN ADMIN.VENDOR_PROFILE_RPT VPR ON ((PLF.VENDOR_ID = VPR.VENDOR_ID))) WHERE (VPR.VENDOR_TYPE_ID = 2)) B ON ((A.PRODUCT_ID = B.PRODUCT_ID))) JOIN ADMIN.SKU_PROFILE_RPT SPR ON ((A.PRODUCT_ID = SPR.PRODUCT_ID))) JOIN ADMIN.DAYS_TY_LY DTL ON ((A.DAY_DT = DTL.TRANS_DAY_DT))) GROUP BY DTL.DAY_DT, DTL.TY_LY_FLAG, B.VENDOR_ID, SPR.VP_ID, SPR.VP_DESC, SPR.SAP_DIVISION_ID, SPR.SAP_DIVISION_DESC, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, SPR.SAP_CLASS_ID, SPR.SAP_CLASS_DESC, SPR.SAP_CATEGORY_ID, SPR.SAP_CATEGORY_DESC, SPR.BRAND_CLASSIFICATION_ID, SPR.BRAND_CLASSIFICATION_NAME, SPR.BRAND_CD, SPR.BRAND_NAME;

\echo
\echo *****  Creating view:  "VENDOR_SKU_DAY_TYLY_VW"

CREATE or replace VIEW  VENDOR_SKU_DAY_TYLY_VW
(
     DAY_DT,
     TY_LY_FLAG,
     SOURCE_VENDOR_ID,
     PRODUCT_ID,
     SKU_NBR,
     BRAND_CLASSIFICATION_ID,
     BRAND_CLASSIFICATION_NAME,
     BRAND_CD,
     BRAND_NAME,
     FIRST_INV_DT,
     SAP_CATEGORY_ID,
     SAP_CATEGORY_DESC,
     SAP_CLASS_ID,
     SAP_CLASS_DESC,
     SAP_DEPT_ID,
     SAP_DEPT_DESC,
     SAP_DIVISION_ID,
     SAP_DIVISION_DESC,
     VP_ID,
     VP_DESC,
     PO_GROSS_COST,
     PO_RCPT_QTY,
     DUTY,
     FREIGHT,
     DIFF_DOC_CRD
) AS
SELECT DTL.DAY_DT, DTL.TY_LY_FLAG, A.VENDOR_ID AS SOURCE_VENDOR_ID, A.PRODUCT_ID, C.SKU_NBR, C.BRAND_CLASSIFICATION_ID, C.BRAND_CLASSIFICATION_NAME, C.BRAND_CD, C.BRAND_NAME, C.FIRST_INV_DT, C.SAP_CATEGORY_ID, C.SAP_CATEGORY_DESC, C.SAP_CLASS_ID, C.SAP_CLASS_DESC, C.SAP_DEPT_ID, C.SAP_DEPT_DESC, C.SAP_DIVISION_ID, C.SAP_DIVISION_DESC, C.VP_ID, C.VP_DESC, SUM((A.PO_GROSS_COST * A.CREATE_EXCH_RATE_PCNT)) AS PO_GROSS_COST, SUM(A.PO_RCPT_QTY) AS PO_RCPT_QTY, SUM(PLC.DUTY_PO_COND) AS DUTY, SUM(PLC.FREIGHT_PO_COND) AS FREIGHT, (SUM((FOB.CARGO_READY_DT - DATE(B.PO_DOC_DT))) / "NUMERIC"(COUNT((FOB.CARGO_READY_DT - DATE(B.PO_DOC_DT))))) AS DIFF_DOC_CRD FROM (((((((ADMIN.PO_LN_FACT A JOIN ADMIN.PO_HDR_FACT B ON ((A.PO_NBR = B.PO_NBR))) JOIN ADMIN.DAYS DA ON ((B.PO_DOC_DT = DA.DAY_DT))) JOIN ADMIN.DAYS_TY_LY DTL ON ((DA.DAY_DT = DTL.TRANS_DAY_DT))) JOIN ADMIN.SKU_PROFILE_RPT C ON ((A.PRODUCT_ID = C.PRODUCT_ID))) JOIN ADMIN.VENDOR_PROFILE_RPT D ON ((A.VENDOR_ID = D.VENDOR_ID))) LEFT JOIN (SELECT PO_LN_COND.PO_NBR, PO_LN_COND.PO_LINE_NBR, PO_LN_COND.PRODUCT_ID, SUM(CASE WHEN (PO_LN_COND.PO_COND_CD = 'ZDT1'::"VARCHAR") THEN PO_LN_COND.PO_COND_VALUE_AMT ELSE '0'::NUMERIC END) AS DUTY_PO_COND, SUM(CASE WHEN (PO_LN_COND.PO_COND_CD = 'ZPO1'::"VARCHAR") THEN PO_LN_COND.PO_COND_VALUE_AMT ELSE '0'::NUMERIC END) AS FREIGHT_PO_COND FROM ADMIN.PO_LN_COND GROUP BY PO_LN_COND.PO_NBR, PO_LN_COND.PO_LINE_NBR, PO_LN_COND.PRODUCT_ID) PLC ON ((((A.PO_NBR = PLC.PO_NBR) AND (A.PRODUCT_ID = PLC.PRODUCT_ID)) AND (A.PO_LINE_NBR = PLC.PO_LINE_NBR)))) LEFT JOIN (SELECT FOB_OPEN_PO_RPT_WK.PO_NBR, MAX(FOB_OPEN_PO_RPT_WK.CARGO_READY_DT) AS CARGO_READY_DT FROM ADMIN.FOB_OPEN_PO_RPT_WK WHERE (FOB_OPEN_PO_RPT_WK.CARGO_READY_DT NOTNULL) GROUP BY FOB_OPEN_PO_RPT_WK.PO_NBR) FOB ON ((A.PO_NBR = FOB.PO_NBR))) WHERE ((DA.FISCAL_YR >= (SELECT (DAYS.FISCAL_YR - 2) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) AND (D.VENDOR_TYPE_ID = 2)) GROUP BY DTL.DAY_DT, DTL.TY_LY_FLAG, A.VENDOR_ID, A.PRODUCT_ID, C.SKU_NBR, C.BRAND_CD, C.BRAND_CLASSIFICATION_ID, C.BRAND_CLASSIFICATION_NAME, C.BRAND_NAME, C.FIRST_INV_DT, C.SAP_CATEGORY_ID, C.SAP_CATEGORY_DESC, C.SAP_CLASS_ID, C.SAP_CLASS_DESC, C.SAP_DEPT_ID, C.SAP_DEPT_DESC, C.SAP_DIVISION_ID, C.SAP_DIVISION_DESC, C.VP_DESC, C.VP_ID;

\echo
\echo *****  Creating view:  "SVCS_PLAN_UNITS_SALES_DAY_CRCY_VW"

CREATE or replace VIEW  SVCS_PLAN_UNITS_SALES_DAY_CRCY_VW
(
     LOCATION_ID,
     DAY_DT,
     SAP_CLASS_ID,
     PLAN_SALES_QTY,
     PLAN_SALES_AMT,
     CURRENCY_TYPE_ID,
     CURRENCY_TYPE_DESC,
     EXCH_RATE_PCT
) AS
SELECT SVCS_PLAN_UNITS_SALES_DAY.LOCATION_ID, SVCS_PLAN_UNITS_SALES_DAY.DAY_DT, SVCS_PLAN_UNITS_SALES_DAY.SAP_CLASS_ID, SVCS_PLAN_UNITS_SALES_DAY.PLAN_SALES_QTY, SVCS_PLAN_UNITS_SALES_DAY.PLAN_SALES_AMT, CTL.CURRENCY_TYPE_ID, CTL.CURRENCY_TYPE_DESC, CASE WHEN (CTL.CURRENCY_TYPE_ID = 2) THEN ('1'::NUMERIC(1,0))::NUMERIC(1,0) ELSE SVCS_PLAN_UNITS_SALES_DAY.EXCH_RATE_PCT END AS EXCH_RATE_PCT FROM (ADMIN.SVCS_PLAN_UNITS_SALES_DAY CROSS JOIN ADMIN.CURRENCY_TYPE_LKUP CTL);

\echo
\echo *****  Creating view:  "VENDOR_REPORTED_ISSUES_RPT_VW"

CREATE or replace VIEW  VENDOR_REPORTED_ISSUES_RPT_VW
(
     DAY_DT,
     CLAIM_NBR,
     PRODUCT_ID,
     VENDOR_ID
) AS
WITH N_ROWS AS (SELECT ROW_NUMBER() OVER (PARTITION BY 1  ORDER BY DAYS.DAY_DT ) AS SEQ_NUM FROM ADMIN.DAYS LIMIT 1000), CLEANUP_DATA AS (SELECT D.DAY_DT, A.CLAIM_NBR, A.PET_PRODUCT_SKU_SHORT_CD AS ORIG_SRC, SQLEXT.ADMIN.REGEXP_REPLACE(SQLEXT.ADMIN.REGEXP_REPLACE(A.PET_PRODUCT_SKU_SHORT_CD, ','::"VARCHAR", ' '::"VARCHAR"), '[/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz,?,-,#,+,&,;,-,(,)]'::"VARCHAR", ''::"VARCHAR") AS MOD_PROD FROM (ADMIN.INCIDENT_CLAIMS_INVESTIGATIONS_VW A JOIN ADMIN.DAYS D ON (("TIMESTAMP"(A.DAY_DT) = D.DAY_DT))) WHERE ((((A.INCIDENT_TYPE = 'Pet Product'::"VARCHAR") AND (D.FISCAL_YR >= (SELECT (DAYS.FISCAL_YR - 2) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR")))))) AND (A.PET_PRODUCT_SKU_SHORT_CD NOTNULL)) AND (SQLEXT.ADMIN.REGEXP_LIKE(A.PET_PRODUCT_SKU_SHORT_CD, '^[A-z]'::"VARCHAR") = 'f'::BOOL))), FIND_VALUES AS (SELECT CLEANUP_DATA.DAY_DT, CLEANUP_DATA.ORIG_SRC, CLEANUP_DATA.CLAIM_NBR, SQLEXT.ADMIN.REGEXP_REPLACE(SQLEXT.ADMIN.REGEXP_REPLACE(SQLEXT.ADMIN.REGEXP_REPLACE(SQLEXT.ADMIN.REGEXP_REPLACE(SQLEXT.ADMIN.REGEXP_REPLACE(BTRIM(TRANSLATE(CLEANUP_DATA.MOD_PROD, '-:.'::"VARCHAR", ''::"VARCHAR")), '     '::"VARCHAR", ','::"VARCHAR"), '    '::"VARCHAR", ','::"VARCHAR"), '   '::"VARCHAR", ','::"VARCHAR"), '  '::"VARCHAR", ','::"VARCHAR"), ' '::"VARCHAR", ','::"VARCHAR") AS PET_PRODUCT_SKU_SHORT_CD FROM  CLEANUP_DATA), ARR AS (SELECT FIND_VALUES.DAY_DT, FIND_VALUES.CLAIM_NBR, INT4(N_ROWS.SEQ_NUM) AS SEQ_NUM, FIND_VALUES.ORIG_SRC, FIND_VALUES.PET_PRODUCT_SKU_SHORT_CD, SQLEXT.ADMIN.ARRAY_SPLIT(FIND_VALUES.PET_PRODUCT_SKU_SHORT_CD, ','::"VARCHAR") AS ARRAY_LIST FROM ( FIND_VALUES CROSS JOIN  N_ROWS) WHERE (N_ROWS.SEQ_NUM <= (SQLEXT.ADMIN.REGEXP_MATCH_COUNT(FIND_VALUES.PET_PRODUCT_SKU_SHORT_CD, ','::"VARCHAR") + 1)) ORDER BY FIND_VALUES.DAY_DT, INT4(N_ROWS.SEQ_NUM) ), SKU_LIST AS (SELECT ARR.DAY_DT, ARR.CLAIM_NBR, ARR.SEQ_NUM, ARR.ORIG_SRC, ARR.PET_PRODUCT_SKU_SHORT_CD, SQLEXT.ADMIN.GET_VALUE_VARCHAR(ARR.ARRAY_LIST, ARR.SEQ_NUM) AS PET_PRODUCT_SKU_SHORT_CD_MOD FROM  ARR), FINAL_SKU AS (SELECT DISTINCT SKU_LIST.DAY_DT, SKU_LIST.CLAIM_NBR, CASE WHEN (LENGTH(TRANSLATE(SKU_LIST.PET_PRODUCT_SKU_SHORT_CD_MOD, ' '::"VARCHAR", ''::"VARCHAR")) < 1) THEN '0'::"VARCHAR" WHEN (BTRIM(SKU_LIST.PET_PRODUCT_SKU_SHORT_CD_MOD) ISNULL) THEN '0'::"VARCHAR" WHEN (LENGTH(SKU_LIST.PET_PRODUCT_SKU_SHORT_CD_MOD) < 10) THEN BTRIM(SKU_LIST.PET_PRODUCT_SKU_SHORT_CD_MOD) ELSE '0'::"VARCHAR" END AS SKU FROM  SKU_LIST) SELECT DISTINCT FS.DAY_DT, FS.CLAIM_NBR, SKP.PRODUCT_ID, SC.SOURCE_VENDOR_ID AS VENDOR_ID FROM ((FINAL_SKU FS JOIN ADMIN.SKU_PROFILE_RPT SKP ON ((INT4(FS.SKU) = SKP.SKU_NBR))) JOIN ADMIN.SUPPLY_CHAIN SC ON ((SC.PRODUCT_ID = SKP.PRODUCT_ID)));

\echo
\echo *****  Creating view:  "PM_VQSB47XGW6TY5KCWLXDJHGHP7MY"

CREATE or replace VIEW  PM_VQSB47XGW6TY5KCWLXDJHGHP7MY
(
     OMS_PURCHASE_ORDERS_ID,
     SCREENWIDTH,
     DEVICETYPE
) AS
SELECT DT.OMS_PURCHASE_ORDERS_ID, INT4(SW.ATTRIBUTE_VALUE) AS SCREENWIDTH, DT.ATTRIBUTE_VALUE AS DEVICETYPE FROM ((SELECT OMS_PURCHASE_ORDERS_ATTRIBUTE.OMS_PURCHASE_ORDERS_ID, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_VALUE, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME FROM ADMIN.OMS_PURCHASE_ORDERS_ATTRIBUTE WHERE (OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME IN (('DeviceType'::"VARCHAR")::VARCHAR(50)))) DT LEFT JOIN (SELECT OMS_PURCHASE_ORDERS_ATTRIBUTE.OMS_PURCHASE_ORDERS_ID, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_VALUE, OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME FROM ADMIN.OMS_PURCHASE_ORDERS_ATTRIBUTE WHERE (OMS_PURCHASE_ORDERS_ATTRIBUTE.ATTRIBUTE_NAME IN (('ScreenWidth'::"VARCHAR")::VARCHAR(50)))) SW ON ((DT.OMS_PURCHASE_ORDERS_ID = SW.OMS_PURCHASE_ORDERS_ID)));

\echo
\echo *****  Creating view:  "PM_VMNX7KPTTQBOOCNJFIAFGKXEVFQ"

CREATE or replace VIEW  PM_VMNX7KPTTQBOOCNJFIAFGKXEVFQ
(
     DAY_DT,
     EMPLOYEE_ID,
     ASSESSMENT_MID,
     ASSESSMENT_LID,
     TEST_TAKEN_DT,
     ASSESSMENT_NAME,
     JOB_CD,
     LOCATION_ID,
     LAST_TEST_SCORE_NBR,
     LAST_TEST_PASSED_FLAG,
     COMPLIANT_START_DT,
     COMPLIANT_EXPIRATION_DT,
     CURR_COMPLIANCE_FLAG,
     CURR_MISSING_FLAG,
     CURR_PERIOD_ATTEMPTS_NBR,
     LOAD_DT
) AS
SELECT PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.DAY_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.EMPLOYEE_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_MID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_LID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.TEST_TAKEN_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_NAME, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.JOB_CD, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOCATION_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_SCORE_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_PASSED_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_START_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_EXPIRATION_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_MISSING_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_PERIOD_ATTEMPTS_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOAD_DT FROM ADMIN.EDU_CERT_DAILY_CONS PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U WHERE (PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG <> 3);

\echo
\echo *****  Creating view:  "PM_V75K7VMTA44MKESAS4C6DW5SIZI"

CREATE or replace VIEW  PM_V75K7VMTA44MKESAS4C6DW5SIZI
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "PM_V5RGFICB4JBKWEUYYWQ5YZK4IWY"

CREATE or replace VIEW  PM_V5RGFICB4JBKWEUYYWQ5YZK4IWY
(
     OMS_PURCHASE_ORDERS_ID,
     OMS_PURCHASE_ORDERS_LINE_ITEM_ID,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.OMS_PURCHASE_ORDERS_ID, PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.OMS_PURCHASE_ORDERS_LINE_ITEM_ID, PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.ATTRIBUTE_VALUE, PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.UPDATE_TSTMP FROM ADMIN.OMS_PO_LINE_ITEM_ATTRIBUTE PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM WHERE ((PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.ATTRIBUTE_NAME = 'Proxy_Tracking_Code'::"VARCHAR") AND (PM_ADQX6VHUDUG3XKSRZ2D2ZEKLZXM.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "PM_VSWN4OVNCG35FZ7NJHK564YTW2U"

CREATE or replace VIEW  PM_VSWN4OVNCG35FZ7NJHK564YTW2U
(
     OMS_CODE_ID,
     OMS_CODE_DESC,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_SYS_CODE1.OMS_CODE_ID, SHORTCUT_TO_OMS_SYS_CODE1.OMS_CODE_DESC, SHORTCUT_TO_OMS_SYS_CODE1.UPDATE_TSTMP FROM ADMIN.OMS_SYS_CODE SHORTCUT_TO_OMS_SYS_CODE1 WHERE ((SHORTCUT_TO_OMS_SYS_CODE1.OMS_REC_TYPE = 'B'::"VARCHAR") AND (SHORTCUT_TO_OMS_SYS_CODE1.OMS_CODE_TYPE = '039'::"VARCHAR"));

\echo
\echo *****  Creating view:  "PM_VCXHH4PLXUVCCDGQJFRTWK7HXG4"

CREATE or replace VIEW  PM_VCXHH4PLXUVCCDGQJFRTWK7HXG4
(
     OMS_PURCHASE_ORDERS_LINE_ITEM_ID,
     OMS_PURCHASE_ORDERS_ID,
     REF_FIELD3,
     UPDATE_TSTMP
) AS
SELECT PM_AUDMOXXZULBIPATZP2XLYMZGA7A.OMS_PURCHASE_ORDERS_LINE_ITEM_ID, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.OMS_PURCHASE_ORDERS_ID, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.REF_FIELD3, PM_AUDMOXXZULBIPATZP2XLYMZGA7A.UPDATE_TSTMP FROM ADMIN.OMS_PO_LINE_ITEM_REF_FIELDS PM_AUDMOXXZULBIPATZP2XLYMZGA7A WHERE (UPPER(PM_AUDMOXXZULBIPATZP2XLYMZGA7A.REF_FIELD3) = 'TRUE'::"VARCHAR");

\echo
\echo *****  Creating view:  "PM_VMXQAPMWW3S6RFAPSKZC5S4RAZM"

CREATE or replace VIEW  PM_VMXQAPMWW3S6RFAPSKZC5S4RAZM
(
     OMS_CODE_ID,
     OMS_CODE_DESC,
     OMS_CODE_SHORT_DESC,
     UPDATE_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_ID, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_DESC, SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_SHORT_DESC, SHORTCUT_TO_OMS_SYS_CODE.UPDATE_TSTMP FROM ADMIN.OMS_SYS_CODE SHORTCUT_TO_OMS_SYS_CODE WHERE ((SHORTCUT_TO_OMS_SYS_CODE.OMS_REC_TYPE = 'B'::"VARCHAR") AND (SHORTCUT_TO_OMS_SYS_CODE.OMS_CODE_TYPE = '032'::"VARCHAR"));

\echo
\echo *****  Creating view:  "PM_VRMM2B2YL4LJSVUA5SLC5K63SII"

CREATE or replace VIEW  PM_VRMM2B2YL4LJSVUA5SLC5K63SII
(
     OMS_REASON_CODE_ID,
     OMS_REASON_CD,
     UPDATE_TSTMP
) AS
SELECT PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.OMS_REASON_CODE_ID, PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.OMS_REASON_CD, PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.UPDATE_TSTMP FROM ADMIN.OMS_A_CO_REASON_CODE PM_A6DBTZXV3LKGR234DF3PGY2GW4Y WHERE ((PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.OMS_REASON_CODE_TYPE = ('1'::NUMERIC(1,0))::NUMERIC(1,0)) AND (PM_A6DBTZXV3LKGR234DF3PGY2GW4Y.MARK_FOR_DELETION_FLAG = '0'::NUMERIC));

\echo
\echo *****  Creating view:  "PM_VLWXQB4IK2VERYZDBE24ML5N5IY"

CREATE or replace VIEW  PM_VLWXQB4IK2VERYZDBE24ML5N5IY
(
     PO_NBR,
     PO_DOC_DT
) AS
SELECT DISTINCT SHORTCUT_TO_PO_HDR_FACT.PO_NBR, SHORTCUT_TO_PO_HDR_FACT.PO_DOC_DT FROM ADMIN.PO_HDR_FACT SHORTCUT_TO_PO_HDR_FACT WHERE ((SHORTCUT_TO_PO_HDR_FACT.PO_DOC_DT >= "TIMESTAMP"(TO_DATE('6/1/2020'::"VARCHAR", 'MM/DD/YYYY'::"VARCHAR"))) AND (SHORTCUT_TO_PO_HDR_FACT.PO_TYPE_ID IN (('UB'::"VARCHAR")::VARCHAR(4), ('NBCR'::"VARCHAR")::VARCHAR(4), ('RB'::"VARCHAR")::VARCHAR(4))));

\echo
\echo *****  Creating view:  "SMS_APPOINTMENT_SERVICE_RPT_ROCKY"

CREATE or replace VIEW  SMS_APPOINTMENT_SERVICE_RPT_ROCKY
(
     SMS_APPOINTMENT_ID,
     SMS_APPT_SERVICE_ID,
     SMS_ORDER_ID,
     SMS_ORDER_ITEM_ID,
     PETM_POS_INVOICE_ID,
     LOCATION_ID,
     SMS_APPOINTMENT_DT,
     SMS_APPOINTMENT_TSTMP,
     SMS_APPT_STATUS_ID,
     SMS_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SMS_APPT_CREATION_CHANNEL,
     SMS_ORDER_STATUS_ID,
     SMS_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     SMS_SERVICE_CATEGORY_ID,
     SMS_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SMS_SERVICE_SUBCAT_ID,
     SMS_SERVICE_SUBCAT_DESC,
     SVCS_SERVICE_SUB_CATEGORY_GID,
     SVCS_SERVICE_SUB_CATEGORY_DESC,
     SMS_SERVICE_ID,
     PRODUCT_ID,
     UPC_ID,
     PRIMARY_SERVICE_FLAG,
     SMS_CUSTOMER_ID,
     SMS_CUSTOMER_FIRST_NAME,
     SMS_CUSTOMER_LAST_NAME,
     SMS_CUSTOMER_PHONE_NBR,
     SMS_CUSTOMER_EMAIL_ADDR,
     SMS_REMINDER_CALL_FLAG,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     SMS_CUSTOMER_RATING,
     SMS_PET_ID,
     SMS_PET2_ID,
     SMS_PET_NAME,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     SMS_PET_SPECIES_ID,
     SMS_PET_SPECIES_DESC,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     SMS_PET_GENDER_ID,
     SMS_PET_GENDER_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     SMS_PET_BREED_ID,
     SMS_PET_BREED_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     SMS_PET_COLOR_ID,
     SMS_PET_COLOR_DESC,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     SMS_PET_STATUS_ID,
     SMS_PET_STATUS_DESC,
     SMS_GROOM_RATING,
     SMS_BOARD_RATING,
     SMS_TRAIN_RATING,
     SMS_DAYCAMP_RATING,
     SMS_PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     SMS_PET_CREATE_TSTMP,
     ORD_CREATE_TSTMP,
     ORD_CREATE_USER_ID,
     ORD_DELETE_TSTMP,
     ORD_LAST_MODIFY_TSTMP,
     ORDER_VOID_IND,
     APPT_CREATE_TSTMP,
     APPT_CREATE_USER_ID,
     APPT_DELETE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_UPDATE_IND,
     APPT_CANCEL_TSTMP,
     CANCEL_IND,
     SMS_CANCEL_REASON_ID,
     SMS_CANCEL_REASON_DESC,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     CHECK_IN_TSTMP,
     CHECK_OUT_TSTMP,
     COMPLETE_IND,
     NO_SHOW_IND,
     WALK_IN_FLAG,
     REBOOKED_IND,
     APPT_SVC_CREATE_TSTMP,
     APPT_SVC_LAST_MODIFY_TSTMP,
     APPT_SVC_UPDATE_IND,
     SERVICE_CANCEL_TSTMP,
     SERVICE_CANCEL_IND,
     SCHED_SERVICE_START_TSTMP,
     SCHED_SERVICE_END_TSTMP,
     SERVICE_START_TSTMP,
     SERVICE_END_TSTMP,
     SERVICE_COMPLETE_IND,
     SMS_ROOM_ID,
     SMS_ROOM_DESC,
     SMS_ROOM_TYPE_ID,
     SMS_ROOM_TYPE_DESC,
     SMS_EMPLOYEE_ID,
     EMPLOYEE_ID,
     REQUESTED_SMS_EMPLOYEE_GROUP_ID,
     REQUESTED_SMS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SMS_EMPLOYEE_GROUP_ID,
     ASSIGNED_SMS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     ORDER_ITEM_QTY,
     APPT_TOTAL_ITEM_QTY,
     APPT_TOTAL_PRICE_AMT,
     APPT_SERVICE_ITEM_QTY,
     ORIG_PRICE_AMT,
     DISCOUNT_AMT,
     FINAL_PRICE_AMT,
     OVERRIDE_REASON_ID,
     PRICE_OVERRIDE_REASON_DESC,
     SVCS_PRICE_OVERRIDE_REASON_GID,
     SVCS_PRICE_OVERRIDE_REASON_DESC,
     APPT_SERVICE_PRICE_OVERRIDE_DT,
     EMPLOYEE_COMMISSION_RATE_PCT,
     SMS_COMMISSION_AMT,
     PAYMENT_TSTMP,
     PAYMENT_AMT,
     SMS_PAYMENT_METHOD_ID,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT SMS_APPOINTMENT_SERVICE_RPT.SMS_APPOINTMENT_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_APPT_SERVICE_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_ORDER_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_ORDER_ITEM_ID, SMS_APPOINTMENT_SERVICE_RPT.PETM_POS_INVOICE_ID, SMS_APPOINTMENT_SERVICE_RPT.LOCATION_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_APPOINTMENT_DT, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SMS_APPOINTMENT_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SMS_APPOINTMENT_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.SMS_APPT_STATUS_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_APPT_STATUS_DESC, SMS_APPOINTMENT_SERVICE_RPT.SVCS_APPT_STATUS_GID, SMS_APPOINTMENT_SERVICE_RPT.SVCS_APPT_STATUS_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_APPT_CREATION_CHANNEL, SMS_APPOINTMENT_SERVICE_RPT.SMS_ORDER_STATUS_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_ORDER_STATUS_DESC, SMS_APPOINTMENT_SERVICE_RPT.SVCS_ORDER_STATUS_GID, SMS_APPOINTMENT_SERVICE_RPT.SVCS_ORDER_STATUS_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_SERVICE_CATEGORY_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_SERVICE_CATEGORY_DESC, SMS_APPOINTMENT_SERVICE_RPT.SVCS_SERVICE_CATEGORY_GID, SMS_APPOINTMENT_SERVICE_RPT.SVCS_SERVICE_CATEGORY_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_SERVICE_SUBCAT_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_SERVICE_SUBCAT_DESC, SMS_APPOINTMENT_SERVICE_RPT.SVCS_SERVICE_SUB_CATEGORY_GID, SMS_APPOINTMENT_SERVICE_RPT.SVCS_SERVICE_SUB_CATEGORY_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_SERVICE_ID, SMS_APPOINTMENT_SERVICE_RPT.PRODUCT_ID, SMS_APPOINTMENT_SERVICE_RPT.UPC_ID, SMS_APPOINTMENT_SERVICE_RPT.PRIMARY_SERVICE_FLAG, SMS_APPOINTMENT_SERVICE_RPT.SMS_CUSTOMER_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_CUSTOMER_FIRST_NAME, SMS_APPOINTMENT_SERVICE_RPT.SMS_CUSTOMER_LAST_NAME, SMS_APPOINTMENT_SERVICE_RPT.SMS_CUSTOMER_PHONE_NBR, SMS_APPOINTMENT_SERVICE_RPT.SMS_CUSTOMER_EMAIL_ADDR, SMS_APPOINTMENT_SERVICE_RPT.SMS_REMINDER_CALL_FLAG, SMS_APPOINTMENT_SERVICE_RPT.SVCS_CUSTOMER_GID, SMS_APPOINTMENT_SERVICE_RPT.SVCS_CUSTOMER_FIRST_NAME, SMS_APPOINTMENT_SERVICE_RPT.SVCS_CUSTOMER_LAST_NAME, SMS_APPOINTMENT_SERVICE_RPT.SMS_CUSTOMER_RATING, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET2_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_NAME, SMS_APPOINTMENT_SERVICE_RPT.SVCS_PET_GID, SMS_APPOINTMENT_SERVICE_RPT.SVCS_PET_NAME, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_SPECIES_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_SPECIES_DESC, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_SPECIES_ID, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_SPECIES_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_GENDER_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_GENDER_DESC, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_GENDER_ID, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_GENDER_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_BREED_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_BREED_DESC, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_BREED_ID, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_BREED_DESC, SMS_APPOINTMENT_SERVICE_RPT.MIXED_BREED_FLAG, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_COLOR_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_COLOR_DESC, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_COLOR_ID, SMS_APPOINTMENT_SERVICE_RPT.PETM_PET_COLOR_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_STATUS_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_STATUS_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_GROOM_RATING, SMS_APPOINTMENT_SERVICE_RPT.SMS_BOARD_RATING, SMS_APPOINTMENT_SERVICE_RPT.SMS_TRAIN_RATING, SMS_APPOINTMENT_SERVICE_RPT.SMS_DAYCAMP_RATING, DATE(SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_BIRTH_DT) AS SMS_PET_BIRTH_DT, SMS_APPOINTMENT_SERVICE_RPT.BORDETELLA_EXP_DT, SMS_APPOINTMENT_SERVICE_RPT.RABIES_EXP_DT, SMS_APPOINTMENT_SERVICE_RPT.DISTEMPER_EXP_DT, SMS_APPOINTMENT_SERVICE_RPT.PARVOVIRUS_EXP_DT, SMS_APPOINTMENT_SERVICE_RPT.PARAINFLUENZA_EXP_DT, SMS_APPOINTMENT_SERVICE_RPT.FVRCCP_EXP_DT, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SMS_PET_CREATE_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SMS_PET_CREATE_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.ORD_CREATE_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS ORD_CREATE_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.ORD_CREATE_USER_ID, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.ORD_DELETE_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS ORD_DELETE_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.ORD_LAST_MODIFY_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS ORD_LAST_MODIFY_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.ORDER_VOID_IND, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.APPT_CREATE_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS APPT_CREATE_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.APPT_CREATE_USER_ID, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.APPT_DELETE_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS APPT_DELETE_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.APPT_LAST_MODIFY_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS APPT_LAST_MODIFY_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.APPT_UPDATE_IND, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.APPT_CANCEL_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS APPT_CANCEL_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.CANCEL_IND, SMS_APPOINTMENT_SERVICE_RPT.SMS_CANCEL_REASON_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_CANCEL_REASON_DESC, SMS_APPOINTMENT_SERVICE_RPT.APPT_SVCS_CANCEL_REASON_GID, SMS_APPOINTMENT_SERVICE_RPT.APPT_SVCS_CANCEL_REASON_DESC, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SCHED_APPT_START_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SCHED_APPT_START_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SCHED_APPT_END_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SCHED_APPT_END_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.CHECK_IN_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS CHECK_IN_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.CHECK_OUT_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS CHECK_OUT_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.COMPLETE_IND, SMS_APPOINTMENT_SERVICE_RPT.NO_SHOW_IND, SMS_APPOINTMENT_SERVICE_RPT.WALK_IN_FLAG, SMS_APPOINTMENT_SERVICE_RPT.REBOOKED_IND, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.APPT_SVC_CREATE_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS APPT_SVC_CREATE_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.APPT_SVC_LAST_MODIFY_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS APPT_SVC_LAST_MODIFY_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.APPT_SVC_UPDATE_IND, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SERVICE_CANCEL_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SERVICE_CANCEL_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.SERVICE_CANCEL_IND, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SCHED_SERVICE_START_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SCHED_SERVICE_START_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SCHED_SERVICE_END_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SCHED_SERVICE_END_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SERVICE_START_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SERVICE_START_TSTMP, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.SERVICE_END_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS SERVICE_END_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.SERVICE_COMPLETE_IND, SMS_APPOINTMENT_SERVICE_RPT.SMS_ROOM_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_ROOM_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_ROOM_TYPE_ID, SMS_APPOINTMENT_SERVICE_RPT.SMS_ROOM_TYPE_DESC, SMS_APPOINTMENT_SERVICE_RPT.SMS_EMPLOYEE_ID, SMS_APPOINTMENT_SERVICE_RPT.EMPLOYEE_ID, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_SMS_EMPLOYEE_GROUP_ID, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_SMS_EMPLOYEE_GROUP_DESC, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_EMPLOYEE_ID, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_EMPLOYEE_FIRST_NAME, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_EMPLOYEE_LAST_NAME, SMS_APPOINTMENT_SERVICE_RPT.REQUESTED_EMPLOYEE_DISPLAY_NAME, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_SMS_EMPLOYEE_GROUP_ID, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_SMS_EMPLOYEE_GROUP_DESC, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_EMPLOYEE_ID, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_EMPLOYEE_FIRST_NAME, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_EMPLOYEE_LAST_NAME, SMS_APPOINTMENT_SERVICE_RPT.ASSIGNED_EMPLOYEE_DISPLAY_NAME, SMS_APPOINTMENT_SERVICE_RPT.APPT_CANCELLED_EMPLOYEE_ID, SMS_APPOINTMENT_SERVICE_RPT.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, SMS_APPOINTMENT_SERVICE_RPT.APPT_CANCELLED_EMPLOYEE_LAST_NAME, SMS_APPOINTMENT_SERVICE_RPT.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, SMS_APPOINTMENT_SERVICE_RPT.ORDER_ITEM_QTY, SMS_APPOINTMENT_SERVICE_RPT.APPT_TOTAL_ITEM_QTY, SMS_APPOINTMENT_SERVICE_RPT.APPT_TOTAL_PRICE_AMT, SMS_APPOINTMENT_SERVICE_RPT.APPT_SERVICE_ITEM_QTY, SMS_APPOINTMENT_SERVICE_RPT.ORIG_PRICE_AMT, SMS_APPOINTMENT_SERVICE_RPT.DISCOUNT_AMT, SMS_APPOINTMENT_SERVICE_RPT.FINAL_PRICE_AMT, SMS_APPOINTMENT_SERVICE_RPT.OVERRIDE_REASON_ID, SMS_APPOINTMENT_SERVICE_RPT.PRICE_OVERRIDE_REASON_DESC, SMS_APPOINTMENT_SERVICE_RPT.SVCS_PRICE_OVERRIDE_REASON_GID, SMS_APPOINTMENT_SERVICE_RPT.SVCS_PRICE_OVERRIDE_REASON_DESC, SMS_APPOINTMENT_SERVICE_RPT.APPT_SERVICE_PRICE_OVERRIDE_DT, SMS_APPOINTMENT_SERVICE_RPT.EMPLOYEE_COMMISSION_RATE_PCT, SMS_APPOINTMENT_SERVICE_RPT.SMS_COMMISSION_AMT, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.PAYMENT_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS PAYMENT_TSTMP, SMS_APPOINTMENT_SERVICE_RPT.PAYMENT_AMT, SMS_APPOINTMENT_SERVICE_RPT.SMS_PAYMENT_METHOD_ID, SMS_APPOINTMENT_SERVICE_RPT.APPT_SVCS_PAYMENT_METHOD_GID, SMS_APPOINTMENT_SERVICE_RPT.APPT_SVCS_PAYMENT_METHOD_DESC, SMS_APPOINTMENT_SERVICE_RPT.EXCH_RATE_PCT, TO_CHAR(SMS_APPOINTMENT_SERVICE_RPT.LOAD_TSTMP, 'YYYY-MM-DD HH24:MI:SS'::"VARCHAR") AS LOAD_TSTMP FROM ADMIN.SMS_APPOINTMENT_SERVICE_RPT;

\echo
\echo *****  Creating view:  "CBX_VENDOR_DEPT_SAMPLE_MONTH_VW"

CREATE or replace VIEW  CBX_VENDOR_DEPT_SAMPLE_MONTH_VW
(
     VENDOR_ID,
     VENDOR_NAME,
     SAP_DEPT_ID,
     SAP_DEPT_DESC,
     FISCAL_MO,
     VENDOR_SAMPLE_CNT,
     VENDOR_SKU_TARGET_COST_LESS_CORP_CNT,
     VENDOR_SKU_CNT
) AS
WITH VENDOR_SAMPLE AS (SELECT B.CBX_VENDOR_ID AS VENDOR_ID, MAX(B.VENDOR_NAME) AS VENDOR_NAME, A.FISCAL_MO, A.SAP_DEPT_ID, A.SAP_DEPT_DESC, MAX(A.VENDOR_SAMPLE_CNT) AS VENDOR_SAMPLE_CNT, MAX(A.VENDOR_SKU_TARGET_COST_LESS_CORP_CNT) AS VENDOR_SKU_TARGET_COST_LESS_CORP_CNT FROM (ADMIN.VENDOR_FACTORY_CAT_PERFORMANCE A JOIN ADMIN.VENDOR_CBX_SAP_REL_VW B ON ((A.VENDOR_ID = B.SAP_VENDOR_ID))) GROUP BY B.CBX_VENDOR_ID, A.FISCAL_MO, A.SAP_DEPT_ID, A.SAP_DEPT_DESC), VENDOR_SKU AS (SELECT C.CBX_VENDOR_ID AS VENDOR_ID, MAX(C.VENDOR_NAME) AS VENDOR_NAME, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, F.FISCAL_MO, COUNT(DISTINCT A.PRODUCT_ID) AS VENDOR_SKU_CNT FROM (((((SELECT MIN(D.DAY_DT) AS DAY_DT, PLF.PRODUCT_ID FROM ((ADMIN.PO_LN_FACT PLF JOIN ADMIN.PO_HDR_FACT PHF ON ((PLF.PO_NBR = PHF.PO_NBR))) JOIN ADMIN.DAYS D ON ((PHF.PO_DOC_DT = D.DAY_DT))) WHERE (D.FISCAL_YR >= (SELECT (DAYS.FISCAL_YR - 2) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) GROUP BY PLF.PRODUCT_ID) A JOIN (SELECT DISTINCT PLF.PRODUCT_ID, VPR.VENDOR_ID FROM (ADMIN.PO_LN_FACT PLF JOIN ADMIN.VENDOR_PROFILE_RPT VPR ON ((PLF.VENDOR_ID = VPR.VENDOR_ID))) WHERE (VPR.VENDOR_TYPE_ID = 2)) B ON ((A.PRODUCT_ID = B.PRODUCT_ID))) JOIN ADMIN.SKU_PROFILE_RPT SPR ON ((A.PRODUCT_ID = SPR.PRODUCT_ID))) JOIN ADMIN.VENDOR_CBX_SAP_REL_VW C ON ((B.VENDOR_ID = C.SAP_VENDOR_ID))) JOIN ADMIN.DAYS F ON ((A.DAY_DT = F.DAY_DT))) WHERE (C.CBX_VENDOR_ID <> C.SAP_VENDOR_ID) GROUP BY C.CBX_VENDOR_ID, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, F.FISCAL_MO) SELECT CASE WHEN (A.VENDOR_ID NOTNULL) THEN A.VENDOR_ID WHEN (B.VENDOR_ID NOTNULL) THEN B.VENDOR_ID ELSE NULL::INT8 END AS VENDOR_ID, CASE WHEN (A.VENDOR_NAME NOTNULL) THEN A.VENDOR_NAME WHEN (B.VENDOR_NAME NOTNULL) THEN B.VENDOR_NAME ELSE NULL::"VARCHAR" END AS VENDOR_NAME, CASE WHEN (A.SAP_DEPT_ID NOTNULL) THEN A.SAP_DEPT_ID WHEN (B.SAP_DEPT_ID NOTNULL) THEN B.SAP_DEPT_ID ELSE NULL::INT4 END AS SAP_DEPT_ID, CASE WHEN (A.SAP_DEPT_DESC NOTNULL) THEN A.SAP_DEPT_DESC WHEN (B.SAP_DEPT_DESC NOTNULL) THEN B.SAP_DEPT_DESC ELSE NULL::"VARCHAR" END AS SAP_DEPT_DESC, CASE WHEN (A.FISCAL_MO NOTNULL) THEN A.FISCAL_MO WHEN (B.FISCAL_MO NOTNULL) THEN B.FISCAL_MO ELSE NULL::INT4 END AS FISCAL_MO, A.VENDOR_SAMPLE_CNT, A.VENDOR_SKU_TARGET_COST_LESS_CORP_CNT, B.VENDOR_SKU_CNT FROM (VENDOR_SAMPLE A FULL JOIN VENDOR_SKU B ON ((((A.VENDOR_ID = B.VENDOR_ID) AND (A.SAP_DEPT_ID = B.SAP_DEPT_ID)) AND (A.FISCAL_MO = B.FISCAL_MO))));

\echo
\echo *****  Creating view:  "PM_VMZSHYNJEZSNMEBGZPDVFTMNEDU"

CREATE or replace VIEW  PM_VMZSHYNJEZSNMEBGZPDVFTMNEDU
(
     DAY_DT,
     EMPLOYEE_ID,
     ASSESSMENT_MID,
     ASSESSMENT_LID,
     TEST_TAKEN_DT,
     ASSESSMENT_NAME,
     JOB_CD,
     LOCATION_ID,
     LAST_TEST_SCORE_NBR,
     LAST_TEST_PASSED_FLAG,
     COMPLIANT_START_DT,
     COMPLIANT_EXPIRATION_DT,
     CURR_COMPLIANCE_FLAG,
     CURR_MISSING_FLAG,
     CURR_PERIOD_ATTEMPTS_NBR,
     LOAD_DT
) AS
SELECT PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.DAY_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.EMPLOYEE_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_MID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_LID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.TEST_TAKEN_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_NAME, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.JOB_CD, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOCATION_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_SCORE_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_PASSED_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_START_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_EXPIRATION_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_MISSING_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_PERIOD_ATTEMPTS_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOAD_DT FROM ADMIN.EDU_CERT_DAILY_CONS PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U WHERE (PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG <> 3);

\echo
\echo *****  Creating view:  "PM_VBMBXAN7SHWUC4AI4DP37FCK3N4"

CREATE or replace VIEW  PM_VBMBXAN7SHWUC4AI4DP37FCK3N4
(
     VENDOR_ID,
     FACTORY_ID,
     FACTORY_NAME,
     VENDOR_NAME,
     SAP_DEPT_ID,
     SAP_DEPT_DESC,
     FISCAL_MO,
     VENDOR_SKU_CNT
) AS
SELECT B.VENDOR_ID, CASE WHEN (E.FACTORY_ID ISNULL) THEN 99999 ELSE E.FACTORY_ID END AS FACTORY_ID, CASE WHEN (E.FACTORY_ID ISNULL) THEN 'NO_FACTORY_AVAILABLE'::"VARCHAR" ELSE E.FACTORY_NAME END AS FACTORY_NAME, G.VENDOR_NAME, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, F.FISCAL_MO, COUNT(DISTINCT A.PRODUCT_ID) AS VENDOR_SKU_CNT FROM ((((((((SELECT MIN(D.DAY_DT) AS DAY_DT, PLF.PRODUCT_ID FROM ((ADMIN.PO_LN_FACT PLF JOIN ADMIN.PO_HDR_FACT PHF ON ((PLF.PO_NBR = PHF.PO_NBR))) JOIN ADMIN.DAYS D ON ((PHF.PO_DOC_DT = D.DAY_DT))) WHERE (D.FISCAL_YR >= (SELECT (DAYS.FISCAL_YR - 2) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR"))))) GROUP BY PLF.PRODUCT_ID) A JOIN (SELECT DISTINCT PLF.PRODUCT_ID, VPR.VENDOR_ID FROM (ADMIN.PO_LN_FACT PLF JOIN ADMIN.VENDOR_PROFILE_RPT VPR ON ((PLF.VENDOR_ID = VPR.VENDOR_ID))) WHERE (VPR.VENDOR_TYPE_ID = 2)) B ON ((A.PRODUCT_ID = B.PRODUCT_ID))) JOIN ADMIN.SKU_PROFILE_RPT SPR ON ((A.PRODUCT_ID = SPR.PRODUCT_ID))) JOIN ADMIN.VENDOR_CBX_SAP_REL C ON ((B.VENDOR_ID = INT8(C.SAP_VENDOR_ID)))) LEFT JOIN ADMIN.FACTORY_CBX_VENDOR_REL D ON ((C.CBX_VENDOR_ID = D.CBX_VENDOR_ID))) LEFT JOIN ADMIN.VENDOR_FACTORY E ON ((D.SRC_FACTORY_ID = E.SRC_FACTORY_ID))) JOIN ADMIN.VENDOR_PROFILE_RPT G ON ((B.VENDOR_ID = G.VENDOR_ID))) JOIN ADMIN.DAYS F ON ((A.DAY_DT = F.DAY_DT))) GROUP BY B.VENDOR_ID, CASE WHEN (E.FACTORY_ID ISNULL) THEN 99999 ELSE E.FACTORY_ID END, CASE WHEN (E.FACTORY_ID ISNULL) THEN 'NO_FACTORY_AVAILABLE'::"VARCHAR" ELSE E.FACTORY_NAME END, G.VENDOR_NAME, SPR.SAP_DEPT_ID, SPR.SAP_DEPT_DESC, F.FISCAL_MO;

\echo
\echo *****  Creating view:  "PM_V4K24MA6PB44GV5WPNQLLPWZLN4"

CREATE or replace VIEW  PM_V4K24MA6PB44GV5WPNQLLPWZLN4
(
     FACTORY_ID,
     VENDOR_ID
) AS
SELECT FACTORY_DIM_PRE.FACTORY_ID, FACTORY_DIM_PRE.VENDOR_ID FROM ADMIN.FACTORY_DIM_PRE WHERE ((FACTORY_DIM_PRE.FACTORY_ID NOTNULL) AND (FACTORY_DIM_PRE.VENDOR_ID NOTNULL));

\echo
\echo *****  Creating view:  "IC_WC_CLAIMS_ROCKY"

CREATE or replace VIEW  IC_WC_CLAIMS_ROCKY
(
     CLAIM_NBR,
     DAY_DT,
     LOCATION_ID,
     SOURCE_TYPE_ID,
     LINE_TYPE_CD,
     ANIMAL_IND,
     CLAIM_SUB_STATUS_CD,
     INCURRED_EXP_AMT,
     INCURRED_MEDICAL_AMT,
     INCURRED_INDEM_LOSS_AMT,
     INCURRED_OTHER_EXP_AMT,
     INCURRED_TOTAL_AMT,
     LOAD_DT,
     UPDATE_DT
) AS
SELECT IC_WC_CLAIMS_SDVW.CLAIM_NBR, IC_WC_CLAIMS_SDVW.DAY_DT, IC_WC_CLAIMS_SDVW.LOCATION_ID, IC_WC_CLAIMS_SDVW.SOURCE_TYPE_ID, IC_WC_CLAIMS_SDVW.LINE_TYPE_CD, IC_WC_CLAIMS_SDVW.ANIMAL_IND, IC_WC_CLAIMS_SDVW.CLAIM_SUB_STATUS_CD, NULL::NUMERIC(11,2) AS INCURRED_EXP_AMT, NULL::NUMERIC(11,2) AS INCURRED_MEDICAL_AMT, NULL::NUMERIC(11,2) AS INCURRED_INDEM_LOSS_AMT, NULL::NUMERIC(11,2) AS INCURRED_OTHER_EXP_AMT, IC_WC_CLAIMS_SDVW.INCURRED_TOTAL_AMT, IC_WC_CLAIMS_SDVW.LOAD_DT, IC_WC_CLAIMS_SDVW.UPDATE_DT FROM ADMIN.IC_WC_CLAIMS_SDVW;

\echo
\echo *****  Creating view:  "IC_DETAIL_ROCKY"

CREATE or replace VIEW  IC_DETAIL_ROCKY
(
     LOAD_DT,
     CLAIM_NBR,
     CLAIM_VENDOR_CD,
     PROCESSING_OFFICE_NBR,
     PETM_SEQUENCE_NBR,
     RECORD_TYPE_CD,
     CMS_CLIENT_ID,
     CMS_CLIENT_ACCOUNT_NBR,
     CMS_CLIENT_LOCATION_CD,
     LINE_TYPE_CD,
     LOSS_TSTMP,
     EVENT_DESC,
     LOSS_DESC,
     CLAIM_TYPE_CD,
     CLAIM_SUBTYPE_CD,
     CLAIM_STATUS_CD,
     CLAIM_SUBSTATUS_CD,
     REPORTED_TO_CLIENT_DT,
     REPORTED_TO_CMS_DT,
     CLAIM_OPENED_DT,
     CLAIM_CLOSED_DT,
     CLAIM_REOPENED_DT,
     EMPLOYMENT_STATE_CD,
     ACCIDENT_STATE_CD,
     JURISDICTION_STATE_CD,
     SOURCE_CD,
     CAUSE_CD,
     NATURE_RESULT_CD,
     PART_TARGET_CD,
     STORE_NBR,
     LOSS_LOCATION_STREET,
     LOSS_LOCATION_CITY,
     LOSS_LOCATION_POSTAL_CD,
     CLAIMANT_NAME_TYPE_CD,
     CLAIMANT_LAST_NAME,
     CLAIMANT_FIRST_NAME,
     CLAIMANT_MIDDLE_INITIAL,
     CLAIMANT_ADDRESS_LINE_1,
     CLAIMANT_ADDRESS_LINE_2,
     CLAIMANT_CITY,
     CLAIMANT_STATE_CD,
     CLAIMANT_POSTAL_CD,
     CLAIMANT_COUNTRY_NAME,
     CLAIMANT_SSN,
     CLAIMANT_AGE,
     BIRTH_DT,
     DEATH_DT,
     DEPENDENTS_CNT,
     MARITAL_STATUS_CD,
     GENDER_CD,
     HIRE_DT,
     LENGTH_OF_SERVICE_YY,
     LENGTH_OF_SERVICE_MM,
     LENGTH_OF_SERVICE_DD,
     STATE_ASSIGNED_CLAIM_NBR,
     JOB_CLASSIFICATION_CD,
     OCCUPATION_CD,
     DEPARTMENT_CD,
     SUPERVISOR_ID,
     UNION_ID,
     AVERAGE_WEEKLY_WAGE_AMT,
     COMP_DISABL_RATE_AMT,
     LOST_DAYS_COUNT,
     LAST_DAY_WORKED_DT,
     RESTR_RTW_DT,
     FULL_RTW_DT,
     LINE_OF_COVERAGE_CD,
     COVERAGE_CD,
     PROGRAM_TYPE_CD,
     POLICY_TYPE_CD,
     CARRIER_CD,
     POLICY_NBR,
     POLICY_EFFECTIVE_DT,
     POLICY_EXPIRATION_DT,
     CLAIM_MADE_FLAG,
     CLAIM_MADE_DT,
     CLAIM_MADE_RETROACTIVE_DT,
     CLAIM_MADE_TAIL_DT,
     SIR_DEDUCT_AMT,
     DEDUCT_APPLIED_AMT,
     MAJOR_INJURY_CD,
     EXCESS_FLAG,
     SUBROG_FLAG,
     REHABILITATION_FLAG,
     APPORTIONMENT_FLAG,
     APPORTIONMENT_PCT,
     HOSPITALIZATION_FLAG,
     SUIT_LEGAL_FLAG,
     SUIT_FILED_DT,
     OSHA_REPORTABLE_FLAG,
     SAFETY_REPORTABLE_DAYS_CNT,
     SAFETY_RESTR_DAYS_CNT,
     OSHA_ACC_ILL_CD,
     VEHICLE_IDENTIFICATION_NBR,
     VEHICLE_MAKE,
     VEHICLE_MODEL,
     VEHICLE_YEAR,
     LOSS_PAYEE,
     DRIVER_NAME,
     DRIVER_AGE,
     DRIVER_GENDER_CD,
     DRIVER_CHARGEABLE_CD,
     PRODUCT_NAME,
     LAST_ACTION_DT,
     EXAMINER,
     CONVERTED_CLAIM_FLAG,
     PAID_INCURRED_CD,
     PTD_INDEM_LOSS_AMT,
     PTD_MEDICAL_AMT,
     PTD_OTHER_EXP_AMT,
     PTD_EXP_AMT,
     PCP_INDEM_LOSS_AMT,
     PCP_MEDICAL_AMT,
     PCP_OTHER_EXP_AMT,
     PCP_EXP_AMT,
     INCURRED_INDEM_LOSS_AMT,
     INCURRED_MEDICAL_AMT,
     INCURRED_OTHER_EXP_AMT,
     INCURRED_EXP_AMT,
     CIR_INDEM_LOSS_AMT,
     CIR_MEDICAL_AMT,
     CIR_OTHER_EXP_AMT,
     CIR_EXP_AMT,
     RTD_INDEM_LOSS_AMT,
     RTD_MEDICAL_AMT,
     RTD_OTHER_EXP_AMT,
     RTD_EXP_AMT,
     EVENT_NBR,
     SUFFIX_NBR,
     CARRIER_CHANGE_STATUS_CD,
     CLAIM_CREATED_DT,
     EXAMINER_OFFICE_CD,
     BODY_SIDE_CD,
     CLAIMANT_PHONE,
     CLAIMANT_CONTACT_DT,
     CLAIM_GID,
     CLIENT_EMPLOYEE_ID,
     CLAIM_MEDICARE_BEN_STATUS_CD,
     CLAIM_HICN,
     PLAN_NBR,
     LINE_NBR,
     LOCATION_NODE,
     EXAMINER_EMAIL_ADDR
) AS
SELECT IC_DETAIL.LOAD_DT, IC_DETAIL.CLAIM_NBR, IC_DETAIL.CLAIM_VENDOR_CD, IC_DETAIL.PROCESSING_OFFICE_NBR, IC_DETAIL.PETM_SEQUENCE_NBR, IC_DETAIL.RECORD_TYPE_CD, IC_DETAIL.CMS_CLIENT_ID, IC_DETAIL.CMS_CLIENT_ACCOUNT_NBR, IC_DETAIL.CMS_CLIENT_LOCATION_CD, IC_DETAIL.LINE_TYPE_CD, IC_DETAIL.LOSS_TSTMP, '********' AS EVENT_DESC, '********' AS LOSS_DESC, IC_DETAIL.CLAIM_TYPE_CD, IC_DETAIL.CLAIM_SUBTYPE_CD, IC_DETAIL.CLAIM_STATUS_CD, IC_DETAIL.CLAIM_SUBSTATUS_CD, IC_DETAIL.REPORTED_TO_CLIENT_DT, IC_DETAIL.REPORTED_TO_CMS_DT, IC_DETAIL.CLAIM_OPENED_DT, IC_DETAIL.CLAIM_CLOSED_DT, IC_DETAIL.CLAIM_REOPENED_DT, IC_DETAIL.EMPLOYMENT_STATE_CD, IC_DETAIL.ACCIDENT_STATE_CD, IC_DETAIL.JURISDICTION_STATE_CD, IC_DETAIL.SOURCE_CD, IC_DETAIL.CAUSE_CD, IC_DETAIL.NATURE_RESULT_CD, IC_DETAIL.PART_TARGET_CD, IC_DETAIL.STORE_NBR, IC_DETAIL.LOSS_LOCATION_STREET, IC_DETAIL.LOSS_LOCATION_CITY, IC_DETAIL.LOSS_LOCATION_POSTAL_CD, IC_DETAIL.CLAIMANT_NAME_TYPE_CD, '********' AS CLAIMANT_LAST_NAME, '********' AS CLAIMANT_FIRST_NAME, IC_DETAIL.CLAIMANT_MIDDLE_INITIAL, '********' AS CLAIMANT_ADDRESS_LINE_1, '********' AS CLAIMANT_ADDRESS_LINE_2, '********' AS CLAIMANT_CITY, '***' AS CLAIMANT_STATE_CD, '********' AS CLAIMANT_POSTAL_CD, IC_DETAIL.CLAIMANT_COUNTRY_NAME, '********' AS CLAIMANT_SSN, NULL::NUMERIC(3,0) AS CLAIMANT_AGE, NULL::"TIMESTAMP" AS BIRTH_DT, IC_DETAIL.DEATH_DT, IC_DETAIL.DEPENDENTS_CNT, IC_DETAIL.MARITAL_STATUS_CD, IC_DETAIL.GENDER_CD, IC_DETAIL.HIRE_DT, IC_DETAIL.LENGTH_OF_SERVICE_YY, IC_DETAIL.LENGTH_OF_SERVICE_MM, IC_DETAIL.LENGTH_OF_SERVICE_DD, IC_DETAIL.STATE_ASSIGNED_CLAIM_NBR, IC_DETAIL.JOB_CLASSIFICATION_CD, IC_DETAIL.OCCUPATION_CD, IC_DETAIL.DEPARTMENT_CD, IC_DETAIL.SUPERVISOR_ID, IC_DETAIL.UNION_ID, NULL::NUMERIC(6,2) AS AVERAGE_WEEKLY_WAGE_AMT, NULL::NUMERIC(4,0) AS COMP_DISABL_RATE_AMT, IC_DETAIL.LOST_DAYS_COUNT, IC_DETAIL.LAST_DAY_WORKED_DT, IC_DETAIL.RESTR_RTW_DT, IC_DETAIL.FULL_RTW_DT, IC_DETAIL.LINE_OF_COVERAGE_CD, IC_DETAIL.COVERAGE_CD, IC_DETAIL.PROGRAM_TYPE_CD, IC_DETAIL.POLICY_TYPE_CD, IC_DETAIL.CARRIER_CD, IC_DETAIL.POLICY_NBR, IC_DETAIL.POLICY_EFFECTIVE_DT, IC_DETAIL.POLICY_EXPIRATION_DT, IC_DETAIL.CLAIM_MADE_FLAG, IC_DETAIL.CLAIM_MADE_DT, IC_DETAIL.CLAIM_MADE_RETROACTIVE_DT, IC_DETAIL.CLAIM_MADE_TAIL_DT, NULL::NUMERIC(7,0) AS SIR_DEDUCT_AMT, NULL::NUMERIC(9,2) AS DEDUCT_APPLIED_AMT, IC_DETAIL.MAJOR_INJURY_CD, IC_DETAIL.EXCESS_FLAG, IC_DETAIL.SUBROG_FLAG, IC_DETAIL.REHABILITATION_FLAG, IC_DETAIL.APPORTIONMENT_FLAG, IC_DETAIL.APPORTIONMENT_PCT, IC_DETAIL.HOSPITALIZATION_FLAG, IC_DETAIL.SUIT_LEGAL_FLAG, IC_DETAIL.SUIT_FILED_DT, IC_DETAIL.OSHA_REPORTABLE_FLAG, IC_DETAIL.SAFETY_REPORTABLE_DAYS_CNT, IC_DETAIL.SAFETY_RESTR_DAYS_CNT, IC_DETAIL.OSHA_ACC_ILL_CD, IC_DETAIL.VEHICLE_IDENTIFICATION_NBR, IC_DETAIL.VEHICLE_MAKE, IC_DETAIL.VEHICLE_MODEL, IC_DETAIL.VEHICLE_YEAR, IC_DETAIL.LOSS_PAYEE, IC_DETAIL.DRIVER_NAME, IC_DETAIL.DRIVER_AGE, IC_DETAIL.DRIVER_GENDER_CD, IC_DETAIL.DRIVER_CHARGEABLE_CD, IC_DETAIL.PRODUCT_NAME, IC_DETAIL.LAST_ACTION_DT, IC_DETAIL.EXAMINER, IC_DETAIL.CONVERTED_CLAIM_FLAG, IC_DETAIL.PAID_INCURRED_CD, NULL::NUMERIC(11,2) AS PTD_INDEM_LOSS_AMT, NULL::NUMERIC(11,2) AS PTD_MEDICAL_AMT, NULL::NUMERIC(11,2) AS PTD_OTHER_EXP_AMT, NULL::NUMERIC(11,2) AS PTD_EXP_AMT, NULL::NUMERIC(11,2) AS PCP_INDEM_LOSS_AMT, NULL::NUMERIC(11,2) AS PCP_MEDICAL_AMT, NULL::NUMERIC(11,2) AS PCP_OTHER_EXP_AMT, NULL::NUMERIC(11,2) AS PCP_EXP_AMT, NULL::NUMERIC(11,2) AS INCURRED_INDEM_LOSS_AMT, NULL::NUMERIC(11,2) AS INCURRED_MEDICAL_AMT, NULL::NUMERIC(11,2) AS INCURRED_OTHER_EXP_AMT, NULL::NUMERIC(11,2) AS INCURRED_EXP_AMT, NULL::NUMERIC(11,2) AS CIR_INDEM_LOSS_AMT, NULL::NUMERIC(11,2) AS CIR_MEDICAL_AMT, NULL::NUMERIC(11,2) AS CIR_OTHER_EXP_AMT, NULL::NUMERIC(11,2) AS CIR_EXP_AMT, NULL::NUMERIC(11,2) AS RTD_INDEM_LOSS_AMT, NULL::NUMERIC(11,2) AS RTD_MEDICAL_AMT, NULL::NUMERIC(11,2) AS RTD_OTHER_EXP_AMT, NULL::NUMERIC(11,2) AS RTD_EXP_AMT, IC_DETAIL.EVENT_NBR, IC_DETAIL.SUFFIX_NBR, IC_DETAIL.CARRIER_CHANGE_STATUS_CD, IC_DETAIL.CLAIM_CREATED_DT, IC_DETAIL.EXAMINER_OFFICE_CD, IC_DETAIL.BODY_SIDE_CD, '********' AS CLAIMANT_PHONE, IC_DETAIL.CLAIMANT_CONTACT_DT, IC_DETAIL.CLAIM_GID, IC_DETAIL.CLIENT_EMPLOYEE_ID, IC_DETAIL.CLAIM_MEDICARE_BEN_STATUS_CD, IC_DETAIL.CLAIM_HICN, IC_DETAIL.PLAN_NBR, IC_DETAIL.LINE_NBR, IC_DETAIL.LOCATION_NODE, IC_DETAIL.EXAMINER_EMAIL_ADDR FROM ADMIN.IC_DETAIL_SDVW IC_DETAIL;

\echo
\echo *****  Creating view:  "TP_INVOICE_ROCKY"

CREATE or replace VIEW  TP_INVOICE_ROCKY
(
     TP_DAY_DT,
     LOCATION_ID,
     TP_INVOICE_NBR,
     TP_PET_NBR,
     CUST_TRANS_ID,
     TP_CUSTOMER_NBR,
     CANCEL_DT,
     RESERV_START_DT,
     RESERV_END_DT,
     SERVICE_START_DT,
     SERVICE_END_DT,
     RESERV_FLAG,
     RESERV_CNT,
     RESERV_UPDATE_FLAG,
     RESERV_UPDATE_CNT,
     RESERV_UPDATE_DT,
     RESERV_UPDATE_TIME_ID,
     RESERV_TIME_ID,
     ARRIVE_TIME_ID,
     DEPART_TIME_ID,
     TIME_ID,
     COMPLETE_FLAG,
     COMPLETE_CNT,
     CANCEL_REASON_ID,
     CANCEL_FLAG,
     CANCEL_CNT,
     PAID_FLAG,
     LENGTH_OF_STAY,
     ROOM_NUMBER,
     ROOM_TYPE_ID,
     TP_EXTENDED_PRICE,
     TP_ITEM_QTY,
     NO_PAY_CNT,
     PROMISE_TIME_ID,
     DIET_FLAG,
     TREAT_FLAG,
     EXERCISE_FLAG,
     MEDS_FLAG,
     SPECIALSERVICES_FLAG,
     INVOICE_STATE_ID,
     SERVICE_MIX_ID,
     EXCH_RATE_PCT,
     LOAD_DT
) AS
SELECT TI.TP_DAY_DT, TI.LOCATION_ID, TI.TP_INVOICE_NBR, TI.TP_PET_NBR, TI.CUST_TRANS_ID, TI.TP_CUSTOMER_NBR, TI.CANCEL_DT, TI.RESERV_START_DT, TI.RESERV_END_DT, TI.SERVICE_START_DT, TI.SERVICE_END_DT, TI.RESERV_FLAG, TI.RESERV_CNT, TI.RESERV_UPDATE_FLAG, TI.RESERV_UPDATE_CNT, TI.RESERV_UPDATE_DT, TI.RESERV_UPDATE_TIME_ID, TI.RESERV_TIME_ID, TI.ARRIVE_TIME_ID, TI.DEPART_TIME_ID, TI.TIME_ID, TI.COMPLETE_FLAG, TI.COMPLETE_CNT, TI.CANCEL_REASON_ID, TI.CANCEL_FLAG, TI.CANCEL_CNT, TI.PAID_FLAG, TI.LENGTH_OF_STAY, TI.ROOM_NUMBER, TI.ROOM_TYPE_ID, TI.TP_EXTENDED_PRICE, TI.TP_ITEM_QTY, TI.NO_PAY_CNT, TI.PROMISE_TIME_ID, TI.DIET_FLAG, TI.TREAT_FLAG, TI.EXERCISE_FLAG, TI.MEDS_FLAG, TI.SPECIALSERVICES_FLAG, TI.INVOICE_STATE_ID, TI.SERVICE_MIX_ID, TI.EXCH_RATE_PCT, TI.LOAD_DT FROM ADMIN.TP_INVOICE TI WHERE (TI.TP_DAY_DT >= '2016-02-16 00:00:00'::"TIMESTAMP");

\echo
\echo *****  Creating view:  "TP_INVOICE_RPT_ROCKY"

CREATE or replace VIEW  TP_INVOICE_RPT_ROCKY
(
     TP_INVOICE_NBR,
     TP_INVOICE_NBR_FINAL,
     INVOICE_STATE_ID,
     APPT_CREATION_CHANNEL,
     TP_APPT_STATUS_ID,
     TP_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     LENGTH_OF_STAY,
     SMS_SERVICE_CATEGORY_ID,
     SMS_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     TP_CUSTOMER_NBR,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     TP_PET_NBR,
     PET_NAME,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     TP_PET_SPECIES_ID,
     TP_PET_SPECIES_DESC,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     TP_PET_GENDER_ID,
     TP_PET_GENDER_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     TP_PET_BREED_ID,
     TP_PET_BREED_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     TP_PET_COLOR_ID,
     TP_PET_COLOR_DESC,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     TP_MASTER_INVOICE_NBR,
     TP_BASE_INVOICE_NBR,
     LOCATION_ID,
     CUST_TRANS_ID,
     RESERV_CREATE_DT,
     CC_APPT_CREATE_TSTMP,
     FOLIO_CREATE_DT,
     APPT_START_TSTMP,
     APPT_END_TSTMP,
     RESERV_LAST_UPDATE_DT,
     FOLIO_LAST_UPDATE_DT,
     ACTUAL_IN_DT,
     ACTUAL_OUT_DT,
     NO_SHOW_DT,
     CANCEL_DT,
     CANCEL_REASON_ID,
     CANCEL_REASON_DESC,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     TP_EXTENDED_PRICE,
     TP_ITEM_QTY,
     PAYMENT_DT,
     PAYMENT_AMT,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT TIR.TP_INVOICE_NBR, TIR.TP_INVOICE_NBR_FINAL, TIR.INVOICE_STATE_ID, TIR.APPT_CREATION_CHANNEL, TIR.TP_APPT_STATUS_ID, TIR.TP_APPT_STATUS_DESC, TIR.SVCS_APPT_STATUS_GID, TIR.SVCS_APPT_STATUS_DESC, TIR.LENGTH_OF_STAY, TIR.SMS_SERVICE_CATEGORY_ID, TIR.SMS_SERVICE_CATEGORY_DESC, TIR.SVCS_SERVICE_CATEGORY_GID, TIR.SVCS_SERVICE_CATEGORY_DESC, TIR.TP_CUSTOMER_NBR, TIR.CUST_FIRST_NAME, TIR.CUST_LAST_NAME, TIR.SVCS_CUSTOMER_GID, TIR.SVCS_CUSTOMER_FIRST_NAME, TIR.SVCS_CUSTOMER_LAST_NAME, TIR.TP_PET_NBR, TIR.PET_NAME, TIR.SVCS_PET_GID, TIR.SVCS_PET_NAME, TIR.TP_PET_SPECIES_ID, TIR.TP_PET_SPECIES_DESC, TIR.PETM_PET_SPECIES_ID, TIR.PETM_PET_SPECIES_DESC, TIR.TP_PET_GENDER_ID, TIR.TP_PET_GENDER_DESC, TIR.PETM_PET_GENDER_ID, TIR.PETM_PET_GENDER_DESC, TIR.TP_PET_BREED_ID, TIR.TP_PET_BREED_DESC, TIR.PETM_PET_BREED_ID, TIR.PETM_PET_BREED_DESC, TIR.MIXED_BREED_FLAG, TIR.TP_PET_COLOR_ID, TIR.TP_PET_COLOR_DESC, TIR.PETM_PET_COLOR_ID, TIR.PETM_PET_COLOR_DESC, TIR.PET_BIRTH_DT, TIR.BORDETELLA_EXP_DT, TIR.RABIES_EXP_DT, TIR.DISTEMPER_EXP_DT, TIR.PARVOVIRUS_EXP_DT, TIR.PARAINFLUENZA_EXP_DT, TIR.FVRCCP_EXP_DT, TIR.TP_MASTER_INVOICE_NBR, TIR.TP_BASE_INVOICE_NBR, TIR.LOCATION_ID, TIR.CUST_TRANS_ID, TIR.RESERV_CREATE_DT, TIR.CC_APPT_CREATE_TSTMP, TIR.FOLIO_CREATE_DT, TIR.APPT_START_TSTMP, TIR.APPT_END_TSTMP, TIR.RESERV_LAST_UPDATE_DT, TIR.FOLIO_LAST_UPDATE_DT, TIR.ACTUAL_IN_DT, TIR.ACTUAL_OUT_DT, TIR.NO_SHOW_DT, TIR.CANCEL_DT, TIR.CANCEL_REASON_ID, TIR.CANCEL_REASON_DESC, TIR.APPT_SVCS_CANCEL_REASON_GID, TIR.APPT_SVCS_CANCEL_REASON_DESC, TIR.TP_EXTENDED_PRICE, TIR.TP_ITEM_QTY, TIR.PAYMENT_DT, TIR.PAYMENT_AMT, TIR.EXCH_RATE_PCT, TIR.LOAD_TSTMP FROM ADMIN.TP_INVOICE_RPT TIR WHERE (TIR.TP_INVOICE_NBR = ANY ((SELECT DISTINCT TP_EVENT.TP_INVOICE_NBR FROM ADMIN.TP_EVENT WHERE (TP_EVENT.LOAD_DT >= '2016-02-16 00:00:00'::"TIMESTAMP")) UNION ALL (SELECT TP_INVOICE.TP_INVOICE_NBR FROM ADMIN.TP_INVOICE WHERE (TP_INVOICE.TP_DAY_DT >= '2016-02-16 00:00:00'::"TIMESTAMP"))));

\echo
\echo *****  Creating view:  "TP_INVOICE_SERVICE_ROCKY"

CREATE or replace VIEW  TP_INVOICE_SERVICE_ROCKY
(
     TP_DAY_DT,
     LOCATION_ID,
     TP_INVOICE_NBR,
     UPC_ID,
     EMPLOYEE_ID,
     PRODUCT_ID,
     TP_ITEM_PRICE,
     TP_ITEM_QTY,
     ROOM_NUMBER,
     ROOM_TYPE_ID,
     TP_COMMISSION_AMT,
     INVOICE_STATE_ID,
     PRICEDELTA_ID,
     DELTA_AMT,
     EXCH_RATE_PCT,
     LOAD_DT
) AS
SELECT TIS.TP_DAY_DT, TIS.LOCATION_ID, TIS.TP_INVOICE_NBR, TIS.UPC_ID, TIS.EMPLOYEE_ID, TIS.PRODUCT_ID, TIS.TP_ITEM_PRICE, TIS.TP_ITEM_QTY, TIS.ROOM_NUMBER, TIS.ROOM_TYPE_ID, TIS.TP_COMMISSION_AMT, TIS.INVOICE_STATE_ID, TIS.PRICEDELTA_ID, TIS.DELTA_AMT, TIS.EXCH_RATE_PCT, TIS.LOAD_DT FROM ADMIN.TP_INVOICE_SERVICE TIS WHERE (TIS.TP_INVOICE_NBR = ANY ((SELECT DISTINCT TP_EVENT.TP_INVOICE_NBR FROM ADMIN.TP_EVENT WHERE (TP_EVENT.LOAD_DT >= '2016-02-16 00:00:00'::"TIMESTAMP")) UNION ALL (SELECT TP_INVOICE.TP_INVOICE_NBR FROM ADMIN.TP_INVOICE WHERE (TP_INVOICE.TP_DAY_DT >= '2016-02-16 00:00:00'::"TIMESTAMP"))));

\echo
\echo *****  Creating view:  "TP_INVOICE_SERVICE_RPT_ROCKY"

CREATE or replace VIEW  TP_INVOICE_SERVICE_RPT_ROCKY
(
     TP_INVOICE_NBR,
     ITEM_ID,
     TP_INVOICE_NBR_FINAL,
     INVOICE_STATE_ID,
     APPT_CREATION_CHANNEL,
     UPC_ID,
     PRODUCT_ID,
     SAP_DEPT_ID,
     TP_APPT_STATUS_ID,
     TP_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     TP_ROOM_NUMBER,
     TP_ROOM_TYPE_ID,
     TP_ROOM_TYPE_DESC,
     TP_EMPLOYEE_ID,
     LOCATION_ID,
     CREATE_DT,
     CC_APPT_CREATE_TSTMP,
     FOLIO_CREATE_DT,
     RESERV_LAST_UPDATE_DT,
     FOLIO_LAST_UPDATE_DT,
     ACTUAL_IN_DT,
     ACTUAL_OUT_DT,
     CANCEL_DT,
     CANCEL_REASON_ID,
     CANCEL_REASON_DESC,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     ORIGINAL_ITEM_PRICE,
     FINAL_ITEM_PRICE,
     OVERRIDE_DT,
     TP_REASON_CODE_ID,
     TP_REASON_CODE_DESC,
     SVCS_OVERRIDE_REASON_GID,
     SVCS_OVERRIDE_REASON_DESC,
     TP_ITEM_QTY,
     APPT_START_TSTMP,
     APPT_END_TSTMP,
     TP_CUSTOMER_NBR,
     CUST_FIRST_NAME,
     CUST_LAST_NAME,
     SVCS_CUSTOMER_GID,
     SVCS_CUSTOMER_FIRST_NAME,
     SVCS_CUSTOMER_LAST_NAME,
     TP_PET_NBR,
     PET_NAME,
     SVCS_PET_GID,
     SVCS_PET_NAME,
     TP_PET_SPECIES_ID,
     TP_PET_SPECIES_DESC,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     TP_PET_GENDER_ID,
     TP_PET_GENDER_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     TP_PET_BREED_ID,
     TP_PET_BREED_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     TP_PET_COLOR_ID,
     TP_PET_COLOR_DESC,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     PET_CREATE_DT,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT TISR.TP_INVOICE_NBR, TISR.ITEM_ID, TISR.TP_INVOICE_NBR_FINAL, TISR.INVOICE_STATE_ID, TISR.APPT_CREATION_CHANNEL, TISR.UPC_ID, TISR.PRODUCT_ID, TISR.SAP_DEPT_ID, TISR.TP_APPT_STATUS_ID, TISR.TP_APPT_STATUS_DESC, TISR.SVCS_APPT_STATUS_GID, TISR.SVCS_APPT_STATUS_DESC, TISR.TP_ROOM_NUMBER, TISR.TP_ROOM_TYPE_ID, TISR.TP_ROOM_TYPE_DESC, TISR.TP_EMPLOYEE_ID, TISR.LOCATION_ID, TISR.CREATE_DT, TISR.CC_APPT_CREATE_TSTMP, TISR.FOLIO_CREATE_DT, TISR.RESERV_LAST_UPDATE_DT, TISR.FOLIO_LAST_UPDATE_DT, TISR.ACTUAL_IN_DT, TISR.ACTUAL_OUT_DT, TISR.CANCEL_DT, TISR.CANCEL_REASON_ID, TISR.CANCEL_REASON_DESC, TISR.APPT_SVCS_CANCEL_REASON_GID, TISR.APPT_SVCS_CANCEL_REASON_DESC, TISR.ORIGINAL_ITEM_PRICE, TISR.FINAL_ITEM_PRICE, TISR.OVERRIDE_DT, TISR.TP_REASON_CODE_ID, TISR.TP_REASON_CODE_DESC, TISR.SVCS_OVERRIDE_REASON_GID, TISR.SVCS_OVERRIDE_REASON_DESC, TISR.TP_ITEM_QTY, TISR.APPT_START_TSTMP, TISR.APPT_END_TSTMP, TISR.TP_CUSTOMER_NBR, TISR.CUST_FIRST_NAME, TISR.CUST_LAST_NAME, TISR.SVCS_CUSTOMER_GID, TISR.SVCS_CUSTOMER_FIRST_NAME, TISR.SVCS_CUSTOMER_LAST_NAME, TISR.TP_PET_NBR, TISR.PET_NAME, TISR.SVCS_PET_GID, TISR.SVCS_PET_NAME, TISR.TP_PET_SPECIES_ID, TISR.TP_PET_SPECIES_DESC, TISR.PETM_PET_SPECIES_ID, TISR.PETM_PET_SPECIES_DESC, TISR.TP_PET_GENDER_ID, TISR.TP_PET_GENDER_DESC, TISR.PETM_PET_GENDER_ID, TISR.PETM_PET_GENDER_DESC, TISR.TP_PET_BREED_ID, TISR.TP_PET_BREED_DESC, TISR.PETM_PET_BREED_ID, TISR.PETM_PET_BREED_DESC, TISR.MIXED_BREED_FLAG, TISR.TP_PET_COLOR_ID, TISR.TP_PET_COLOR_DESC, TISR.PETM_PET_COLOR_ID, TISR.PETM_PET_COLOR_DESC, TISR.PET_BIRTH_DT, TISR.BORDETELLA_EXP_DT, TISR.RABIES_EXP_DT, TISR.DISTEMPER_EXP_DT, TISR.PARVOVIRUS_EXP_DT, TISR.PARAINFLUENZA_EXP_DT, TISR.FVRCCP_EXP_DT, TISR.PET_CREATE_DT, TISR.EXCH_RATE_PCT, TISR.LOAD_TSTMP FROM ADMIN.TP_INVOICE_SERVICE_RPT TISR WHERE (TISR.TP_INVOICE_NBR = ANY ((SELECT DISTINCT TP_EVENT.TP_INVOICE_NBR FROM ADMIN.TP_EVENT WHERE (TP_EVENT.LOAD_DT >= '2016-02-16 00:00:00'::"TIMESTAMP")) UNION ALL (SELECT TP_INVOICE.TP_INVOICE_NBR FROM ADMIN.TP_INVOICE WHERE (TP_INVOICE.TP_DAY_DT >= '2016-02-16 00:00:00'::"TIMESTAMP"))));

\echo
\echo *****  Creating view:  "TP_INVOICE_SERVICE_DAY_ROCKY"

CREATE or replace VIEW  TP_INVOICE_SERVICE_DAY_ROCKY
(
     DAY_DT,
     LOCATION_ID,
     TP_INVOICE_NBR,
     PRODUCT_ID,
     INVOICE_STATE_ID,
     APPT_START_TSTMP,
     APPT_END_TSTMP,
     FOLIO_STATUS_FLAG,
     TP_ROOM_NUMBER,
     TP_ROOM_TYPE_DESC,
     SERVICE_SCHEDULE_QTY,
     PETCOUNT,
     LOAD_TSTMP
) AS
SELECT TISD.DAY_DT, TISD.LOCATION_ID, TISD.TP_INVOICE_NBR, TISD.PRODUCT_ID, TISD.INVOICE_STATE_ID, TISD.APPT_START_TSTMP, TISD.APPT_END_TSTMP, TISD.FOLIO_STATUS_FLAG, TISD.TP_ROOM_NUMBER, TISD.TP_ROOM_TYPE_DESC, TISD.SERVICE_SCHEDULE_QTY, TISD.PETCOUNT, TISD.LOAD_TSTMP FROM ADMIN.TP_INVOICE_SERVICE_DAY TISD WHERE (TISD.TP_INVOICE_NBR = ANY ((SELECT DISTINCT TP_EVENT.TP_INVOICE_NBR FROM ADMIN.TP_EVENT WHERE (TP_EVENT.LOAD_DT >= '2016-02-16 00:00:00'::"TIMESTAMP")) UNION ALL (SELECT TP_INVOICE.TP_INVOICE_NBR FROM ADMIN.TP_INVOICE WHERE (TP_INVOICE.TP_DAY_DT >= '2016-02-16 00:00:00'::"TIMESTAMP"))));

\echo
\echo *****  Creating view:  "DP_SITE_VEND_PROFILE_ROCKY"

CREATE or replace VIEW  DP_SITE_VEND_PROFILE_ROCKY
(
     LOCATION_ID,
     VENDOR_ID,
     VENDOR_SUBGROUP_ID,
     DPR_ORDER_ARRAY,
     DP_PURCH_GROUP_ID,
     PROD_LEADTIME,
     ADJUST_LEADTIME,
     TRANSIT_LEADTIME,
     TOTAL_LEADTIME,
     ADJUST_TIME_SUN,
     TRANSIT_TIME_SUN,
     ADJUST_TIME_MON,
     TRANSIT_TIME_MON,
     ADJUST_TIME_TUE,
     TRANSIT_TIME_TUE,
     ADJUST_TIME_WED,
     TRANSIT_TIME_WED,
     ADJUST_TIME_THU,
     TRANSIT_TIME_THU,
     ADJUST_TIME_FRI,
     TRANSIT_TIME_FRI,
     ADJUST_TIME_SAT,
     TRANSIT_TIME_SAT,
     ALT_ORIGIN,
     DEL_START_TIME_SUN,
     DEL_END_TIME_SUN,
     DEL_START_TIME_MON,
     DEL_END_TIME_MON,
     DEL_START_TIME_TUE,
     DEL_END_TIME_TUE,
     DEL_START_TIME_WED,
     DEL_END_TIME_WED,
     DEL_START_TIME_THU,
     DEL_END_TIME_THU,
     DEL_START_TIME_FRI,
     DEL_END_TIME_FRI,
     DEL_START_TIME_SAT,
     DEL_END_TIME_SAT,
     PICK_DAY1,
     PICK_DAY2,
     PICK_DAY3,
     PICK_DAY4,
     PICK_DAY5,
     PICK_DAY6,
     PICK_DAY7,
     DEL_DAY1,
     DEL_DAY2,
     DEL_DAY3,
     DEL_DAY4,
     DEL_DAY5,
     DEL_DAY6,
     DEL_DAY7,
     BLUE_GREEN_FLAG,
     PROTECTION_LEVEL,
     OVERRIDE_ORDER_WEIGHT,
     OVERRIDE_ORDER_VOLUME,
     CHANGE_DATE,
     CHANGE_TIME,
     NOTES,
     OVERRIDE_FLAG,
     CROSSDOCK_ID,
     ALT_ORIGIN1,
     ALT_ORIGIN2,
     ALT_ORIGIN3,
     ALT_ORIGIN4,
     ALT_ORIGIN5,
     ALT_ORIGIN6,
     ALT_ORIGIN7,
     CROSSDOCK_ID2,
     CROSSDOCK_ID3,
     CROSSDOCK_ID4,
     CROSSDOCK_ID5,
     CROSSDOCK_ID6,
     CROSSDOCK_ID7,
     DUE_BASED_ON_CD,
     ORDER_DAY_OF_WK_ARRAY,
     WEEK_FREQ_CD,
     QUOTED_LT_DAY_CNT,
     LT_DAY_CNT,
     LOAD_DT,
     MANDT
) AS
SELECT DP_SITE_VEND_PROFILE.LOCATION_ID, DP_SITE_VEND_PROFILE.VENDOR_ID, DP_SITE_VEND_PROFILE.VENDOR_SUBGROUP_ID, DP_SITE_VEND_PROFILE.DPR_ORDER_ARRAY, DP_SITE_VEND_PROFILE.DP_PURCH_GROUP_ID, DP_SITE_VEND_PROFILE.PROD_LEADTIME, DP_SITE_VEND_PROFILE.ADJUST_LEADTIME, DP_SITE_VEND_PROFILE.TRANSIT_LEADTIME, DP_SITE_VEND_PROFILE.TOTAL_LEADTIME, DP_SITE_VEND_PROFILE.ADJUST_TIME_SUN, DP_SITE_VEND_PROFILE.TRANSIT_TIME_SUN, DP_SITE_VEND_PROFILE.ADJUST_TIME_MON, DP_SITE_VEND_PROFILE.TRANSIT_TIME_MON, DP_SITE_VEND_PROFILE.ADJUST_TIME_TUE, DP_SITE_VEND_PROFILE.TRANSIT_TIME_TUE, DP_SITE_VEND_PROFILE.ADJUST_TIME_WED, DP_SITE_VEND_PROFILE.TRANSIT_TIME_WED, DP_SITE_VEND_PROFILE.ADJUST_TIME_THU, DP_SITE_VEND_PROFILE.TRANSIT_TIME_THU, DP_SITE_VEND_PROFILE.ADJUST_TIME_FRI, DP_SITE_VEND_PROFILE.TRANSIT_TIME_FRI, DP_SITE_VEND_PROFILE.ADJUST_TIME_SAT, DP_SITE_VEND_PROFILE.TRANSIT_TIME_SAT, DP_SITE_VEND_PROFILE.ALT_ORIGIN, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_START_TIME_SUN) AS DEL_START_TIME_SUN, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_END_TIME_SUN) AS DEL_END_TIME_SUN, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_START_TIME_MON) AS DEL_START_TIME_MON, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_END_TIME_MON) AS DEL_END_TIME_MON, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_START_TIME_TUE) AS DEL_START_TIME_TUE, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_END_TIME_TUE) AS DEL_END_TIME_TUE, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_START_TIME_WED) AS DEL_START_TIME_WED, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_END_TIME_WED) AS DEL_END_TIME_WED, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_START_TIME_THU) AS DEL_START_TIME_THU, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_END_TIME_THU) AS DEL_END_TIME_THU, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_START_TIME_FRI) AS DEL_START_TIME_FRI, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_END_TIME_FRI) AS DEL_END_TIME_FRI, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_START_TIME_SAT) AS DEL_START_TIME_SAT, "VARCHAR"(DP_SITE_VEND_PROFILE.DEL_END_TIME_SAT) AS DEL_END_TIME_SAT, DP_SITE_VEND_PROFILE.PICK_DAY1, DP_SITE_VEND_PROFILE.PICK_DAY2, DP_SITE_VEND_PROFILE.PICK_DAY3, DP_SITE_VEND_PROFILE.PICK_DAY4, DP_SITE_VEND_PROFILE.PICK_DAY5, DP_SITE_VEND_PROFILE.PICK_DAY6, DP_SITE_VEND_PROFILE.PICK_DAY7, DP_SITE_VEND_PROFILE.DEL_DAY1, DP_SITE_VEND_PROFILE.DEL_DAY2, DP_SITE_VEND_PROFILE.DEL_DAY3, DP_SITE_VEND_PROFILE.DEL_DAY4, DP_SITE_VEND_PROFILE.DEL_DAY5, DP_SITE_VEND_PROFILE.DEL_DAY6, DP_SITE_VEND_PROFILE.DEL_DAY7, DP_SITE_VEND_PROFILE.BLUE_GREEN_FLAG, DP_SITE_VEND_PROFILE.PROTECTION_LEVEL, DP_SITE_VEND_PROFILE.OVERRIDE_ORDER_WEIGHT, DP_SITE_VEND_PROFILE.OVERRIDE_ORDER_VOLUME, DP_SITE_VEND_PROFILE.CHANGE_DATE, "VARCHAR"(DP_SITE_VEND_PROFILE.CHANGE_TIME) AS CHANGE_TIME, DP_SITE_VEND_PROFILE.NOTES, DP_SITE_VEND_PROFILE.OVERRIDE_FLAG, DP_SITE_VEND_PROFILE.CROSSDOCK_ID, DP_SITE_VEND_PROFILE.ALT_ORIGIN1, DP_SITE_VEND_PROFILE.ALT_ORIGIN2, DP_SITE_VEND_PROFILE.ALT_ORIGIN3, DP_SITE_VEND_PROFILE.ALT_ORIGIN4, DP_SITE_VEND_PROFILE.ALT_ORIGIN5, DP_SITE_VEND_PROFILE.ALT_ORIGIN6, DP_SITE_VEND_PROFILE.ALT_ORIGIN7, DP_SITE_VEND_PROFILE.CROSSDOCK_ID2, DP_SITE_VEND_PROFILE.CROSSDOCK_ID3, DP_SITE_VEND_PROFILE.CROSSDOCK_ID4, DP_SITE_VEND_PROFILE.CROSSDOCK_ID5, DP_SITE_VEND_PROFILE.CROSSDOCK_ID6, DP_SITE_VEND_PROFILE.CROSSDOCK_ID7, DP_SITE_VEND_PROFILE.DUE_BASED_ON_CD, DP_SITE_VEND_PROFILE.ORDER_DAY_OF_WK_ARRAY, DP_SITE_VEND_PROFILE.WEEK_FREQ_CD, DP_SITE_VEND_PROFILE.QUOTED_LT_DAY_CNT, DP_SITE_VEND_PROFILE.LT_DAY_CNT, DP_SITE_VEND_PROFILE.LOAD_DT, DP_SITE_VEND_PROFILE.MANDT FROM ADMIN.DP_SITE_VEND_PROFILE;

\echo
\echo *****  Creating view:  "ASN_REJECT_RSN_ROCKY"

CREATE or replace VIEW  ASN_REJECT_RSN_ROCKY
(
     MESSAGE_ID,
     MESSAGE_NO,
     MESSAGE_TEXT,
     ASN_CREATE_DATE,
     ASN_CREATE_TIME,
     IDOC_NUMBER,
     PO_NBR,
     VENDOR_ID,
     VENDOR_NAME,
     UPC_ID,
     MATERIAL_DESC,
     SKU_NBR,
     BOLNR,
     PO_DELIVERY_DATE,
     STORE_NBR,
     GR_CREATE_DATE,
     GR_CREATE_TIME,
     PRODUCT_ID,
     LOCATION_ID,
     LOAD_TS
) AS
SELECT ASN_REJECT_RSN.MESSAGE_ID, ASN_REJECT_RSN.MESSAGE_NO, ASN_REJECT_RSN.MESSAGE_TEXT, ASN_REJECT_RSN.ASN_CREATE_DATE, "VARCHAR"(ASN_REJECT_RSN.ASN_CREATE_TIME) AS ASN_CREATE_TIME, ASN_REJECT_RSN.IDOC_NUMBER, ASN_REJECT_RSN.PO_NBR, ASN_REJECT_RSN.VENDOR_ID, ASN_REJECT_RSN.VENDOR_NAME, ASN_REJECT_RSN.UPC_ID, ASN_REJECT_RSN.MATERIAL_DESC, ASN_REJECT_RSN.SKU_NBR, ASN_REJECT_RSN.BOLNR, ASN_REJECT_RSN.PO_DELIVERY_DATE, ASN_REJECT_RSN.STORE_NBR, ASN_REJECT_RSN.GR_CREATE_DATE, "VARCHAR"(ASN_REJECT_RSN.GR_CREATE_TIME) AS GR_CREATE_TIME, ASN_REJECT_RSN.PRODUCT_ID, ASN_REJECT_RSN.LOCATION_ID, ASN_REJECT_RSN.LOAD_TS FROM ADMIN.ASN_REJECT_RSN;

\echo
\echo *****  Creating view:  "STORE_FILL_RATE_ROCKY"

CREATE or replace VIEW  STORE_FILL_RATE_ROCKY
(
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     DP_DEMAND_QTY,
     WM_DEMAND_QTY,
     RAW_DEMAND_QTY,
     WM_SHIPPED_QTY,
     LOAD_TSTMP
) AS
SELECT STORE_FILL_RATE.DAY_DT, STORE_FILL_RATE.LOCATION_ID, STORE_FILL_RATE.PRODUCT_ID, STORE_FILL_RATE.FROM_LOCATION_ID, STORE_FILL_RATE.DP_DEMAND_QTY, STORE_FILL_RATE.WM_DEMAND_QTY, STORE_FILL_RATE.RAW_DEMAND_QTY, STORE_FILL_RATE.WM_SHIPPED_QTY, STORE_FILL_RATE.LOAD_TSTMP FROM ADMIN.STORE_FILL_RATE WHERE (STORE_FILL_RATE.DAY_DT >= (DATE('now(0)'::"VARCHAR") - 30));

\echo
\echo *****  Creating view:  "MEDALLIA_SURVEY_ROCKY"

CREATE or replace VIEW  MEDALLIA_SURVEY_ROCKY
(
     NZ_ROW_ID,
     CREATEXID,
     DELETEXID,
     MEDALLIA_SURVEY_RESPONSE_TSTMP,
     MEDALLIA_SURVEY_ID,
     MEDALLIA_SURVEY_CREATION_TSTMP,
     SURVEY_TYPE,
     MEDALLIA_TXN_ID,
     TRANSACTION_TSTMP,
     SALES_INSTANCE_ID,
     LOCATION_ID,
     STORE_NBR,
     REGISTER_NBR,
     TRANSACTION_NBR,
     CASHIER_NBR,
     SALES_COACH_ID,
     CUSTOMER_EID,
     CUSTOMER_LOYALTY_NBR,
     CUSTOMER_FIRST_TIME_PURCHASE_FLAG,
     TXN_SEGMENT,
     PAYMENT_DEVICE_TYPE,
     ORDER_CHANNEL,
     ORDER_NBR,
     RETURN_TXN_FLAG,
     TRAINING_START_DT,
     PREV_PURCHASE_DT,
     TOTAL_PURCHASED_ITEM_QTY,
     COUPON_AMT,
     PRICE_OVERRIDE_AMT,
     TOTAL_PAID_AMT,
     SALON_BOOKING_CHANNEL,
     MEDALLIA_SALON_EMPL_GROUP_ID,
     SALON_EMPLOYEE_ID_1,
     SALON_EMPLOYEE_ID_2,
     SALON_EMPLOYEE_ID_3,
     SALON_EMPLOYEE_ID_4,
     MEDALLIA_PET_GROUP_ID,
     PET_ID_1,
     PET_ID_2,
     PET_ID_3,
     PET_ID_4,
     SMS_EMPLOYEE_GROUP_DESC,
     AUTO_COMPLETED_FLAG,
     AUTO_COMPLETED_DATE,
     LATEST_SUBMIT_DATE,
     MEDALLIA_SURVEY_QUESTION_ID,
     MEDALLIA_SURVEY_ANSWER_TXT,
     MEDALLIA_SURVEY_ANSWER_NBR,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT MEDALLIA_SURVEY.ROWID AS NZ_ROW_ID, MEDALLIA_SURVEY.CREATEXID, MEDALLIA_SURVEY.DELETEXID, MEDALLIA_SURVEY.MEDALLIA_SURVEY_RESPONSE_TSTMP, MEDALLIA_SURVEY.MEDALLIA_SURVEY_ID, MEDALLIA_SURVEY.MEDALLIA_SURVEY_CREATION_TSTMP, MEDALLIA_SURVEY.SURVEY_TYPE, MEDALLIA_SURVEY.MEDALLIA_TXN_ID, MEDALLIA_SURVEY.TRANSACTION_TSTMP, MEDALLIA_SURVEY.SALES_INSTANCE_ID, MEDALLIA_SURVEY.LOCATION_ID, MEDALLIA_SURVEY.STORE_NBR, MEDALLIA_SURVEY.REGISTER_NBR, MEDALLIA_SURVEY.TRANSACTION_NBR, MEDALLIA_SURVEY.CASHIER_NBR, MEDALLIA_SURVEY.SALES_COACH_ID, MEDALLIA_SURVEY.CUSTOMER_EID, MEDALLIA_SURVEY.CUSTOMER_LOYALTY_NBR, MEDALLIA_SURVEY.CUSTOMER_FIRST_TIME_PURCHASE_FLAG, MEDALLIA_SURVEY.TXN_SEGMENT, MEDALLIA_SURVEY.PAYMENT_DEVICE_TYPE, MEDALLIA_SURVEY.ORDER_CHANNEL, MEDALLIA_SURVEY.ORDER_NBR, MEDALLIA_SURVEY.RETURN_TXN_FLAG, MEDALLIA_SURVEY.TRAINING_START_DT, MEDALLIA_SURVEY.PREV_PURCHASE_DT, MEDALLIA_SURVEY.TOTAL_PURCHASED_ITEM_QTY, MEDALLIA_SURVEY.COUPON_AMT, MEDALLIA_SURVEY.PRICE_OVERRIDE_AMT, MEDALLIA_SURVEY.TOTAL_PAID_AMT, MEDALLIA_SURVEY.SALON_BOOKING_CHANNEL, MEDALLIA_SURVEY.MEDALLIA_SALON_EMPL_GROUP_ID, MEDALLIA_SURVEY.SALON_EMPLOYEE_ID_1, MEDALLIA_SURVEY.SALON_EMPLOYEE_ID_2, MEDALLIA_SURVEY.SALON_EMPLOYEE_ID_3, MEDALLIA_SURVEY.SALON_EMPLOYEE_ID_4, MEDALLIA_SURVEY.MEDALLIA_PET_GROUP_ID, MEDALLIA_SURVEY.PET_ID_1, MEDALLIA_SURVEY.PET_ID_2, MEDALLIA_SURVEY.PET_ID_3, MEDALLIA_SURVEY.PET_ID_4, MEDALLIA_SURVEY.SMS_EMPLOYEE_GROUP_DESC, MEDALLIA_SURVEY.AUTO_COMPLETED_FLAG, MEDALLIA_SURVEY.AUTO_COMPLETED_DATE, MEDALLIA_SURVEY.LATEST_SUBMIT_DATE, MEDALLIA_SURVEY.MEDALLIA_SURVEY_QUESTION_ID, MEDALLIA_SURVEY.MEDALLIA_SURVEY_ANSWER_TXT, MEDALLIA_SURVEY.MEDALLIA_SURVEY_ANSWER_NBR, MEDALLIA_SURVEY.UPDATE_TSTMP, MEDALLIA_SURVEY.LOAD_TSTMP FROM ADMIN.MEDALLIA_SURVEY;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_DAY_ROCKY"

CREATE or replace VIEW  EMPLOYEE_PROFILE_DAY_ROCKY
(
     DAY_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT DATE(EMPLOYEE_PROFILE_DAY.DAY_DT) AS DAY_DT, EMPLOYEE_PROFILE_DAY.EMPLOYEE_ID, EMPLOYEE_PROFILE_DAY.EMPL_FIRST_NAME, NULL::VARCHAR(50) AS EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_DAY.EMPL_LAST_NAME, NULL::DATE AS EMPL_BIRTH_DT, NULL::VARCHAR(1) AS GENDER_CD, NULL::VARCHAR(1) AS PS_MARITAL_STATUS_CD, NULL::VARCHAR(2) AS ETHNIC_GROUP_ID, NULL::VARCHAR(60) AS EMPL_ADDR_1, NULL::VARCHAR(60) AS EMPL_ADDR_2, NULL::VARCHAR(30) AS EMPL_CITY, NULL::VARCHAR(3) AS EMPL_STATE, NULL::VARCHAR(3) AS EMPL_PROVINCE, NULL::VARCHAR(10) AS EMPL_ZIPCODE, NULL::VARCHAR(3) AS COUNTRY_CD, NULL::VARCHAR(12) AS EMPL_HOME_PHONE, NULL::VARCHAR(70) AS EMPL_EMAIL_ADDR, NULL::VARCHAR(30) AS EMPL_LOGIN_ID, NULL::VARCHAR(8) AS BADGE_NBR, EMPLOYEE_PROFILE_DAY.EMPL_STATUS_CD, NULL::DATE AS STATUS_CHG_DT, NULL::VARCHAR(1) AS FULLPT_FLAG, NULL::DATE AS FULLPT_CHG_DT, NULL::VARCHAR(1) AS EMPL_TYPE_CD, NULL::VARCHAR(1) AS PS_REG_TEMP_CD, NULL::VARCHAR(1) AS EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_DAY.EMPL_GROUP_CD, EMPLOYEE_PROFILE_DAY.EMPL_SUBGROUP_CD, DATE(EMPLOYEE_PROFILE_DAY.EMPL_HIRE_DT) AS EMPL_HIRE_DT, DATE(EMPLOYEE_PROFILE_DAY.EMPL_REHIRE_DT) AS EMPL_REHIRE_DT, DATE(EMPLOYEE_PROFILE_DAY.EMPL_TERM_DT) AS EMPL_TERM_DT, NULL::VARCHAR(3) AS TERM_REASON_CD, DATE(EMPLOYEE_PROFILE_DAY.EMPL_SENORITY_DT) AS EMPL_SENORITY_DT, DATE(EMPLOYEE_PROFILE_DAY.PS_ACTION_DT) AS PS_ACTION_DT, EMPLOYEE_PROFILE_DAY.PS_ACTION_CD, EMPLOYEE_PROFILE_DAY.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_DAY.LOCATION_ID, NULL::DATE AS LOCATION_CHG_DT, EMPLOYEE_PROFILE_DAY.STORE_NBR, NULL::VARCHAR(8) AS STORE_DEPT_NBR, NULL::INT4 AS COMPANY_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_AREA_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_SUBAREA_ID, NULL::VARCHAR(10) AS PS_DEPT_CD, NULL::DATE AS PS_DEPT_CHG_DT, NULL::INT4 AS PS_POSITION_ID, NULL::DATE AS POSITION_CHG_DT, NULL::INT4 AS PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_DAY.JOB_CODE, DATE(EMPLOYEE_PROFILE_DAY.JOB_CODE_CHG_DT) AS JOB_CODE_CHG_DT, NULL::DATE AS EMPL_JOB_ENTRY_DT, NULL::INT2 AS PS_GRADE_ID, EMPLOYEE_PROFILE_DAY.EMPL_STD_BONUS_PCT, NULL::NUMERIC(5,2) AS EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_DAY.EMPL_RATING, NULL::DATE AS PAY_RATE_CHG_DT, NULL::VARCHAR(2) AS PS_PAYROLL_AREA_CD, NULL::VARCHAR(4) AS PS_TAX_COMPANY_CD, NULL::VARCHAR(1) AS PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_DAY.COMP_RATE_AMT, NULL::NUMERIC(15,2) AS ANNUAL_RATE_LOC_AMT, NULL::NUMERIC(12,2) AS HOURLY_RATE_LOC_AMT, NULL::VARCHAR(5) AS CURRENCY_ID, NULL::NUMERIC(9,6) AS EXCH_RATE_PCT, EMPLOYEE_PROFILE_DAY.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_DAY;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_WK_ROCKY"

CREATE or replace VIEW  EMPLOYEE_PROFILE_WK_ROCKY
(
     WEEK_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_WK.WEEK_DT, EMPLOYEE_PROFILE_WK.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK.EMPL_FIRST_NAME, NULL::VARCHAR(50) AS EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK.EMPL_LAST_NAME, EMPLOYEE_PROFILE_WK.EMPL_BIRTH_DT, NULL::VARCHAR(1) AS GENDER_CD, NULL::VARCHAR(1) AS PS_MARITAL_STATUS_CD, NULL::VARCHAR(2) AS ETHNIC_GROUP_ID, NULL::VARCHAR(60) AS EMPL_ADDR_1, NULL::VARCHAR(60) AS EMPL_ADDR_2, EMPLOYEE_PROFILE_WK.EMPL_CITY, EMPLOYEE_PROFILE_WK.EMPL_STATE, EMPLOYEE_PROFILE_WK.EMPL_PROVINCE, EMPLOYEE_PROFILE_WK.EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK.COUNTRY_CD, NULL::VARCHAR(12) AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK.EMPL_EMAIL_ADDR, NULL::VARCHAR(30) AS EMPL_LOGIN_ID, NULL::VARCHAR(8) AS BADGE_NBR, EMPLOYEE_PROFILE_WK.EMPL_STATUS_CD, NULL::"TIMESTAMP" AS STATUS_CHG_DT, EMPLOYEE_PROFILE_WK.FULLPT_FLAG, EMPLOYEE_PROFILE_WK.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK.PS_REG_TEMP_CD, NULL::VARCHAR(1) AS EMPL_CATEGORY_CD, NULL::VARCHAR(1) AS EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK.TERM_REASON_CD, EMPLOYEE_PROFILE_WK.EMPL_SENORITY_DT, NULL::"TIMESTAMP" AS PS_ACTION_DT, NULL::VARCHAR(3) AS PS_ACTION_CD, NULL::VARCHAR(3) AS PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK.LOCATION_ID, NULL::"TIMESTAMP" AS LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK.STORE_NBR, EMPLOYEE_PROFILE_WK.STORE_DEPT_NBR, NULL::INT4 AS COMPANY_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_AREA_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK.PS_DEPT_CD, EMPLOYEE_PROFILE_WK.PS_DEPT_CHG_DT, NULL::INT4 AS PS_POSITION_ID, NULL::"TIMESTAMP" AS POSITION_CHG_DT, NULL::INT4 AS PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK.JOB_CODE, EMPLOYEE_PROFILE_WK.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK.PS_GRADE_ID, EMPLOYEE_PROFILE_WK.EMPL_STD_BONUS_PCT, NULL::NUMERIC(5,2) AS EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_WK.EMPL_RATING, NULL::"TIMESTAMP" AS PAY_RATE_CHG_DT, NULL::VARCHAR(2) AS PS_PAYROLL_AREA_CD, NULL::VARCHAR(4) AS PS_TAX_COMPANY_CD, NULL::VARCHAR(1) AS PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_WK.COMP_RATE_AMT, EMPLOYEE_PROFILE_WK.ANNUAL_RATE_LOC_AMT, NULL::NUMERIC(12,2) AS HOURLY_RATE_LOC_AMT, NULL::VARCHAR(5) AS CURRENCY_ID, EMPLOYEE_PROFILE_WK.EXCH_RATE_PCT, DATE(EMPLOYEE_PROFILE_WK.LOAD_TSTMP) AS LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK;

\echo
\echo *****  Creating view:  "EMPL_PAYCHECK_RPT_ROCKY"

CREATE or replace VIEW  EMPL_PAYCHECK_RPT_ROCKY
(
     PAYCHECK_DT,
     PROCESS_PAY_PERIOD,
     FOR_PAY_PERIOD,
     PAY_STATUS,
     PAY_START_DT,
     PAY_END_DT,
     EMPLOYEE_ID,
     GL_WORK_COST_CENTER_GID,
     PS_WAGE_TYPE_GID,
     CHECK_NBR,
     GL_COMPANY_CD,
     PS_TAX_COMPANY_CD,
     STATE_CD,
     EMPL_GROUP_CD,
     GL_HOME_COST_CENTER_GID,
     HOURS_WORKED,
     WAGE_LOC_AMT,
     CURRENCY_ID,
     VOID_FLAG,
     COUNTRY_CD,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_QTR,
     FISCAL_YR,
     WEEK_DT,
     CAL_WK,
     CAL_MO,
     CAL_QTR,
     CAL_YR,
     LOAD_TSTMP
) AS
SELECT NULL::DATE AS PAYCHECK_DT, NULL::VARCHAR(6) AS PROCESS_PAY_PERIOD, NULL::VARCHAR(6) AS FOR_PAY_PERIOD, NULL::VARCHAR(1) AS PAY_STATUS, NULL::DATE AS PAY_START_DT, DATE(EMPL_PAYCHECK_RPT.PAY_END_DT) AS PAY_END_DT, EMPL_PAYCHECK_RPT.EMPLOYEE_ID, NULL::INT4 AS GL_WORK_COST_CENTER_GID, EMPL_PAYCHECK_RPT.PS_WAGE_TYPE_GID, NULL::VARCHAR(13) AS CHECK_NBR, NULL::VARCHAR(4) AS GL_COMPANY_CD, NULL::VARCHAR(4) AS PS_TAX_COMPANY_CD, NULL::VARCHAR(3) AS STATE_CD, NULL::VARCHAR(1) AS EMPL_GROUP_CD, NULL::INT4 AS GL_HOME_COST_CENTER_GID, NULL::NUMERIC(14,3) AS HOURS_WORKED, EMPL_PAYCHECK_RPT.WAGE_LOC_AMT, NULL::VARCHAR(5) AS CURRENCY_ID, NULL::VARCHAR(1) AS VOID_FLAG, NULL::VARCHAR(3) AS COUNTRY_CD, NULL::INT4 AS FISCAL_WK, NULL::INT4 AS FISCAL_MO, NULL::INT4 AS FISCAL_QTR, NULL::INT2 AS FISCAL_YR, NULL::DATE AS WEEK_DT, NULL::INT4 AS CAL_WK, NULL::INT4 AS CAL_MO, NULL::INT4 AS CAL_QTR, NULL::INT2 AS CAL_YR, EMPL_PAYCHECK_RPT.LOAD_TSTMP FROM ADMIN.EMPL_PAYCHECK_RPT;

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_DAY_ROCKY_HIST"

CREATE or replace VIEW  EMPLOYEE_PROFILE_DAY_ROCKY_HIST
(
     DAY_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT DATE(EMPLOYEE_PROFILE_DAY.DAY_DT) AS DAY_DT, EMPLOYEE_PROFILE_DAY.EMPLOYEE_ID, EMPLOYEE_PROFILE_DAY.EMPL_FIRST_NAME, NULL::VARCHAR(50) AS EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_DAY.EMPL_LAST_NAME, NULL::DATE AS EMPL_BIRTH_DT, NULL::VARCHAR(1) AS GENDER_CD, NULL::VARCHAR(1) AS PS_MARITAL_STATUS_CD, NULL::VARCHAR(2) AS ETHNIC_GROUP_ID, NULL::VARCHAR(60) AS EMPL_ADDR_1, NULL::VARCHAR(60) AS EMPL_ADDR_2, NULL::VARCHAR(30) AS EMPL_CITY, NULL::VARCHAR(3) AS EMPL_STATE, NULL::VARCHAR(3) AS EMPL_PROVINCE, NULL::VARCHAR(10) AS EMPL_ZIPCODE, NULL::VARCHAR(3) AS COUNTRY_CD, NULL::VARCHAR(12) AS EMPL_HOME_PHONE, NULL::VARCHAR(70) AS EMPL_EMAIL_ADDR, NULL::VARCHAR(30) AS EMPL_LOGIN_ID, NULL::VARCHAR(8) AS BADGE_NBR, EMPLOYEE_PROFILE_DAY.EMPL_STATUS_CD, NULL::DATE AS STATUS_CHG_DT, NULL::VARCHAR(1) AS FULLPT_FLAG, NULL::DATE AS FULLPT_CHG_DT, NULL::VARCHAR(1) AS EMPL_TYPE_CD, NULL::VARCHAR(1) AS PS_REG_TEMP_CD, NULL::VARCHAR(1) AS EMPL_CATEGORY_CD, EMPLOYEE_PROFILE_DAY.EMPL_GROUP_CD, EMPLOYEE_PROFILE_DAY.EMPL_SUBGROUP_CD, DATE(EMPLOYEE_PROFILE_DAY.EMPL_HIRE_DT) AS EMPL_HIRE_DT, DATE(EMPLOYEE_PROFILE_DAY.EMPL_REHIRE_DT) AS EMPL_REHIRE_DT, DATE(EMPLOYEE_PROFILE_DAY.EMPL_TERM_DT) AS EMPL_TERM_DT, NULL::VARCHAR(3) AS TERM_REASON_CD, DATE(EMPLOYEE_PROFILE_DAY.EMPL_SENORITY_DT) AS EMPL_SENORITY_DT, DATE(EMPLOYEE_PROFILE_DAY.PS_ACTION_DT) AS PS_ACTION_DT, EMPLOYEE_PROFILE_DAY.PS_ACTION_CD, EMPLOYEE_PROFILE_DAY.PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_DAY.LOCATION_ID, NULL::DATE AS LOCATION_CHG_DT, EMPLOYEE_PROFILE_DAY.STORE_NBR, NULL::VARCHAR(8) AS STORE_DEPT_NBR, NULL::INT4 AS COMPANY_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_AREA_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_SUBAREA_ID, NULL::VARCHAR(10) AS PS_DEPT_CD, NULL::DATE AS PS_DEPT_CHG_DT, NULL::INT4 AS PS_POSITION_ID, NULL::DATE AS POSITION_CHG_DT, NULL::INT4 AS PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_DAY.JOB_CODE, DATE(EMPLOYEE_PROFILE_DAY.JOB_CODE_CHG_DT) AS JOB_CODE_CHG_DT, NULL::DATE AS EMPL_JOB_ENTRY_DT, NULL::INT2 AS PS_GRADE_ID, EMPLOYEE_PROFILE_DAY.EMPL_STD_BONUS_PCT, NULL::NUMERIC(5,2) AS EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_DAY.EMPL_RATING, NULL::DATE AS PAY_RATE_CHG_DT, NULL::VARCHAR(2) AS PS_PAYROLL_AREA_CD, NULL::VARCHAR(4) AS PS_TAX_COMPANY_CD, NULL::VARCHAR(1) AS PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_DAY.COMP_RATE_AMT, NULL::NUMERIC(15,2) AS ANNUAL_RATE_LOC_AMT, NULL::NUMERIC(12,2) AS HOURLY_RATE_LOC_AMT, NULL::VARCHAR(5) AS CURRENCY_ID, NULL::NUMERIC(9,6) AS EXCH_RATE_PCT, EMPLOYEE_PROFILE_DAY.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_DAY WHERE (EMPLOYEE_PROFILE_DAY.DAY_DT = ANY (SELECT DAYS.DAY_DT FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR IN (2018, 2019))));

\echo
\echo *****  Creating view:  "PM_VKKUWOJ23MMDFG2HIHVKFYP7FY4"

CREATE or replace VIEW  PM_VKKUWOJ23MMDFG2HIHVKFYP7FY4
(
     OMS_ORDER_ID,
     ATTRIBUTE_NAME,
     ATTRIBUTE_VALUE,
     UPDATE_TSTMP
) AS
SELECT PM_AABES3WFJMXL63V2KTFRSBBDP4Y.OMS_ORDER_ID, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE, PM_AABES3WFJMXL63V2KTFRSBBDP4Y.UPDATE_TSTMP FROM ADMIN.OMS_ORDER_ATTRIBUTE PM_AABES3WFJMXL63V2KTFRSBBDP4Y WHERE ((PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_NAME IN (('Proxy_FirstName'::"VARCHAR")::VARCHAR(50), ('Proxy_LastName'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line1'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line2'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Line3'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_City'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_StateProv'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_PostalCode'::"VARCHAR")::VARCHAR(50), ('Proxy_Add_Country'::"VARCHAR")::VARCHAR(50), ('Proxy_Email'::"VARCHAR")::VARCHAR(50), ('Proxy_Phone'::"VARCHAR")::VARCHAR(50))) AND (PM_AABES3WFJMXL63V2KTFRSBBDP4Y.ATTRIBUTE_VALUE NOTNULL));

\echo
\echo *****  Creating view:  "PM_VAWR5KA55BIZVIPDXLLRAR2HXKQ"

CREATE or replace VIEW  PM_VAWR5KA55BIZVIPDXLLRAR2HXKQ
(
     SHIPMENT_ID,
     OMS_DIST_ORDER_ID,
     TC_COMPANY_ID,
     TC_SHIPMENT_ID,
     SHIPMENT_STATUS,
     UPDATE_SENT,
     CREATION_TYPE,
     IS_CANCELLED,
     AVAILABLE_DT,
     O_FACILITY_NBR,
     O_FACILITY_ID,
     O_ADDRESS,
     O_CITY,
     O_STATE_PROV,
     O_POSTAL_CD,
     O_COUNTRY_CD,
     D_ADDRESS,
     D_CITY,
     D_STATE_PROV,
     D_POSTAL_CD,
     D_COUNTRY_CD,
     IS_PERISHABLE,
     BILLING_METHOD,
     ASSIGNED_CARRIER_CD,
     TRANS_RESP_CD,
     CURRENCY_CD,
     PICKUP_START_DT,
     PICKUP_END_DT,
     DELIVERY_START_DT,
     DELIVERY_END_DT,
     NUM_STOPS,
     NUM_DOCKS,
     HAS_NOTES,
     HAS_ALERTS,
     HAS_IMPORT_ERROR,
     HAS_SOFT_CHECK_ERROR,
     HAS_TRACKING_MSG,
     TRACKING_MSG_PROBLEM,
     DELIVERY_TZ,
     O_STOP_LOCATION_NAME,
     D_STOP_LOCATION_NAME,
     USE_BROKER_AS_CARRIER,
     STATUS_CHANGE_DT,
     REPORTED_COST,
     IS_AUTO_DELIVERED,
     SHIPMENT_TYPE,
     IS_SHIPMENT_RECONCILED,
     DELIVERY_REQ,
     WAYPOINT_TOTAL_COST,
     WAYPOINT_HANDLING_COST,
     IS_MANUAL_ASSIGN,
     PRIORITY_TYPE,
     MV_CURRENCY_CD,
     SHIPMENT_LEG_TYPE,
     SHIPMENT_CLOSED_INDICATOR,
     BK_PICKUP_TZ,
     NUM_CHARGE_LAYOVERS,
     PICK_START_DT,
     TOTAL_TIME,
     RETAIN_CONSOLIDATOR_TIMES,
     EVENT_IND_TYPEID,
     DELAY_TYPE,
     ASSIGNED_CARRIER_ID,
     HAS_EM_NOTIFY_FLAG,
     REGION_ID,
     INBOUND_REGION_ID,
     OUTBOUND_REGION_ID,
     SHIPMENT_WIN_ADJ_FLAG,
     CREATED_SOURCE_TYPE,
     CREATED_SOURCE,
     CREATED_TSTMP,
     LAST_UPDATED_SOURCE_TYPE,
     LAST_UPDATED_SOURCE,
     LAST_UPDATED_TSTMP,
     TOTAL_COST,
     ORDER_QTY,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID AS SHIPMENT_ID, INT4(PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0) AS OMS_DIST_ORDER_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TC_COMPANY_ID AS TC_COMPANY_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TC_SHIPMENT_ID AS TC_SHIPMENT_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID AS SHIPMENT_STATUS, SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG AS UPDATE_SENT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID AS CREATION_TYPE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG AS IS_CANCELLED, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP AS AVAILABLE_DT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR AS O_FACILITY_NBR, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID AS O_FACILITY_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR AS O_ADDRESS, SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY, SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV, SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR AS D_ADDRESS, SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY, SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV, SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG AS IS_PERISHABLE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID AS BILLING_METHOD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD AS ASSIGNED_CARRIER_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD AS TRANS_RESP_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP AS PICKUP_START_DT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP AS PICKUP_END_DT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP AS DELIVERY_START_DT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP AS DELIVERY_END_DT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS, SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS, SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG AS HAS_NOTES, SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG AS HAS_ALERTS, SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG AS HAS_IMPORT_ERROR, SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG AS HAS_SOFT_CHECK_ERROR, SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG AS HAS_TRACKING_MSG, SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG AS TRACKING_MSG_PROBLEM, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID AS DELIVERY_TZ, SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME, SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME, SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG AS USE_BROKER_AS_CARRIER, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP AS STATUS_CHANGE_DT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST, SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG AS IS_AUTO_DELIVERED, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD AS SHIPMENT_TYPE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG AS IS_SHIPMENT_RECONCILED, SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ, SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST, SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST, SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG AS IS_MANUAL_ASSIGN, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID AS PRIORITY_TYPE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID AS SHIPMENT_LEG_TYPE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND AS SHIPMENT_CLOSED_INDICATOR, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID AS BK_PICKUP_TZ, SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP AS PICK_START_DT, SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME, SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG AS RETAIN_CONSOLIDATOR_TIMES, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID AS EVENT_IND_TYPEID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID AS DELAY_TYPE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID AS ASSIGNED_CARRIER_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID AS REGION_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID AS INBOUND_REGION_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID AS OUTBOUND_REGION_ID, SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID AS CREATED_SOURCE_TYPE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE AS CREATED_SOURCE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP AS CREATED_TSTMP, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID AS LAST_UPDATED_SOURCE_TYPE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE AS LAST_UPDATED_SOURCE, SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP AS LAST_UPDATED_TSTMP, SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST, SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY, "TIMESTAMP"('now(0)'::"VARCHAR") AS UPDATE_TSTMP, CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LOAD_TSTMP ISNULL) THEN "TIMESTAMP"('now(0)'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.LOAD_TSTMP END AS LOAD_TSTMP FROM (ADMIN.OMS_SHIPMENT SHORTCUT_TO_OMS_SHIPMENT RIGHT JOIN (ADMIN.OMS_SHIPMENT_DDS SHORTCUT_TO_OMS_SHIPMENT_DDS1 LEFT JOIN (SELECT DISTINCT SHORTCUT_TO_OMS_LPN_DDS.OMS_ORDER_ID AS PM_A0, SHORTCUT_TO_OMS_LPN_DDS.OMS_SHIPMENT_ID AS PM_A1 FROM ADMIN.OMS_LPN_DDS SHORTCUT_TO_OMS_LPN_DDS ORDER BY SHORTCUT_TO_OMS_LPN_DDS.OMS_ORDER_ID, SHORTCUT_TO_OMS_LPN_DDS.OMS_SHIPMENT_ID ) PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A ON ((PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A1 = SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID))) ON (((SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TC_COMPANY_ID = SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID) AND (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TC_SHIPMENT_ID = SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID)))) WHERE (((SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_TSTMP > DATE_TRUNC('days'::"VARCHAR", "TIMESTAMP"('now(0)'::"VARCHAR"))) AND (CASE WHEN (CASE WHEN ((SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL) AND (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL))) AND ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID END) OR (CASE WHEN (PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 ISNULL) THEN '0'::NUMERIC ELSE PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 END <> "NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID END))) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST END))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END ISNULL) THEN NULL::INT4 WHEN ((CASE WHEN ((SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL) AND (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL))) AND ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID END) OR (CASE WHEN (PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 ISNULL) THEN '0'::NUMERIC ELSE PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 END <> "NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID END))) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST END))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'INSERT'::"VARCHAR") OR (CASE WHEN ((SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL) AND (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL))) AND ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID END) OR (CASE WHEN (PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 ISNULL) THEN '0'::NUMERIC ELSE PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 END <> "NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID END))) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST END))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'UPDATE'::"VARCHAR")) THEN 1 ELSE 0 END <> 0)) AND (CASE WHEN (CASE WHEN ((SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL) AND (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL))) AND ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID END) OR (CASE WHEN (PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 ISNULL) THEN '0'::NUMERIC ELSE PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 END <> "NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID END))) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST END))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'INSERT'::"VARCHAR") THEN 0 WHEN (CASE WHEN ((SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL) AND (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL)) THEN 'INSERT'::"VARCHAR" WHEN (((NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_SHIPMENT_ID ISNULL)) AND (NOT (SHORTCUT_TO_OMS_SHIPMENT.TC_COMPANY_ID ISNULL))) AND ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_ID END) OR (CASE WHEN (PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 ISNULL) THEN '0'::NUMERIC ELSE PM_A2FTTPZAKF7K65Z3SJ3EOCZ7V7A.PM_A0 END <> "NUMERIC"(CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID ISNULL) THEN 0 ELSE SHORTCUT_TO_OMS_SHIPMENT.OMS_DIST_ORDER_ID END))) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_STATUS_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_STATUS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.UPDATE_SENT_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.UPDATE_SENT END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATION_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATION_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.CANCELLED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_CANCELLED END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_AVAILABLE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.AVAILABLE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_NBR END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_NBR END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_O_FACILITY_ID)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_FACILITY_ID)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_COUNTRY_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_ADDR)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_ADDRESS)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_CITY)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_CITY)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STATE_PROV)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STATE_PROV)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_POSTAL_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_POSTAL_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_COUNTRY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_COUNTRY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.PERISHABLE_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_PERISHABLE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_BILLING_METHOD_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BILLING_METHOD END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_TRANS_RESP_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.TRANS_RESP_CD)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICKUP_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_END_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_END_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_STOPS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_STOPS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_DOCKS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_DOCKS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_NOTES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_NOTES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_ALERTS_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_ALERTS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_IMPORT_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_IMPORT_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_SOFT_CHECK_ERROR_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_SOFT_CHECK_ERROR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_TRACKING_MSG_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_TRACKING_MSG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TRACKING_MSG_PROBLEM_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TRACKING_MSG_PROBLEM END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELIVERY_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_TZ END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.O_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.O_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.D_STOP_LOCATION_NAME)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.D_STOP_LOCATION_NAME)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.USE_BROKER_AS_CARRIER_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.USE_BROKER_AS_CARRIER END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_STATUS_CHANGE_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.STATUS_CHANGE_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.REPORTED_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REPORTED_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.AUTO_DELIVERED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_AUTO_DELIVERED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_TYPE_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_TYPE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_RECONCILED_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_SHIPMENT_RECONCILED END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.DELIVERY_REQ)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.DELIVERY_REQ)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_TOTAL_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.WAYPOINT_HANDLING_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.WAYPOINT_HANDLING_COST END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.MANUAL_ASSIGN_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.IS_MANUAL_ASSIGN END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PRIORITY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.PRIORITY_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.MV_CURRENCY_CD)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.MV_CURRENCY_CD)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_SHIPMENT_LEG_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_LEG_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_CLOSED_IND END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_CLOSED_INDICATOR END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICKUP_TZ_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.BK_PICKUP_TZ END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.NUM_CHARGE_LAYOVERS END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.NUM_CHARGE_LAYOVERS END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_PICK_START_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE "TIMESTAMP"(SHORTCUT_TO_OMS_SHIPMENT.PICK_START_DT) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_TIME END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_TIME END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.RETAIN_CONSOLIDATOR_TIMES_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.RETAIN_CONSOLIDATOR_TIMES END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_EVENT_IND_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.EVENT_IND_TYPEID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_DELAY_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.DELAY_TYPE END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_ASSIGNED_CARRIER_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ASSIGNED_CARRIER_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.HAS_EM_NOTIFY_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.HAS_EM_NOTIFY_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_INBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.INBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_OUTBOUND_REGION_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.OUTBOUND_REGION_ID END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.SHIPMENT_WIN_ADJ_FLAG END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.SHIPMENT_WIN_ADJ_FLAG END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.CREATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_CREATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.CREATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE_TYPE_ID END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE_TYPE END)) OR (CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_SOURCE)) END <> CASE WHEN (LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) ISNULL) THEN ' '::"VARCHAR" ELSE LTRIM(RTRIM(SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_SOURCE)) END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.OMS_LAST_UPDATED_TSTMP END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP ISNULL) THEN TO_TIMESTAMP('12-31-9999'::"VARCHAR", 'MM-DD-YYYY'::"VARCHAR") ELSE SHORTCUT_TO_OMS_SHIPMENT.LAST_UPDATED_TSTMP END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.ORDER_QTY END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.ORDER_QTY END)) OR (CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT_DDS1.TOTAL_COST END <> CASE WHEN (SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST ISNULL) THEN '0'::NUMERIC ELSE SHORTCUT_TO_OMS_SHIPMENT.TOTAL_COST END))) THEN 'UPDATE'::"VARCHAR" ELSE 'REJECT'::"VARCHAR" END = 'UPDATE'::"VARCHAR") THEN 1 ELSE 3 END = 1));

\echo
\echo *****  Creating view:  "PM_VBFRULGDMRNTND5FFYS5BB5MNBU"

CREATE or replace VIEW  PM_VBFRULGDMRNTND5FFYS5BB5MNBU
(
     DAY_DT,
     LOCATION_ID,
     PRODUCT_ID,
     FROM_LOCATION_ID,
     SHIPPED_QTY,
     ORIG_ORDER_QTY,
     PROJ_ORDER_QTY
) AS
SELECT W.DAY_DT, W.LOCATION_ID, W.PRODUCT_ID, W.FROM_LOCATION_ID, W.SHIPPED_QTY, W.ORIG_ORDER_QTY, D.PROJ_ORDER_QTY FROM (ADMIN.WM_PO_ORDER_DTL_VW W LEFT JOIN ((SELECT DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID, (SUM(DP_ORDER_PROJ_DAY.PROJ_ORDER_QTY))::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_ORDER_PROJ_DAY WHERE (DP_ORDER_PROJ_DAY.DAY_DT >= '2020-01-01 00:00:00'::"TIMESTAMP") GROUP BY DP_ORDER_PROJ_DAY.DAY_DT, DP_ORDER_PROJ_DAY.LOCATION_ID, DP_ORDER_PROJ_DAY.FROM_LOCATION_ID, DP_ORDER_PROJ_DAY.PRODUCT_ID) UNION ALL (SELECT "TIMESTAMP"(DP_DEMAND_DAY.DAY_DT) AS DAY_DT, DP_DEMAND_DAY.LOCATION_ID, DP_DEMAND_DAY.FROM_LOCATION_ID, DP_DEMAND_DAY.PRODUCT_ID, (DP_DEMAND_DAY.PROPOSED_QTY)::NUMERIC(38,4) AS PROJ_ORDER_QTY FROM ADMIN.DP_DEMAND_DAY)) D ON ((((((D.LOCATION_ID = W.LOCATION_ID) AND (D.PRODUCT_ID = W.PRODUCT_ID)) AND (D.FROM_LOCATION_ID = W.FROM_LOCATION_ID)) AND (D.DAY_DT = "TIMESTAMP"(W.PO_DOC_DT))) AND ((SUBSTR(W.PO_NBR, 1, 1))::VARCHAR(1) IN (('6'::"VARCHAR")::VARCHAR(1), ('8'::"VARCHAR")::VARCHAR(1))))));

\echo
\echo *****  Creating view:  "DM_AGED_INV_MVMNT_ROCKY"

CREATE or replace VIEW  DM_AGED_INV_MVMNT_ROCKY
(
     NZ_ROW_ID,
     CREATEXID,
     DELETEXID,
     WEEK_DT,
     LOCATION_ID,
     PRODUCT_ID,
     POG_IND_PREV_WK,
     MAC_PREV_WK,
     RETAIL_PREV_WK,
     OHX_QTY_PREV_WK,
     OHX_COST_PREV_WK,
     SALES_QTY_8WK,
     SALES_COST_8WK,
     MVT_QTY_PRV_4WK,
     MVT_QTY_PRV_8WK,
     MVT_QTY_PRV_12WK,
     MVT_QTY_PRV_20WK,
     MVT_QTY_PRV_28WK,
     MVT_QTY_PRV_36WK,
     MVT_QTY_PRV_44WK,
     MVT_QTY_PRV_52WK,
     MVT_QTY_PRV_65W,
     MVT_QTY_PRV_78W,
     MVT_QTY_PRV_91W,
     MVT_QTY_PRV_104W,
     MVT_QTY_PRV_117W,
     MVT_QTY_PRV_130W,
     MVT_QTY_PRV_143W,
     MVT_QTY_PRV_156W,
     XINTRANSCOST_PWK,
     FDOM_NBR
) AS
SELECT DM_AGED_INV_MVMNT.ROWID AS NZ_ROW_ID, DM_AGED_INV_MVMNT.CREATEXID, DM_AGED_INV_MVMNT.DELETEXID, DM_AGED_INV_MVMNT.WEEK_DT, DM_AGED_INV_MVMNT.LOCATION_ID, DM_AGED_INV_MVMNT.PRODUCT_ID, DM_AGED_INV_MVMNT.POG_IND_PREV_WK, DM_AGED_INV_MVMNT.MAC_PREV_WK, DM_AGED_INV_MVMNT.RETAIL_PREV_WK, DM_AGED_INV_MVMNT.OHX_QTY_PREV_WK, DM_AGED_INV_MVMNT.OHX_COST_PREV_WK, DM_AGED_INV_MVMNT.SALES_QTY_8WK, DM_AGED_INV_MVMNT.SALES_COST_8WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_4WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_8WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_12WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_20WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_28WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_36WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_44WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_52WK, DM_AGED_INV_MVMNT.MVT_QTY_PRV_65W, DM_AGED_INV_MVMNT.MVT_QTY_PRV_78W, DM_AGED_INV_MVMNT.MVT_QTY_PRV_91W, DM_AGED_INV_MVMNT.MVT_QTY_PRV_104W, DM_AGED_INV_MVMNT.MVT_QTY_PRV_117W, DM_AGED_INV_MVMNT.MVT_QTY_PRV_130W, DM_AGED_INV_MVMNT.MVT_QTY_PRV_143W, DM_AGED_INV_MVMNT.MVT_QTY_PRV_156W, DM_AGED_INV_MVMNT.XINTRANSCOST_PWK, DM_AGED_INV_MVMNT.FDOM_NBR FROM ADMIN.DM_AGED_INV_MVMNT;

\echo
\echo *****  Creating view:  "SDS_WORK_ORDER_RPT_ROCKY"

CREATE or replace VIEW  SDS_WORK_ORDER_RPT_ROCKY
(
     SDS_WORK_ORDER_ID,
     SDS_WORK_ORDER_NBR,
     SDS_ORDER_ID,
     SDS_ORDER_NBR,
     SDS_SERVICE_APPOINTMENT_ID,
     SDS_BOOKING_NBR,
     SDS_REDEMPTION_ID,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     LOCATION_ID,
     SDS_LOCATION_TYPE,
     APPT_TSTMP,
     SDS_WORK_ORDER_STATUS_ID,
     SDS_WORK_ORDER_STATUS_DESC,
     SDS_APPT_STATUS_ID,
     SDS_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SDS_APPT_CREATION_CHANNEL,
     SDS_ORDER_STATUS_ID,
     SDS_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SDS_SERVICE_CATEGORY_ID,
     SDS_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SDS_ACCOUNT_ID,
     PODS_CUSTOMER_ID,
     SVCS_CUSTOMER_GID,
     CUSTOMER_FIRST_NAME,
     CUSTOMER_LAST_NAME,
     CUSTOMER_PHONE_NBR,
     CUSTOMER_EMAIL_ADDR,
     CUSTOMER_ADDR1,
     CUSTOMER_ADDR2,
     CUSTOMER_CITY,
     CUSTOMER_STATE,
     CUSTOMER_POSTAL_CD,
     CUSTOMER_POSTAL_CD_EXT,
     CUSTOMER_COUNTRY_CD,
     CUSTOMER_DO_NOT_BOOKED_FLAG,
     CUSTOMER_DO_NOT_BOOKED_REASON,
     CUSTOMER_LOYALTY_FLAG,
     DIGITAL_LOYALTY_CUSTOMER_FLAG,
     RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     RECEIVE_TEXT_NOTIFICATION_FLAG,
     RECEIVE_PUSH_NOTIFICATION_FLAG,
     REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     PODS_PET_ID,
     SVCS_PET_GID,
     PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     SDS_PET_CREATE_TSTMP,
     BOARDED_GUEST_FLAG,
     CREATED_SDS_USER_ID,
     CREATED_SDS_USER_NAME,
     CREATED_SDS_USER_DISPLAY_NAME,
     CREATED_SDS_PROFILE_DESC,
     REQUESTED_SDS_EMPLOYEE_GROUP_ID,
     REQUESTED_SDS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SDS_EMPLOYEE_GROUP_ID,
     ASSIGNED_SDS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOKED_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SDS_CANCEL_REASON_ID,
     APPT_SDS_CANCEL_REASON_DESC,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     PRIMARY_SERVICE_PRODUCT_ID,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     SDS_PAYMENT_METHOD_ID,
     SDS_PAYMENT_METHOD_DESC,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     PAYMENT_ORIGIN,
     EXCH_RATE_PCT,
     WEIGHT_IN_LBS,
     LOAD_TSTMP
) AS
SELECT SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_ID, SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_NBR, SDS_WORK_ORDER_RPT.SDS_ORDER_ID, SDS_WORK_ORDER_RPT.SDS_ORDER_NBR, SDS_WORK_ORDER_RPT.SDS_SERVICE_APPOINTMENT_ID, SDS_WORK_ORDER_RPT.SDS_BOOKING_NBR, SDS_WORK_ORDER_RPT.SDS_REDEMPTION_ID, SDS_WORK_ORDER_RPT.PETM_POS_INVOICE_ID, SDS_WORK_ORDER_RPT.INVOICE_CREATE_TSTMP, SDS_WORK_ORDER_RPT.LOCATION_ID, SDS_WORK_ORDER_RPT.SDS_LOCATION_TYPE, SDS_WORK_ORDER_RPT.APPT_TSTMP, SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_STATUS_ID, SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_STATUS_DESC, SDS_WORK_ORDER_RPT.SDS_APPT_STATUS_ID, SDS_WORK_ORDER_RPT.SDS_APPT_STATUS_DESC, SDS_WORK_ORDER_RPT.SVCS_APPT_STATUS_GID, SDS_WORK_ORDER_RPT.SVCS_APPT_STATUS_DESC, SDS_WORK_ORDER_RPT.SDS_APPT_CREATION_CHANNEL, SDS_WORK_ORDER_RPT.SDS_ORDER_STATUS_ID, SDS_WORK_ORDER_RPT.SDS_ORDER_STATUS_DESC, SDS_WORK_ORDER_RPT.SVCS_ORDER_STATUS_GID, SDS_WORK_ORDER_RPT.SVCS_ORDER_STATUS_DESC, SDS_WORK_ORDER_RPT.ORDER_VOID_TSTMP, SDS_WORK_ORDER_RPT.ORDER_VOID_REASON, SDS_WORK_ORDER_RPT.SDS_SERVICE_CATEGORY_ID, SDS_WORK_ORDER_RPT.SDS_SERVICE_CATEGORY_DESC, SDS_WORK_ORDER_RPT.SVCS_SERVICE_CATEGORY_GID, SDS_WORK_ORDER_RPT.SVCS_SERVICE_CATEGORY_DESC, SDS_WORK_ORDER_RPT.SDS_ACCOUNT_ID, SDS_WORK_ORDER_RPT.PODS_CUSTOMER_ID, SDS_WORK_ORDER_RPT.SVCS_CUSTOMER_GID, SDS_WORK_ORDER_RPT.CUSTOMER_FIRST_NAME, SDS_WORK_ORDER_RPT.CUSTOMER_LAST_NAME, SDS_WORK_ORDER_RPT.CUSTOMER_PHONE_NBR, SDS_WORK_ORDER_RPT.CUSTOMER_EMAIL_ADDR, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_ADDR1, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR1, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_ADDR2, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR2, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_CITY, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_CITY, SDS_WORK_ORDER_RPT.CUSTOMER_STATE, SDS_WORK_ORDER_RPT.CUSTOMER_POSTAL_CD, SDS_WORK_ORDER_RPT.CUSTOMER_POSTAL_CD_EXT, SDS_WORK_ORDER_RPT.CUSTOMER_COUNTRY_CD, SDS_WORK_ORDER_RPT.CUSTOMER_DO_NOT_BOOKED_FLAG, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_DO_NOT_BOOKED_REASON, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_DO_NOT_BOOKED_REASON, SDS_WORK_ORDER_RPT.CUSTOMER_LOYALTY_FLAG, SDS_WORK_ORDER_RPT.DIGITAL_LOYALTY_CUSTOMER_FLAG, SDS_WORK_ORDER_RPT.RECEIVE_EMAIL_NOTIFICATIONS_FLAG, SDS_WORK_ORDER_RPT.RECEIVE_TEXT_NOTIFICATION_FLAG, SDS_WORK_ORDER_RPT.RECEIVE_PUSH_NOTIFICATION_FLAG, SDS_WORK_ORDER_RPT.REMINDER_CALL_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_GROOMING_NEW_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_HOTEL_NEW_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_DDC_NEW_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_TRAINING_NEW_FLAG, SDS_WORK_ORDER_RPT.PODS_PET_ID, SDS_WORK_ORDER_RPT.SVCS_PET_GID, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.PET_NAME, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS PET_NAME, SDS_WORK_ORDER_RPT.PETM_PET_SPECIES_ID, SDS_WORK_ORDER_RPT.PETM_PET_SPECIES_DESC, SDS_WORK_ORDER_RPT.PETM_PET_GENDER_ID, SDS_WORK_ORDER_RPT.PETM_PET_GENDER_DESC, SDS_WORK_ORDER_RPT.PETM_PET_BREED_ID, SDS_WORK_ORDER_RPT.PETM_PET_BREED_DESC, SDS_WORK_ORDER_RPT.MIXED_BREED_FLAG, SDS_WORK_ORDER_RPT.PETM_PET_COLOR_ID, SDS_WORK_ORDER_RPT.PETM_PET_COLOR_DESC, SDS_WORK_ORDER_RPT.PET_STATUS, SDS_WORK_ORDER_RPT.GROOMING_PET_RATING_DESC, SDS_WORK_ORDER_RPT.HOTEL_PET_RATING_DESC, SDS_WORK_ORDER_RPT.DDC_PET_RATING_DESC, SDS_WORK_ORDER_RPT.TRAINING_PET_RATING_DESC, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.GROOMING_NOTES, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS GROOMING_NOTES, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.GROOMING_SERVICE_CARD_ALERT_TEXT, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS GROOMING_SERVICE_CARD_ALERT_TEXT, SDS_WORK_ORDER_RPT.PET_BIRTH_DT, SDS_WORK_ORDER_RPT.BORDETELLA_EXP_DT, SDS_WORK_ORDER_RPT.RABIES_EXP_DT, SDS_WORK_ORDER_RPT.DISTEMPER_EXP_DT, SDS_WORK_ORDER_RPT.PARVOVIRUS_EXP_DT, SDS_WORK_ORDER_RPT.PARAINFLUENZA_EXP_DT, SDS_WORK_ORDER_RPT.FVRCCP_EXP_DT, SDS_WORK_ORDER_RPT.SDS_PET_CREATE_TSTMP, SDS_WORK_ORDER_RPT.BOARDED_GUEST_FLAG, SDS_WORK_ORDER_RPT.CREATED_SDS_USER_ID, SDS_WORK_ORDER_RPT.CREATED_SDS_USER_NAME, SDS_WORK_ORDER_RPT.CREATED_SDS_USER_DISPLAY_NAME, SDS_WORK_ORDER_RPT.CREATED_SDS_PROFILE_DESC, SDS_WORK_ORDER_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_ID, SDS_WORK_ORDER_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, SDS_WORK_ORDER_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_ID, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_FIRST_NAME, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_LAST_NAME, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_DISPLAY_NAME, SDS_WORK_ORDER_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_ID, SDS_WORK_ORDER_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, SDS_WORK_ORDER_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_ID, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_FIRST_NAME, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_LAST_NAME, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_DISPLAY_NAME, SDS_WORK_ORDER_RPT.ORDER_CREATE_TSTMP, SDS_WORK_ORDER_RPT.APPT_CREATE_TSTMP, SDS_WORK_ORDER_RPT.APPT_LAST_MODIFY_TSTMP, SDS_WORK_ORDER_RPT.APPT_UPDATE_FLAG, SDS_WORK_ORDER_RPT.APPT_CONFIRMED_TSTMP, SDS_WORK_ORDER_RPT.APPT_CONFIRMATION_CHANNEL, SDS_WORK_ORDER_RPT.APPT_CONFIRMED_BY, SDS_WORK_ORDER_RPT.MANUAL_APPOINTMENT_FLAG, SDS_WORK_ORDER_RPT.WALK_IN_FLAG, SDS_WORK_ORDER_RPT.PRE_CHECK_IN_FLAG, SDS_WORK_ORDER_RPT.REBOOKED_FLAG, SDS_WORK_ORDER_RPT.NO_SHOW_FLAG, SDS_WORK_ORDER_RPT.DUMMY_APPOINTMENT_FLAG, SDS_WORK_ORDER_RPT.SCHED_APPT_START_TSTMP, SDS_WORK_ORDER_RPT.SCHED_APPT_END_TSTMP, SDS_WORK_ORDER_RPT.APPT_CHECK_IN_TSTMP, SDS_WORK_ORDER_RPT.APPT_CHECK_OUT_TSTMP, SDS_WORK_ORDER_RPT.APPT_COMPLETE_FLAG, SDS_WORK_ORDER_RPT.APPT_CANCEL_TSTMP, SDS_WORK_ORDER_RPT.APPT_CANCEL_FLAG, SDS_WORK_ORDER_RPT.APPT_CANCELLATION_CHANNEL, SDS_WORK_ORDER_RPT.APPT_CANCELLED_BY, SDS_WORK_ORDER_RPT.APPT_SDS_CANCEL_REASON_ID, SDS_WORK_ORDER_RPT.APPT_SDS_CANCEL_REASON_DESC, SDS_WORK_ORDER_RPT.APPT_SVCS_CANCEL_REASON_GID, SDS_WORK_ORDER_RPT.APPT_SVCS_CANCEL_REASON_DESC, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_ID, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_LAST_NAME, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, SDS_WORK_ORDER_RPT.PRIMARY_SERVICE_PRODUCT_ID, SDS_WORK_ORDER_RPT.APPT_TOTAL_PRICE_AMT, SDS_WORK_ORDER_RPT.APPT_TOTAL_ITEM_QTY, SDS_WORK_ORDER_RPT.APPT_PAYMENT_TSTMP, SDS_WORK_ORDER_RPT.APPT_PAYMENT_AMT, SDS_WORK_ORDER_RPT.SDS_PAYMENT_METHOD_ID, SDS_WORK_ORDER_RPT.SDS_PAYMENT_METHOD_DESC, SDS_WORK_ORDER_RPT.APPT_SVCS_PAYMENT_METHOD_GID, SDS_WORK_ORDER_RPT.APPT_SVCS_PAYMENT_METHOD_DESC, SDS_WORK_ORDER_RPT.PAYMENT_ORIGIN, SDS_WORK_ORDER_RPT.EXCH_RATE_PCT, SDS_WORK_ORDER_RPT.WEIGHT_IN_LBS, SDS_WORK_ORDER_RPT.LOAD_TSTMP FROM ADMIN.SDS_WORK_ORDER_RPT WHERE (CASE WHEN (SDS_WORK_ORDER_RPT.APPT_TSTMP NOTNULL) THEN SDS_WORK_ORDER_RPT.APPT_TSTMP WHEN ('12/31/9999' NOTNULL) THEN '9999-12-31 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 30)));

\echo
\echo *****  Creating view:  "SDS_ORDER_ITEM_RPT_ROCKY"

CREATE or replace VIEW  SDS_ORDER_ITEM_RPT_ROCKY
(
     SDS_WORK_ORDER_ID,
     SDS_WORK_ORDER_NBR,
     SDS_ORDER_ITEM_ID,
     SDS_ORDER_ITEM_NBR,
     SDS_ORDER_ID,
     SDS_ORDER_NBR,
     SDS_SERVICE_APPOINTMENT_ID,
     SDS_REDEMPTION_ID,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     SDS_SERVICE_SUB_CATEGORY_ID,
     SDS_SERVICE_SUB_CATEGORY_DESC,
     SVCS_SERVICE_SUB_CATEGORY_GID,
     SVCS_SERVICE_SUB_CATEGORY_DESC,
     LOCATION_ID,
     SDS_LOCATION_TYPE,
     PRODUCT_ID,
     UPC_ID,
     PRIMARY_SERVICE_FLAG,
     INTERNAL_TAX_CLASS,
     EXTERNAL_TAX_CD,
     APPT_TSTMP,
     SDS_WORK_ORDER_STATUS_ID,
     SDS_WORK_ORDER_STATUS_DESC,
     SDS_APPT_STATUS_ID,
     SDS_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SDS_APPT_CREATION_CHANNEL,
     SDS_ORDER_STATUS_ID,
     SDS_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SDS_SERVICE_CATEGORY_ID,
     SDS_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SDS_ACCOUNT_ID,
     PODS_CUSTOMER_ID,
     SVCS_CUSTOMER_GID,
     CUSTOMER_FIRST_NAME,
     CUSTOMER_LAST_NAME,
     CUSTOMER_PHONE_NBR,
     CUSTOMER_EMAIL_ADDR,
     CUSTOMER_ADDR1,
     CUSTOMER_ADDR2,
     CUSTOMER_CITY,
     CUSTOMER_STATE,
     CUSTOMER_POSTAL_CD,
     CUSTOMER_POSTAL_CD_EXT,
     CUSTOMER_COUNTRY_CD,
     CUSTOMER_DO_NOT_BOOKED_FLAG,
     CUSTOMER_DO_NOT_BOOKED_REASON,
     CUSTOMER_LOYALTY_FLAG,
     DIGITAL_LOYALTY_CUSTOMER_FLAG,
     RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     RECEIVE_TEXT_NOTIFICATION_FLAG,
     RECEIVE_PUSH_NOTIFICATION_FLAG,
     REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     PODS_PET_ID,
     SVCS_PET_GID,
     PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     SDS_PET_CREATE_TSTMP,
     BOARDED_GUEST_FLAG,
     CREATED_SDS_USER_ID,
     CREATED_SDS_USER_NAME,
     CREATED_SDS_USER_DISPLAY_NAME,
     CREATED_SDS_PROFILE_DESC,
     REQUESTED_SDS_EMPLOYEE_GROUP_ID,
     REQUESTED_SDS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SDS_EMPLOYEE_GROUP_ID,
     ASSIGNED_SDS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_SERVICE_CREATE_TSTMP,
     APPT_SERVICE_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_SERVICE_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     PREPAID_FLAG,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOKED_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     SCHED_APPT_SERVICE_START_TSTMP,
     SCHED_APPT_SERVICE_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_SERVICE_START_TSTMP,
     APPT_SERVICE_END_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_SERVICE_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_SERVICE_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_SERVICE_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SDS_CANCEL_REASON_ID,
     APPT_SDS_CANCEL_REASON_DESC,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_SERVICE_ITEM_QTY,
     ORIG_UNIT_PRICE_AMT,
     LIST_PRICE_AMT,
     FINAL_UNIT_PRICE_AMT,
     TOTAL_GROOM_PAY_PRICE_AMT,
     SDS_PRICE_OVERRIDE_REASON_ID,
     SDS_PRICE_OVERRIDE_REASON_DESC,
     SVCS_PRICE_OVERRIDE_REASON_GID,
     SVCS_PRICE_OVERRIDE_REASON_DESC,
     APPT_SERVICE_PRICE_OVERRIDE_TSTMP,
     EMPLOYEE_COMMISSION_RATE_PCT,
     EMPLOYEE_COMMISSION_AMT,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     SDS_PAYMENT_METHOD_ID,
     SDS_PAYMENT_METHOD_DESC,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     PAYMENT_ORIGIN,
     EXCH_RATE_PCT,
     WEIGHT_IN_LBS,
     LOAD_TSTMP
) AS
SELECT SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_ID, SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_NBR, SDS_ORDER_ITEM_RPT.SDS_ORDER_ITEM_ID, SDS_ORDER_ITEM_RPT.SDS_ORDER_ITEM_NBR, SDS_ORDER_ITEM_RPT.SDS_ORDER_ID, SDS_ORDER_ITEM_RPT.SDS_ORDER_NBR, SDS_ORDER_ITEM_RPT.SDS_SERVICE_APPOINTMENT_ID, SDS_ORDER_ITEM_RPT.SDS_REDEMPTION_ID, SDS_ORDER_ITEM_RPT.PETM_POS_INVOICE_ID, SDS_ORDER_ITEM_RPT.INVOICE_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.SDS_SERVICE_SUB_CATEGORY_ID, SDS_ORDER_ITEM_RPT.SDS_SERVICE_SUB_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_SUB_CATEGORY_GID, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_SUB_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.LOCATION_ID, SDS_ORDER_ITEM_RPT.SDS_LOCATION_TYPE, SDS_ORDER_ITEM_RPT.PRODUCT_ID, SDS_ORDER_ITEM_RPT.UPC_ID, SDS_ORDER_ITEM_RPT.PRIMARY_SERVICE_FLAG, SDS_ORDER_ITEM_RPT.INTERNAL_TAX_CLASS, SDS_ORDER_ITEM_RPT.EXTERNAL_TAX_CD, SDS_ORDER_ITEM_RPT.APPT_TSTMP, SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_STATUS_ID, SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_STATUS_DESC, SDS_ORDER_ITEM_RPT.SDS_APPT_STATUS_ID, SDS_ORDER_ITEM_RPT.SDS_APPT_STATUS_DESC, SDS_ORDER_ITEM_RPT.SVCS_APPT_STATUS_GID, SDS_ORDER_ITEM_RPT.SVCS_APPT_STATUS_DESC, SDS_ORDER_ITEM_RPT.SDS_APPT_CREATION_CHANNEL, SDS_ORDER_ITEM_RPT.SDS_ORDER_STATUS_ID, SDS_ORDER_ITEM_RPT.SDS_ORDER_STATUS_DESC, SDS_ORDER_ITEM_RPT.SVCS_ORDER_STATUS_GID, SDS_ORDER_ITEM_RPT.SVCS_ORDER_STATUS_DESC, SDS_ORDER_ITEM_RPT.ORDER_VOID_TSTMP, SDS_ORDER_ITEM_RPT.ORDER_VOID_REASON, SDS_ORDER_ITEM_RPT.SDS_SERVICE_CATEGORY_ID, SDS_ORDER_ITEM_RPT.SDS_SERVICE_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_CATEGORY_GID, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.SDS_ACCOUNT_ID, SDS_ORDER_ITEM_RPT.PODS_CUSTOMER_ID, SDS_ORDER_ITEM_RPT.SVCS_CUSTOMER_GID, SDS_ORDER_ITEM_RPT.CUSTOMER_FIRST_NAME, SDS_ORDER_ITEM_RPT.CUSTOMER_LAST_NAME, SDS_ORDER_ITEM_RPT.CUSTOMER_PHONE_NBR, SDS_ORDER_ITEM_RPT.CUSTOMER_EMAIL_ADDR, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_ADDR1, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR1, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_ADDR2, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR2, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_CITY, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_CITY, SDS_ORDER_ITEM_RPT.CUSTOMER_STATE, SDS_ORDER_ITEM_RPT.CUSTOMER_POSTAL_CD, SDS_ORDER_ITEM_RPT.CUSTOMER_POSTAL_CD_EXT, SDS_ORDER_ITEM_RPT.CUSTOMER_COUNTRY_CD, SDS_ORDER_ITEM_RPT.CUSTOMER_DO_NOT_BOOKED_FLAG, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_DO_NOT_BOOKED_REASON, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_DO_NOT_BOOKED_REASON, SDS_ORDER_ITEM_RPT.CUSTOMER_LOYALTY_FLAG, SDS_ORDER_ITEM_RPT.DIGITAL_LOYALTY_CUSTOMER_FLAG, SDS_ORDER_ITEM_RPT.RECEIVE_EMAIL_NOTIFICATIONS_FLAG, SDS_ORDER_ITEM_RPT.RECEIVE_TEXT_NOTIFICATION_FLAG, SDS_ORDER_ITEM_RPT.RECEIVE_PUSH_NOTIFICATION_FLAG, SDS_ORDER_ITEM_RPT.REMINDER_CALL_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_GROOMING_NEW_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_HOTEL_NEW_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_DDC_NEW_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_TRAINING_NEW_FLAG, SDS_ORDER_ITEM_RPT.PODS_PET_ID, SDS_ORDER_ITEM_RPT.SVCS_PET_GID, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.PET_NAME, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS PET_NAME, SDS_ORDER_ITEM_RPT.PETM_PET_SPECIES_ID, SDS_ORDER_ITEM_RPT.PETM_PET_SPECIES_DESC, SDS_ORDER_ITEM_RPT.PETM_PET_GENDER_ID, SDS_ORDER_ITEM_RPT.PETM_PET_GENDER_DESC, SDS_ORDER_ITEM_RPT.PETM_PET_BREED_ID, SDS_ORDER_ITEM_RPT.PETM_PET_BREED_DESC, SDS_ORDER_ITEM_RPT.MIXED_BREED_FLAG, SDS_ORDER_ITEM_RPT.PETM_PET_COLOR_ID, SDS_ORDER_ITEM_RPT.PETM_PET_COLOR_DESC, SDS_ORDER_ITEM_RPT.PET_STATUS, SDS_ORDER_ITEM_RPT.GROOMING_PET_RATING_DESC, SDS_ORDER_ITEM_RPT.HOTEL_PET_RATING_DESC, SDS_ORDER_ITEM_RPT.DDC_PET_RATING_DESC, SDS_ORDER_ITEM_RPT.TRAINING_PET_RATING_DESC, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.GROOMING_NOTES, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS GROOMING_NOTES, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.GROOMING_SERVICE_CARD_ALERT_TEXT, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS GROOMING_SERVICE_CARD_ALERT_TEXT, SDS_ORDER_ITEM_RPT.PET_BIRTH_DT, SDS_ORDER_ITEM_RPT.BORDETELLA_EXP_DT, SDS_ORDER_ITEM_RPT.RABIES_EXP_DT, SDS_ORDER_ITEM_RPT.DISTEMPER_EXP_DT, SDS_ORDER_ITEM_RPT.PARVOVIRUS_EXP_DT, SDS_ORDER_ITEM_RPT.PARAINFLUENZA_EXP_DT, SDS_ORDER_ITEM_RPT.FVRCCP_EXP_DT, SDS_ORDER_ITEM_RPT.SDS_PET_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.BOARDED_GUEST_FLAG, SDS_ORDER_ITEM_RPT.CREATED_SDS_USER_ID, SDS_ORDER_ITEM_RPT.CREATED_SDS_USER_NAME, SDS_ORDER_ITEM_RPT.CREATED_SDS_USER_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.CREATED_SDS_PROFILE_DESC, SDS_ORDER_ITEM_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_ID, SDS_ORDER_ITEM_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, SDS_ORDER_ITEM_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_ID, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_FIRST_NAME, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_LAST_NAME, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_ID, SDS_ORDER_ITEM_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, SDS_ORDER_ITEM_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_ID, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_FIRST_NAME, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_LAST_NAME, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.ORDER_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.APPT_LAST_MODIFY_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_LAST_MODIFY_TSTMP, SDS_ORDER_ITEM_RPT.APPT_UPDATE_FLAG, SDS_ORDER_ITEM_RPT.APPT_SERVICE_UPDATE_FLAG, SDS_ORDER_ITEM_RPT.APPT_CONFIRMED_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CONFIRMATION_CHANNEL, SDS_ORDER_ITEM_RPT.APPT_CONFIRMED_BY, SDS_ORDER_ITEM_RPT.PREPAID_FLAG, SDS_ORDER_ITEM_RPT.MANUAL_APPOINTMENT_FLAG, SDS_ORDER_ITEM_RPT.WALK_IN_FLAG, SDS_ORDER_ITEM_RPT.PRE_CHECK_IN_FLAG, SDS_ORDER_ITEM_RPT.REBOOKED_FLAG, SDS_ORDER_ITEM_RPT.NO_SHOW_FLAG, SDS_ORDER_ITEM_RPT.DUMMY_APPOINTMENT_FLAG, SDS_ORDER_ITEM_RPT.SCHED_APPT_START_TSTMP, SDS_ORDER_ITEM_RPT.SCHED_APPT_END_TSTMP, SDS_ORDER_ITEM_RPT.SCHED_APPT_SERVICE_START_TSTMP, SDS_ORDER_ITEM_RPT.SCHED_APPT_SERVICE_END_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CHECK_IN_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CHECK_OUT_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_START_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_END_TSTMP, SDS_ORDER_ITEM_RPT.APPT_COMPLETE_FLAG, SDS_ORDER_ITEM_RPT.APPT_SERVICE_COMPLETE_FLAG, SDS_ORDER_ITEM_RPT.APPT_CANCEL_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_CANCEL_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CANCEL_FLAG, SDS_ORDER_ITEM_RPT.APPT_SERVICE_CANCEL_FLAG, SDS_ORDER_ITEM_RPT.APPT_CANCELLATION_CHANNEL, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_BY, SDS_ORDER_ITEM_RPT.APPT_SDS_CANCEL_REASON_ID, SDS_ORDER_ITEM_RPT.APPT_SDS_CANCEL_REASON_DESC, SDS_ORDER_ITEM_RPT.APPT_SVCS_CANCEL_REASON_GID, SDS_ORDER_ITEM_RPT.APPT_SVCS_CANCEL_REASON_DESC, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_ID, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_LAST_NAME, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.APPT_TOTAL_PRICE_AMT, SDS_ORDER_ITEM_RPT.APPT_TOTAL_ITEM_QTY, SDS_ORDER_ITEM_RPT.APPT_SERVICE_ITEM_QTY, SDS_ORDER_ITEM_RPT.ORIG_UNIT_PRICE_AMT, SDS_ORDER_ITEM_RPT.LIST_PRICE_AMT, SDS_ORDER_ITEM_RPT.FINAL_UNIT_PRICE_AMT, SDS_ORDER_ITEM_RPT.TOTAL_GROOM_PAY_PRICE_AMT, SDS_ORDER_ITEM_RPT.SDS_PRICE_OVERRIDE_REASON_ID, SDS_ORDER_ITEM_RPT.SDS_PRICE_OVERRIDE_REASON_DESC, SDS_ORDER_ITEM_RPT.SVCS_PRICE_OVERRIDE_REASON_GID, SDS_ORDER_ITEM_RPT.SVCS_PRICE_OVERRIDE_REASON_DESC, SDS_ORDER_ITEM_RPT.APPT_SERVICE_PRICE_OVERRIDE_TSTMP, SDS_ORDER_ITEM_RPT.EMPLOYEE_COMMISSION_RATE_PCT, SDS_ORDER_ITEM_RPT.EMPLOYEE_COMMISSION_AMT, SDS_ORDER_ITEM_RPT.APPT_PAYMENT_TSTMP, SDS_ORDER_ITEM_RPT.APPT_PAYMENT_AMT, SDS_ORDER_ITEM_RPT.SDS_PAYMENT_METHOD_ID, SDS_ORDER_ITEM_RPT.SDS_PAYMENT_METHOD_DESC, SDS_ORDER_ITEM_RPT.APPT_SVCS_PAYMENT_METHOD_GID, SDS_ORDER_ITEM_RPT.APPT_SVCS_PAYMENT_METHOD_DESC, SDS_ORDER_ITEM_RPT.PAYMENT_ORIGIN, SDS_ORDER_ITEM_RPT.EXCH_RATE_PCT, SDS_ORDER_ITEM_RPT.WEIGHT_IN_LBS, SDS_ORDER_ITEM_RPT.LOAD_TSTMP FROM ADMIN.SDS_ORDER_ITEM_RPT WHERE (CASE WHEN (SDS_ORDER_ITEM_RPT.APPT_TSTMP NOTNULL) THEN SDS_ORDER_ITEM_RPT.APPT_TSTMP WHEN ('12/31/9999' NOTNULL) THEN '9999-12-31 00:00:00'::"TIMESTAMP" ELSE NULL::"TIMESTAMP" END >= "TIMESTAMP"((DATE('now(0)'::"VARCHAR") - 30)));

\echo
\echo *****  Creating view:  "SDS_WORK_ORDER_RPT_ROCKY_HIST"

CREATE or replace VIEW  SDS_WORK_ORDER_RPT_ROCKY_HIST
(
     SDS_WORK_ORDER_ID,
     SDS_WORK_ORDER_NBR,
     SDS_ORDER_ID,
     SDS_ORDER_NBR,
     SDS_SERVICE_APPOINTMENT_ID,
     SDS_BOOKING_NBR,
     SDS_REDEMPTION_ID,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     LOCATION_ID,
     SDS_LOCATION_TYPE,
     APPT_TSTMP,
     SDS_WORK_ORDER_STATUS_ID,
     SDS_WORK_ORDER_STATUS_DESC,
     SDS_APPT_STATUS_ID,
     SDS_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SDS_APPT_CREATION_CHANNEL,
     SDS_ORDER_STATUS_ID,
     SDS_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SDS_SERVICE_CATEGORY_ID,
     SDS_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SDS_ACCOUNT_ID,
     PODS_CUSTOMER_ID,
     SVCS_CUSTOMER_GID,
     CUSTOMER_FIRST_NAME,
     CUSTOMER_LAST_NAME,
     CUSTOMER_PHONE_NBR,
     CUSTOMER_EMAIL_ADDR,
     CUSTOMER_ADDR1,
     CUSTOMER_ADDR2,
     CUSTOMER_CITY,
     CUSTOMER_STATE,
     CUSTOMER_POSTAL_CD,
     CUSTOMER_POSTAL_CD_EXT,
     CUSTOMER_COUNTRY_CD,
     CUSTOMER_DO_NOT_BOOKED_FLAG,
     CUSTOMER_DO_NOT_BOOKED_REASON,
     CUSTOMER_LOYALTY_FLAG,
     DIGITAL_LOYALTY_CUSTOMER_FLAG,
     RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     RECEIVE_TEXT_NOTIFICATION_FLAG,
     RECEIVE_PUSH_NOTIFICATION_FLAG,
     REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     PODS_PET_ID,
     SVCS_PET_GID,
     PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     SDS_PET_CREATE_TSTMP,
     BOARDED_GUEST_FLAG,
     CREATED_SDS_USER_ID,
     CREATED_SDS_USER_NAME,
     CREATED_SDS_USER_DISPLAY_NAME,
     CREATED_SDS_PROFILE_DESC,
     REQUESTED_SDS_EMPLOYEE_GROUP_ID,
     REQUESTED_SDS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SDS_EMPLOYEE_GROUP_ID,
     ASSIGNED_SDS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOKED_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SDS_CANCEL_REASON_ID,
     APPT_SDS_CANCEL_REASON_DESC,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     PRIMARY_SERVICE_PRODUCT_ID,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     SDS_PAYMENT_METHOD_ID,
     SDS_PAYMENT_METHOD_DESC,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     PAYMENT_ORIGIN,
     EXCH_RATE_PCT,
     WEIGHT_IN_LBS,
     LOAD_TSTMP
) AS
SELECT SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_ID, SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_NBR, SDS_WORK_ORDER_RPT.SDS_ORDER_ID, SDS_WORK_ORDER_RPT.SDS_ORDER_NBR, SDS_WORK_ORDER_RPT.SDS_SERVICE_APPOINTMENT_ID, SDS_WORK_ORDER_RPT.SDS_BOOKING_NBR, SDS_WORK_ORDER_RPT.SDS_REDEMPTION_ID, SDS_WORK_ORDER_RPT.PETM_POS_INVOICE_ID, SDS_WORK_ORDER_RPT.INVOICE_CREATE_TSTMP, SDS_WORK_ORDER_RPT.LOCATION_ID, SDS_WORK_ORDER_RPT.SDS_LOCATION_TYPE, SDS_WORK_ORDER_RPT.APPT_TSTMP, SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_STATUS_ID, SDS_WORK_ORDER_RPT.SDS_WORK_ORDER_STATUS_DESC, SDS_WORK_ORDER_RPT.SDS_APPT_STATUS_ID, SDS_WORK_ORDER_RPT.SDS_APPT_STATUS_DESC, SDS_WORK_ORDER_RPT.SVCS_APPT_STATUS_GID, SDS_WORK_ORDER_RPT.SVCS_APPT_STATUS_DESC, SDS_WORK_ORDER_RPT.SDS_APPT_CREATION_CHANNEL, SDS_WORK_ORDER_RPT.SDS_ORDER_STATUS_ID, SDS_WORK_ORDER_RPT.SDS_ORDER_STATUS_DESC, SDS_WORK_ORDER_RPT.SVCS_ORDER_STATUS_GID, SDS_WORK_ORDER_RPT.SVCS_ORDER_STATUS_DESC, SDS_WORK_ORDER_RPT.ORDER_VOID_TSTMP, SDS_WORK_ORDER_RPT.ORDER_VOID_REASON, SDS_WORK_ORDER_RPT.SDS_SERVICE_CATEGORY_ID, SDS_WORK_ORDER_RPT.SDS_SERVICE_CATEGORY_DESC, SDS_WORK_ORDER_RPT.SVCS_SERVICE_CATEGORY_GID, SDS_WORK_ORDER_RPT.SVCS_SERVICE_CATEGORY_DESC, SDS_WORK_ORDER_RPT.SDS_ACCOUNT_ID, SDS_WORK_ORDER_RPT.PODS_CUSTOMER_ID, SDS_WORK_ORDER_RPT.SVCS_CUSTOMER_GID, SDS_WORK_ORDER_RPT.CUSTOMER_FIRST_NAME, SDS_WORK_ORDER_RPT.CUSTOMER_LAST_NAME, SDS_WORK_ORDER_RPT.CUSTOMER_PHONE_NBR, SDS_WORK_ORDER_RPT.CUSTOMER_EMAIL_ADDR, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_ADDR1, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR1, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_ADDR2, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR2, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_CITY, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_CITY, SDS_WORK_ORDER_RPT.CUSTOMER_STATE, SDS_WORK_ORDER_RPT.CUSTOMER_POSTAL_CD, SDS_WORK_ORDER_RPT.CUSTOMER_POSTAL_CD_EXT, SDS_WORK_ORDER_RPT.CUSTOMER_COUNTRY_CD, SDS_WORK_ORDER_RPT.CUSTOMER_DO_NOT_BOOKED_FLAG, TRANSLATE(TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.CUSTOMER_DO_NOT_BOOKED_REASON, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR"), '\'::"VARCHAR", '/'::"VARCHAR") AS CUSTOMER_DO_NOT_BOOKED_REASON, SDS_WORK_ORDER_RPT.CUSTOMER_LOYALTY_FLAG, SDS_WORK_ORDER_RPT.DIGITAL_LOYALTY_CUSTOMER_FLAG, SDS_WORK_ORDER_RPT.RECEIVE_EMAIL_NOTIFICATIONS_FLAG, SDS_WORK_ORDER_RPT.RECEIVE_TEXT_NOTIFICATION_FLAG, SDS_WORK_ORDER_RPT.RECEIVE_PUSH_NOTIFICATION_FLAG, SDS_WORK_ORDER_RPT.REMINDER_CALL_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_GROOMING_NEW_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_HOTEL_NEW_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_DDC_NEW_FLAG, SDS_WORK_ORDER_RPT.CUSTOMER_TRAINING_NEW_FLAG, SDS_WORK_ORDER_RPT.PODS_PET_ID, SDS_WORK_ORDER_RPT.SVCS_PET_GID, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.PET_NAME, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS PET_NAME, SDS_WORK_ORDER_RPT.PETM_PET_SPECIES_ID, SDS_WORK_ORDER_RPT.PETM_PET_SPECIES_DESC, SDS_WORK_ORDER_RPT.PETM_PET_GENDER_ID, SDS_WORK_ORDER_RPT.PETM_PET_GENDER_DESC, SDS_WORK_ORDER_RPT.PETM_PET_BREED_ID, SDS_WORK_ORDER_RPT.PETM_PET_BREED_DESC, SDS_WORK_ORDER_RPT.MIXED_BREED_FLAG, SDS_WORK_ORDER_RPT.PETM_PET_COLOR_ID, SDS_WORK_ORDER_RPT.PETM_PET_COLOR_DESC, SDS_WORK_ORDER_RPT.PET_STATUS, SDS_WORK_ORDER_RPT.GROOMING_PET_RATING_DESC, SDS_WORK_ORDER_RPT.HOTEL_PET_RATING_DESC, SDS_WORK_ORDER_RPT.DDC_PET_RATING_DESC, SDS_WORK_ORDER_RPT.TRAINING_PET_RATING_DESC, TRANSLATE(TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.GROOMING_NOTES, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR"), '\'::"VARCHAR", '/'::"VARCHAR") AS GROOMING_NOTES, TRANSLATE(TRANSLATE(SDS_WORK_ORDER_RPT.GROOMING_SERVICE_CARD_ALERT_TEXT, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS GROOMING_SERVICE_CARD_ALERT_TEXT, SDS_WORK_ORDER_RPT.PET_BIRTH_DT, SDS_WORK_ORDER_RPT.BORDETELLA_EXP_DT, SDS_WORK_ORDER_RPT.RABIES_EXP_DT, SDS_WORK_ORDER_RPT.DISTEMPER_EXP_DT, SDS_WORK_ORDER_RPT.PARVOVIRUS_EXP_DT, SDS_WORK_ORDER_RPT.PARAINFLUENZA_EXP_DT, SDS_WORK_ORDER_RPT.FVRCCP_EXP_DT, SDS_WORK_ORDER_RPT.SDS_PET_CREATE_TSTMP, SDS_WORK_ORDER_RPT.BOARDED_GUEST_FLAG, SDS_WORK_ORDER_RPT.CREATED_SDS_USER_ID, SDS_WORK_ORDER_RPT.CREATED_SDS_USER_NAME, SDS_WORK_ORDER_RPT.CREATED_SDS_USER_DISPLAY_NAME, SDS_WORK_ORDER_RPT.CREATED_SDS_PROFILE_DESC, SDS_WORK_ORDER_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_ID, SDS_WORK_ORDER_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, SDS_WORK_ORDER_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_ID, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_FIRST_NAME, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_LAST_NAME, SDS_WORK_ORDER_RPT.REQUESTED_EMPLOYEE_DISPLAY_NAME, SDS_WORK_ORDER_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_ID, SDS_WORK_ORDER_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, SDS_WORK_ORDER_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_ID, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_FIRST_NAME, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_LAST_NAME, SDS_WORK_ORDER_RPT.ASSIGNED_EMPLOYEE_DISPLAY_NAME, SDS_WORK_ORDER_RPT.ORDER_CREATE_TSTMP, SDS_WORK_ORDER_RPT.APPT_CREATE_TSTMP, SDS_WORK_ORDER_RPT.APPT_LAST_MODIFY_TSTMP, SDS_WORK_ORDER_RPT.APPT_UPDATE_FLAG, SDS_WORK_ORDER_RPT.APPT_CONFIRMED_TSTMP, SDS_WORK_ORDER_RPT.APPT_CONFIRMATION_CHANNEL, SDS_WORK_ORDER_RPT.APPT_CONFIRMED_BY, SDS_WORK_ORDER_RPT.MANUAL_APPOINTMENT_FLAG, SDS_WORK_ORDER_RPT.WALK_IN_FLAG, SDS_WORK_ORDER_RPT.PRE_CHECK_IN_FLAG, SDS_WORK_ORDER_RPT.REBOOKED_FLAG, SDS_WORK_ORDER_RPT.NO_SHOW_FLAG, SDS_WORK_ORDER_RPT.DUMMY_APPOINTMENT_FLAG, SDS_WORK_ORDER_RPT.SCHED_APPT_START_TSTMP, SDS_WORK_ORDER_RPT.SCHED_APPT_END_TSTMP, SDS_WORK_ORDER_RPT.APPT_CHECK_IN_TSTMP, SDS_WORK_ORDER_RPT.APPT_CHECK_OUT_TSTMP, SDS_WORK_ORDER_RPT.APPT_COMPLETE_FLAG, SDS_WORK_ORDER_RPT.APPT_CANCEL_TSTMP, SDS_WORK_ORDER_RPT.APPT_CANCEL_FLAG, SDS_WORK_ORDER_RPT.APPT_CANCELLATION_CHANNEL, SDS_WORK_ORDER_RPT.APPT_CANCELLED_BY, SDS_WORK_ORDER_RPT.APPT_SDS_CANCEL_REASON_ID, SDS_WORK_ORDER_RPT.APPT_SDS_CANCEL_REASON_DESC, SDS_WORK_ORDER_RPT.APPT_SVCS_CANCEL_REASON_GID, SDS_WORK_ORDER_RPT.APPT_SVCS_CANCEL_REASON_DESC, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_ID, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_LAST_NAME, SDS_WORK_ORDER_RPT.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, SDS_WORK_ORDER_RPT.PRIMARY_SERVICE_PRODUCT_ID, SDS_WORK_ORDER_RPT.APPT_TOTAL_PRICE_AMT, SDS_WORK_ORDER_RPT.APPT_TOTAL_ITEM_QTY, SDS_WORK_ORDER_RPT.APPT_PAYMENT_TSTMP, SDS_WORK_ORDER_RPT.APPT_PAYMENT_AMT, SDS_WORK_ORDER_RPT.SDS_PAYMENT_METHOD_ID, SDS_WORK_ORDER_RPT.SDS_PAYMENT_METHOD_DESC, SDS_WORK_ORDER_RPT.APPT_SVCS_PAYMENT_METHOD_GID, SDS_WORK_ORDER_RPT.APPT_SVCS_PAYMENT_METHOD_DESC, SDS_WORK_ORDER_RPT.PAYMENT_ORIGIN, SDS_WORK_ORDER_RPT.EXCH_RATE_PCT, SDS_WORK_ORDER_RPT.WEIGHT_IN_LBS, SDS_WORK_ORDER_RPT.LOAD_TSTMP FROM ADMIN.SDS_WORK_ORDER_RPT;

\echo
\echo *****  Creating view:  "SDS_ORDER_ITEM_RPT_ROCKY_HIST"

CREATE or replace VIEW  SDS_ORDER_ITEM_RPT_ROCKY_HIST
(
     SDS_WORK_ORDER_ID,
     SDS_WORK_ORDER_NBR,
     SDS_ORDER_ITEM_ID,
     SDS_ORDER_ITEM_NBR,
     SDS_ORDER_ID,
     SDS_ORDER_NBR,
     SDS_SERVICE_APPOINTMENT_ID,
     SDS_REDEMPTION_ID,
     PETM_POS_INVOICE_ID,
     INVOICE_CREATE_TSTMP,
     SDS_SERVICE_SUB_CATEGORY_ID,
     SDS_SERVICE_SUB_CATEGORY_DESC,
     SVCS_SERVICE_SUB_CATEGORY_GID,
     SVCS_SERVICE_SUB_CATEGORY_DESC,
     LOCATION_ID,
     SDS_LOCATION_TYPE,
     PRODUCT_ID,
     UPC_ID,
     PRIMARY_SERVICE_FLAG,
     INTERNAL_TAX_CLASS,
     EXTERNAL_TAX_CD,
     APPT_TSTMP,
     SDS_WORK_ORDER_STATUS_ID,
     SDS_WORK_ORDER_STATUS_DESC,
     SDS_APPT_STATUS_ID,
     SDS_APPT_STATUS_DESC,
     SVCS_APPT_STATUS_GID,
     SVCS_APPT_STATUS_DESC,
     SDS_APPT_CREATION_CHANNEL,
     SDS_ORDER_STATUS_ID,
     SDS_ORDER_STATUS_DESC,
     SVCS_ORDER_STATUS_GID,
     SVCS_ORDER_STATUS_DESC,
     ORDER_VOID_TSTMP,
     ORDER_VOID_REASON,
     SDS_SERVICE_CATEGORY_ID,
     SDS_SERVICE_CATEGORY_DESC,
     SVCS_SERVICE_CATEGORY_GID,
     SVCS_SERVICE_CATEGORY_DESC,
     SDS_ACCOUNT_ID,
     PODS_CUSTOMER_ID,
     SVCS_CUSTOMER_GID,
     CUSTOMER_FIRST_NAME,
     CUSTOMER_LAST_NAME,
     CUSTOMER_PHONE_NBR,
     CUSTOMER_EMAIL_ADDR,
     CUSTOMER_ADDR1,
     CUSTOMER_ADDR2,
     CUSTOMER_CITY,
     CUSTOMER_STATE,
     CUSTOMER_POSTAL_CD,
     CUSTOMER_POSTAL_CD_EXT,
     CUSTOMER_COUNTRY_CD,
     CUSTOMER_DO_NOT_BOOKED_FLAG,
     CUSTOMER_DO_NOT_BOOKED_REASON,
     CUSTOMER_LOYALTY_FLAG,
     DIGITAL_LOYALTY_CUSTOMER_FLAG,
     RECEIVE_EMAIL_NOTIFICATIONS_FLAG,
     RECEIVE_TEXT_NOTIFICATION_FLAG,
     RECEIVE_PUSH_NOTIFICATION_FLAG,
     REMINDER_CALL_FLAG,
     CUSTOMER_GROOMING_NEW_FLAG,
     CUSTOMER_HOTEL_NEW_FLAG,
     CUSTOMER_DDC_NEW_FLAG,
     CUSTOMER_TRAINING_NEW_FLAG,
     PODS_PET_ID,
     SVCS_PET_GID,
     PET_NAME,
     PETM_PET_SPECIES_ID,
     PETM_PET_SPECIES_DESC,
     PETM_PET_GENDER_ID,
     PETM_PET_GENDER_DESC,
     PETM_PET_BREED_ID,
     PETM_PET_BREED_DESC,
     MIXED_BREED_FLAG,
     PETM_PET_COLOR_ID,
     PETM_PET_COLOR_DESC,
     PET_STATUS,
     GROOMING_PET_RATING_DESC,
     HOTEL_PET_RATING_DESC,
     DDC_PET_RATING_DESC,
     TRAINING_PET_RATING_DESC,
     GROOMING_NOTES,
     GROOMING_SERVICE_CARD_ALERT_TEXT,
     PET_BIRTH_DT,
     BORDETELLA_EXP_DT,
     RABIES_EXP_DT,
     DISTEMPER_EXP_DT,
     PARVOVIRUS_EXP_DT,
     PARAINFLUENZA_EXP_DT,
     FVRCCP_EXP_DT,
     SDS_PET_CREATE_TSTMP,
     BOARDED_GUEST_FLAG,
     CREATED_SDS_USER_ID,
     CREATED_SDS_USER_NAME,
     CREATED_SDS_USER_DISPLAY_NAME,
     CREATED_SDS_PROFILE_DESC,
     REQUESTED_SDS_EMPLOYEE_GROUP_ID,
     REQUESTED_SDS_EMPLOYEE_GROUP_DESC,
     REQUESTED_SVCS_EMPLOYEE_GROUP_GID,
     REQUESTED_SVCS_EMPLOYEE_GROUP_DESC,
     REQUESTED_EMPLOYEE_ID,
     REQUESTED_EMPLOYEE_FIRST_NAME,
     REQUESTED_EMPLOYEE_LAST_NAME,
     REQUESTED_EMPLOYEE_DISPLAY_NAME,
     ASSIGNED_SDS_EMPLOYEE_GROUP_ID,
     ASSIGNED_SDS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_GID,
     ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC,
     ASSIGNED_EMPLOYEE_ID,
     ASSIGNED_EMPLOYEE_FIRST_NAME,
     ASSIGNED_EMPLOYEE_LAST_NAME,
     ASSIGNED_EMPLOYEE_DISPLAY_NAME,
     ORDER_CREATE_TSTMP,
     APPT_CREATE_TSTMP,
     APPT_LAST_MODIFY_TSTMP,
     APPT_SERVICE_CREATE_TSTMP,
     APPT_SERVICE_LAST_MODIFY_TSTMP,
     APPT_UPDATE_FLAG,
     APPT_SERVICE_UPDATE_FLAG,
     APPT_CONFIRMED_TSTMP,
     APPT_CONFIRMATION_CHANNEL,
     APPT_CONFIRMED_BY,
     PREPAID_FLAG,
     MANUAL_APPOINTMENT_FLAG,
     WALK_IN_FLAG,
     PRE_CHECK_IN_FLAG,
     REBOOKED_FLAG,
     NO_SHOW_FLAG,
     DUMMY_APPOINTMENT_FLAG,
     SCHED_APPT_START_TSTMP,
     SCHED_APPT_END_TSTMP,
     SCHED_APPT_SERVICE_START_TSTMP,
     SCHED_APPT_SERVICE_END_TSTMP,
     APPT_CHECK_IN_TSTMP,
     APPT_CHECK_OUT_TSTMP,
     APPT_SERVICE_START_TSTMP,
     APPT_SERVICE_END_TSTMP,
     APPT_COMPLETE_FLAG,
     APPT_SERVICE_COMPLETE_FLAG,
     APPT_CANCEL_TSTMP,
     APPT_SERVICE_CANCEL_TSTMP,
     APPT_CANCEL_FLAG,
     APPT_SERVICE_CANCEL_FLAG,
     APPT_CANCELLATION_CHANNEL,
     APPT_CANCELLED_BY,
     APPT_SDS_CANCEL_REASON_ID,
     APPT_SDS_CANCEL_REASON_DESC,
     APPT_SVCS_CANCEL_REASON_GID,
     APPT_SVCS_CANCEL_REASON_DESC,
     APPT_CANCELLED_EMPLOYEE_ID,
     APPT_CANCELLED_EMPLOYEE_FIRST_NAME,
     APPT_CANCELLED_EMPLOYEE_LAST_NAME,
     APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME,
     APPT_TOTAL_PRICE_AMT,
     APPT_TOTAL_ITEM_QTY,
     APPT_SERVICE_ITEM_QTY,
     ORIG_UNIT_PRICE_AMT,
     LIST_PRICE_AMT,
     FINAL_UNIT_PRICE_AMT,
     TOTAL_GROOM_PAY_PRICE_AMT,
     SDS_PRICE_OVERRIDE_REASON_ID,
     SDS_PRICE_OVERRIDE_REASON_DESC,
     SVCS_PRICE_OVERRIDE_REASON_GID,
     SVCS_PRICE_OVERRIDE_REASON_DESC,
     APPT_SERVICE_PRICE_OVERRIDE_TSTMP,
     EMPLOYEE_COMMISSION_RATE_PCT,
     EMPLOYEE_COMMISSION_AMT,
     APPT_PAYMENT_TSTMP,
     APPT_PAYMENT_AMT,
     SDS_PAYMENT_METHOD_ID,
     SDS_PAYMENT_METHOD_DESC,
     APPT_SVCS_PAYMENT_METHOD_GID,
     APPT_SVCS_PAYMENT_METHOD_DESC,
     PAYMENT_ORIGIN,
     EXCH_RATE_PCT,
     WEIGHT_IN_LBS,
     LOAD_TSTMP
) AS
SELECT SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_ID, SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_NBR, SDS_ORDER_ITEM_RPT.SDS_ORDER_ITEM_ID, SDS_ORDER_ITEM_RPT.SDS_ORDER_ITEM_NBR, SDS_ORDER_ITEM_RPT.SDS_ORDER_ID, SDS_ORDER_ITEM_RPT.SDS_ORDER_NBR, SDS_ORDER_ITEM_RPT.SDS_SERVICE_APPOINTMENT_ID, SDS_ORDER_ITEM_RPT.SDS_REDEMPTION_ID, SDS_ORDER_ITEM_RPT.PETM_POS_INVOICE_ID, SDS_ORDER_ITEM_RPT.INVOICE_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.SDS_SERVICE_SUB_CATEGORY_ID, SDS_ORDER_ITEM_RPT.SDS_SERVICE_SUB_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_SUB_CATEGORY_GID, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_SUB_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.LOCATION_ID, SDS_ORDER_ITEM_RPT.SDS_LOCATION_TYPE, SDS_ORDER_ITEM_RPT.PRODUCT_ID, SDS_ORDER_ITEM_RPT.UPC_ID, SDS_ORDER_ITEM_RPT.PRIMARY_SERVICE_FLAG, SDS_ORDER_ITEM_RPT.INTERNAL_TAX_CLASS, SDS_ORDER_ITEM_RPT.EXTERNAL_TAX_CD, SDS_ORDER_ITEM_RPT.APPT_TSTMP, SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_STATUS_ID, SDS_ORDER_ITEM_RPT.SDS_WORK_ORDER_STATUS_DESC, SDS_ORDER_ITEM_RPT.SDS_APPT_STATUS_ID, SDS_ORDER_ITEM_RPT.SDS_APPT_STATUS_DESC, SDS_ORDER_ITEM_RPT.SVCS_APPT_STATUS_GID, SDS_ORDER_ITEM_RPT.SVCS_APPT_STATUS_DESC, SDS_ORDER_ITEM_RPT.SDS_APPT_CREATION_CHANNEL, SDS_ORDER_ITEM_RPT.SDS_ORDER_STATUS_ID, SDS_ORDER_ITEM_RPT.SDS_ORDER_STATUS_DESC, SDS_ORDER_ITEM_RPT.SVCS_ORDER_STATUS_GID, SDS_ORDER_ITEM_RPT.SVCS_ORDER_STATUS_DESC, SDS_ORDER_ITEM_RPT.ORDER_VOID_TSTMP, SDS_ORDER_ITEM_RPT.ORDER_VOID_REASON, SDS_ORDER_ITEM_RPT.SDS_SERVICE_CATEGORY_ID, SDS_ORDER_ITEM_RPT.SDS_SERVICE_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_CATEGORY_GID, SDS_ORDER_ITEM_RPT.SVCS_SERVICE_CATEGORY_DESC, SDS_ORDER_ITEM_RPT.SDS_ACCOUNT_ID, SDS_ORDER_ITEM_RPT.PODS_CUSTOMER_ID, SDS_ORDER_ITEM_RPT.SVCS_CUSTOMER_GID, SDS_ORDER_ITEM_RPT.CUSTOMER_FIRST_NAME, SDS_ORDER_ITEM_RPT.CUSTOMER_LAST_NAME, SDS_ORDER_ITEM_RPT.CUSTOMER_PHONE_NBR, SDS_ORDER_ITEM_RPT.CUSTOMER_EMAIL_ADDR, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_ADDR1, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR1, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_ADDR2, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_ADDR2, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_CITY, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS CUSTOMER_CITY, SDS_ORDER_ITEM_RPT.CUSTOMER_STATE, SDS_ORDER_ITEM_RPT.CUSTOMER_POSTAL_CD, SDS_ORDER_ITEM_RPT.CUSTOMER_POSTAL_CD_EXT, SDS_ORDER_ITEM_RPT.CUSTOMER_COUNTRY_CD, SDS_ORDER_ITEM_RPT.CUSTOMER_DO_NOT_BOOKED_FLAG, TRANSLATE(TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.CUSTOMER_DO_NOT_BOOKED_REASON, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR"), '\'::"VARCHAR", '/'::"VARCHAR") AS CUSTOMER_DO_NOT_BOOKED_REASON, SDS_ORDER_ITEM_RPT.CUSTOMER_LOYALTY_FLAG, SDS_ORDER_ITEM_RPT.DIGITAL_LOYALTY_CUSTOMER_FLAG, SDS_ORDER_ITEM_RPT.RECEIVE_EMAIL_NOTIFICATIONS_FLAG, SDS_ORDER_ITEM_RPT.RECEIVE_TEXT_NOTIFICATION_FLAG, SDS_ORDER_ITEM_RPT.RECEIVE_PUSH_NOTIFICATION_FLAG, SDS_ORDER_ITEM_RPT.REMINDER_CALL_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_GROOMING_NEW_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_HOTEL_NEW_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_DDC_NEW_FLAG, SDS_ORDER_ITEM_RPT.CUSTOMER_TRAINING_NEW_FLAG, SDS_ORDER_ITEM_RPT.PODS_PET_ID, SDS_ORDER_ITEM_RPT.SVCS_PET_GID, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.PET_NAME, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS PET_NAME, SDS_ORDER_ITEM_RPT.PETM_PET_SPECIES_ID, SDS_ORDER_ITEM_RPT.PETM_PET_SPECIES_DESC, SDS_ORDER_ITEM_RPT.PETM_PET_GENDER_ID, SDS_ORDER_ITEM_RPT.PETM_PET_GENDER_DESC, SDS_ORDER_ITEM_RPT.PETM_PET_BREED_ID, SDS_ORDER_ITEM_RPT.PETM_PET_BREED_DESC, SDS_ORDER_ITEM_RPT.MIXED_BREED_FLAG, SDS_ORDER_ITEM_RPT.PETM_PET_COLOR_ID, SDS_ORDER_ITEM_RPT.PETM_PET_COLOR_DESC, SDS_ORDER_ITEM_RPT.PET_STATUS, SDS_ORDER_ITEM_RPT.GROOMING_PET_RATING_DESC, SDS_ORDER_ITEM_RPT.HOTEL_PET_RATING_DESC, SDS_ORDER_ITEM_RPT.DDC_PET_RATING_DESC, SDS_ORDER_ITEM_RPT.TRAINING_PET_RATING_DESC, TRANSLATE(TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.GROOMING_NOTES, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR"), '\'::"VARCHAR", '/'::"VARCHAR") AS GROOMING_NOTES, TRANSLATE(TRANSLATE(SDS_ORDER_ITEM_RPT.GROOMING_SERVICE_CARD_ALERT_TEXT, (CHR(10))::"VARCHAR", ' '::"VARCHAR"), (CHR(13))::"VARCHAR", ' '::"VARCHAR") AS GROOMING_SERVICE_CARD_ALERT_TEXT, SDS_ORDER_ITEM_RPT.PET_BIRTH_DT, SDS_ORDER_ITEM_RPT.BORDETELLA_EXP_DT, SDS_ORDER_ITEM_RPT.RABIES_EXP_DT, SDS_ORDER_ITEM_RPT.DISTEMPER_EXP_DT, SDS_ORDER_ITEM_RPT.PARVOVIRUS_EXP_DT, SDS_ORDER_ITEM_RPT.PARAINFLUENZA_EXP_DT, SDS_ORDER_ITEM_RPT.FVRCCP_EXP_DT, SDS_ORDER_ITEM_RPT.SDS_PET_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.BOARDED_GUEST_FLAG, SDS_ORDER_ITEM_RPT.CREATED_SDS_USER_ID, SDS_ORDER_ITEM_RPT.CREATED_SDS_USER_NAME, SDS_ORDER_ITEM_RPT.CREATED_SDS_USER_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.CREATED_SDS_PROFILE_DESC, SDS_ORDER_ITEM_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_ID, SDS_ORDER_ITEM_RPT.REQUESTED_SDS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_GID, SDS_ORDER_ITEM_RPT.REQUESTED_SVCS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_ID, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_FIRST_NAME, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_LAST_NAME, SDS_ORDER_ITEM_RPT.REQUESTED_EMPLOYEE_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_ID, SDS_ORDER_ITEM_RPT.ASSIGNED_SDS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_GID, SDS_ORDER_ITEM_RPT.ASSIGNED_SVCS_EMPLOYEE_GROUP_DESC, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_ID, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_FIRST_NAME, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_LAST_NAME, SDS_ORDER_ITEM_RPT.ASSIGNED_EMPLOYEE_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.ORDER_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.APPT_LAST_MODIFY_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_CREATE_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_LAST_MODIFY_TSTMP, SDS_ORDER_ITEM_RPT.APPT_UPDATE_FLAG, SDS_ORDER_ITEM_RPT.APPT_SERVICE_UPDATE_FLAG, SDS_ORDER_ITEM_RPT.APPT_CONFIRMED_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CONFIRMATION_CHANNEL, SDS_ORDER_ITEM_RPT.APPT_CONFIRMED_BY, SDS_ORDER_ITEM_RPT.PREPAID_FLAG, SDS_ORDER_ITEM_RPT.MANUAL_APPOINTMENT_FLAG, SDS_ORDER_ITEM_RPT.WALK_IN_FLAG, SDS_ORDER_ITEM_RPT.PRE_CHECK_IN_FLAG, SDS_ORDER_ITEM_RPT.REBOOKED_FLAG, SDS_ORDER_ITEM_RPT.NO_SHOW_FLAG, SDS_ORDER_ITEM_RPT.DUMMY_APPOINTMENT_FLAG, SDS_ORDER_ITEM_RPT.SCHED_APPT_START_TSTMP, SDS_ORDER_ITEM_RPT.SCHED_APPT_END_TSTMP, SDS_ORDER_ITEM_RPT.SCHED_APPT_SERVICE_START_TSTMP, SDS_ORDER_ITEM_RPT.SCHED_APPT_SERVICE_END_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CHECK_IN_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CHECK_OUT_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_START_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_END_TSTMP, SDS_ORDER_ITEM_RPT.APPT_COMPLETE_FLAG, SDS_ORDER_ITEM_RPT.APPT_SERVICE_COMPLETE_FLAG, SDS_ORDER_ITEM_RPT.APPT_CANCEL_TSTMP, SDS_ORDER_ITEM_RPT.APPT_SERVICE_CANCEL_TSTMP, SDS_ORDER_ITEM_RPT.APPT_CANCEL_FLAG, SDS_ORDER_ITEM_RPT.APPT_SERVICE_CANCEL_FLAG, SDS_ORDER_ITEM_RPT.APPT_CANCELLATION_CHANNEL, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_BY, SDS_ORDER_ITEM_RPT.APPT_SDS_CANCEL_REASON_ID, SDS_ORDER_ITEM_RPT.APPT_SDS_CANCEL_REASON_DESC, SDS_ORDER_ITEM_RPT.APPT_SVCS_CANCEL_REASON_GID, SDS_ORDER_ITEM_RPT.APPT_SVCS_CANCEL_REASON_DESC, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_ID, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_FIRST_NAME, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_LAST_NAME, SDS_ORDER_ITEM_RPT.APPT_CANCELLED_EMPLOYEE_DISPLAY_NAME, SDS_ORDER_ITEM_RPT.APPT_TOTAL_PRICE_AMT, SDS_ORDER_ITEM_RPT.APPT_TOTAL_ITEM_QTY, SDS_ORDER_ITEM_RPT.APPT_SERVICE_ITEM_QTY, SDS_ORDER_ITEM_RPT.ORIG_UNIT_PRICE_AMT, SDS_ORDER_ITEM_RPT.LIST_PRICE_AMT, SDS_ORDER_ITEM_RPT.FINAL_UNIT_PRICE_AMT, SDS_ORDER_ITEM_RPT.TOTAL_GROOM_PAY_PRICE_AMT, SDS_ORDER_ITEM_RPT.SDS_PRICE_OVERRIDE_REASON_ID, SDS_ORDER_ITEM_RPT.SDS_PRICE_OVERRIDE_REASON_DESC, SDS_ORDER_ITEM_RPT.SVCS_PRICE_OVERRIDE_REASON_GID, SDS_ORDER_ITEM_RPT.SVCS_PRICE_OVERRIDE_REASON_DESC, SDS_ORDER_ITEM_RPT.APPT_SERVICE_PRICE_OVERRIDE_TSTMP, SDS_ORDER_ITEM_RPT.EMPLOYEE_COMMISSION_RATE_PCT, SDS_ORDER_ITEM_RPT.EMPLOYEE_COMMISSION_AMT, SDS_ORDER_ITEM_RPT.APPT_PAYMENT_TSTMP, SDS_ORDER_ITEM_RPT.APPT_PAYMENT_AMT, SDS_ORDER_ITEM_RPT.SDS_PAYMENT_METHOD_ID, SDS_ORDER_ITEM_RPT.SDS_PAYMENT_METHOD_DESC, SDS_ORDER_ITEM_RPT.APPT_SVCS_PAYMENT_METHOD_GID, SDS_ORDER_ITEM_RPT.APPT_SVCS_PAYMENT_METHOD_DESC, SDS_ORDER_ITEM_RPT.PAYMENT_ORIGIN, SDS_ORDER_ITEM_RPT.EXCH_RATE_PCT, SDS_ORDER_ITEM_RPT.WEIGHT_IN_LBS, SDS_ORDER_ITEM_RPT.LOAD_TSTMP FROM ADMIN.SDS_ORDER_ITEM_RPT;

\echo
\echo *****  Creating view:  "PM_VQDB6UOTNNLGRSPVGK6H63DNAFA"

CREATE or replace VIEW  PM_VQDB6UOTNNLGRSPVGK6H63DNAFA
(
     DAY_DT,
     EMPLOYEE_ID,
     ASSESSMENT_MID,
     ASSESSMENT_LID,
     TEST_TAKEN_DT,
     ASSESSMENT_NAME,
     JOB_CD,
     LOCATION_ID,
     LAST_TEST_SCORE_NBR,
     LAST_TEST_PASSED_FLAG,
     COMPLIANT_START_DT,
     COMPLIANT_EXPIRATION_DT,
     CURR_COMPLIANCE_FLAG,
     CURR_MISSING_FLAG,
     CURR_PERIOD_ATTEMPTS_NBR,
     LOAD_DT
) AS
SELECT PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.DAY_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.EMPLOYEE_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_MID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_LID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.TEST_TAKEN_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_NAME, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.JOB_CD, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOCATION_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_SCORE_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_PASSED_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_START_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_EXPIRATION_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_MISSING_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_PERIOD_ATTEMPTS_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOAD_DT FROM ADMIN.EDU_CERT_DAILY_CONS PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U WHERE (PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG <> 3);

\echo
\echo *****  Creating view:  "DM_SRV_EMPL_ROCKY"

CREATE or replace VIEW  DM_SRV_EMPL_ROCKY
(
     WEEK_DT,
     LOCATION_ID,
     JOB_CODE,
     JOB_CODE_DESC,
     STORE_DEPT_NBR,
     STORE_DEPT_DESC,
     FULLPT_FLAG,
     S_EMPL_CNT,
     S_HOURS_WORKED,
     S_EARNINGS_AMT,
     SG_HOURS_WORKED,
     S_YTD_EMPL_CNT,
     S_YTD_TERM_CNT,
     GROOMER_BATH_CNT,
     LOAD_DT
) AS
SELECT DM_SRV_EMPL.WEEK_DT, DM_SRV_EMPL.LOCATION_ID, DM_SRV_EMPL.JOB_CODE, DM_SRV_EMPL.JOB_CODE_DESC, DM_SRV_EMPL.STORE_DEPT_NBR, DM_SRV_EMPL.STORE_DEPT_DESC, DM_SRV_EMPL.FULLPT_FLAG, DM_SRV_EMPL.S_EMPL_CNT, DM_SRV_EMPL.S_HOURS_WORKED, DM_SRV_EMPL.S_EARNINGS_AMT, DM_SRV_EMPL.SG_HOURS_WORKED, DM_SRV_EMPL.S_YTD_EMPL_CNT, DM_SRV_EMPL.S_YTD_TERM_CNT, DM_SRV_EMPL.GROOMER_BATH_CNT, DM_SRV_EMPL.LOAD_DT FROM ADMIN.DM_SRV_EMPL WHERE (DM_SRV_EMPL.LOAD_DT >= "TIMESTAMP"(DATE('now(0)'::"VARCHAR")));

\echo
\echo *****  Creating view:  "PET_TRAINING_FOCUS_AREA_VW"

CREATE or replace VIEW  PET_TRAINING_FOCUS_AREA_VW
(
     TRAINING_CLASS_TYPE_ID,
     TRAINING_CLASS_TYPE_NAME,
     DAY_DT,
     TRAINING_STORE_CLASS_ID,
     TRAINING_FOCUS_AREA_NAME,
     TRAINING_PET_ID,
     TRAINING_CUSTOMER_ID,
     STORE_NBR,
     LOCATION_ID
) AS
SELECT TRAINING_CLASS_TYPE.TRAINING_CLASS_TYPE_ID, TRAINING_CLASS_TYPE.TRAINING_CLASS_TYPE_NAME, DATE(TRAINING_SCHED_STORE_CLASS.START_TSTMP) AS DAY_DT, RES.TRAINING_STORE_CLASS_ID, TRAINING_FOCUS_AREA.TRAINING_FOCUS_AREA_NAME, RES.TRAINING_PET_ID, RES.TRAINING_CUSTOMER_ID, RES.STORE_NBR, SITE_PROFILE_RPT.LOCATION_ID FROM (((((((ADMIN.TRAINING_RESERVATION RES JOIN ADMIN.TRAINING_INVOICE INVOICE ON (((RES.TRAINING_RESERVATION_ID = INVOICE.TRAINING_RESERVATION_ID) AND (INVOICE.TRAINING_INVOICE_STATUS = 1)))) JOIN ADMIN.TRAINING_PET_FOCUS_AREA ON ((RES.TRAINING_PET_ID = TRAINING_PET_FOCUS_AREA.TRAINING_PET_ID))) JOIN ADMIN.TRAINING_FOCUS_AREA ON ((TRAINING_FOCUS_AREA.TRAINING_FOCUS_AREA_ID = TRAINING_PET_FOCUS_AREA.TRAINING_FOCUS_AREA_ID))) JOIN ADMIN.TRAINING_SCHED_STORE_CLASS ON ((TRAINING_SCHED_STORE_CLASS.TRAINING_SCHED_STORE_CLASS_ID = RES.TRAINING_STORE_CLASS_ID))) JOIN ADMIN.TRAINING_CLASS_TYPE ON ((TRAINING_CLASS_TYPE.TRAINING_CLASS_TYPE_ID = TRAINING_SCHED_STORE_CLASS.TRAINING_SCHED_CLASS_TYPE_ID))) JOIN ADMIN.TRAINING_CATEGORY_TYPE_FOCUS_AREA ON (((TRAINING_CATEGORY_TYPE_FOCUS_AREA.TRAINING_FOCUS_AREA_ID = TRAINING_FOCUS_AREA.TRAINING_FOCUS_AREA_ID) AND (TRAINING_CATEGORY_TYPE_FOCUS_AREA.TRAINING_CATEGORY_ID = TRAINING_CLASS_TYPE.TRAINING_CATEGORY_ID)))) JOIN ADMIN.SITE_PROFILE_RPT ON ((SITE_PROFILE_RPT.STORE_NBR = RES.STORE_NBR)));

\echo
\echo *****  Creating view:  "LP_TENDER_VAR_DAY_ROCKY"

CREATE or replace VIEW  LP_TENDER_VAR_DAY_ROCKY
(
     DAY_DT,
     LOCATION_ID,
     TENDER_TYPE_ID,
     CASHIER_NBR,
     TENDER_VARIANCE_AMT
) AS
SELECT LP_TENDER_VAR_DAY.DAY_DT, LP_TENDER_VAR_DAY.LOCATION_ID, LP_TENDER_VAR_DAY.TENDER_TYPE_ID, LP_TENDER_VAR_DAY.CASHIER_NBR, LP_TENDER_VAR_DAY.TENDER_VARIANCE_AMT FROM ADMIN.LP_TENDER_VAR_DAY WHERE (LP_TENDER_VAR_DAY.DAY_DT >= (SELECT MIN(DAYS.DAY_DT) AS MIN FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = (SELECT (DAYS.FISCAL_YR - 1) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR")))))));

\echo
\echo *****  Creating view:  "GL_ACTUAL_DETAIL_ROCKY"

CREATE or replace VIEW  GL_ACTUAL_DETAIL_ROCKY
(
     FISCAL_YR,
     FISCAL_MO,
     GL_DOCUMENT_NBR,
     GL_COMPANY_CD,
     GL_DOCUMENT_LINE_NBR,
     FISCAL_WK,
     WEEK_DT,
     GL_DOCUMENT_DT,
     GL_POSTING_DT,
     GL_DOCUMENT_TYPE_CD,
     GL_PROFIT_CENTER_GID,
     LOCATION_ID,
     STORE_NBR,
     GL_DEPARTMENT_CD,
     GL_ACCOUNT_GID,
     GL_BALANCE_SHEET_IND,
     GL_PL_SHEET_IND,
     VENDOR_ID,
     GL_DOC_AMT,
     GL_LOC_CURRENCY_ID,
     GL_LOC_AMT,
     GL_GRP_AMT,
     EXCH_RATE_PCT,
     LOAD_DT
) AS
SELECT GL_ACTUAL_DETAIL.FISCAL_YR, GL_ACTUAL_DETAIL.FISCAL_MO, GL_ACTUAL_DETAIL.GL_DOCUMENT_NBR, GL_ACTUAL_DETAIL.GL_COMPANY_CD, GL_ACTUAL_DETAIL.GL_DOCUMENT_LINE_NBR, GL_ACTUAL_DETAIL.FISCAL_WK, GL_ACTUAL_DETAIL.WEEK_DT, GL_ACTUAL_DETAIL.GL_DOCUMENT_DT, GL_ACTUAL_DETAIL.GL_POSTING_DT, GL_ACTUAL_DETAIL.GL_DOCUMENT_TYPE_CD, GL_ACTUAL_DETAIL.GL_PROFIT_CENTER_GID, GL_ACTUAL_DETAIL.LOCATION_ID, GL_ACTUAL_DETAIL.STORE_NBR, GL_ACTUAL_DETAIL.GL_DEPARTMENT_CD, GL_ACTUAL_DETAIL.GL_ACCOUNT_GID, GL_ACTUAL_DETAIL.GL_BALANCE_SHEET_IND, GL_ACTUAL_DETAIL.GL_PL_SHEET_IND, GL_ACTUAL_DETAIL.VENDOR_ID, GL_ACTUAL_DETAIL.GL_DOC_AMT, GL_ACTUAL_DETAIL.GL_LOC_CURRENCY_ID, GL_ACTUAL_DETAIL.GL_LOC_AMT, GL_ACTUAL_DETAIL.GL_GRP_AMT, GL_ACTUAL_DETAIL.EXCH_RATE_PCT, GL_ACTUAL_DETAIL.LOAD_DT FROM ADMIN.GL_ACTUAL_DETAIL;

\echo
\echo *****  Creating view:  "EMPLOYEE_NAME_LKUP_VW"

CREATE or replace VIEW  EMPLOYEE_NAME_LKUP_VW
(
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_EMAIL_ADDR,
     PS_POSITION_ID,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE.EMPLOYEE_ID, EMPLOYEE_PROFILE.EMPL_FIRST_NAME, EMPLOYEE_PROFILE.EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE.EMPL_LAST_NAME, EMPLOYEE_PROFILE.EMPL_EMAIL_ADDR, EMPLOYEE_PROFILE.PS_POSITION_ID, EMPLOYEE_PROFILE.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE;

\echo
\echo *****  Creating view:  "LOCATION_ID_XREF_VW"

CREATE or replace VIEW  LOCATION_ID_XREF_VW
(
     LOCATION_ID,
     LOCATION_NBR,
     LOCATION_TYPE_ID,
     LOAD_DT
) AS
SELECT SITE_PROFILE.LOCATION_ID, SITE_PROFILE.LOCATION_NBR, SITE_PROFILE.LOCATION_TYPE_ID, SITE_PROFILE.LOAD_DT FROM ADMIN.SITE_PROFILE;

\echo
\echo *****  Creating view:  "LP_TENDER_DAY_ROCKY"

CREATE or replace VIEW  LP_TENDER_DAY_ROCKY
(
     DAY_DT,
     LOCATION_ID,
     TENDER_TYPE_ID,
     SYS_TENDER_AMT,
     ASSOC_TENDER_AMT
) AS
SELECT LP_TENDER_DAY.DAY_DT, LP_TENDER_DAY.LOCATION_ID, LP_TENDER_DAY.TENDER_TYPE_ID, LP_TENDER_DAY.SYS_TENDER_AMT, LP_TENDER_DAY.ASSOC_TENDER_AMT FROM ADMIN.LP_TENDER_DAY WHERE (LP_TENDER_DAY.DAY_DT >= (SELECT MIN(DAYS.DAY_DT) AS MIN FROM ADMIN.DAYS WHERE (DAYS.FISCAL_YR = (SELECT (DAYS.FISCAL_YR - 1) FROM ADMIN.DAYS WHERE (DAYS.DAY_DT = "TIMESTAMP"(DATE('now(0)'::"VARCHAR")))))));

\echo
\echo *****  Creating view:  "NZ_MSTR_QUERY_LOG_ROCKY"

CREATE or replace VIEW  NZ_MSTR_QUERY_LOG_ROCKY
(
     SESSIONID,
     OPID,
     QUERYTEXT,
     SUBMITTIME_AZ,
     FINISHTIME_AZ,
     RESULTROWS,
     DURATION_SECS,
     USERNAME
) AS
SELECT Q.SESSIONID, Q.OPID, Q.QUERYTEXT, (Q.SUBMITTIME + "INTERVAL"(("VARCHAR"(Q.TZOFFSET) || ' minutes'::"VARCHAR"))) AS SUBMITTIME_AZ, (E.FINISHTIME + "INTERVAL"(("VARCHAR"(Q.TZOFFSET) || ' minutes'::"VARCHAR"))) AS FINISHTIME_AZ, E.RESULTROWS, DATE_PART('EPOCH'::"VARCHAR", (E.FINISHTIME - Q.SUBMITTIME)) AS DURATION_SECS, Q.USERNAME FROM (HISTDB.HISTDBOWNER."$hist_query_prolog_3" Q JOIN HISTDB.HISTDBOWNER."$hist_query_epilog_3" E ON ((((Q.NPSINSTANCEID = E.NPSINSTANCEID) AND (Q.SESSIONID = E.SESSIONID)) AND (Q.OPID = E.OPID)))) WHERE ((((((((DATE((Q.SUBMITTIME + "INTERVAL"(("VARCHAR"(Q.TZOFFSET) || ' minutes'::"VARCHAR")))) = (DATE('now(0)'::"VARCHAR") - 2)) AND (Q.USERNAME IN (('MSTREXEC'::"NVARCHAR")::NVARCHAR(128), ('MSTRREADER'::"NVARCHAR")::NVARCHAR(128), ('MSTRLOADER'::"NVARCHAR")::NVARCHAR(128), ('NCAST'::"NVARCHAR")::NVARCHAR(128)))) AND ((Q.NPSINSTANCEID, Q.SESSIONID) <> ALL (SELECT HISTDB.HISTDBOWNER."$hist_query_overflow_3".NPSINSTANCEID, HISTDB.HISTDBOWNER."$hist_query_overflow_3".SESSIONID FROM HISTDB.HISTDBOWNER."$hist_query_overflow_3" GROUP BY HISTDB.HISTDBOWNER."$hist_query_overflow_3".NPSINSTANCEID, HISTDB.HISTDBOWNER."$hist_query_overflow_3".SESSIONID))) AND (Q.QUERYTEXT NOT IN (('select version(), ''ODBC Client Version: Release 7.2.1.5-P2 [Build 37]'', ''64-bit'', ''OS Platform: Linux'', ''OS Username: mstradm'''::"NVARCHAR")::NVARCHAR(8192), ('select ascii('' '') as space, encoding as ccsid from _v_database where objid = current_db'::"NVARCHAR")::NVARCHAR(8192), ('select feature from _v_odbc_feature where spec_level = ''3.5'''::"NVARCHAR")::NVARCHAR(8192), ('select identifier_case, current_catalog, current_user'::"NVARCHAR")::NVARCHAR(8192), ('BEGIN'::"NVARCHAR")::NVARCHAR(8192), ('COMMIT'::"NVARCHAR")::NVARCHAR(8192)))) AND ((SUBSTR(UPPER(Q.QUERYTEXT), 1, 3))::NVARCHAR(3) NOT IN (('SET'::"NVARCHAR")::NVARCHAR(3)))) AND ((SUBSTR(UPPER(Q.QUERYTEXT), 1, 6))::NVARCHAR(6) NOT IN (('UPDATE'::"NVARCHAR")::NVARCHAR(6), ('DELETE'::"NVARCHAR")::NVARCHAR(6)))) AND ((SUBSTR(UPPER(Q.QUERYTEXT), 1, 10))::NVARCHAR(10) NOT IN (('DROP TABLE'::"NVARCHAR")::NVARCHAR(10), ('TRUNCATE T'::"NVARCHAR")::NVARCHAR(10), ('CREATE TAB'::"NVARCHAR")::NVARCHAR(10), ('GENERATE E'::"NVARCHAR")::NVARCHAR(10), ('GENERATE S'::"NVARCHAR")::NVARCHAR(10), ('SELECT VER'::"NVARCHAR")::NVARCHAR(10), ('UPDATE DM_'::"NVARCHAR")::NVARCHAR(10)))) AND ((SUBSTR(UPPER(Q.QUERYTEXT), 1, 15))::NVARCHAR(15) NOT IN (('INSERT INTO MST'::"NVARCHAR")::NVARCHAR(15), ('INSERT INTO DM_'::"NVARCHAR")::NVARCHAR(15), ('INSERT INTO TGR'::"NVARCHAR")::NVARCHAR(15), ('SELECT TABLE_SC'::"NVARCHAR")::NVARCHAR(15))));

\echo
\echo *****  Creating view:  "LABEL_DAY_STORE_SKU_ROCKY"

CREATE or replace VIEW  LABEL_DAY_STORE_SKU_ROCKY
(
     LABEL_CHANGE_DT,
     LOCATION_ID,
     PRODUCT_ID,
     ACTUAL_FLAG,
     LABEL_POG_TYPE_CD,
     LABEL_SIZE_ID,
     LABEL_TYPE_ID,
     EXPIRATION_FLAG,
     SKU_NBR,
     STORE_NBR,
     WEEK_DT,
     FISCAL_WK,
     FISCAL_MO,
     FISCAL_YR,
     SUPPRESSED_FLAG,
     LABEL_CNT,
     UPDATE_TSTMP,
     LOAD_TSTMP
) AS
SELECT LABEL_DAY_STORE_SKU.LABEL_CHANGE_DT, LABEL_DAY_STORE_SKU.LOCATION_ID, LABEL_DAY_STORE_SKU.PRODUCT_ID, LABEL_DAY_STORE_SKU.ACTUAL_FLAG, LABEL_DAY_STORE_SKU.LABEL_POG_TYPE_CD, LABEL_DAY_STORE_SKU.LABEL_SIZE_ID, LABEL_DAY_STORE_SKU.LABEL_TYPE_ID, LABEL_DAY_STORE_SKU.EXPIRATION_FLAG, LABEL_DAY_STORE_SKU.SKU_NBR, LABEL_DAY_STORE_SKU.STORE_NBR, LABEL_DAY_STORE_SKU.WEEK_DT, LABEL_DAY_STORE_SKU.FISCAL_WK, LABEL_DAY_STORE_SKU.FISCAL_MO, LABEL_DAY_STORE_SKU.FISCAL_YR, LABEL_DAY_STORE_SKU.SUPPRESSED_FLAG, LABEL_DAY_STORE_SKU.LABEL_CNT, LABEL_DAY_STORE_SKU.UPDATE_TSTMP, LABEL_DAY_STORE_SKU.LOAD_TSTMP FROM ADMIN.LABEL_DAY_STORE_SKU WHERE (LABEL_DAY_STORE_SKU.FISCAL_YR >= 2021);

\echo
\echo *****  Creating view:  "PM_VPVSMLPJWPH7B3XRPOESATOOE4M"

CREATE or replace VIEW  PM_VPVSMLPJWPH7B3XRPOESATOOE4M
(
     DAY_DT,
     EMPLOYEE_ID,
     ASSESSMENT_MID,
     ASSESSMENT_LID,
     TEST_TAKEN_DT,
     ASSESSMENT_NAME,
     JOB_CD,
     LOCATION_ID,
     LAST_TEST_SCORE_NBR,
     LAST_TEST_PASSED_FLAG,
     COMPLIANT_START_DT,
     COMPLIANT_EXPIRATION_DT,
     CURR_COMPLIANCE_FLAG,
     CURR_MISSING_FLAG,
     CURR_PERIOD_ATTEMPTS_NBR,
     LOAD_DT
) AS
SELECT PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.DAY_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.EMPLOYEE_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_MID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_LID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.TEST_TAKEN_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.ASSESSMENT_NAME, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.JOB_CD, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOCATION_ID, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_SCORE_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LAST_TEST_PASSED_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_START_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.COMPLIANT_EXPIRATION_DT, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_MISSING_FLAG, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_PERIOD_ATTEMPTS_NBR, PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.LOAD_DT FROM ADMIN.EDU_CERT_DAILY_CONS PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U WHERE (PM_ASYEEB6CRPUCPFOYMAF2TEJ4N4U.CURR_COMPLIANCE_FLAG <> 3);

\echo
\echo *****  Creating view:  "EMPLOYEE_PROFILE_WK_GAP_ROCKY"

CREATE or replace VIEW  EMPLOYEE_PROFILE_WK_GAP_ROCKY
(
     WEEK_DT,
     EMPLOYEE_ID,
     EMPL_FIRST_NAME,
     EMPL_MIDDLE_NAME,
     EMPL_LAST_NAME,
     EMPL_BIRTH_DT,
     GENDER_CD,
     PS_MARITAL_STATUS_CD,
     ETHNIC_GROUP_ID,
     EMPL_ADDR_1,
     EMPL_ADDR_2,
     EMPL_CITY,
     EMPL_STATE,
     EMPL_PROVINCE,
     EMPL_ZIPCODE,
     COUNTRY_CD,
     EMPL_HOME_PHONE,
     EMPL_EMAIL_ADDR,
     EMPL_LOGIN_ID,
     BADGE_NBR,
     EMPL_STATUS_CD,
     STATUS_CHG_DT,
     FULLPT_FLAG,
     FULLPT_CHG_DT,
     EMPL_TYPE_CD,
     PS_REG_TEMP_CD,
     EMPL_CATEGORY_CD,
     EMPL_GROUP_CD,
     EMPL_SUBGROUP_CD,
     EMPL_HIRE_DT,
     EMPL_REHIRE_DT,
     EMPL_TERM_DT,
     TERM_REASON_CD,
     EMPL_SENORITY_DT,
     PS_ACTION_DT,
     PS_ACTION_CD,
     PS_ACTION_REASON_CD,
     LOCATION_ID,
     LOCATION_CHG_DT,
     STORE_NBR,
     STORE_DEPT_NBR,
     COMPANY_ID,
     PS_PERSONNEL_AREA_ID,
     PS_PERSONNEL_SUBAREA_ID,
     PS_DEPT_CD,
     PS_DEPT_CHG_DT,
     PS_POSITION_ID,
     POSITION_CHG_DT,
     PS_SUPERVISOR_ID,
     JOB_CODE,
     JOB_CODE_CHG_DT,
     EMPL_JOB_ENTRY_DT,
     PS_GRADE_ID,
     EMPL_STD_BONUS_PCT,
     EMPL_OVR_BONUS_PCT,
     EMPL_RATING,
     PAY_RATE_CHG_DT,
     PS_PAYROLL_AREA_CD,
     PS_TAX_COMPANY_CD,
     PS_COMP_FREQ_CD,
     COMP_RATE_AMT,
     ANNUAL_RATE_LOC_AMT,
     HOURLY_RATE_LOC_AMT,
     CURRENCY_ID,
     EXCH_RATE_PCT,
     LOAD_TSTMP
) AS
SELECT EMPLOYEE_PROFILE_WK_GAP.WEEK_DT, EMPLOYEE_PROFILE_WK_GAP.EMPLOYEE_ID, EMPLOYEE_PROFILE_WK_GAP.EMPL_FIRST_NAME, NULL::VARCHAR(50) AS EMPL_MIDDLE_NAME, EMPLOYEE_PROFILE_WK_GAP.EMPL_LAST_NAME, EMPLOYEE_PROFILE_WK_GAP.EMPL_BIRTH_DT, NULL::VARCHAR(1) AS GENDER_CD, NULL::VARCHAR(1) AS PS_MARITAL_STATUS_CD, NULL::VARCHAR(2) AS ETHNIC_GROUP_ID, NULL::VARCHAR(60) AS EMPL_ADDR_1, NULL::VARCHAR(60) AS EMPL_ADDR_2, EMPLOYEE_PROFILE_WK_GAP.EMPL_CITY, EMPLOYEE_PROFILE_WK_GAP.EMPL_STATE, EMPLOYEE_PROFILE_WK_GAP.EMPL_PROVINCE, EMPLOYEE_PROFILE_WK_GAP.EMPL_ZIPCODE, EMPLOYEE_PROFILE_WK_GAP.COUNTRY_CD, NULL::VARCHAR(12) AS EMPL_HOME_PHONE, EMPLOYEE_PROFILE_WK_GAP.EMPL_EMAIL_ADDR, NULL::VARCHAR(30) AS EMPL_LOGIN_ID, NULL::VARCHAR(8) AS BADGE_NBR, EMPLOYEE_PROFILE_WK_GAP.EMPL_STATUS_CD, NULL::"TIMESTAMP" AS STATUS_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.FULLPT_FLAG, EMPLOYEE_PROFILE_WK_GAP.FULLPT_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_TYPE_CD, EMPLOYEE_PROFILE_WK_GAP.PS_REG_TEMP_CD, NULL::VARCHAR(1) AS EMPL_CATEGORY_CD, NULL::VARCHAR(1) AS EMPL_GROUP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_SUBGROUP_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_HIRE_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_REHIRE_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_TERM_DT, EMPLOYEE_PROFILE_WK_GAP.TERM_REASON_CD, EMPLOYEE_PROFILE_WK_GAP.EMPL_SENORITY_DT, NULL::"TIMESTAMP" AS PS_ACTION_DT, NULL::VARCHAR(3) AS PS_ACTION_CD, NULL::VARCHAR(3) AS PS_ACTION_REASON_CD, EMPLOYEE_PROFILE_WK_GAP.LOCATION_ID, NULL::"TIMESTAMP" AS LOCATION_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.STORE_NBR, EMPLOYEE_PROFILE_WK_GAP.STORE_DEPT_NBR, NULL::INT4 AS COMPANY_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_AREA_ID, NULL::VARCHAR(4) AS PS_PERSONNEL_SUBAREA_ID, EMPLOYEE_PROFILE_WK_GAP.PS_DEPT_CD, EMPLOYEE_PROFILE_WK_GAP.PS_DEPT_CHG_DT, NULL::INT4 AS PS_POSITION_ID, NULL::"TIMESTAMP" AS POSITION_CHG_DT, NULL::INT4 AS PS_SUPERVISOR_ID, EMPLOYEE_PROFILE_WK_GAP.JOB_CODE, EMPLOYEE_PROFILE_WK_GAP.JOB_CODE_CHG_DT, EMPLOYEE_PROFILE_WK_GAP.EMPL_JOB_ENTRY_DT, EMPLOYEE_PROFILE_WK_GAP.PS_GRADE_ID, EMPLOYEE_PROFILE_WK_GAP.EMPL_STD_BONUS_PCT, NULL::NUMERIC(5,2) AS EMPL_OVR_BONUS_PCT, EMPLOYEE_PROFILE_WK_GAP.EMPL_RATING, NULL::"TIMESTAMP" AS PAY_RATE_CHG_DT, NULL::VARCHAR(2) AS PS_PAYROLL_AREA_CD, NULL::VARCHAR(4) AS PS_TAX_COMPANY_CD, NULL::VARCHAR(1) AS PS_COMP_FREQ_CD, EMPLOYEE_PROFILE_WK_GAP.COMP_RATE_AMT, EMPLOYEE_PROFILE_WK_GAP.ANNUAL_RATE_LOC_AMT, NULL::NUMERIC(12,2) AS HOURLY_RATE_LOC_AMT, NULL::VARCHAR(5) AS CURRENCY_ID, EMPLOYEE_PROFILE_WK_GAP.EXCH_RATE_PCT, EMPLOYEE_PROFILE_WK_GAP.LOAD_TSTMP FROM ADMIN.EMPLOYEE_PROFILE_WK_GAP;
